<android.widget.ViewSwitcher.ViewFactory: android.view.View makeView()>
<android.view.ViewDebug.RecyclerTraceType: android.view.ViewDebug.RecyclerTraceType valueOf(java.lang.String)>
<android.view.ViewDebug.RecyclerTraceType: android.view.ViewDebug.RecyclerTraceType[] values()>
<android.hardware.SensorManager: int getSensors()>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()>
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void close()>
<android.webkit.WebIconDatabase: void open(java.lang.String)>
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase.IconListener)>
<android.webkit.WebIconDatabase: void removeAllIcons()>
<java.io.CharArrayReader: void <init>(char[],int,int)>
<java.io.CharArrayReader: int read(char[],int,int)>
<java.io.CharArrayReader: void close()>
<java.io.CharArrayReader: void <init>(char[])>
<android.test.RenamingDelegatingContext: void <init>(android.content.Context,java.lang.String)>
<android.test.RenamingDelegatingContext: void makeExistingFilesAndDbsAccessible()>
<android.test.RenamingDelegatingContext: java.lang.String getDatabasePrefix()>
<android.test.RenamingDelegatingContext: void <init>(android.content.Context,android.content.Context,java.lang.String)>
<android.test.RenamingDelegatingContext: T providerWithRenamedContext(java.lang.Class,android.content.Context,java.lang.String)>
<android.test.RenamingDelegatingContext: T providerWithRenamedContext(java.lang.Class,android.content.Context,java.lang.String,boolean)>
<org.apache.http.impl.HttpConnectionMetricsImpl: void setMetric(java.lang.String,java.lang.Object)>
<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementResponseCount()>
<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementRequestCount()>
<org.apache.http.impl.HttpConnectionMetricsImpl: void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)>
<org.apache.http.impl.HttpConnectionMetricsImpl: long getSentBytesCount()>
<org.apache.http.impl.HttpConnectionMetricsImpl: java.lang.Object getMetric(java.lang.String)>
<org.apache.http.impl.HttpConnectionMetricsImpl: long getReceivedBytesCount()>
<org.apache.http.impl.HttpConnectionMetricsImpl: void reset()>
<org.apache.http.impl.HttpConnectionMetricsImpl: long getRequestCount()>
<org.apache.http.impl.HttpConnectionMetricsImpl: long getResponseCount()>
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()>
<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()>
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>
<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>
<org.apache.http.UnsupportedHttpVersionException: void <init>()>
<org.apache.http.UnsupportedHttpVersionException: void <init>(java.lang.String)>
<org.apache.http.impl.io.HttpRequestWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.HttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)>
<java.lang.Integer: float floatValue()>
<java.lang.Integer: java.lang.String toBinaryString(int)>
<java.lang.Integer: int signum(int)>
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<java.lang.Integer: int rotateLeft(int,int)>
<java.lang.Integer: int reverseBytes(int)>
<java.lang.Integer: int numberOfTrailingZeros(int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<java.lang.Integer: int intValue()>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Integer: long longValue()>
<java.lang.Integer: int numberOfLeadingZeros(int)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: void <init>(java.lang.String)>
<java.lang.Integer: int highestOneBit(int)>
<java.lang.Integer: void <init>(int)>
<java.lang.Integer: java.lang.String toString(int,int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>
<java.lang.Integer: int compareTo(java.lang.Integer)>
<java.lang.Integer: int bitCount(int)>
<java.lang.Integer: java.lang.String toOctalString(int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: int rotateRight(int,int)>
<java.lang.Integer: double doubleValue()>
<java.lang.Integer: int lowestOneBit(int)>
<java.lang.Integer: int reverse(int)>
<android.content.res.ColorStateList: int getDefaultColor()>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>
<android.content.res.ColorStateList: void <init>(int[][],int[])>
<android.content.res.ColorStateList: boolean isStateful()>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.content.res.ColorStateList: int describeContents()>
<android.view.ViewGroup.MarginLayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup.MarginLayoutParams: void <init>(int,int)>
<android.view.ViewGroup.MarginLayoutParams: void setMargins(int,int,int,int)>
<android.view.ViewGroup.MarginLayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.view.ViewGroup.MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<java.util.Vector: void <init>()>
<java.util.Vector: void <init>(int,int)>
<java.util.Vector: void <init>(java.util.Collection)>
<java.util.Vector: int size()>
<java.util.Vector: void <init>(int)>
<java.util.Vector: java.util.Enumeration elements()>
<java.util.Vector: E lastElement()>
<java.util.Vector: void removeElementAt(int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>
<java.util.Vector: boolean removeElement(java.lang.Object)>
<java.util.Vector: int capacity()>
<java.util.Vector: int lastIndexOf(java.lang.Object,int)>
<java.util.Vector: void setSize(int)>
<java.util.Vector: void removeAllElements()>
<java.util.Vector: java.lang.Object clone()>
<java.util.Vector: E elementAt(int)>
<java.util.Vector: void trimToSize()>
<java.util.Vector: E get(int)>
<java.util.Vector: void ensureCapacity(int)>
<java.util.Vector: void insertElementAt(E,int)>
<java.util.Vector: void copyInto(java.lang.Object[])>
<java.util.Vector: void addElement(E)>
<java.util.Vector: void setElementAt(E,int)>
<java.util.Vector: E firstElement()>
<java.security.cert.Certificate.CertificateRep: void <init>(java.lang.String,byte[])>
<java.security.cert.Certificate.CertificateRep: java.lang.Object readResolve()>
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory()>
<org.apache.http.conn.MultihomePlainSocketFactory: boolean isSecure(java.net.Socket)>
<android.content.ReceiverCallNotAllowedException: void <init>(java.lang.String)>
<java.security.cert.X509CRLSelector: java.security.cert.X509Certificate getCertificateChecking()>
<java.security.cert.X509CRLSelector: boolean match(java.security.cert.CRL)>
<java.security.cert.X509CRLSelector: void setIssuers(java.util.Collection)>
<java.security.cert.X509CRLSelector: void addIssuerName(byte[])>
<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)>
<java.security.cert.X509CRLSelector: java.math.BigInteger getMinCRL()>
<java.security.cert.X509CRLSelector: void setDateAndTime(java.util.Date)>
<java.security.cert.X509CRLSelector: java.util.Collection getIssuers()>
<java.security.cert.X509CRLSelector: void setIssuerNames(java.util.Collection)>
<java.security.cert.X509CRLSelector: java.util.Date getDateAndTime()>
<java.security.cert.X509CRLSelector: void addIssuer(javax.security.auth.x500.X500Principal)>
<java.security.cert.X509CRLSelector: void <init>()>
<java.security.cert.X509CRLSelector: java.math.BigInteger getMaxCRL()>
<java.security.cert.X509CRLSelector: void addIssuerName(java.lang.String)>
<java.security.cert.X509CRLSelector: java.lang.Object clone()>
<java.security.cert.X509CRLSelector: void setMinCRLNumber(java.math.BigInteger)>
<java.security.cert.X509CRLSelector: void setMaxCRLNumber(java.math.BigInteger)>
<java.security.cert.X509CRLSelector: java.util.Collection getIssuerNames()>
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.Map parseChallenges(org.apache.http.Header[])>
<org.apache.http.impl.client.AbstractAuthenticationHandler: void <init>()>
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences()>
<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()>
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)>
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>
<android.app.LocalActivityManager: void dispatchStop()>
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()>
<android.app.LocalActivityManager: java.lang.String getCurrentId()>
<android.app.LocalActivityManager: void dispatchDestroy(boolean)>
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)>
<android.app.LocalActivityManager: void dispatchPause(boolean)>
<android.app.LocalActivityManager: void removeAllActivities()>
<android.app.LocalActivityManager: void dispatchResume()>
<android.app.LocalActivityManager: void <init>(android.app.Activity,boolean)>
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)>
<javax.crypto.KeyGeneratorSpi: void engineInit(int,java.security.SecureRandom)>
<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyGeneratorSpi: javax.crypto.SecretKey engineGenerateKey()>
<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.SecureRandom)>
<javax.crypto.KeyGeneratorSpi: void <init>()>
<java.sql.DataTruncation: int getTransferSize()>
<java.sql.DataTruncation: int getDataSize()>
<java.sql.DataTruncation: void <init>(int,boolean,boolean,int,int)>
<java.sql.DataTruncation: int getIndex()>
<java.sql.DataTruncation: boolean getParameter()>
<java.sql.DataTruncation: boolean getRead()>
<java.lang.CharSequence: int length()>
<java.lang.CharSequence: java.lang.String toString()>
<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>
<java.lang.CharSequence: char charAt(int)>
<android.util.EventLogTags: void <init>()>
<android.util.EventLogTags: void <init>(java.io.BufferedReader)>
<android.util.EventLogTags: android.util.EventLogTags.Description get(int)>
<android.util.EventLogTags: android.util.EventLogTags.Description get(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>
<java.util.concurrent.ArrayBlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ArrayBlockingQueue: int remainingCapacity()>
<java.util.concurrent.ArrayBlockingQueue: E take()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>
<java.util.concurrent.ArrayBlockingQueue: boolean offer(E)>
<java.util.concurrent.ArrayBlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.ArrayBlockingQueue: E poll()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>
<java.util.concurrent.ArrayBlockingQueue: void put(E)>
<java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.ArrayBlockingQueue: E peek()>
<java.util.concurrent.ArrayBlockingQueue: int size()>
<android.R.dimen: void <init>()>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<javax.microedition.khronos.opengles.GL11Ext: void glCurrentPaletteMatrixOES(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsOES(short,short,short,short,short)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxvOES(int[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glMatrixIndexPointerOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexiOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glLoadPaletteFromModelViewMatrixOES()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfvOES(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsvOES(short[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexivOES(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfOES(float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfvOES(float[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexivOES(int[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glWeightPointerOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxvOES(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glEnable(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsvOES(java.nio.ShortBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxOES(int,int,int,int,int)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: java.util.Queue createFreeConnQueue()>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: java.util.Queue createWaitingThreadQueue()>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void handleLostEntry(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void deleteClosedConnections()>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void deleteLeastUsedEntry()>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: java.util.Map createRouteToPoolMap()>
<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>
<org.apache.http.client.CredentialsProvider: void clear()>
<org.apache.http.client.CredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>
<android.view.View.OnLongClickListener: boolean onLongClick(android.view.View)>
<android.location.Criteria: void <init>()>
<android.location.Criteria: void <init>(android.location.Criteria)>
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)>
<android.location.Criteria: boolean isBearingRequired()>
<android.location.Criteria: void setSpeedRequired(boolean)>
<android.location.Criteria: void setAltitudeRequired(boolean)>
<android.location.Criteria: int describeContents()>
<android.location.Criteria: void setBearingRequired(boolean)>
<android.location.Criteria: void setPowerRequirement(int)>
<android.location.Criteria: boolean isAltitudeRequired()>
<android.location.Criteria: boolean isCostAllowed()>
<android.location.Criteria: void setCostAllowed(boolean)>
<android.location.Criteria: int getAccuracy()>
<android.location.Criteria: boolean isSpeedRequired()>
<android.location.Criteria: int getPowerRequirement()>
<android.location.Criteria: void setAccuracy(int)>
<org.apache.http.io.HttpTransportMetrics: void reset()>
<org.apache.http.io.HttpTransportMetrics: long getBytesTransferred()>
<org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
<java.util.Currency: java.lang.String getCurrencyCode()>
<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<java.util.Currency: java.lang.String getSymbol()>
<java.util.Currency: java.util.Currency getInstance(java.lang.String)>
<java.util.Currency: int getDefaultFractionDigits()>
<android.content.SharedPreferences.Editor: boolean commit()>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putString(java.lang.String,java.lang.String)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor clear()>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putFloat(java.lang.String,float)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putLong(java.lang.String,long)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putInt(java.lang.String,int)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor remove(java.lang.String)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder excludePackages(java.lang.String...)>
<android.test.suitebuilder.TestSuiteBuilder: java.lang.String getSuiteName()>
<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite build()>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder named(java.lang.String)>
<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includeAllPackagesUnderHere()>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate...)>
<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.Class)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String...)>
<java.lang.ClassCastException: void <init>()>
<java.lang.ClassCastException: void <init>(java.lang.String)>
<java.lang.VerifyError: void <init>()>
<java.lang.VerifyError: void <init>(java.lang.String)>
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)>
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicHttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()>
<java.util.LinkedHashMap: void <init>()>
<java.util.LinkedHashMap: void <init>(int,float)>
<java.util.LinkedHashMap: void <init>(int)>
<java.util.LinkedHashMap: void <init>(int,float,boolean)>
<java.util.LinkedHashMap: void <init>(java.util.Map)>
<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map.Entry)>
<android.R.color: void <init>()>
<java.nio.channels.InterruptibleChannel: void close()>
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>
<javax.crypto.CipherSpi: byte[] engineGetIV()>
<javax.crypto.CipherSpi: int engineGetOutputSize(int)>
<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)>
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.CipherSpi: int engineGetKeySize(java.security.Key)>
<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>
<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>
<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>
<javax.crypto.CipherSpi: void engineSetPadding(java.lang.String)>
<javax.crypto.CipherSpi: void <init>()>
<javax.crypto.CipherSpi: int engineGetBlockSize()>
<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>
<javax.crypto.CipherSpi: void engineSetMode(java.lang.String)>
<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()>
<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)>
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>
<android.webkit.WebSettings: void setSavePassword(boolean)>
<android.webkit.WebSettings: boolean getSavePassword()>
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
<android.webkit.WebSettings: void setSaveFormData(boolean)>
<android.webkit.WebSettings: boolean getUseWideViewPort()>
<android.webkit.WebSettings: void setCacheMode(int)>
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
<android.webkit.WebSettings: void setMinimumFontSize(int)>
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
<android.webkit.WebSettings: java.lang.String getPluginsPath()>
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
<android.webkit.WebSettings: int getDefaultFontSize()>
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings.TextSize)>
<android.webkit.WebSettings: void setNavDump(boolean)>
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setUserAgent(int)>
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>
<android.webkit.WebSettings: boolean supportZoom()>
<android.webkit.WebSettings: int getMinimumFontSize()>
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
<android.webkit.WebSettings: int getUserAgent()>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<android.webkit.WebSettings: boolean supportMultipleWindows()>
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings.RenderPriority)>
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>
<android.webkit.WebSettings: android.webkit.WebSettings.TextSize getTextSize()>
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
<android.webkit.WebSettings: void setSupportZoom(boolean)>
<android.webkit.WebSettings: void setDefaultFontSize(int)>
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>
<android.webkit.WebSettings: boolean getPluginsEnabled()>
<android.webkit.WebSettings: int getCacheMode()>
<android.webkit.WebSettings: android.webkit.WebSettings.LayoutAlgorithm getLayoutAlgorithm()>
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
<android.webkit.WebSettings: boolean getUseDoubleTree()>
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>
<android.webkit.WebSettings: boolean getSaveFormData()>
<android.webkit.WebSettings: boolean getNavDump()>
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm)>
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<java.lang.StringBuffer: void <init>(java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(double)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(float)>
<java.lang.StringBuffer: java.lang.StringBuffer reverse()>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>
<java.lang.StringBuffer: void <init>(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>
<java.lang.StringBuffer: void <init>(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: void <init>()>
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>
<java.security.spec.RSAOtherPrimeInfo: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getPrime()>
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getExponent()>
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getCrtCoefficient()>
<android.provider.Contacts.Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts.Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.net.wifi.ScanResult: int describeContents()>
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>
<org.apache.http.io.HttpMessageWriter: void write(org.apache.http.HttpMessage)>
<java.security.Identity: void <init>()>
<java.security.Identity: void <init>(java.lang.String)>
<java.security.Identity: java.lang.String toString(boolean)>
<java.security.Identity: java.security.IdentityScope getScope()>
<java.security.Identity: void <init>(java.lang.String,java.security.IdentityScope)>
<java.security.Identity: java.lang.String getName()>
<java.security.Identity: boolean equals(java.lang.Object)>
<java.security.Identity: java.security.Certificate[] certificates()>
<java.security.Identity: void addCertificate(java.security.Certificate)>
<java.security.Identity: void setInfo(java.lang.String)>
<java.security.Identity: java.lang.String getInfo()>
<java.security.Identity: void removeCertificate(java.security.Certificate)>
<java.security.Identity: java.security.PublicKey getPublicKey()>
<java.security.Identity: boolean identityEquals(java.security.Identity)>
<java.security.Identity: void setPublicKey(java.security.PublicKey)>
<org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.DefaultClientConnection: void opening(java.net.Socket,org.apache.http.HttpHost)>
<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.DefaultClientConnection: boolean isSecure()>
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.HttpHost getTargetHost()>
<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket getSocket()>
<org.apache.http.impl.conn.DefaultClientConnection: void <init>()>
<org.apache.http.HttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.http.HttpClientConnection: boolean isResponseAvailable(int)>
<org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>
<org.apache.http.HttpClientConnection: void flush()>
<org.apache.http.HttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>
<org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.content.ComponentName: int describeContents()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.content.ComponentName: void <init>(android.os.Parcel)>
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>
<android.content.ComponentName: java.lang.String toShortString()>
<android.content.ComponentName: java.lang.String flattenToString()>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug.HierarchyTraceType)>
<android.view.ViewDebug: void stopRecyclerTracing()>
<android.view.ViewDebug: void <init>()>
<android.view.ViewDebug: void stopHierarchyTracing()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug.RecyclerTraceType,int...)>
<android.database.CrossProcessCursor: boolean onMove(int,int)>
<android.database.CrossProcessCursor: android.database.CursorWindow getWindow()>
<android.database.CrossProcessCursor: void fillWindow(int,android.database.CursorWindow)>
<android.content.Intent.FilterComparison: void <init>(android.content.Intent)>
<android.content.Intent.FilterComparison: android.content.Intent getIntent()>
<java.sql.Savepoint: java.lang.String getSavepointName()>
<java.sql.Savepoint: int getSavepointId()>
<java.util.prefs.Preferences: void putInt(java.lang.String,int)>
<java.util.prefs.Preferences: java.util.prefs.Preferences parent()>
<java.util.prefs.Preferences: void exportNode(java.io.OutputStream)>
<java.util.prefs.Preferences: void putBoolean(java.lang.String,boolean)>
<java.util.prefs.Preferences: java.util.prefs.Preferences systemRoot()>
<java.util.prefs.Preferences: void addNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.Preferences: void sync()>
<java.util.prefs.Preferences: int getInt(java.lang.String,int)>
<java.util.prefs.Preferences: void putLong(java.lang.String,long)>
<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>
<java.util.prefs.Preferences: void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.Preferences: void removeNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.Preferences: java.util.prefs.Preferences userNodeForPackage(java.lang.Class)>
<java.util.prefs.Preferences: void exportSubtree(java.io.OutputStream)>
<java.util.prefs.Preferences: boolean getBoolean(java.lang.String,boolean)>
<java.util.prefs.Preferences: float getFloat(java.lang.String,float)>
<java.util.prefs.Preferences: java.lang.String absolutePath()>
<java.util.prefs.Preferences: java.lang.String name()>
<java.util.prefs.Preferences: boolean nodeExists(java.lang.String)>
<java.util.prefs.Preferences: java.util.prefs.Preferences systemNodeForPackage(java.lang.Class)>
<java.util.prefs.Preferences: double getDouble(java.lang.String,double)>
<java.util.prefs.Preferences: byte[] getByteArray(java.lang.String,byte[])>
<java.util.prefs.Preferences: void putFloat(java.lang.String,float)>
<java.util.prefs.Preferences: java.lang.String toString()>
<java.util.prefs.Preferences: void clear()>
<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>
<java.util.prefs.Preferences: void putDouble(java.lang.String,double)>
<java.util.prefs.Preferences: void flush()>
<java.util.prefs.Preferences: void importPreferences(java.io.InputStream)>
<java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>
<java.util.prefs.Preferences: void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.Preferences: long getLong(java.lang.String,long)>
<java.util.prefs.Preferences: boolean isUserNode()>
<java.util.prefs.Preferences: void putByteArray(java.lang.String,byte[])>
<java.util.prefs.Preferences: void removeNode()>
<java.util.prefs.Preferences: java.lang.String[] childrenNames()>
<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>
<java.util.prefs.Preferences: void remove(java.lang.String)>
<java.util.prefs.Preferences: void <init>()>
<java.util.prefs.Preferences: java.lang.String[] keys()>
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String)>
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>
<org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date,java.lang.String)>
<org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date)>
<android.widget.SimpleCursorAdapter.CursorToStringConverter: java.lang.CharSequence convertToString(android.database.Cursor)>
<android.database.StaleDataException: void <init>()>
<android.database.StaleDataException: void <init>(java.lang.String)>
<java.sql.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)>
<java.sql.Driver: int getMajorVersion()>
<java.sql.Driver: boolean jdbcCompliant()>
<java.sql.Driver: int getMinorVersion()>
<java.sql.Driver: boolean acceptsURL(java.lang.String)>
<java.sql.Driver: java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)>
<javax.security.auth.AuthPermission: void <init>(java.lang.String,java.lang.String)>
<javax.security.auth.AuthPermission: void <init>(java.lang.String)>
<android.location.Address: void setCountryCode(java.lang.String)>
<android.location.Address: java.lang.String getThoroughfare()>
<android.location.Address: void setLocality(java.lang.String)>
<android.location.Address: void setLongitude(double)>
<android.location.Address: java.lang.String getSubAdminArea()>
<android.location.Address: void setPhone(java.lang.String)>
<android.location.Address: java.lang.String getAddressLine(int)>
<android.location.Address: void setThoroughfare(java.lang.String)>
<android.location.Address: int describeContents()>
<android.location.Address: void <init>(java.util.Locale)>
<android.location.Address: void clearLongitude()>
<android.location.Address: void setLatitude(double)>
<android.location.Address: void setSubAdminArea(java.lang.String)>
<android.location.Address: java.lang.String getUrl()>
<android.location.Address: boolean hasLongitude()>
<android.location.Address: void setPostalCode(java.lang.String)>
<android.location.Address: java.lang.String getAdminArea()>
<android.location.Address: java.lang.String getPhone()>
<android.location.Address: boolean hasLatitude()>
<android.location.Address: java.lang.String getCountryCode()>
<android.location.Address: double getLatitude()>
<android.location.Address: android.os.Bundle getExtras()>
<android.location.Address: void setAdminArea(java.lang.String)>
<android.location.Address: java.util.Locale getLocale()>
<android.location.Address: java.lang.String getFeatureName()>
<android.location.Address: void setFeatureName(java.lang.String)>
<android.location.Address: void setAddressLine(int,java.lang.String)>
<android.location.Address: java.lang.String getPostalCode()>
<android.location.Address: int getMaxAddressLineIndex()>
<android.location.Address: void writeToParcel(android.os.Parcel,int)>
<android.location.Address: void setCountryName(java.lang.String)>
<android.location.Address: java.lang.String getLocality()>
<android.location.Address: void clearLatitude()>
<android.location.Address: double getLongitude()>
<android.location.Address: void setExtras(android.os.Bundle)>
<android.location.Address: void setUrl(java.lang.String)>
<android.location.Address: java.lang.String getCountryName()>
<java.util.Observer: void update(java.util.Observable,java.lang.Object)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageButton: void <init>(android.content.Context)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireSharedInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryReleaseShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquire(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.Thread getFirstQueuedThread()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquireSharedNanos(int,long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasContended()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getSharedQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquire(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int tryAcquireShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getState()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryRelease(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setState(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean releaseShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getExclusiveQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetState(int,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isQueued(java.lang.Thread)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean release(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquireNanos(int,long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getQueueLength()>
<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>
<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>
<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>
<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>
<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>
<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>
<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>
<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>
<java.lang.reflect.Array: int getLength(java.lang.Object)>
<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>
<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>
<java.lang.reflect.Array: char getChar(java.lang.Object,int)>
<java.lang.reflect.Array: long getLong(java.lang.Object,int)>
<java.lang.reflect.Array: int getInt(java.lang.Object,int)>
<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>
<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>
<java.lang.reflect.Array: short getShort(java.lang.Object,int)>
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>
<android.net.wifi.WifiInfo: int describeContents()>
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>
<android.net.wifi.WifiInfo: android.net.NetworkInfo.DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
<android.net.wifi.WifiInfo: int getRssi()>
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiInfo: java.lang.String getSSID()>
<android.net.wifi.WifiInfo: int getNetworkId()>
<android.net.wifi.WifiInfo: int getIpAddress()>
<android.net.wifi.WifiInfo: int getLinkSpeed()>
<java.util.Scanner: boolean hasNext()>
<java.util.Scanner: boolean hasNext(java.lang.String)>
<java.util.Scanner: boolean hasNextBigInteger()>
<java.util.Scanner: java.lang.String findInLine(java.lang.String)>
<java.util.Scanner: void close()>
<java.util.Scanner: boolean hasNextShort()>
<java.util.Scanner: void <init>(java.io.File,java.lang.String)>
<java.util.Scanner: java.math.BigInteger nextBigInteger()>
<java.util.Scanner: void <init>(java.lang.Readable)>
<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>
<java.util.Scanner: double nextDouble()>
<java.util.Scanner: java.lang.String nextLine()>
<java.util.Scanner: void <init>(java.io.File)>
<java.util.Scanner: boolean hasNextBigInteger(int)>
<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>
<java.util.Scanner: boolean hasNextBoolean()>
<java.util.Scanner: java.util.Scanner skip(java.lang.String)>
<java.util.Scanner: short nextShort()>
<java.util.Scanner: boolean hasNextLine()>
<java.util.Scanner: int nextInt()>
<java.util.Scanner: java.lang.String findWithinHorizon(java.lang.String,int)>
<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>
<java.util.Scanner: java.lang.String next(java.lang.String)>
<java.util.Scanner: java.util.Locale locale()>
<java.util.Scanner: long nextLong()>
<java.util.Scanner: boolean hasNextLong(int)>
<java.util.Scanner: java.util.Scanner useLocale(java.util.Locale)>
<java.util.Scanner: boolean hasNextBigDecimal()>
<java.util.Scanner: boolean hasNextInt()>
<java.util.Scanner: java.util.Scanner skip(java.util.regex.Pattern)>
<java.util.Scanner: java.io.IOException ioException()>
<java.util.Scanner: java.lang.String findInLine(java.util.regex.Pattern)>
<java.util.Scanner: long nextLong(int)>
<java.util.Scanner: java.lang.String findWithinHorizon(java.util.regex.Pattern,int)>
<java.util.Scanner: boolean hasNextDouble()>
<java.util.Scanner: byte nextByte()>
<java.util.Scanner: float nextFloat()>
<java.util.Scanner: void remove()>
<java.util.Scanner: java.lang.String next()>
<java.util.Scanner: boolean hasNextInt(int)>
<java.util.Scanner: int nextInt(int)>
<java.util.Scanner: short nextShort(int)>
<java.util.Scanner: java.math.BigDecimal nextBigDecimal()>
<java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel)>
<java.util.Scanner: java.util.regex.Pattern delimiter()>
<java.util.Scanner: java.math.BigInteger nextBigInteger(int)>
<java.util.Scanner: java.util.regex.MatchResult match()>
<java.util.Scanner: void <init>(java.io.InputStream)>
<java.util.Scanner: byte nextByte(int)>
<java.util.Scanner: boolean hasNextLong()>
<java.util.Scanner: void <init>(java.lang.String)>
<java.util.Scanner: boolean hasNextByte()>
<java.util.Scanner: boolean hasNextFloat()>
<java.util.Scanner: java.util.Scanner useRadix(int)>
<java.util.Scanner: boolean hasNextByte(int)>
<java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel,java.lang.String)>
<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>
<java.util.Scanner: java.util.Scanner useDelimiter(java.util.regex.Pattern)>
<java.util.Scanner: boolean hasNextShort(int)>
<java.util.Scanner: boolean nextBoolean()>
<java.util.Scanner: int radix()>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(int)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(android.content.Intent)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(android.widget.TabHost.TabContentFactory)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(java.lang.CharSequence)>
<android.graphics.DiscretePathEffect: void <init>(float,float)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)>
<org.apache.http.impl.DefaultHttpRequestFactory: void <init>()>
<android.provider.MediaStore.Video: void <init>()>
<android.provider.MediaStore.Video: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.Xfermode)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.PorterDuff.Mode)>
<android.widget.AdapterView.AdapterContextMenuInfo: void <init>(android.view.View,int,long)>
<android.database.sqlite.SQLiteException: void <init>()>
<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>
<android.text.style.QuoteSpan: void <init>()>
<android.text.style.QuoteSpan: void <init>(int)>
<android.text.style.QuoteSpan: int getColor()>
<android.text.style.QuoteSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)>
<android.webkit.CacheManager.CacheResult: java.io.InputStream getInputStream()>
<android.webkit.CacheManager.CacheResult: java.lang.String getLastModified()>
<android.webkit.CacheManager.CacheResult: java.lang.String getMimeType()>
<android.webkit.CacheManager.CacheResult: void <init>()>
<android.webkit.CacheManager.CacheResult: java.lang.String getETag()>
<android.webkit.CacheManager.CacheResult: int getHttpStatusCode()>
<android.webkit.CacheManager.CacheResult: void setInputStream(java.io.InputStream)>
<android.webkit.CacheManager.CacheResult: java.lang.String getLocalPath()>
<android.webkit.CacheManager.CacheResult: java.lang.String getLocation()>
<android.webkit.CacheManager.CacheResult: java.io.OutputStream getOutputStream()>
<android.webkit.CacheManager.CacheResult: void setEncoding(java.lang.String)>
<android.webkit.CacheManager.CacheResult: long getExpires()>
<android.webkit.CacheManager.CacheResult: long getContentLength()>
<android.webkit.CacheManager.CacheResult: java.lang.String getEncoding()>
<org.apache.http.cookie.CookieSpecFactory: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>
<android.graphics.drawable.shapes.PathShape: void <init>(android.graphics.Path,float,float)>
<android.graphics.drawable.shapes.PathShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.widget.ExpandableListView.OnGroupExpandListener: void onGroupExpand(int)>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getG()>
<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getP()>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getQ()>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getX()>
<android.graphics.LayerRasterizer: void <init>()>
<android.graphics.LayerRasterizer: void addLayer(android.graphics.Paint,float,float)>
<android.graphics.LayerRasterizer: void addLayer(android.graphics.Paint)>
<android.os.Debug: int getThreadAllocCount()>
<android.os.Debug: boolean waitingForDebugger()>
<android.os.Debug: int getGlobalExternalAllocCount()>
<android.os.Debug: int getGlobalGcInvocationCount()>
<android.os.Debug: void resetThreadExternalAllocSize()>
<android.os.Debug: void stopNativeTracing()>
<android.os.Debug: long getNativeHeapAllocatedSize()>
<android.os.Debug: void resetGlobalExternalFreedSize()>
<android.os.Debug: int getBinderLocalObjectCount()>
<android.os.Debug: int getGlobalAllocSize()>
<android.os.Debug: void resetGlobalGcInvocationCount()>
<android.os.Debug: int getThreadExternalAllocCount()>
<android.os.Debug: void waitForDebugger()>
<android.os.Debug: void stopAllocCounting()>
<android.os.Debug: int getBinderReceivedTransactions()>
<android.os.Debug: int getGlobalExternalFreedSize()>
<android.os.Debug: void resetGlobalFreedSize()>
<android.os.Debug: int getThreadAllocSize()>
<android.os.Debug: int getThreadExternalAllocSize()>
<android.os.Debug: int getGlobalExternalFreedCount()>
<android.os.Debug: boolean isDebuggerConnected()>
<android.os.Debug: void resetThreadAllocCount()>
<android.os.Debug: void enableEmulatorTraceOutput()>
<android.os.Debug: int getGlobalFreedCount()>
<android.os.Debug: long getNativeHeapFreeSize()>
<android.os.Debug: void startAllocCounting()>
<android.os.Debug: int getLoadedClassCount()>
<android.os.Debug: void resetAllCounts()>
<android.os.Debug: int getGlobalFreedSize()>
<android.os.Debug: int getBinderProxyObjectCount()>
<android.os.Debug: void getMemoryInfo(android.os.Debug.MemoryInfo)>
<android.os.Debug: void resetGlobalExternalFreedCount()>
<android.os.Debug: void resetThreadAllocSize()>
<android.os.Debug: void resetGlobalExternalAllocSize()>
<android.os.Debug: void printLoadedClasses(int)>
<android.os.Debug: void resetThreadExternalAllocCount()>
<android.os.Debug: void resetGlobalFreedCount()>
<android.os.Debug: int getBinderDeathObjectCount()>
<android.os.Debug: long getNativeHeapSize()>
<android.os.Debug: int getGlobalExternalAllocSize()>
<android.os.Debug: int getThreadGcInvocationCount()>
<android.os.Debug: void stopMethodTracing()>
<android.os.Debug: void resetGlobalAllocSize()>
<android.os.Debug: void startMethodTracing(java.lang.String)>
<android.os.Debug: void startNativeTracing()>
<android.os.Debug: int getBinderSentTransactions()>
<android.os.Debug: int getGlobalAllocCount()>
<android.os.Debug: void resetThreadGcInvocationCount()>
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>
<android.os.Debug: void resetGlobalExternalAllocCount()>
<android.os.Debug: int setGlobalAllocationLimit(int)>
<android.os.Debug: long threadCpuTimeNanos()>
<android.os.Debug: void resetGlobalAllocCount()>
<android.os.Debug: void startMethodTracing()>
<android.os.Debug: void startMethodTracing(java.lang.String,int)>
<android.os.Debug: int setAllocationLimit(int)>
<android.os.Debug: void changeDebugPort(int)>
<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<javax.net.ssl.SSLSessionContext: int getSessionCacheSize()>
<javax.net.ssl.SSLSessionContext: void setSessionCacheSize(int)>
<javax.net.ssl.SSLSessionContext: javax.net.ssl.SSLSession getSession(byte[])>
<javax.net.ssl.SSLSessionContext: java.util.Enumeration getIds()>
<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>
<javax.net.ssl.SSLSessionContext: void setSessionTimeout(int)>
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor)>
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)>
<android.test.InstrumentationTestSuite: void <init>(android.app.Instrumentation)>
<android.test.InstrumentationTestSuite: void <init>(java.lang.String,android.app.Instrumentation)>
<android.test.InstrumentationTestSuite: void <init>(java.lang.Class,android.app.Instrumentation)>
<javax.net.ssl.TrustManagerFactorySpi: void engineInit(javax.net.ssl.ManagerFactoryParameters)>
<javax.net.ssl.TrustManagerFactorySpi: javax.net.ssl.TrustManager[] engineGetTrustManagers()>
<javax.net.ssl.TrustManagerFactorySpi: void engineInit(java.security.KeyStore)>
<javax.net.ssl.TrustManagerFactorySpi: void <init>()>
<java.nio.channels.NonWritableChannelException: void <init>()>
<java.security.spec.EllipticCurve: byte[] getSeed()>
<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])>
<java.security.spec.EllipticCurve: java.math.BigInteger getB()>
<java.security.spec.EllipticCurve: java.math.BigInteger getA()>
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>
<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger)>
<android.telephony.gsm.SmsMessage.SubmitPdu: void <init>()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: java.net.InetAddress getRemoteAddress()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.HttpConnectionMetrics getMetrics()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: boolean isOpen()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getLocalPort()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void releaseConnection()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void receiveResponseEntity(org.apache.http.HttpResponse)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void unmarkReusable()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void flush()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.conn.OperatedClientConnection)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.HttpResponse receiveResponseHeader()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void detach()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: boolean isSecure()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void abortConnection()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getRemotePort()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void assertNotAborted()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: java.net.InetAddress getLocalAddress()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: javax.net.ssl.SSLSession getSSLSession()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void markReusable()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: boolean isStale()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void assertValid(org.apache.http.conn.OperatedClientConnection)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getSocketTimeout()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: boolean isMarkedReusable()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: boolean isResponseAvailable(int)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: void sendRequestHeader(org.apache.http.HttpRequest)>
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()>
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()>
<org.apache.http.auth.AuthSchemeRegistry: void unregister(java.lang.String)>
<org.apache.http.auth.AuthSchemeRegistry: java.util.List getSchemeNames()>
<org.apache.http.auth.AuthSchemeRegistry: void <init>()>
<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>
<org.apache.http.auth.AuthSchemeRegistry: void setItems(java.util.Map)>
<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)>
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(int)>
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(java.lang.String)>
<org.xml.sax.ext.Attributes2Impl: void setSpecified(int,boolean)>
<org.xml.sax.ext.Attributes2Impl: void setDeclared(int,boolean)>
<org.xml.sax.ext.Attributes2Impl: void <init>()>
<org.xml.sax.ext.Attributes2Impl: void <init>(org.xml.sax.Attributes)>
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(java.lang.String)>
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(java.lang.String,java.lang.String)>
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(int)>
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(java.lang.String,java.lang.String)>
<android.provider.MediaStore.Audio.Genres.Members: void <init>()>
<android.provider.MediaStore.Audio.Genres.Members: android.net.Uri getContentUri(java.lang.String,long)>
<android.app.Application: void <init>()>
<android.app.Application: void onCreate()>
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Application: void onTerminate()>
<android.app.Application: void onLowMemory()>
<java.lang.IllegalAccessError: void <init>(java.lang.String)>
<java.lang.IllegalAccessError: void <init>()>
<android.provider.MediaStore.Images.Media: void <init>()>
<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.MediaStore.Images.Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)>
<android.provider.MediaStore.Images.Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.provider.MediaStore.Images.Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>
<android.provider.MediaStore.Images.Media: java.lang.String insertImage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>
<java.net.Proxy.Type: java.net.Proxy.Type[] values()>
<java.net.Proxy.Type: java.net.Proxy.Type valueOf(java.lang.String)>
<java.lang.ArrayStoreException: void <init>()>
<java.lang.ArrayStoreException: void <init>(java.lang.String)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: java.util.List getAllProviders()>
<android.graphics.Matrix.ScaleToFit: android.graphics.Matrix.ScaleToFit valueOf(java.lang.String)>
<android.graphics.Matrix.ScaleToFit: android.graphics.Matrix.ScaleToFit[] values()>
<android.view.KeyEvent.Callback: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.KeyEvent.Callback: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.KeyEvent.Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.util.SparseIntArray: int indexOfValue(int)>
<android.util.SparseIntArray: int get(int,int)>
<android.util.SparseIntArray: int size()>
<android.util.SparseIntArray: int get(int)>
<android.util.SparseIntArray: void append(int,int)>
<android.util.SparseIntArray: int valueAt(int)>
<android.util.SparseIntArray: void <init>()>
<android.util.SparseIntArray: void clear()>
<android.util.SparseIntArray: int keyAt(int)>
<android.util.SparseIntArray: void <init>(int)>
<android.util.SparseIntArray: void put(int,int)>
<android.util.SparseIntArray: void delete(int)>
<android.util.SparseIntArray: int indexOfKey(int)>
<java.security.MessageDigest: void update(byte[])>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)>
<java.security.MessageDigest: void update(byte[],int,int)>
<java.security.MessageDigest: void <init>(java.lang.String)>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<java.security.MessageDigest: void update(java.nio.ByteBuffer)>
<java.security.MessageDigest: java.lang.String getAlgorithm()>
<java.security.MessageDigest: java.security.Provider getProvider()>
<java.security.MessageDigest: byte[] digest(byte[])>
<java.security.MessageDigest: byte[] digest()>
<java.security.MessageDigest: int digest(byte[],int,int)>
<java.security.MessageDigest: void reset()>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>
<java.security.MessageDigest: int getDigestLength()>
<java.security.MessageDigest: void update(byte)>
<java.security.MessageDigest: boolean isEqual(byte[],byte[])>
<org.apache.http.message.BasicStatusLine: int getStatusCode()>
<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicStatusLine: java.lang.Object clone()>
<org.apache.http.message.BasicStatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicStatusLine: java.lang.String getReasonPhrase()>
<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>
<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSet(boolean,boolean)>
<android.app.PendingIntent.OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>
<org.apache.http.impl.conn.SingleClientConnManager.PoolEntry: void shutdown()>
<org.apache.http.impl.conn.SingleClientConnManager.PoolEntry: void <init>()>
<org.apache.http.impl.conn.SingleClientConnManager.PoolEntry: void close()>
<java.security.AllPermission: int hashCode()>
<java.security.AllPermission: java.lang.String getActions()>
<java.security.AllPermission: void <init>()>
<java.security.AllPermission: boolean equals(java.lang.Object)>
<java.security.AllPermission: void <init>(java.lang.String,java.lang.String)>
<java.security.AllPermission: boolean implies(java.security.Permission)>
<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>
<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>
<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>
<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)>
<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>
<java.nio.charset.Charset: int hashCode()>
<java.nio.charset.Charset: java.lang.String name()>
<java.nio.charset.Charset: java.lang.String displayName()>
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>
<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>
<java.nio.charset.Charset: boolean equals(java.lang.Object)>
<java.nio.charset.Charset: boolean isRegistered()>
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.Charset: java.lang.String toString()>
<java.nio.charset.Charset: boolean canEncode()>
<java.nio.charset.Charset: boolean isSupported(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>
<java.nio.charset.Charset: java.util.Set aliases()>
<android.widget.AbsoluteLayout: void <init>(android.content.Context)>
<android.widget.AbsoluteLayout: void onLayout(boolean,int,int,int,int)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.lang.AbstractStringBuilder: void setCharAt(int,char)>
<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>
<java.lang.AbstractStringBuilder: int length()>
<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
<java.lang.AbstractStringBuilder: int codePointAt(int)>
<java.lang.AbstractStringBuilder: java.lang.String substring(int)>
<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String,int)>
<java.lang.AbstractStringBuilder: char charAt(int)>
<java.lang.AbstractStringBuilder: int codePointBefore(int)>
<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>
<java.lang.AbstractStringBuilder: int offsetByCodePoints(int,int)>
<java.lang.AbstractStringBuilder: int indexOf(java.lang.String,int)>
<java.lang.AbstractStringBuilder: int codePointCount(int,int)>
<java.lang.AbstractStringBuilder: void ensureCapacity(int)>
<java.lang.AbstractStringBuilder: void setLength(int)>
<java.lang.AbstractStringBuilder: void trimToSize()>
<java.lang.AbstractStringBuilder: int capacity()>
<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>
<java.util.concurrent.DelayQueue: java.util.Iterator iterator()>
<java.util.concurrent.DelayQueue: E poll()>
<java.util.concurrent.DelayQueue: E take()>
<java.util.concurrent.DelayQueue: void put(E)>
<java.util.concurrent.DelayQueue: void <init>()>
<java.util.concurrent.DelayQueue: boolean offer(E)>
<java.util.concurrent.DelayQueue: E peek()>
<java.util.concurrent.DelayQueue: int size()>
<java.util.concurrent.DelayQueue: int remainingCapacity()>
<java.util.concurrent.DelayQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.DelayQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.DelayQueue: void <init>(java.util.Collection)>
<java.util.concurrent.DelayQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.DelayQueue: int drainTo(java.util.Collection)>
<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>
<java.nio.charset.IllegalCharsetNameException: java.lang.String getCharsetName()>
<org.apache.http.impl.cookie.BasicPathHandler: void <init>()>
<org.apache.http.impl.cookie.BasicPathHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.BasicPathHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.BasicPathHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<android.os.Build: void <init>()>
<java.lang.ref.WeakReference: void <init>(T)>
<java.lang.ref.WeakReference: void <init>(T,java.lang.ref.ReferenceQueue)>
<java.io.PrintStream: void print(char)>
<java.io.PrintStream: void println(boolean)>
<java.io.PrintStream: void println(float)>
<java.io.PrintStream: void print(int)>
<java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.io.PrintStream: void println(char)>
<java.io.PrintStream: void println(int)>
<java.io.PrintStream: void print(char[])>
<java.io.PrintStream: void println(double)>
<java.io.PrintStream: void <init>(java.lang.String)>
<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)>
<java.io.PrintStream: void print(boolean)>
<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>
<java.io.PrintStream: void print(java.lang.String)>
<java.io.PrintStream: void print(float)>
<java.io.PrintStream: void print(long)>
<java.io.PrintStream: void println(char[])>
<java.io.PrintStream: void println(long)>
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>
<java.io.PrintStream: boolean checkError()>
<java.io.PrintStream: void println(java.lang.Object)>
<java.io.PrintStream: void println()>
<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintStream: void print(double)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: java.io.PrintStream append(char)>
<java.io.PrintStream: void setError()>
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object...)>
<java.io.PrintStream: void print(java.lang.Object)>
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object...)>
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.io.PrintStream: void <init>(java.io.File)>
<org.apache.http.impl.cookie.BasicClientCookie: boolean isSecure()>
<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: boolean containsAttribute(java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: void setExpiryDate(java.util.Date)>
<org.apache.http.impl.cookie.BasicClientCookie: java.util.Date getExpiryDate()>
<org.apache.http.impl.cookie.BasicClientCookie: void setComment(java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: void setSecure(boolean)>
<org.apache.http.impl.cookie.BasicClientCookie: void setValue(java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getComment()>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getPath()>
<org.apache.http.impl.cookie.BasicClientCookie: void setPath(java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.Object clone()>
<org.apache.http.impl.cookie.BasicClientCookie: int getVersion()>
<org.apache.http.impl.cookie.BasicClientCookie: boolean isExpired(java.util.Date)>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getName()>
<org.apache.http.impl.cookie.BasicClientCookie: int[] getPorts()>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getDomain()>
<org.apache.http.impl.cookie.BasicClientCookie: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: boolean isPersistent()>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getAttribute(java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getValue()>
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getCommentURL()>
<org.apache.http.impl.cookie.BasicClientCookie: void setVersion(int)>
<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.DhcpInfo: void <init>()>
<android.net.DhcpInfo: int describeContents()>
<org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentType()>
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)>
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(org.apache.http.Header)>
<org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)>
<org.apache.http.entity.AbstractHttpEntity: boolean isChunked()>
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)>
<org.apache.http.entity.AbstractHttpEntity: void consumeContent()>
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentEncoding()>
<org.apache.http.entity.AbstractHttpEntity: void setChunked(boolean)>
<java.util.UnknownFormatConversionException: java.lang.String getConversion()>
<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()>
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()>
<android.text.method.HideReturnsTransformationMethod: void <init>()>
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()>
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],java.net.NetworkInterface)>
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>
<java.net.Inet6Address: int getScopeId()>
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()>
<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>
<java.util.IllegalFormatCodePointException: void <init>(int)>
<java.util.IllegalFormatCodePointException: int getCodePoint()>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>
<java.nio.channels.SelectableChannel: void <init>()>
<java.nio.channels.SelectableChannel: boolean isRegistered()>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>
<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>
<java.nio.channels.SelectableChannel: boolean isBlocking()>
<java.nio.channels.SelectableChannel: int validOps()>
<junit.framework.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>
<junit.framework.Assert: void assertEquals(java.lang.String,double,double,double)>
<junit.framework.Assert: void assertEquals(java.lang.String,boolean,boolean)>
<junit.framework.Assert: void assertEquals(java.lang.String,byte,byte)>
<junit.framework.Assert: void assertEquals(long,long)>
<junit.framework.Assert: void assertFalse(java.lang.String,boolean)>
<junit.framework.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>
<junit.framework.Assert: void assertEquals(java.lang.String,long,long)>
<junit.framework.Assert: void <init>()>
<junit.framework.Assert: void assertEquals(byte,byte)>
<junit.framework.Assert: void assertEquals(double,double,double)>
<junit.framework.Assert: void assertEquals(int,int)>
<junit.framework.Assert: void assertNull(java.lang.Object)>
<junit.framework.Assert: void assertTrue(boolean)>
<junit.framework.Assert: void assertEquals(java.lang.String,float,float,float)>
<junit.framework.Assert: void assertNotNull(java.lang.String,java.lang.Object)>
<junit.framework.Assert: void fail()>
<junit.framework.Assert: void fail(java.lang.String)>
<junit.framework.Assert: void assertTrue(java.lang.String,boolean)>
<junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>
<junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>
<junit.framework.Assert: void assertFalse(boolean)>
<junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>
<junit.framework.Assert: void assertEquals(short,short)>
<junit.framework.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>
<junit.framework.Assert: void assertSame(java.lang.Object,java.lang.Object)>
<junit.framework.Assert: void assertEquals(boolean,boolean)>
<junit.framework.Assert: void assertEquals(char,char)>
<junit.framework.Assert: void assertEquals(java.lang.String,short,short)>
<junit.framework.Assert: void assertNull(java.lang.String,java.lang.Object)>
<junit.framework.Assert: void assertEquals(float,float,float)>
<junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>
<junit.framework.Assert: void assertEquals(java.lang.String,char,char)>
<junit.framework.Assert: void assertEquals(java.lang.String,int,int)>
<junit.framework.Assert: void assertNotNull(java.lang.Object)>
<org.apache.http.impl.auth.NTLMScheme: java.lang.String getSchemeName()>
<org.apache.http.impl.auth.NTLMScheme: java.lang.String getParameter(java.lang.String)>
<org.apache.http.impl.auth.NTLMScheme: boolean isComplete()>
<org.apache.http.impl.auth.NTLMScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
<org.apache.http.impl.auth.NTLMScheme: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>
<org.apache.http.impl.auth.NTLMScheme: void <init>(org.apache.http.impl.auth.NTLMEngine)>
<org.apache.http.impl.auth.NTLMScheme: java.lang.String getRealm()>
<org.apache.http.impl.auth.NTLMScheme: boolean isConnectionBased()>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>
<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>
<android.text.style.CharacterStyle: void <init>()>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)>
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)>
<java.lang.UnsatisfiedLinkError: void <init>()>
<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<java.util.BitSet: void set(int,int,boolean)>
<java.util.BitSet: void set(int,boolean)>
<java.util.BitSet: boolean get(int)>
<java.util.BitSet: java.lang.Object clone()>
<java.util.BitSet: void <init>()>
<java.util.BitSet: boolean intersects(java.util.BitSet)>
<java.util.BitSet: int length()>
<java.util.BitSet: java.util.BitSet get(int,int)>
<java.util.BitSet: void clear()>
<java.util.BitSet: boolean isEmpty()>
<java.util.BitSet: void flip(int,int)>
<java.util.BitSet: void set(int,int)>
<java.util.BitSet: int cardinality()>
<java.util.BitSet: void or(java.util.BitSet)>
<java.util.BitSet: void and(java.util.BitSet)>
<java.util.BitSet: int nextClearBit(int)>
<java.util.BitSet: void set(int)>
<java.util.BitSet: void xor(java.util.BitSet)>
<java.util.BitSet: void clear(int)>
<java.util.BitSet: void clear(int,int)>
<java.util.BitSet: int size()>
<java.util.BitSet: void <init>(int)>
<java.util.BitSet: int nextSetBit(int)>
<java.util.BitSet: void andNot(java.util.BitSet)>
<java.util.BitSet: void flip(int)>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.Float: boolean isInfinite(float)>
<java.lang.Float: float intBitsToFloat(int)>
<java.lang.Float: int compareTo(java.lang.Float)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: int compare(float,float)>
<java.lang.Float: int floatToRawIntBits(float)>
<java.lang.Float: int intValue()>
<java.lang.Float: boolean isInfinite()>
<java.lang.Float: void <init>(java.lang.String)>
<java.lang.Float: int floatToIntBits(float)>
<java.lang.Float: java.lang.Float valueOf(float)>
<java.lang.Float: long longValue()>
<java.lang.Float: void <init>(float)>
<java.lang.Float: void <init>(double)>
<java.lang.Float: double doubleValue()>
<java.lang.Float: float floatValue()>
<java.lang.Float: boolean isNaN()>
<java.lang.Float: java.lang.String toHexString(float)>
<java.lang.Float: boolean isNaN(float)>
<java.lang.Float: java.lang.String toString(float)>
<org.apache.http.client.methods.HttpPost: void <init>(java.net.URI)>
<org.apache.http.client.methods.HttpPost: void <init>()>
<org.apache.http.client.methods.HttpPost: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>
<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>
<javax.net.ssl.SSLContext: void <init>(javax.net.ssl.SSLContextSpi,java.security.Provider,java.lang.String)>
<javax.net.ssl.SSLContext: java.security.Provider getProvider()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>
<javax.net.ssl.SSLContext: java.lang.String getProtocol()>
<android.provider.Browser.SearchColumns: void <init>()>
<android.os.Process: void <init>()>
<android.os.Process: int myTid()>
<android.os.Process: void setThreadPriority(int,int)>
<android.os.Process: int getGidForName(java.lang.String)>
<android.os.Process: int getThreadPriority(int)>
<android.os.Process: boolean supportsProcesses()>
<android.os.Process: int myPid()>
<android.os.Process: int getUidForName(java.lang.String)>
<android.os.Process: void sendSignal(int,int)>
<android.os.Process: void setThreadPriority(int)>
<android.os.Process: long getElapsedCpuTime()>
<android.os.Process: void killProcess(int)>
<org.apache.http.params.HttpConnectionParamBean: void setLinger(int)>
<org.apache.http.params.HttpConnectionParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)>
<org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)>
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)>
<org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)>
<org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)>
<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>
<java.io.PipedInputStream: int read()>
<java.io.PipedInputStream: void receive(int)>
<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)>
<java.io.PipedInputStream: void <init>()>
<java.nio.channels.Pipe.SinkChannel: int validOps()>
<java.nio.channels.Pipe.SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<org.apache.http.cookie.CookieIdentityComparator: int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie)>
<org.apache.http.cookie.CookieIdentityComparator: void <init>()>
<android.test.mock.MockDialogInterface: void dismiss()>
<android.test.mock.MockDialogInterface: void <init>()>
<android.test.mock.MockDialogInterface: void cancel()>
<java.util.TimerTask: void <init>()>
<java.util.TimerTask: void run()>
<java.util.TimerTask: long scheduledExecutionTime()>
<java.util.TimerTask: boolean cancel()>
<javax.crypto.spec.DHPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getG()>
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getP()>
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getX()>
<org.apache.http.HeaderElementIterator: boolean hasNext()>
<org.apache.http.HeaderElementIterator: org.apache.http.HeaderElement nextElement()>
<android.view.ViewTreeObserver.OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>
<java.security.KeyManagementException: void <init>()>
<java.security.KeyManagementException: void <init>(java.lang.Throwable)>
<java.security.KeyManagementException: void <init>(java.lang.String)>
<java.security.KeyManagementException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.PolicyNode: java.security.cert.PolicyNode getParent()>
<java.security.cert.PolicyNode: java.util.Iterator getChildren()>
<java.security.cert.PolicyNode: int getDepth()>
<java.security.cert.PolicyNode: java.lang.String getValidPolicy()>
<java.security.cert.PolicyNode: java.util.Set getPolicyQualifiers()>
<java.security.cert.PolicyNode: java.util.Set getExpectedPolicies()>
<java.security.cert.PolicyNode: boolean isCritical()>
<android.text.util.Rfc822Tokenizer: android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence)>
<android.text.util.Rfc822Tokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.text.util.Rfc822Tokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.text.util.Rfc822Tokenizer: void <init>()>
<android.text.util.Rfc822Tokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LayoutAnimationController: boolean willOverlap()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.view.animation.LayoutAnimationController: void start()>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController.AnimationParameters)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: float getDelay()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.view.animation.LayoutAnimationController: void setDelay(float)>
<android.view.animation.LayoutAnimationController: void setOrder(int)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>
<java.lang.RuntimePermission: void <init>(java.lang.String)>
<java.lang.RuntimePermission: void <init>(java.lang.String,java.lang.String)>
<android.graphics.drawable.shapes.RectShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.shapes.RectShape: android.graphics.RectF rect()>
<android.graphics.drawable.shapes.RectShape: void <init>()>
<java.nio.charset.UnsupportedCharsetException: java.lang.String getCharsetName()>
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>
<java.net.UnknownServiceException: void <init>()>
<java.net.UnknownServiceException: void <init>(java.lang.String)>
<android.app.ActivityManager.MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.MemoryInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.MemoryInfo: void <init>()>
<android.app.ActivityManager.MemoryInfo: int describeContents()>
<java.security.SignatureSpi: byte[] engineSign()>
<java.security.SignatureSpi: int engineSign(byte[],int,int)>
<java.security.SignatureSpi: boolean engineVerify(byte[])>
<java.security.SignatureSpi: boolean engineVerify(byte[],int,int)>
<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)>
<java.security.SignatureSpi: void engineUpdate(byte)>
<java.security.SignatureSpi: void engineUpdate(java.nio.ByteBuffer)>
<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)>
<java.security.SignatureSpi: java.lang.Object clone()>
<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>
<java.security.SignatureSpi: void engineInitVerify(java.security.PublicKey)>
<java.security.SignatureSpi: void engineUpdate(byte[],int,int)>
<java.security.SignatureSpi: void engineSetParameter(java.lang.String,java.lang.Object)>
<java.security.SignatureSpi: java.security.AlgorithmParameters engineGetParameters()>
<java.security.SignatureSpi: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)>
<java.security.SignatureSpi: void <init>()>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String)>
<android.text.style.ImageSpan: java.lang.String getSource()>
<android.text.style.ImageSpan: void <init>(android.content.Context,int)>
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap)>
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable)>
<java.security.KeyStore.TrustedCertificateEntry: void <init>(java.security.cert.Certificate)>
<java.security.KeyStore.TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()>
<android.graphics.PathEffect: void <init>()>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Error: void <init>(java.lang.String)>
<java.lang.Error: void <init>(java.lang.Throwable)>
<java.lang.Error: void <init>()>
<android.graphics.BitmapFactory: void <init>()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<org.apache.http.impl.cookie.AbstractCookieAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.AbstractCookieAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.AbstractCookieAttributeHandler: void <init>()>
<java.lang.AssertionError: void <init>(double)>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.lang.AssertionError: void <init>(char)>
<java.lang.AssertionError: void <init>(float)>
<java.lang.AssertionError: void <init>(long)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(boolean)>
<java.lang.AssertionError: void <init>(int)>
<android.graphics.drawable.AnimationDrawable: void run()>
<android.graphics.drawable.AnimationDrawable: void <init>()>
<android.graphics.drawable.AnimationDrawable: int getDuration(int)>
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)>
<android.graphics.drawable.AnimationDrawable: boolean isRunning()>
<android.graphics.drawable.AnimationDrawable: void stop()>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()>
<android.graphics.drawable.AnimationDrawable: void addFrame(android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()>
<android.graphics.drawable.AnimationDrawable: void start()>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>
<java.util.zip.DeflaterOutputStream: void deflate()>
<java.util.zip.DeflaterOutputStream: void finish()>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>
<java.util.TreeSet: java.util.Comparator comparator()>
<java.util.TreeSet: void <init>(java.util.Collection)>
<java.util.TreeSet: void <init>()>
<java.util.TreeSet: java.util.SortedSet tailSet(E)>
<java.util.TreeSet: void <init>(java.util.SortedSet)>
<java.util.TreeSet: void <init>(java.util.Comparator)>
<java.util.TreeSet: E first()>
<java.util.TreeSet: java.lang.Object clone()>
<java.util.TreeSet: java.util.Iterator iterator()>
<java.util.TreeSet: int size()>
<java.util.TreeSet: E last()>
<java.util.TreeSet: java.util.SortedSet subSet(E,E)>
<java.util.TreeSet: java.util.SortedSet headSet(E)>
<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>
<java.security.spec.ECPrivateKeySpec: java.security.spec.ECParameterSpec getParams()>
<java.security.spec.ECPrivateKeySpec: java.math.BigInteger getS()>
<android.graphics.AvoidXfermode: void <init>(int,int,android.graphics.AvoidXfermode.Mode)>
<org.apache.http.impl.cookie.NetscapeDomainHandler: void <init>()>
<java.net.PasswordAuthentication: char[] getPassword()>
<java.net.PasswordAuthentication: java.lang.String getUserName()>
<java.net.PasswordAuthentication: void <init>(java.lang.String,char[])>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>
<java.util.ResourceBundle: java.util.Locale getLocale()>
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>
<java.util.ResourceBundle: void <init>()>
<java.util.ResourceBundle: java.util.Enumeration getKeys()>
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<android.text.SpanWatcher: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.SpanWatcher: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.text.SpanWatcher: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<java.lang.String: boolean contentEquals(java.lang.CharSequence)>
<java.lang.String: boolean matches(java.lang.String)>
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<java.lang.String: java.lang.CharSequence subSequence(int,int)>
<java.lang.String: void <init>(java.lang.StringBuilder)>
<java.lang.String: int indexOf(int)>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.lang.String: int compareToIgnoreCase(java.lang.String)>
<java.lang.String: void <init>(char[],int,int)>
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: char charAt(int)>
<java.lang.String: java.lang.String valueOf(char[])>
<java.lang.String: void <init>(byte[])>
<java.lang.String: java.lang.String replace(char,char)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.String: void <init>(byte[],int,int)>
<java.lang.String: java.lang.String intern()>
<java.lang.String: void getChars(int,int,char[],int)>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<java.lang.String: byte[] getBytes()>
<java.lang.String: void <init>(byte[],int)>
<java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String copyValueOf(char[])>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.lang.String: void <init>(char[])>
<java.lang.String: int lastIndexOf(int,int)>
<java.lang.String: java.lang.String valueOf(char[],int,int)>
<java.lang.String: void <init>(java.lang.StringBuffer)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: int indexOf(int,int)>
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.String: byte[] getBytes(java.lang.String)>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: java.lang.String valueOf(float)>
<java.lang.String: java.lang.String trim()>
<java.lang.String: int codePointBefore(int)>
<java.lang.String: int lastIndexOf(java.lang.String,int)>
<java.lang.String: int lastIndexOf(int)>
<java.lang.String: int offsetByCodePoints(int,int)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object...)>
<java.lang.String: int codePointCount(int,int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.lang.String: java.lang.String valueOf(double)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: void <init>(java.lang.String)>
<java.lang.String: void <init>(int[],int,int)>
<java.lang.String: int length()>
<java.lang.String: void <init>()>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.lang.String: int codePointAt(int)>
<java.lang.String: void <init>(byte[],int,int,int)>
<java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.String: char[] toCharArray()>
<java.lang.String: void getBytes(int,int,byte[],int)>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: int compareTo(java.lang.String)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String valueOf(long)>
<java.lang.String: void <init>(byte[],java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes(java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: void <init>()>
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getDeclaredPrefixes()>
<org.xml.sax.helpers.NamespaceSupport: boolean isNamespaceDeclUris()>
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes()>
<org.xml.sax.helpers.NamespaceSupport: void popContext()>
<org.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: void setNamespaceDeclUris(boolean)>
<org.xml.sax.helpers.NamespaceSupport: void pushContext()>
<org.xml.sax.helpers.NamespaceSupport: void reset()>
<org.xml.sax.helpers.NamespaceSupport: java.lang.String[] processName(java.lang.String,java.lang.String[],boolean)>
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getPrefix(java.lang.String)>
<android.util.Xml: void <init>()>
<android.util.Xml: android.util.Xml.Encoding findEncodingByName(java.lang.String)>
<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>
<android.util.Xml: void parse(java.lang.String,org.xml.sax.ContentHandler)>
<android.util.Xml: void parse(java.io.InputStream,android.util.Xml.Encoding,org.xml.sax.ContentHandler)>
<android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.webkit.JsPromptResult: void confirm(java.lang.String)>
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)>
<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>
<java.util.Properties: void <init>(java.util.Properties)>
<java.util.Properties: void <init>()>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<java.util.Properties: void load(java.io.InputStream)>
<java.util.Properties: java.util.Enumeration propertyNames()>
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>
<java.util.Properties: void list(java.io.PrintStream)>
<java.util.Properties: void list(java.io.PrintWriter)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableString: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannableString: android.text.SpannableString valueOf(java.lang.CharSequence)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<android.text.SpannableString: void removeSpan(java.lang.Object)>
<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>
<java.nio.channels.SelectionKey: boolean isConnectable()>
<java.nio.channels.SelectionKey: int readyOps()>
<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>
<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()>
<java.nio.channels.SelectionKey: void <init>()>
<java.nio.channels.SelectionKey: void cancel()>
<java.nio.channels.SelectionKey: boolean isAcceptable()>
<java.nio.channels.SelectionKey: boolean isValid()>
<java.nio.channels.SelectionKey: boolean isReadable()>
<java.nio.channels.SelectionKey: boolean isWritable()>
<java.nio.channels.SelectionKey: java.lang.Object attachment()>
<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>
<java.nio.channels.SelectionKey: int interestOps()>
<java.io.StringWriter: void close()>
<java.io.StringWriter: void <init>()>
<java.io.StringWriter: void flush()>
<java.io.StringWriter: java.lang.StringBuffer getBuffer()>
<java.io.StringWriter: void write(char[],int,int)>
<java.io.StringWriter: void <init>(int)>
<java.nio.channels.NoConnectionPendingException: void <init>()>
<android.view.Gravity: void <init>()>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>
<android.view.Gravity: boolean isVertical(int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)>
<android.view.Gravity: boolean isHorizontal(int)>
<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.Lock: void unlock()>
<java.util.concurrent.locks.Lock: void lock()>
<java.util.concurrent.locks.Lock: boolean tryLock()>
<java.util.concurrent.locks.Lock: void lockInterruptibly()>
<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>
<org.apache.http.impl.conn.SingleClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<org.apache.http.impl.conn.SingleClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.SingleClientConnManager: void closeExpiredConnections()>
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>
<org.apache.http.impl.conn.SingleClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.SingleClientConnManager: void assertStillUp()>
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<org.apache.http.impl.conn.SingleClientConnManager: void revokeConnection()>
<org.apache.http.impl.conn.SingleClientConnManager: void shutdown()>
<java.nio.channels.ClosedSelectorException: void <init>()>
<android.text.LoginFilter.UsernameFilterGMail: void <init>()>
<android.text.LoginFilter.UsernameFilterGMail: boolean isAllowed(char)>
<android.text.LoginFilter.UsernameFilterGMail: void <init>(boolean)>
<java.nio.LongBuffer: int arrayOffset()>
<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>
<java.nio.LongBuffer: long[] array()>
<java.nio.LongBuffer: boolean hasArray()>
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>
<java.nio.LongBuffer: java.nio.ByteOrder order()>
<java.nio.LongBuffer: long get(int)>
<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>
<java.nio.LongBuffer: long get()>
<java.nio.LongBuffer: java.nio.LongBuffer put(long)>
<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>
<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>
<java.nio.LongBuffer: java.nio.LongBuffer asReadOnlyBuffer()>
<java.nio.LongBuffer: java.nio.LongBuffer duplicate()>
<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>
<java.nio.LongBuffer: java.nio.LongBuffer slice()>
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>
<java.nio.LongBuffer: java.nio.LongBuffer compact()>
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>
<java.nio.LongBuffer: boolean isDirect()>
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>
<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>
<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>
<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>
<javax.net.ssl.X509KeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])>
<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>
<javax.net.ssl.X509KeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])>
<java.security.cert.X509CRLEntry: java.util.Date getRevocationDate()>
<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()>
<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>
<java.security.cert.X509CRLEntry: boolean hasExtensions()>
<java.security.cert.X509CRLEntry: void <init>()>
<java.security.cert.X509CRLEntry: java.lang.String toString()>
<java.security.cert.X509CRLEntry: byte[] getEncoded()>
<java.sql.Time: void <init>(int,int,int)>
<java.sql.Time: java.sql.Time valueOf(java.lang.String)>
<java.sql.Time: void <init>(long)>
<java.text.DecimalFormatSymbols: void setMinusSign(char)>
<java.text.DecimalFormatSymbols: void setZeroDigit(char)>
<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>
<java.text.DecimalFormatSymbols: void setCurrency(java.util.Currency)>
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>
<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)>
<java.text.DecimalFormatSymbols: void setPatternSeparator(char)>
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>
<java.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>
<java.text.DecimalFormatSymbols: void setDecimalSeparator(char)>
<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<java.text.DecimalFormatSymbols: void setNaN(java.lang.String)>
<java.text.DecimalFormatSymbols: char getPatternSeparator()>
<java.text.DecimalFormatSymbols: java.lang.String getNaN()>
<java.text.DecimalFormatSymbols: void setPerMill(char)>
<java.text.DecimalFormatSymbols: void setPercent(char)>
<java.text.DecimalFormatSymbols: char getDigit()>
<java.text.DecimalFormatSymbols: char getPercent()>
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>
<java.text.DecimalFormatSymbols: void setInfinity(java.lang.String)>
<java.text.DecimalFormatSymbols: char getPerMill()>
<java.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)>
<java.text.DecimalFormatSymbols: char getMinusSign()>
<java.text.DecimalFormatSymbols: char getZeroDigit()>
<java.text.DecimalFormatSymbols: char getDecimalSeparator()>
<java.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)>
<java.text.DecimalFormatSymbols: void <init>()>
<java.text.DecimalFormatSymbols: void setDigit(char)>
<java.text.DecimalFormatSymbols: java.lang.Object clone()>
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>
<java.text.DecimalFormatSymbols: char getGroupingSeparator()>
<android.preference.PreferenceScreen: android.widget.ListAdapter onCreateRootAdapter()>
<android.preference.PreferenceScreen: void onDismiss(android.content.DialogInterface)>
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()>
<android.preference.PreferenceScreen: android.app.Dialog getDialog()>
<android.preference.PreferenceScreen: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.preference.PreferenceScreen: void bind(android.widget.ListView)>
<android.provider.Contacts.People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>
<android.provider.Contacts.People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts.People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts.People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts.People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts.People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts.People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory.Options)>
<android.provider.Contacts.People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts.People: void markAsContacted(android.content.ContentResolver,long)>
<java.util.Formatter: void <init>(java.util.Locale)>
<java.util.Formatter: void <init>(java.io.File,java.lang.String,java.util.Locale)>
<java.util.Formatter: java.util.Locale locale()>
<java.util.Formatter: void <init>()>
<java.util.Formatter: void <init>(java.io.OutputStream)>
<java.util.Formatter: void <init>(java.io.PrintStream)>
<java.util.Formatter: java.io.IOException ioException()>
<java.util.Formatter: void <init>(java.lang.String)>
<java.util.Formatter: void flush()>
<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
<java.util.Formatter: void <init>(java.lang.String,java.lang.String,java.util.Locale)>
<java.util.Formatter: void <init>(java.io.OutputStream,java.lang.String,java.util.Locale)>
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object...)>
<java.util.Formatter: void <init>(java.lang.Appendable)>
<java.util.Formatter: void <init>(java.io.File,java.lang.String)>
<java.util.Formatter: void <init>(java.lang.String,java.lang.String)>
<java.util.Formatter: void close()>
<java.util.Formatter: void <init>(java.io.File)>
<java.util.Formatter: java.lang.Appendable out()>
<java.util.Formatter: void <init>(java.io.OutputStream,java.lang.String)>
<java.net.ProxySelector: java.util.List select(java.net.URI)>
<java.net.ProxySelector: void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)>
<java.net.ProxySelector: void setDefault(java.net.ProxySelector)>
<java.net.ProxySelector: java.net.ProxySelector getDefault()>
<java.net.ProxySelector: void <init>()>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CheckBox: void <init>(android.content.Context)>
<org.json.JSONStringer: org.json.JSONStringer object()>
<org.json.JSONStringer: void <init>()>
<org.json.JSONStringer: org.json.JSONStringer value(long)>
<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>
<org.json.JSONStringer: org.json.JSONStringer value(boolean)>
<org.json.JSONStringer: org.json.JSONStringer endArray()>
<org.json.JSONStringer: org.json.JSONStringer array()>
<org.json.JSONStringer: org.json.JSONStringer endObject()>
<org.json.JSONStringer: org.json.JSONStringer key(java.lang.String)>
<org.json.JSONStringer: org.json.JSONStringer value(double)>
<android.webkit.PluginList: void clear()>
<android.webkit.PluginList: java.util.List getList()>
<android.webkit.PluginList: void <init>()>
<android.webkit.PluginList: void removePlugin(android.webkit.Plugin)>
<android.webkit.PluginList: void addPlugin(android.webkit.Plugin)>
<android.webkit.PluginList: void pluginClicked(android.content.Context,int)>
<javax.sql.RowSetMetaData: void setSigned(int,boolean)>
<javax.sql.RowSetMetaData: void setScale(int,int)>
<javax.sql.RowSetMetaData: void setCurrency(int,boolean)>
<javax.sql.RowSetMetaData: void setPrecision(int,int)>
<javax.sql.RowSetMetaData: void setColumnTypeName(int,java.lang.String)>
<javax.sql.RowSetMetaData: void setSchemaName(int,java.lang.String)>
<javax.sql.RowSetMetaData: void setColumnCount(int)>
<javax.sql.RowSetMetaData: void setColumnName(int,java.lang.String)>
<javax.sql.RowSetMetaData: void setSearchable(int,boolean)>
<javax.sql.RowSetMetaData: void setColumnType(int,int)>
<javax.sql.RowSetMetaData: void setCaseSensitive(int,boolean)>
<javax.sql.RowSetMetaData: void setTableName(int,java.lang.String)>
<javax.sql.RowSetMetaData: void setColumnLabel(int,java.lang.String)>
<javax.sql.RowSetMetaData: void setAutoIncrement(int,boolean)>
<javax.sql.RowSetMetaData: void setNullable(int,int)>
<javax.sql.RowSetMetaData: void setCatalogName(int,java.lang.String)>
<javax.sql.RowSetMetaData: void setColumnDisplaySize(int,int)>
<dalvik.system.DexFile: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>
<dalvik.system.DexFile: boolean isDexOptNeeded(java.lang.String)>
<dalvik.system.DexFile: java.util.Enumeration entries()>
<dalvik.system.DexFile: java.lang.String getName()>
<dalvik.system.DexFile: void close()>
<dalvik.system.DexFile: void <init>(java.lang.String)>
<dalvik.system.DexFile: void <init>(java.io.File)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.RequestUserAgent: void <init>()>
<java.io.LineNumberReader: void <init>(java.io.Reader)>
<java.io.LineNumberReader: void setLineNumber(int)>
<java.io.LineNumberReader: int getLineNumber()>
<java.io.LineNumberReader: void <init>(java.io.Reader,int)>
<java.text.AttributedString: void <init>(java.lang.String)>
<java.text.AttributedString: void <init>(java.lang.String,java.util.Map)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator.Attribute[])>
<java.text.AttributedString: void addAttributes(java.util.Map,int,int)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator.Attribute[])>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object,int,int)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator.Attribute[],int,int)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object)>
<javax.net.ssl.SSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<javax.net.ssl.SSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()>
<javax.net.ssl.SSLServerSocketFactory: void <init>()>
<java.security.PrivilegedAction: T run()>
<android.content.BroadcastReceiver: java.lang.String getResultData()>
<android.content.BroadcastReceiver: void <init>()>
<android.content.BroadcastReceiver: void setResultCode(int)>
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver: boolean getDebugUnregister()>
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>
<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.content.BroadcastReceiver: void abortBroadcast()>
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver: void clearAbortBroadcast()>
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver: int getResultCode()>
<android.content.BroadcastReceiver: void setOrderedHint(boolean)>
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>
<java.security.cert.CertPathValidatorResult: java.lang.Object clone()>
<org.apache.http.cookie.CookieAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.cookie.CookieAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.cookie.CookieAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<java.security.Principal: java.lang.String toString()>
<java.security.Principal: boolean equals(java.lang.Object)>
<java.security.Principal: java.lang.String getName()>
<java.security.Principal: int hashCode()>
<java.security.cert.Certificate: java.lang.String toString()>
<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>
<java.security.cert.Certificate: void verify(java.security.PublicKey)>
<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>
<java.security.cert.Certificate: void <init>(java.lang.String)>
<java.security.cert.Certificate: java.lang.String getType()>
<java.security.cert.Certificate: byte[] getEncoded()>
<java.security.cert.Certificate: java.lang.Object writeReplace()>
<android.graphics.drawable.shapes.OvalShape: void <init>()>
<android.os.PatternMatcher: int getType()>
<android.os.PatternMatcher: boolean match(java.lang.String)>
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>
<android.os.PatternMatcher: int describeContents()>
<android.os.PatternMatcher: void <init>(java.lang.String,int)>
<android.os.PatternMatcher: void <init>(android.os.Parcel)>
<android.os.PatternMatcher: java.lang.String getPath()>
<org.apache.http.NameValuePair: java.lang.String getValue()>
<org.apache.http.NameValuePair: java.lang.String getName()>
<android.graphics.BitmapFactory.Options: void <init>()>
<android.graphics.BitmapFactory.Options: void requestCancelDecode()>
<java.util.SortedMap: java.util.Comparator comparator()>
<java.util.SortedMap: K firstKey()>
<java.util.SortedMap: java.util.SortedMap headMap(K)>
<java.util.SortedMap: java.util.SortedMap tailMap(K)>
<java.util.SortedMap: java.util.SortedMap subMap(K,K)>
<java.util.SortedMap: K lastKey()>
<android.content.pm.PackageManager.NameNotFoundException: void <init>(java.lang.String)>
<android.content.pm.PackageManager.NameNotFoundException: void <init>()>
<org.xml.sax.XMLFilter: org.xml.sax.XMLReader getParent()>
<org.xml.sax.XMLFilter: void setParent(org.xml.sax.XMLReader)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.media.AsyncPlayer: void stop()>
<android.media.AsyncPlayer: void <init>(java.lang.String)>
<java.nio.BufferOverflowException: void <init>()>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>
<java.util.zip.InflaterInputStream: void fill()>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>
<android.graphics.BlurMaskFilter: void <init>(float,android.graphics.BlurMaskFilter.Blur)>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short)>
<java.nio.ShortBuffer: java.nio.ShortBuffer compact()>
<java.nio.ShortBuffer: boolean isDirect()>
<java.nio.ShortBuffer: java.nio.ShortBuffer duplicate()>
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>
<java.nio.ShortBuffer: boolean hasArray()>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>
<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ByteOrder order()>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer slice()>
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>
<java.nio.ShortBuffer: short[] array()>
<java.nio.ShortBuffer: short get(int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>
<java.nio.ShortBuffer: short get()>
<java.nio.ShortBuffer: int arrayOffset()>
<org.apache.http.conn.ClientConnectionRequest: void abortRequest()>
<org.apache.http.conn.ClientConnectionRequest: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void unlock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: boolean tryLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void lock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void lockInterruptibly()>
<java.util.concurrent.atomic.AtomicReference: V get()>
<java.util.concurrent.atomic.AtomicReference: void set(V)>
<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(V,V)>
<java.util.concurrent.atomic.AtomicReference: void <init>(V)>
<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSet(V,V)>
<java.util.concurrent.atomic.AtomicReference: V getAndSet(V)>
<java.util.concurrent.atomic.AtomicReference: void <init>()>
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List)>
<java.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCRLs(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCertificates(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)>
<java.security.cert.CertificateFactorySpi: java.security.cert.CRL engineGenerateCRL(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.util.Iterator engineGetCertPathEncodings()>
<java.security.cert.CertificateFactorySpi: void <init>()>
<javax.crypto.KeyAgreement: java.security.Provider getProvider()>
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.SecureRandom)>
<javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.lang.String)>
<javax.crypto.KeyAgreement: void init(java.security.Key)>
<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>
<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)>
<javax.crypto.KeyAgreement: int generateSecret(byte[],int)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.KeyAgreement: byte[] generateSecret()>
<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()>
<java.util.jar.JarInputStream: java.util.jar.Manifest getManifest()>
<java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()>
<java.util.jar.JarInputStream: void <init>(java.io.InputStream,boolean)>
<java.util.jar.JarInputStream: void <init>(java.io.InputStream)>
<android.view.SurfaceHolder.Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.view.SurfaceHolder.Callback: void surfaceCreated(android.view.SurfaceHolder)>
<android.view.SurfaceHolder.Callback: void surfaceDestroyed(android.view.SurfaceHolder)>
<java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy: void <init>()>
<java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream,java.util.jar.Manifest)>
<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>
<java.security.Permissions: java.util.Enumeration elements()>
<java.security.Permissions: void <init>()>
<java.security.Permissions: void add(java.security.Permission)>
<java.security.Permissions: boolean implies(java.security.Permission)>
<java.io.OutputStream: void flush()>
<java.io.OutputStream: void write(int)>
<java.io.OutputStream: void close()>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void <init>()>
<java.io.OutputStream: void write(byte[],int,int)>
<java.security.SecureClassLoader: void <init>()>
<java.security.SecureClassLoader: void <init>(java.lang.ClassLoader)>
<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>
<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>
<java.security.SecureClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>
<java.lang.reflect.AccessibleObject: T getAnnotation(java.lang.Class)>
<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.AccessibleObject: void <init>()>
<java.lang.reflect.AccessibleObject: boolean isAccessible()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<android.widget.CompoundButton: void setButtonDrawable(android.graphics.drawable.Drawable)>
<android.widget.CompoundButton: void <init>(android.content.Context)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CompoundButton: boolean isChecked()>
<android.widget.CompoundButton: void setChecked(boolean)>
<android.widget.CompoundButton: void toggle()>
<android.widget.CompoundButton: void setButtonDrawable(int)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)>
<android.os.IInterface: android.os.IBinder asBinder()>
<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()>
<org.apache.http.message.BasicRequestLine: java.lang.Object clone()>
<org.apache.http.message.BasicRequestLine: java.lang.String getMethod()>
<org.apache.http.message.BasicRequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<android.graphics.PathMeasure: boolean nextContour()>
<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: boolean getMatrix(float,android.graphics.Matrix,int)>
<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>
<android.graphics.PathMeasure: boolean getSegment(float,float,android.graphics.Path,boolean)>
<android.graphics.PathMeasure: void <init>()>
<android.graphics.PathMeasure: boolean isClosed()>
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: float getLength()>
<android.view.ViewDebug.HierarchyTraceType: android.view.ViewDebug.HierarchyTraceType valueOf(java.lang.String)>
<android.view.ViewDebug.HierarchyTraceType: android.view.ViewDebug.HierarchyTraceType[] values()>
<android.graphics.Point: void set(int,int)>
<android.graphics.Point: void <init>()>
<android.graphics.Point: void <init>(android.graphics.Point)>
<android.graphics.Point: void offset(int,int)>
<android.graphics.Point: void negate()>
<android.graphics.Point: void <init>(int,int)>
<android.graphics.Point: boolean equals(int,int)>
<org.xml.sax.helpers.ParserFactory: org.xml.sax.Parser makeParser(java.lang.String)>
<org.xml.sax.helpers.ParserFactory: org.xml.sax.Parser makeParser()>
<java.nio.BufferUnderflowException: void <init>()>
<java.util.concurrent.TimeUnit: long toNanos(long)>
<java.util.concurrent.TimeUnit: long toSeconds(long)>
<java.util.concurrent.TimeUnit: void sleep(long)>
<java.util.concurrent.TimeUnit: long toMicros(long)>
<java.util.concurrent.TimeUnit: long toMillis(long)>
<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>
<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)>
<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>
<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>
<org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.util.CharArrayBuffer: char[] buffer()>
<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>
<org.apache.http.util.CharArrayBuffer: boolean isEmpty()>
<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>
<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.util.CharArrayBuffer: int capacity()>
<org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>
<org.apache.http.util.CharArrayBuffer: void setLength(int)>
<org.apache.http.util.CharArrayBuffer: char[] toCharArray()>
<org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.util.CharArrayBuffer: boolean isFull()>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>
<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>
<org.apache.http.util.CharArrayBuffer: void append(java.lang.Object)>
<org.apache.http.util.CharArrayBuffer: int indexOf(int)>
<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.util.CharArrayBuffer: void clear()>
<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>
<java.security.cert.CertStore: java.lang.String getType()>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)>
<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertStore: java.util.Collection getCertificates(java.security.cert.CertSelector)>
<java.security.cert.CertStore: java.lang.String getDefaultType()>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertStore: java.security.Provider getProvider()>
<java.security.cert.CertStore: java.util.Collection getCRLs(java.security.cert.CRLSelector)>
<java.security.cert.CertStore: java.security.cert.CertStoreParameters getCertStoreParameters()>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)>
<java.text.BreakIterator: long getLong(byte[],int)>
<java.text.BreakIterator: int last()>
<java.text.BreakIterator: int current()>
<java.text.BreakIterator: int first()>
<java.text.BreakIterator: java.text.CharacterIterator getText()>
<java.text.BreakIterator: java.text.BreakIterator getWordInstance()>
<java.text.BreakIterator: boolean isBoundary(int)>
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)>
<java.text.BreakIterator: int getInt(byte[],int)>
<java.text.BreakIterator: void setText(java.lang.String)>
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance()>
<java.text.BreakIterator: java.text.BreakIterator getLineInstance(java.util.Locale)>
<java.text.BreakIterator: int preceding(int)>
<java.text.BreakIterator: int next(int)>
<java.text.BreakIterator: short getShort(byte[],int)>
<java.text.BreakIterator: int following(int)>
<java.text.BreakIterator: void <init>()>
<java.text.BreakIterator: int next()>
<java.text.BreakIterator: void setText(java.text.CharacterIterator)>
<java.text.BreakIterator: int previous()>
<java.text.BreakIterator: java.lang.Object clone()>
<java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance(java.util.Locale)>
<java.text.BreakIterator: java.text.BreakIterator getLineInstance()>
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance()>
<java.text.BreakIterator: java.util.Locale[] getAvailableLocales()>
<org.apache.http.client.utils.CloneUtils: java.lang.Object clone(java.lang.Object)>
<java.util.Observable: int countObservers()>
<java.util.Observable: void clearChanged()>
<java.util.Observable: boolean hasChanged()>
<java.util.Observable: void deleteObservers()>
<java.util.Observable: void notifyObservers()>
<java.util.Observable: void notifyObservers(java.lang.Object)>
<java.util.Observable: void addObserver(java.util.Observer)>
<java.util.Observable: void setChanged()>
<java.util.Observable: void <init>()>
<java.util.Observable: void deleteObserver(java.util.Observer)>
<android.widget.ViewFlipper: void startFlipping()>
<android.widget.ViewFlipper: void <init>(android.content.Context)>
<android.widget.ViewFlipper: void stopFlipping()>
<android.widget.ViewFlipper: void setFlipInterval(int)>
<android.widget.ViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewFlipper: boolean isFlipping()>
<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>
<java.net.HttpURLConnection: boolean getFollowRedirects()>
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>
<java.net.HttpURLConnection: int getResponseCode()>
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>
<java.net.HttpURLConnection: boolean usingProxy()>
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.net.HttpURLConnection: void <init>(java.net.URL)>
<java.net.HttpURLConnection: void disconnect()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<android.provider.Settings.SettingNotFoundException: void <init>(java.lang.String)>
<org.apache.http.client.protocol.ClientContextConfigurer: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)>
<org.apache.http.client.protocol.ClientContextConfigurer: void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry)>
<org.apache.http.client.protocol.ClientContextConfigurer: void <init>(org.apache.http.protocol.HttpContext)>
<org.apache.http.client.protocol.ClientContextConfigurer: void setCookieStore(org.apache.http.client.CookieStore)>
<org.apache.http.client.protocol.ClientContextConfigurer: void setAuthSchemePref(java.util.List)>
<org.apache.http.client.protocol.ClientContextConfigurer: void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry)>
<android.content.DialogInterface.OnClickListener: void onClick(android.content.DialogInterface,int)>
<java.security.KeyStore.SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>
<java.security.KeyStore.SecretKeyEntry: void <init>(javax.crypto.SecretKey)>
<java.io.PushbackInputStream: void unread(byte[],int,int)>
<java.io.PushbackInputStream: void unread(int)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>
<java.io.PushbackInputStream: void unread(byte[])>
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>
<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>
<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>
<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.DatagramChannel: int validOps()>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>
<java.nio.channels.DatagramChannel: boolean isConnected()>
<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>
<android.provider.SearchRecentSuggestions: void <init>(android.content.Context,java.lang.String,int)>
<android.provider.SearchRecentSuggestions: void truncateHistory(android.content.ContentResolver,int)>
<android.provider.SearchRecentSuggestions: void clearHistory()>
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)>
<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void endDocument()>
<org.xmlpull.v1.XmlSerializer: java.lang.Object getProperty(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.XmlSerializer: void setProperty(java.lang.String,java.lang.Object)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void flush()>
<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>
<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: int getDepth()>
<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>
<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>
<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: java.lang.String getNamespace()>
<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: java.lang.String getName()>
<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>
<java.lang.CloneNotSupportedException: void <init>()>
<android.widget.HeaderViewListAdapter: boolean isEnabled(int)>
<android.widget.HeaderViewListAdapter: int getCount()>
<android.widget.HeaderViewListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.HeaderViewListAdapter: long getItemId(int)>
<android.widget.HeaderViewListAdapter: int getItemViewType(int)>
<android.widget.HeaderViewListAdapter: boolean isEmpty()>
<android.widget.HeaderViewListAdapter: boolean removeFooter(android.view.View)>
<android.widget.HeaderViewListAdapter: int getViewTypeCount()>
<android.widget.HeaderViewListAdapter: void <init>(java.util.ArrayList,java.util.ArrayList,android.widget.ListAdapter)>
<android.widget.HeaderViewListAdapter: int getHeadersCount()>
<android.widget.HeaderViewListAdapter: boolean areAllItemsEnabled()>
<android.widget.HeaderViewListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.HeaderViewListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.HeaderViewListAdapter: boolean hasStableIds()>
<android.widget.HeaderViewListAdapter: int getFootersCount()>
<android.widget.HeaderViewListAdapter: boolean removeHeader(android.view.View)>
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()>
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)>
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<java.nio.channels.IllegalBlockingModeException: void <init>()>
<android.os.Handler: android.os.Message obtainMessage()>
<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
<android.os.Handler: boolean hasMessages(int,java.lang.Object)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.Handler: void handleMessage(android.os.Message)>
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>
<android.os.Handler: boolean sendEmptyMessage(int)>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.os.Handler: void dispatchMessage(android.os.Message)>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.os.Handler: void <init>(android.os.Looper)>
<android.os.Handler: void removeMessages(int)>
<android.os.Handler: void <init>()>
<android.os.Handler: android.os.Looper getLooper()>
<android.os.Handler: boolean hasMessages(int)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>
<android.os.Handler: android.os.Message obtainMessage(int)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.graphics.Shader: void <init>()>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>
<org.apache.http.impl.conn.AbstractPoolEntry: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPoolEntry: void setState(java.lang.Object)>
<org.apache.http.impl.conn.AbstractPoolEntry: void shutdownEntry()>
<org.apache.http.impl.conn.AbstractPoolEntry: void tunnelTarget(boolean,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPoolEntry: void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.conn.AbstractPoolEntry: void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object getState()>
<org.apache.http.impl.conn.AbstractPoolEntry: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<android.graphics.Region.Op: android.graphics.Region.Op valueOf(java.lang.String)>
<android.graphics.Region.Op: android.graphics.Region.Op[] values()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>
<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>
<java.net.JarURLConnection: java.lang.String getEntryName()>
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()>
<java.net.JarURLConnection: java.net.URL getJarFileURL()>
<java.net.JarURLConnection: void <init>(java.net.URL)>
<java.net.JarURLConnection: java.security.cert.Certificate[] getCertificates()>
<java.net.JarURLConnection: java.util.jar.Attributes getAttributes()>
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()>
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()>
<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int println(int,java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>
<java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)>
<java.util.EnumSet: java.util.EnumSet of(E,E,E)>
<java.util.EnumSet: java.util.EnumSet of(E)>
<java.util.EnumSet: java.util.EnumSet of(E,E)>
<java.util.EnumSet: java.util.EnumSet of(E,E,E,E,E)>
<java.util.EnumSet: java.util.EnumSet clone()>
<java.util.EnumSet: java.util.EnumSet complementOf(java.util.EnumSet)>
<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>
<java.util.EnumSet: java.util.EnumSet of(E,E...)>
<java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)>
<java.util.EnumSet: java.util.EnumSet of(E,E,E,E)>
<java.util.EnumSet: java.util.EnumSet range(E,E)>
<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Member: java.lang.String getName()>
<java.lang.reflect.Member: int getModifiers()>
<java.lang.reflect.Member: boolean isSynthetic()>
<android.content.IntentFilter: int countActions()>
<android.content.IntentFilter: void addDataType(java.lang.String)>
<android.content.IntentFilter: int getPriority()>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.content.IntentFilter: void <init>()>
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>
<android.content.IntentFilter: boolean matchAction(java.lang.String)>
<android.content.IntentFilter: int describeContents()>
<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>
<android.content.IntentFilter: void addDataPath(java.lang.String,int)>
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>
<android.content.IntentFilter: int countDataSchemes()>
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.content.IntentFilter: java.util.Iterator actionsIterator()>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<android.content.IntentFilter: int countDataTypes()>
<android.content.IntentFilter: int countDataPaths()>
<android.content.IntentFilter: void addAction(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator categoriesIterator()>
<android.content.IntentFilter: java.util.Iterator pathsIterator()>
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>
<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>
<android.content.IntentFilter: boolean hasAction(java.lang.String)>
<android.content.IntentFilter: int countCategories()>
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>
<android.content.IntentFilter: void setPriority(int)>
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.content.IntentFilter: java.util.Iterator typesIterator()>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<android.content.IntentFilter: boolean hasCategory(java.lang.String)>
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator schemesIterator()>
<android.content.IntentFilter: android.content.IntentFilter.AuthorityEntry getDataAuthority(int)>
<android.content.IntentFilter: int countDataAuthorities()>
<android.content.IntentFilter: boolean hasDataType(java.lang.String)>
<android.content.IntentFilter: void <init>(java.lang.String)>
<android.content.IntentFilter: void <init>(android.content.IntentFilter)>
<java.net.NetworkInterface: java.lang.String getDisplayName()>
<java.net.NetworkInterface: java.lang.String getName()>
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>
<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)>
<android.content.MutableContextWrapper: void <init>(android.content.Context)>
<android.media.SoundPool: void resume(int)>
<android.media.SoundPool: void setRate(int,float)>
<android.media.SoundPool: void setVolume(int,float,float)>
<android.media.SoundPool: void <init>(int,int,int)>
<android.media.SoundPool: int load(android.content.Context,int,int)>
<android.media.SoundPool: void release()>
<android.media.SoundPool: void setPriority(int,int)>
<android.media.SoundPool: void stop(int)>
<android.media.SoundPool: int load(java.lang.String,int)>
<android.media.SoundPool: boolean unload(int)>
<android.media.SoundPool: void setLoop(int,int)>
<android.media.SoundPool: void pause(int)>
<android.media.SoundPool: int play(int,float,float,int,int,float)>
<java.security.spec.ECFieldFp: void <init>(java.math.BigInteger)>
<java.security.spec.ECFieldFp: java.math.BigInteger getP()>
<java.security.spec.ECFieldFp: int getFieldSize()>
<android.view.animation.AlphaAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AlphaAnimation: void <init>(float,float)>
<java.security.cert.TrustAnchor: javax.security.auth.x500.X500Principal getCA()>
<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>
<java.security.cert.TrustAnchor: void <init>(javax.security.auth.x500.X500Principal,java.security.PublicKey,byte[])>
<java.security.cert.TrustAnchor: java.lang.String getCAName()>
<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>
<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>
<java.security.cert.TrustAnchor: void <init>(java.lang.String,java.security.PublicKey,byte[])>
<java.security.cert.TrustAnchor: byte[] getNameConstraints()>
<java.util.concurrent.CopyOnWriteArrayList: java.util.List subList(int,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean add(E)>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<java.util.concurrent.CopyOnWriteArrayList: E remove(int)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean retainAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: void add(int,E)>
<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.CopyOnWriteArrayList: void clear()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(E)>
<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(E,int)>
<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: E get(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(E,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator()>
<java.util.concurrent.CopyOnWriteArrayList: E set(int,E)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(E[])>
<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: T[] toArray(T[])>
<org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)>
<org.apache.http.client.ClientProtocolException: void <init>()>
<org.apache.http.client.ClientProtocolException: void <init>(java.lang.String)>
<org.apache.http.client.ClientProtocolException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.conn.scheme.PlainSocketFactory: void <init>()>
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.scheme.PlainSocketFactory: void <init>(org.apache.http.conn.scheme.HostNameResolver)>
<org.apache.http.conn.scheme.PlainSocketFactory: boolean isSecure(java.net.Socket)>
<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getProxyHost()>
<org.apache.http.conn.routing.RouteTracker: boolean isLayered()>
<org.apache.http.conn.routing.RouteTracker: boolean isTunnelled()>
<org.apache.http.conn.routing.RouteTracker: void tunnelTarget(boolean)>
<org.apache.http.conn.routing.RouteTracker: int getHopCount()>
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.HttpRoute toRoute()>
<org.apache.http.conn.routing.RouteTracker: void <init>(org.apache.http.HttpHost,java.net.InetAddress)>
<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)>
<org.apache.http.conn.routing.RouteTracker: void <init>(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.conn.routing.RouteTracker: java.lang.String toString()>
<org.apache.http.conn.routing.RouteTracker: java.lang.Object clone()>
<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)>
<org.apache.http.conn.routing.RouteTracker: boolean isSecure()>
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getHopTarget(int)>
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.RouteInfo.LayerType getLayerType()>
<org.apache.http.conn.routing.RouteTracker: int hashCode()>
<org.apache.http.conn.routing.RouteTracker: java.net.InetAddress getLocalAddress()>
<org.apache.http.conn.routing.RouteTracker: boolean equals(java.lang.Object)>
<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>
<org.apache.http.conn.routing.RouteTracker: void tunnelProxy(org.apache.http.HttpHost,boolean)>
<org.apache.http.conn.routing.RouteTracker: void layerProtocol(boolean)>
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType()>
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)>
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>
<javax.crypto.SecretKeyFactorySpi: void <init>()>
<javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)>
<android.graphics.Interpolator.Result: android.graphics.Interpolator.Result valueOf(java.lang.String)>
<android.graphics.Interpolator.Result: android.graphics.Interpolator.Result[] values()>
<org.apache.http.message.BasicTokenIterator: java.lang.String createToken(java.lang.String,int,int)>
<org.apache.http.message.BasicTokenIterator: boolean hasNext()>
<org.apache.http.message.BasicTokenIterator: boolean isHttpSeparator(char)>
<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>
<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>
<org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()>
<org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)>
<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>
<org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)>
<org.apache.http.message.BasicTokenIterator: int findNext(int)>
<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)>
<org.apache.http.message.BasicTokenIterator: java.lang.Object next()>
<org.apache.http.message.BasicTokenIterator: void remove()>
<java.security.acl.LastOwnerException: void <init>()>
<org.apache.http.auth.params.AuthParams: java.lang.String getCredentialCharset(org.apache.http.params.HttpParams)>
<org.apache.http.auth.params.AuthParams: void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String)>
<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.impl.client.ClientParamsStack)>
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams copy()>
<org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>
<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.impl.client.ClientParamsStack,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>
<org.apache.http.impl.client.ClientParamsStack: boolean removeParameter(java.lang.String)>
<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable)>
<android.text.style.DrawableMarginSpan: int getLeadingMargin(boolean)>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable,int)>
<android.text.style.DrawableMarginSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.DrawableMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRequestDirector: void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRequestDirector: void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRequestDirector: void releaseConnection()>
<org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.content.AsyncQueryHandler.WorkerArgs: void <init>()>
<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.Drawable,int,int)>
<android.graphics.drawable.ClipDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.ClipDrawable: int getOpacity()>
<android.graphics.drawable.ClipDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.ClipDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ClipDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ClipDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.ClipDrawable: void setAlpha(int)>
<android.widget.Toast: int getGravity()>
<android.widget.Toast: void setView(android.view.View)>
<android.widget.Toast: android.view.View getView()>
<android.widget.Toast: int getDuration()>
<android.widget.Toast: float getVerticalMargin()>
<android.widget.Toast: int getYOffset()>
<android.widget.Toast: void setGravity(int,int,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.widget.Toast: int getXOffset()>
<android.widget.Toast: void <init>(android.content.Context)>
<android.widget.Toast: void setMargin(float,float)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: void setDuration(int)>
<android.widget.Toast: void setText(java.lang.CharSequence)>
<android.widget.Toast: void cancel()>
<android.widget.Toast: float getHorizontalMargin()>
<android.widget.Toast: void setText(int)>
<android.widget.Toast: void show()>
<org.xml.sax.ext.Locator2: java.lang.String getXMLVersion()>
<org.xml.sax.ext.Locator2: java.lang.String getEncoding()>
<android.hardware.Camera.AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)>
<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>
<java.lang.StackTraceElement: int getLineNumber()>
<java.lang.StackTraceElement: boolean isNativeMethod()>
<java.lang.StackTraceElement: java.lang.String getClassName()>
<java.lang.StackTraceElement: java.lang.String getMethodName()>
<java.lang.StackTraceElement: java.lang.String getFileName()>
<android.widget.SimpleAdapter.ViewBinder: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)>
<java.sql.Clob: java.io.Reader getCharacterStream()>
<java.sql.Clob: java.lang.String getSubString(long,int)>
<java.sql.Clob: int setString(long,java.lang.String,int,int)>
<java.sql.Clob: int setString(long,java.lang.String)>
<java.sql.Clob: long length()>
<java.sql.Clob: java.io.OutputStream setAsciiStream(long)>
<java.sql.Clob: java.io.InputStream getAsciiStream()>
<java.sql.Clob: void truncate(long)>
<java.sql.Clob: long position(java.lang.String,long)>
<java.sql.Clob: long position(java.sql.Clob,long)>
<java.sql.Clob: java.io.Writer setCharacterStream(long)>
<org.apache.http.HttpConnectionMetrics: long getResponseCount()>
<org.apache.http.HttpConnectionMetrics: long getRequestCount()>
<org.apache.http.HttpConnectionMetrics: long getSentBytesCount()>
<org.apache.http.HttpConnectionMetrics: java.lang.Object getMetric(java.lang.String)>
<org.apache.http.HttpConnectionMetrics: long getReceivedBytesCount()>
<org.apache.http.HttpConnectionMetrics: void reset()>
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()>
<android.app.ListActivity: long getSelectedItemId()>
<android.app.ListActivity: void <init>()>
<android.app.ListActivity: android.widget.ListView getListView()>
<android.app.ListActivity: void setSelection(int)>
<android.app.ListActivity: int getSelectedItemPosition()>
<android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)>
<android.app.ListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)>
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable.ShaderFactory getShaderFactory()>
<android.graphics.drawable.ShapeDrawable: void setShaderFactory(android.graphics.drawable.ShapeDrawable.ShaderFactory)>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.ShapeDrawable: void <init>()>
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ShapeDrawable: void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)>
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)>
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.ShapeDrawable: boolean inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ShapeDrawable: void setShape(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.ShapeDrawable: int getOpacity()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()>
<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: void <init>()>
<java.nio.channels.ClosedChannelException: void <init>()>
<android.R.style: void <init>()>
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Field: short getShort(java.lang.Object)>
<java.lang.reflect.Field: int getModifiers()>
<java.lang.reflect.Field: boolean isSynthetic()>
<java.lang.reflect.Field: void setShort(java.lang.Object,short)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<java.lang.reflect.Field: boolean isEnumConstant()>
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>
<java.lang.reflect.Field: float getFloat(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>
<java.lang.reflect.Field: double getDouble(java.lang.Object)>
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>
<java.lang.reflect.Field: char getChar(java.lang.Object)>
<java.lang.reflect.Field: java.lang.String getName()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>
<java.lang.reflect.Field: java.lang.String toGenericString()>
<java.lang.reflect.Field: void setChar(java.lang.Object,char)>
<java.lang.reflect.Field: byte getByte(java.lang.Object)>
<java.lang.reflect.Field: java.lang.Class getType()>
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<android.test.mock.MockContext: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.test.mock.MockContext: android.content.res.AssetManager getAssets()>
<android.test.mock.MockContext: java.io.File getFilesDir()>
<android.test.mock.MockContext: void setWallpaper(java.io.InputStream)>
<android.test.mock.MockContext: boolean stopService(android.content.Intent)>
<android.test.mock.MockContext: java.lang.String[] databaseList()>
<android.test.mock.MockContext: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.test.mock.MockContext: android.os.Looper getMainLooper()>
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.test.mock.MockContext: android.content.ContentResolver getContentResolver()>
<android.test.mock.MockContext: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.test.mock.MockContext: android.graphics.drawable.Drawable getWallpaper()>
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.test.mock.MockContext: android.content.Context getApplicationContext()>
<android.test.mock.MockContext: java.io.File getCacheDir()>
<android.test.mock.MockContext: java.lang.String getPackageCodePath()>
<android.test.mock.MockContext: int checkCallingOrSelfPermission(java.lang.String)>
<android.test.mock.MockContext: void setWallpaper(android.graphics.Bitmap)>
<android.test.mock.MockContext: android.content.ComponentName startService(android.content.Intent)>
<android.test.mock.MockContext: java.lang.Object getSystemService(java.lang.String)>
<android.test.mock.MockContext: void clearWallpaper()>
<android.test.mock.MockContext: void removeStickyBroadcast(android.content.Intent)>
<android.test.mock.MockContext: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.test.mock.MockContext: android.content.res.Resources getResources()>
<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,int,int,int)>
<android.test.mock.MockContext: int checkPermission(java.lang.String,int,int)>
<android.test.mock.MockContext: java.io.FileInputStream openFileInput(java.lang.String)>
<android.test.mock.MockContext: boolean deleteFile(java.lang.String)>
<android.test.mock.MockContext: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.test.mock.MockContext: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.test.mock.MockContext: void startActivity(android.content.Intent)>
<android.test.mock.MockContext: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.test.mock.MockContext: void unbindService(android.content.ServiceConnection)>
<android.test.mock.MockContext: java.lang.ClassLoader getClassLoader()>
<android.test.mock.MockContext: java.lang.String getPackageResourcePath()>
<android.test.mock.MockContext: android.graphics.drawable.Drawable peekWallpaper()>
<android.test.mock.MockContext: java.io.File getFileStreamPath(java.lang.String)>
<android.test.mock.MockContext: android.content.Context createPackageContext(java.lang.String,int)>
<android.test.mock.MockContext: java.io.File getDatabasePath(java.lang.String)>
<android.test.mock.MockContext: int checkCallingPermission(java.lang.String)>
<android.test.mock.MockContext: void setTheme(int)>
<android.test.mock.MockContext: void sendStickyBroadcast(android.content.Intent)>
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.mock.MockContext: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.test.mock.MockContext: int getWallpaperDesiredMinimumWidth()>
<android.test.mock.MockContext: java.lang.String getPackageName()>
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>
<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.test.mock.MockContext: android.content.pm.PackageManager getPackageManager()>
<android.test.mock.MockContext: void revokeUriPermission(android.net.Uri,int)>
<android.test.mock.MockContext: void <init>()>
<android.test.mock.MockContext: boolean deleteDatabase(java.lang.String)>
<android.test.mock.MockContext: java.io.File getDir(java.lang.String,int)>
<android.test.mock.MockContext: android.content.res.Resources.Theme getTheme()>
<android.test.mock.MockContext: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.test.mock.MockContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.test.mock.MockContext: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.test.mock.MockContext: int getWallpaperDesiredMinimumHeight()>
<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.test.mock.MockContext: int checkCallingUriPermission(android.net.Uri,int)>
<android.test.mock.MockContext: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.test.mock.MockContext: java.lang.String[] fileList()>
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.test.SingleLaunchActivityTestCase: T getActivity()>
<android.test.SingleLaunchActivityTestCase: void testActivityTestCaseSetUpProperly()>
<android.test.SingleLaunchActivityTestCase: void <init>(java.lang.String,java.lang.Class)>
<javax.crypto.KeyAgreementSpi: javax.crypto.SecretKey engineGenerateSecret(java.lang.String)>
<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyAgreementSpi: int engineGenerateSecret(byte[],int)>
<javax.crypto.KeyAgreementSpi: void <init>()>
<javax.crypto.KeyAgreementSpi: java.security.Key engineDoPhase(java.security.Key,boolean)>
<javax.crypto.KeyAgreementSpi: byte[] engineGenerateSecret()>
<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)>
<android.R.id: void <init>()>
<java.util.zip.CRC32: void reset()>
<java.util.zip.CRC32: void <init>()>
<java.util.zip.CRC32: void update(byte[])>
<java.util.zip.CRC32: long getValue()>
<java.util.zip.CRC32: void update(byte[],int,int)>
<java.util.zip.CRC32: void update(int)>
<org.apache.http.HttpResponse: void setStatusCode(int)>
<org.apache.http.HttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)>
<org.apache.http.HttpResponse: void setStatusLine(org.apache.http.StatusLine)>
<org.apache.http.HttpResponse: void setLocale(java.util.Locale)>
<org.apache.http.HttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.HttpResponse: void setReasonPhrase(java.lang.String)>
<org.apache.http.HttpResponse: java.util.Locale getLocale()>
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<android.graphics.SumPathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
<android.util.Printer: void println(java.lang.String)>
<android.hardware.Camera: android.hardware.Camera open()>
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>
<android.hardware.Camera: void stopPreview()>
<android.hardware.Camera: void startPreview()>
<android.hardware.Camera: void takePicture(android.hardware.Camera.ShutterCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback)>
<android.hardware.Camera: android.hardware.Camera.Parameters getParameters()>
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera.ErrorCallback)>
<android.hardware.Camera: void setParameters(android.hardware.Camera.Parameters)>
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera.PreviewCallback)>
<android.hardware.Camera: void release()>
<android.hardware.Camera: void autoFocus(android.hardware.Camera.AutoFocusCallback)>
<android.graphics.Rect: void <init>(int,int,int,int)>
<android.graphics.Rect: void <init>()>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<android.graphics.Rect: void setEmpty()>
<android.graphics.Rect: float exactCenterY()>
<android.graphics.Rect: void offsetTo(int,int)>
<android.graphics.Rect: void union(int,int)>
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: int centerX()>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<android.graphics.Rect: boolean contains(int,int)>
<android.graphics.Rect: void inset(int,int)>
<android.graphics.Rect: void set(int,int,int,int)>
<android.graphics.Rect: int describeContents()>
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<android.graphics.Rect: int width()>
<android.graphics.Rect: float exactCenterX()>
<android.graphics.Rect: void sort()>
<android.graphics.Rect: void <init>(android.graphics.Rect)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<android.graphics.Rect: void union(int,int,int,int)>
<android.graphics.Rect: int height()>
<android.graphics.Rect: boolean contains(int,int,int,int)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Rect: int centerY()>
<android.graphics.Rect: boolean intersect(android.graphics.Rect)>
<android.graphics.Rect: void offset(int,int)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.widget.DialerFilter: void clearText()>
<android.widget.DialerFilter: void setFilterWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void <init>(android.content.Context)>
<android.widget.DialerFilter: void onModeChange(int,int)>
<android.widget.DialerFilter: boolean isQwertyKeyboard()>
<android.widget.DialerFilter: void setLettersWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: java.lang.CharSequence getLetters()>
<android.widget.DialerFilter: void append(java.lang.String)>
<android.widget.DialerFilter: void setDigitsWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void removeFilterWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.DialerFilter: java.lang.CharSequence getDigits()>
<android.widget.DialerFilter: int getMode()>
<android.widget.DialerFilter: void setMode(int)>
<android.widget.DialerFilter: java.lang.CharSequence getFilterText()>
<android.widget.LinearLayout: float getWeightSum()>
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)>
<android.widget.LinearLayout: void onLayout(boolean,int,int,int,int)>
<android.widget.LinearLayout: int getOrientation()>
<android.widget.LinearLayout: boolean isBaselineAligned()>
<android.widget.LinearLayout: void setBaselineAligned(boolean)>
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()>
<android.widget.LinearLayout: void setOrientation(int)>
<android.widget.LinearLayout: void setGravity(int)>
<android.widget.LinearLayout: void <init>(android.content.Context)>
<android.widget.LinearLayout: void setHorizontalGravity(int)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout: void setVerticalGravity(int)>
<android.widget.LinearLayout: void setWeightSum(float)>
<java.nio.channels.AsynchronousCloseException: void <init>()>
<java.sql.Connection: void rollback()>
<java.sql.Connection: void clearWarnings()>
<java.sql.Connection: void setAutoCommit(boolean)>
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)>
<java.sql.Connection: java.sql.Statement createStatement()>
<java.sql.Connection: boolean getAutoCommit()>
<java.sql.Connection: java.sql.SQLWarning getWarnings()>
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])>
<java.sql.Connection: boolean isClosed()>
<java.sql.Connection: void setReadOnly(boolean)>
<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>
<java.sql.Connection: java.sql.Savepoint setSavepoint()>
<java.sql.Connection: void close()>
<java.sql.Connection: java.sql.Statement createStatement(int,int,int)>
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])>
<java.sql.Connection: void commit()>
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)>
<java.sql.Connection: java.lang.String nativeSQL(java.lang.String)>
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)>
<java.sql.Connection: void setTransactionIsolation(int)>
<java.sql.Connection: void setHoldability(int)>
<java.sql.Connection: java.util.Map getTypeMap()>
<java.sql.Connection: void setCatalog(java.lang.String)>
<java.sql.Connection: void setTypeMap(java.util.Map)>
<java.sql.Connection: boolean isReadOnly()>
<java.sql.Connection: java.lang.String getCatalog()>
<java.sql.Connection: java.sql.Statement createStatement(int,int)>
<java.sql.Connection: int getHoldability()>
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)>
<java.sql.Connection: void rollback(java.sql.Savepoint)>
<java.sql.Connection: int getTransactionIsolation()>
<java.sql.Connection: void releaseSavepoint(java.sql.Savepoint)>
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)>
<java.sql.Connection: java.sql.Savepoint setSavepoint(java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)>
<org.apache.http.message.HeaderGroup: void clear()>
<org.apache.http.message.HeaderGroup: void <init>()>
<org.apache.http.message.HeaderGroup: boolean containsHeader(java.lang.String)>
<org.apache.http.message.HeaderGroup: void addHeader(org.apache.http.Header)>
<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>
<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)>
<org.apache.http.message.HeaderGroup: void removeHeader(org.apache.http.Header)>
<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator(java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.message.HeaderGroup copy()>
<org.apache.http.message.HeaderGroup: java.lang.Object clone()>
<javax.net.ssl.SSLEngineResult.HandshakeStatus: javax.net.ssl.SSLEngineResult.HandshakeStatus valueOf(java.lang.String)>
<javax.net.ssl.SSLEngineResult.HandshakeStatus: javax.net.ssl.SSLEngineResult.HandshakeStatus[] values()>
<android.app.LauncherActivity: void <init>()>
<android.app.LauncherActivity: android.content.Intent getTargetIntent()>
<android.view.WindowManager: void removeViewImmediate(android.view.View)>
<android.view.WindowManager: android.view.Display getDefaultDisplay()>
<org.apache.http.cookie.ClientCookie: boolean containsAttribute(java.lang.String)>
<org.apache.http.cookie.ClientCookie: java.lang.String getAttribute(java.lang.String)>
<android.net.NetworkInfo.State: android.net.NetworkInfo.State valueOf(java.lang.String)>
<android.net.NetworkInfo.State: android.net.NetworkInfo.State[] values()>
<android.text.method.MetaKeyKeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,int)>
<android.text.method.MetaKeyKeyListener: void resetMetaState(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: void adjustMetaAfterKeypress(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: void resetLockedMeta(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: boolean isMetaTracker(java.lang.CharSequence,java.lang.Object)>
<android.text.method.MetaKeyKeyListener: void <init>()>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence)>
<android.widget.PopupWindow.OnDismissListener: void onDismiss()>
<java.lang.Runnable: void run()>
<android.content.pm.ProviderInfo: int describeContents()>
<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>
<android.content.pm.ProviderInfo: void <init>()>
<org.apache.http.conn.HttpHostConnectException: void <init>(org.apache.http.HttpHost,java.net.ConnectException)>
<org.apache.http.conn.HttpHostConnectException: org.apache.http.HttpHost getHost()>
<android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer: void <init>(int)>
<android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer: java.lang.String sanitize(java.lang.String)>
<org.apache.http.protocol.HttpRequestHandler: void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.view.Window.Callback: void onWindowFocusChanged(boolean)>
<android.view.Window.Callback: android.view.View onCreatePanelView(int)>
<android.view.Window.Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.Window.Callback: void onContentChanged()>
<android.view.Window.Callback: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.view.Window.Callback: void onPanelClosed(int,android.view.Menu)>
<android.view.Window.Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.view.Window.Callback: boolean onSearchRequested()>
<android.view.Window.Callback: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.view.Window.Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.Window.Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.Window.Callback: boolean onMenuOpened(int,android.view.Menu)>
<android.view.Window.Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<java.lang.Short: short parseShort(java.lang.String)>
<java.lang.Short: long longValue()>
<java.lang.Short: float floatValue()>
<java.lang.Short: int compareTo(java.lang.Short)>
<java.lang.Short: double doubleValue()>
<java.lang.Short: java.lang.Short valueOf(java.lang.String)>
<java.lang.Short: java.lang.Short valueOf(short)>
<java.lang.Short: void <init>(short)>
<java.lang.Short: java.lang.Short decode(java.lang.String)>
<java.lang.Short: java.lang.String toString(short)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>
<java.lang.Short: short parseShort(java.lang.String,int)>
<java.lang.Short: void <init>(java.lang.String)>
<java.lang.Short: short reverseBytes(short)>
<java.lang.Short: int intValue()>
<java.util.Locale: java.lang.String[] getISOCountries()>
<java.util.Locale: java.lang.String getLanguage()>
<java.util.Locale: java.lang.String getISO3Country()>
<java.util.Locale: java.lang.Object clone()>
<java.util.Locale: java.util.Locale getDefault()>
<java.util.Locale: void <init>(java.lang.String,java.lang.String)>
<java.util.Locale: java.lang.String getDisplayVariant()>
<java.util.Locale: java.lang.String getDisplayCountry()>
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>
<java.util.Locale: java.lang.String getISO3Language()>
<java.util.Locale: void <init>(java.lang.String)>
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>
<java.util.Locale: java.lang.String[] getISOLanguages()>
<java.util.Locale: void setDefault(java.util.Locale)>
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Locale: java.lang.String toString()>
<java.util.Locale: java.lang.String getCountry()>
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>
<java.util.Locale: java.lang.String getVariant()>
<java.util.Locale: java.util.Locale[] getAvailableLocales()>
<java.util.Locale: java.lang.String getDisplayLanguage()>
<java.util.Locale: java.lang.String getDisplayName()>
<android.content.pm.ActivityInfo: void <init>()>
<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>
<android.content.pm.ActivityInfo: int describeContents()>
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ActivityInfo: int getThemeResource()>
<java.lang.InstantiationException: void <init>()>
<java.lang.InstantiationException: void <init>(java.lang.String)>
<android.content.pm.InstrumentationInfo: void <init>()>
<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>
<android.content.pm.InstrumentationInfo: int describeContents()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)>
<android.webkit.CookieSyncManager: void syncFromRamToFlash()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Button: void <init>(android.content.Context)>
<org.apache.http.entity.ContentProducer: void writeTo(java.io.OutputStream)>
<android.provider.Settings.NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>
<android.provider.Settings.NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.Settings.NameValueTable: void <init>()>
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>
<android.widget.RemoteViews: void <init>(android.os.Parcel)>
<android.widget.RemoteViews: java.lang.String getPackage()>
<android.widget.RemoteViews: int getLayoutId()>
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>
<android.widget.RemoteViews: int describeContents()>
<android.widget.RemoteViews: void setImageViewResource(int,int)>
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>
<android.widget.RemoteViews: void <init>(java.lang.String,int)>
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionGroupInfo: int describeContents()>
<android.content.pm.PermissionGroupInfo: void <init>()>
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()>
<org.apache.http.cookie.CookieOrigin: int getPort()>
<org.apache.http.cookie.CookieOrigin: java.lang.String getPath()>
<org.apache.http.cookie.CookieOrigin: boolean isSecure()>
<org.apache.http.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>
<java.security.SignatureException: void <init>(java.lang.String)>
<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.SignatureException: void <init>()>
<java.security.SignatureException: void <init>(java.lang.Throwable)>
<java.security.cert.X509CertSelector: boolean match(java.security.cert.Certificate)>
<java.security.cert.X509CertSelector: void setAuthorityKeyIdentifier(byte[])>
<java.security.cert.X509CertSelector: java.lang.String getSubjectPublicKeyAlgID()>
<java.security.cert.X509CertSelector: void setIssuer(byte[])>
<java.security.cert.X509CertSelector: java.lang.Object clone()>
<java.security.cert.X509CertSelector: void setIssuer(java.lang.String)>
<java.security.cert.X509CertSelector: byte[] getSubjectAsBytes()>
<java.security.cert.X509CertSelector: void addPathToName(int,java.lang.String)>
<java.security.cert.X509CertSelector: void addPathToName(int,byte[])>
<java.security.cert.X509CertSelector: java.security.PublicKey getSubjectPublicKey()>
<java.security.cert.X509CertSelector: void setSubjectPublicKey(byte[])>
<java.security.cert.X509CertSelector: void setSubjectPublicKeyAlgID(java.lang.String)>
<java.security.cert.X509CertSelector: java.util.Set getExtendedKeyUsage()>
<java.security.cert.X509CertSelector: void setBasicConstraints(int)>
<java.security.cert.X509CertSelector: void setNameConstraints(byte[])>
<java.security.cert.X509CertSelector: java.lang.String getSubjectAsString()>
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>
<java.security.cert.X509CertSelector: byte[] getSubjectKeyIdentifier()>
<java.security.cert.X509CertSelector: java.security.cert.X509Certificate getCertificate()>
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,byte[])>
<java.security.cert.X509CertSelector: java.math.BigInteger getSerialNumber()>
<java.security.cert.X509CertSelector: void setIssuer(javax.security.auth.x500.X500Principal)>
<java.security.cert.X509CertSelector: java.util.Set getPolicy()>
<java.security.cert.X509CertSelector: void setSerialNumber(java.math.BigInteger)>
<java.security.cert.X509CertSelector: boolean getMatchAllSubjectAltNames()>
<java.security.cert.X509CertSelector: void setSubject(byte[])>
<java.security.cert.X509CertSelector: void <init>()>
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,java.lang.String)>
<java.security.cert.X509CertSelector: void setPathToNames(java.util.Collection)>
<java.security.cert.X509CertSelector: void setSubject(javax.security.auth.x500.X500Principal)>
<java.security.cert.X509CertSelector: boolean[] getKeyUsage()>
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getIssuer()>
<java.security.cert.X509CertSelector: void setExtendedKeyUsage(java.util.Set)>
<java.security.cert.X509CertSelector: void setSubjectPublicKey(java.security.PublicKey)>
<java.security.cert.X509CertSelector: java.lang.String getIssuerAsString()>
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getSubject()>
<java.security.cert.X509CertSelector: void setPrivateKeyValid(java.util.Date)>
<java.security.cert.X509CertSelector: java.util.Date getCertificateValid()>
<java.security.cert.X509CertSelector: void setSubjectAlternativeNames(java.util.Collection)>
<java.security.cert.X509CertSelector: java.util.Collection getPathToNames()>
<java.security.cert.X509CertSelector: byte[] getNameConstraints()>
<java.security.cert.X509CertSelector: void setSubjectKeyIdentifier(byte[])>
<java.security.cert.X509CertSelector: byte[] getIssuerAsBytes()>
<java.security.cert.X509CertSelector: void setMatchAllSubjectAltNames(boolean)>
<java.security.cert.X509CertSelector: void setCertificateValid(java.util.Date)>
<java.security.cert.X509CertSelector: java.util.Collection getSubjectAlternativeNames()>
<java.security.cert.X509CertSelector: byte[] getAuthorityKeyIdentifier()>
<java.security.cert.X509CertSelector: int getBasicConstraints()>
<java.security.cert.X509CertSelector: void setSubject(java.lang.String)>
<java.security.cert.X509CertSelector: void setKeyUsage(boolean[])>
<java.security.cert.X509CertSelector: void setPolicy(java.util.Set)>
<java.security.cert.X509CertSelector: java.util.Date getPrivateKeyValid()>
<java.util.UUID: void <init>(long,long)>
<java.util.UUID: int clockSequence()>
<java.util.UUID: int compareTo(java.util.UUID)>
<java.util.UUID: long getMostSignificantBits()>
<java.util.UUID: long getLeastSignificantBits()>
<java.util.UUID: java.util.UUID randomUUID()>
<java.util.UUID: int version()>
<java.util.UUID: java.util.UUID fromString(java.lang.String)>
<java.util.UUID: long timestamp()>
<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])>
<java.util.UUID: long node()>
<java.util.UUID: int variant()>
<android.preference.PreferenceGroup: void dispatchSaveInstanceState(android.os.Bundle)>
<android.preference.PreferenceGroup: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)>
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)>
<android.preference.PreferenceGroup: boolean removePreference(android.preference.Preference)>
<android.preference.PreferenceGroup: boolean onPrepareAddPreference(android.preference.Preference)>
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)>
<android.preference.PreferenceGroup: boolean isOnSameScreenAsChildren()>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.PreferenceGroup: void dispatchRestoreInstanceState(android.os.Bundle)>
<android.preference.PreferenceGroup: int getPreferenceCount()>
<android.preference.PreferenceGroup: boolean isOrderingAsAdded()>
<android.preference.PreferenceGroup: void removeAll()>
<android.preference.PreferenceGroup: void addItemFromInflater(android.preference.Preference)>
<android.widget.AbsoluteLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.AbsoluteLayout.LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.AbsoluteLayout.LayoutParams: void <init>(int,int,int,int)>
<android.widget.AbsoluteLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.database.CursorJoiner.Result: android.database.CursorJoiner.Result valueOf(java.lang.String)>
<android.database.CursorJoiner.Result: android.database.CursorJoiner.Result[] values()>
<org.apache.http.protocol.BasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.BasicHttpContext: java.lang.Object removeAttribute(java.lang.String)>
<org.apache.http.protocol.BasicHttpContext: void <init>()>
<org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)>
<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<android.view.animation.LinearInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LinearInterpolator: void <init>()>
<android.view.animation.LinearInterpolator: float getInterpolation(float)>
<org.apache.http.entity.BasicHttpEntity: void setContentLength(long)>
<org.apache.http.entity.BasicHttpEntity: void <init>()>
<org.apache.http.entity.BasicHttpEntity: boolean isRepeatable()>
<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>
<org.apache.http.entity.BasicHttpEntity: boolean isStreaming()>
<org.apache.http.entity.BasicHttpEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.BasicHttpEntity: long getContentLength()>
<org.apache.http.entity.BasicHttpEntity: void setContent(java.io.InputStream)>
<java.sql.CallableStatement: java.lang.Object getObject(int,java.util.Map)>
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object,int)>
<java.sql.CallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)>
<java.sql.CallableStatement: java.sql.Array getArray(java.lang.String)>
<java.sql.CallableStatement: void setNull(java.lang.String,int)>
<java.sql.CallableStatement: void registerOutParameter(int,int,java.lang.String)>
<java.sql.CallableStatement: void setLong(java.lang.String,long)>
<java.sql.CallableStatement: java.lang.String getString(int)>
<java.sql.CallableStatement: void registerOutParameter(int,int)>
<java.sql.CallableStatement: java.math.BigDecimal getBigDecimal(int)>
<java.sql.CallableStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)>
<java.sql.CallableStatement: boolean getBoolean(int)>
<java.sql.CallableStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)>
<java.sql.CallableStatement: java.sql.Time getTime(int,java.util.Calendar)>
<java.sql.CallableStatement: long getLong(java.lang.String)>
<java.sql.CallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)>
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)>
<java.sql.CallableStatement: void setByte(java.lang.String,byte)>
<java.sql.CallableStatement: void setURL(java.lang.String,java.net.URL)>
<java.sql.CallableStatement: long getLong(int)>
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object,int,int)>
<java.sql.CallableStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)>
<java.sql.CallableStatement: java.sql.Array getArray(int)>
<java.sql.CallableStatement: double getDouble(int)>
<java.sql.CallableStatement: void setShort(java.lang.String,short)>
<java.sql.CallableStatement: java.sql.Date getDate(java.lang.String)>
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int)>
<java.sql.CallableStatement: byte[] getBytes(java.lang.String)>
<java.sql.CallableStatement: void setBytes(java.lang.String,byte[])>
<java.sql.CallableStatement: java.sql.Time getTime(int)>
<java.sql.CallableStatement: java.net.URL getURL(java.lang.String)>
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object)>
<java.sql.CallableStatement: void setDouble(java.lang.String,double)>
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(int)>
<java.sql.CallableStatement: void setTime(java.lang.String,java.sql.Time)>
<java.sql.CallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)>
<java.sql.CallableStatement: boolean getBoolean(java.lang.String)>
<java.sql.CallableStatement: byte getByte(java.lang.String)>
<java.sql.CallableStatement: short getShort(int)>
<java.sql.CallableStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)>
<java.sql.CallableStatement: boolean wasNull()>
<java.sql.CallableStatement: java.sql.Blob getBlob(java.lang.String)>
<java.sql.CallableStatement: java.lang.Object getObject(int)>
<java.sql.CallableStatement: int getInt(int)>
<java.sql.CallableStatement: java.sql.Time getTime(java.lang.String)>
<java.sql.CallableStatement: int getInt(java.lang.String)>
<java.sql.CallableStatement: void registerOutParameter(int,int,int)>
<java.sql.CallableStatement: void setString(java.lang.String,java.lang.String)>
<java.sql.CallableStatement: java.sql.Ref getRef(java.lang.String)>
<java.sql.CallableStatement: java.sql.Blob getBlob(int)>
<java.sql.CallableStatement: java.sql.Clob getClob(java.lang.String)>
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int,int)>
<java.sql.CallableStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)>
<java.sql.CallableStatement: float getFloat(java.lang.String)>
<java.sql.CallableStatement: byte getByte(int)>
<java.sql.CallableStatement: java.sql.Ref getRef(int)>
<java.sql.CallableStatement: void setDate(java.lang.String,java.sql.Date)>
<java.sql.CallableStatement: java.lang.String getString(java.lang.String)>
<java.sql.CallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)>
<java.sql.CallableStatement: java.math.BigDecimal getBigDecimal(java.lang.String)>
<java.sql.CallableStatement: void setInt(java.lang.String,int)>
<java.sql.CallableStatement: byte[] getBytes(int)>
<java.sql.CallableStatement: void setNull(java.lang.String,int,java.lang.String)>
<java.sql.CallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)>
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)>
<java.sql.CallableStatement: java.lang.Object getObject(java.lang.String)>
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)>
<java.sql.CallableStatement: void setBoolean(java.lang.String,boolean)>
<java.sql.CallableStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)>
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(java.lang.String)>
<java.sql.CallableStatement: float getFloat(int)>
<java.sql.CallableStatement: void setFloat(java.lang.String,float)>
<java.sql.CallableStatement: java.sql.Date getDate(int)>
<java.sql.CallableStatement: short getShort(java.lang.String)>
<java.sql.CallableStatement: double getDouble(java.lang.String)>
<java.sql.CallableStatement: java.net.URL getURL(int)>
<java.sql.CallableStatement: java.sql.Date getDate(int,java.util.Calendar)>
<java.sql.CallableStatement: java.math.BigDecimal getBigDecimal(int,int)>
<java.sql.CallableStatement: java.sql.Clob getClob(int)>
<org.apache.http.client.CircularRedirectException: void <init>()>
<org.apache.http.client.CircularRedirectException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.client.CircularRedirectException: void <init>(java.lang.String)>
<java.util.concurrent.atomic.AtomicLongArray: long addAndGet(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>
<java.util.concurrent.atomic.AtomicLongArray: int length()>
<java.util.concurrent.atomic.AtomicLongArray: long getAndAdd(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: void set(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndIncrement(int)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndSet(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: boolean weakCompareAndSet(int,long,long)>
<java.util.concurrent.atomic.AtomicLongArray: long incrementAndGet(int)>
<java.util.concurrent.atomic.AtomicLongArray: long get(int)>
<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>
<java.util.concurrent.atomic.AtomicLongArray: void <init>(long[])>
<java.util.concurrent.atomic.AtomicLongArray: long decrementAndGet(int)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndDecrement(int)>
<android.test.IsolatedContext: void <init>(android.content.ContentResolver,android.content.Context)>
<android.test.IsolatedContext: java.util.List getAndClearBroadcastIntents()>
<java.security.interfaces.DSAKeyPairGenerator: void initialize(java.security.interfaces.DSAParams,java.security.SecureRandom)>
<java.security.interfaces.DSAKeyPairGenerator: void initialize(int,boolean,java.security.SecureRandom)>
<java.util.HashSet: void <init>()>
<java.util.HashSet: int size()>
<java.util.HashSet: java.lang.Object clone()>
<java.util.HashSet: void <init>(int,float)>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>(int)>
<org.apache.http.HttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)>
<org.apache.http.HttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)>
<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>
<javax.crypto.NoSuchPaddingException: void <init>()>
<dalvik.system.TemporaryDirectory: void setUpDirectory(java.lang.String)>
<dalvik.system.TemporaryDirectory: void <init>()>
<dalvik.system.TemporaryDirectory: void setUpDirectory(java.io.File)>
<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>
<org.w3c.dom.Node: java.lang.String getNodeValue()>
<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>
<org.w3c.dom.Node: boolean hasChildNodes()>
<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>
<org.w3c.dom.Node: java.lang.String getNamespaceURI()>
<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>
<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>
<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>
<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>
<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>
<org.w3c.dom.Node: boolean hasAttributes()>
<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>
<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>
<org.w3c.dom.Node: boolean isSupported(java.lang.String,java.lang.String)>
<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>
<org.w3c.dom.Node: java.lang.String getPrefix()>
<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>
<org.w3c.dom.Node: java.lang.String getNodeName()>
<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>
<org.w3c.dom.Node: void normalize()>
<org.w3c.dom.Node: void setNodeValue(java.lang.String)>
<org.w3c.dom.Node: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>
<org.w3c.dom.Node: short getNodeType()>
<org.w3c.dom.Node: java.lang.String getLocalName()>
<org.w3c.dom.Node: void setPrefix(java.lang.String)>
<java.io.OutputStreamWriter: void flush()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<java.io.OutputStreamWriter: java.lang.String getEncoding()>
<java.io.OutputStreamWriter: void close()>
<java.io.OutputStreamWriter: void write(char[],int,int)>
<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>
<java.security.spec.InvalidParameterSpecException: void <init>(java.lang.String)>
<java.security.spec.InvalidParameterSpecException: void <init>()>
<org.apache.http.auth.AuthScheme: boolean isComplete()>
<org.apache.http.auth.AuthScheme: boolean isConnectionBased()>
<org.apache.http.auth.AuthScheme: java.lang.String getRealm()>
<org.apache.http.auth.AuthScheme: java.lang.String getParameter(java.lang.String)>
<org.apache.http.auth.AuthScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>
<org.apache.http.auth.AuthScheme: void processChallenge(org.apache.http.Header)>
<java.util.concurrent.ExecutorService: void shutdown()>
<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorService: T invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,T)>
<java.util.concurrent.ExecutorService: boolean isShutdown()>
<java.util.concurrent.ExecutorService: T invokeAny(java.util.Collection)>
<java.util.concurrent.ExecutorService: boolean isTerminated()>
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,int)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,int,int)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int)>
<android.widget.ResourceCursorTreeAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.ResourceCursorTreeAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<org.xml.sax.InputSource: void <init>(java.lang.String)>
<org.xml.sax.InputSource: java.lang.String getEncoding()>
<org.xml.sax.InputSource: void setCharacterStream(java.io.Reader)>
<org.xml.sax.InputSource: java.io.InputStream getByteStream()>
<org.xml.sax.InputSource: java.lang.String getSystemId()>
<org.xml.sax.InputSource: void setByteStream(java.io.InputStream)>
<org.xml.sax.InputSource: void setSystemId(java.lang.String)>
<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>
<org.xml.sax.InputSource: void setEncoding(java.lang.String)>
<org.xml.sax.InputSource: void <init>(java.io.InputStream)>
<org.xml.sax.InputSource: void <init>(java.io.Reader)>
<org.xml.sax.InputSource: void setPublicId(java.lang.String)>
<org.xml.sax.InputSource: void <init>()>
<org.xml.sax.InputSource: java.lang.String getPublicId()>
<android.text.Html.ImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)>
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.lang.String)>
<java.text.RuleBasedCollator: int hashCode()>
<java.text.RuleBasedCollator: java.lang.String getRules()>
<java.text.RuleBasedCollator: void <init>(java.lang.String)>
<java.text.RuleBasedCollator: java.text.CollationKey getCollationKey(java.lang.String)>
<java.text.RuleBasedCollator: int compare(java.lang.String,java.lang.String)>
<java.io.SequenceInputStream: int read()>
<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>
<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
<java.util.concurrent.Semaphore: int drainPermits()>
<java.util.concurrent.Semaphore: boolean isFair()>
<java.util.concurrent.Semaphore: boolean tryAcquire()>
<java.util.concurrent.Semaphore: void acquire()>
<java.util.concurrent.Semaphore: boolean tryAcquire(int)>
<java.util.concurrent.Semaphore: void acquireUninterruptibly(int)>
<java.util.concurrent.Semaphore: int getQueueLength()>
<java.util.concurrent.Semaphore: void <init>(int,boolean)>
<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Semaphore: void reducePermits(int)>
<java.util.concurrent.Semaphore: java.util.Collection getQueuedThreads()>
<java.util.concurrent.Semaphore: void acquireUninterruptibly()>
<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>
<java.util.concurrent.Semaphore: void release(int)>
<java.util.concurrent.Semaphore: void release()>
<java.util.concurrent.Semaphore: int availablePermits()>
<java.util.concurrent.Semaphore: void acquire(int)>
<java.util.concurrent.Semaphore: void <init>(int)>
<org.apache.http.impl.io.HttpTransportMetricsImpl: void reset()>
<org.apache.http.impl.io.HttpTransportMetricsImpl: void setBytesTransferred(long)>
<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>
<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>
<org.apache.http.impl.io.HttpTransportMetricsImpl: long getBytesTransferred()>
<org.apache.http.impl.auth.DigestSchemeFactory: org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams)>
<org.apache.http.impl.auth.DigestSchemeFactory: void <init>()>
<javax.security.auth.Subject: java.util.Set getPrincipals()>
<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)>
<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>
<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)>
<javax.security.auth.Subject: java.util.Set getPrivateCredentials()>
<javax.security.auth.Subject: java.util.Set getPublicCredentials()>
<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)>
<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedAction)>
<javax.security.auth.Subject: void setReadOnly()>
<javax.security.auth.Subject: void <init>()>
<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>
<javax.security.auth.Subject: javax.security.auth.Subject getSubject(java.security.AccessControlContext)>
<javax.security.auth.Subject: boolean isReadOnly()>
<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)>
<java.security.cert.CollectionCertStoreParameters: java.util.Collection getCollection()>
<java.security.cert.CollectionCertStoreParameters: void <init>()>
<java.security.cert.CollectionCertStoreParameters: java.lang.Object clone()>
<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>
<java.text.StringCharacterIterator: int getBeginIndex()>
<java.text.StringCharacterIterator: char setIndex(int)>
<java.text.StringCharacterIterator: char first()>
<java.text.StringCharacterIterator: char previous()>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int,int,int)>
<java.text.StringCharacterIterator: int getEndIndex()>
<java.text.StringCharacterIterator: char last()>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int)>
<java.text.StringCharacterIterator: char current()>
<java.text.StringCharacterIterator: char next()>
<java.text.StringCharacterIterator: java.lang.Object clone()>
<java.text.StringCharacterIterator: void <init>(java.lang.String)>
<java.text.StringCharacterIterator: void setText(java.lang.String)>
<java.text.StringCharacterIterator: int getIndex()>
<org.xml.sax.Parser: void parse(org.xml.sax.InputSource)>
<org.xml.sax.Parser: void setDocumentHandler(org.xml.sax.DocumentHandler)>
<org.xml.sax.Parser: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xml.sax.Parser: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.Parser: void parse(java.lang.String)>
<org.xml.sax.Parser: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.Parser: void setLocale(java.util.Locale)>
<android.os.CountDownTimer: void onTick(long)>
<android.os.CountDownTimer: void onFinish()>
<android.os.CountDownTimer: android.os.CountDownTimer start()>
<android.os.CountDownTimer: void cancel()>
<android.os.CountDownTimer: void <init>(long,long)>
<org.xml.sax.ext.DeclHandler: void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DeclHandler: void elementDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DeclHandler: void internalEntityDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DeclHandler: void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)>
<android.app.Instrumentation.ActivityResult: android.content.Intent getResultData()>
<android.app.Instrumentation.ActivityResult: int getResultCode()>
<android.app.Instrumentation.ActivityResult: void <init>(int,android.content.Intent)>
<android.text.method.DateKeyListener: char[] getAcceptedChars()>
<android.text.method.DateKeyListener: void <init>()>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()>
<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()>
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>
<android.content.pm.ServiceInfo: void <init>()>
<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>
<android.content.pm.ServiceInfo: int describeContents()>
<java.util.logging.ConsoleHandler: void <init>()>
<java.io.FileReader: void <init>(java.io.File)>
<java.io.FileReader: void <init>(java.io.FileDescriptor)>
<java.io.FileReader: void <init>(java.lang.String)>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)>
<java.sql.DriverManager: void registerDriver(java.sql.Driver)>
<java.sql.DriverManager: java.sql.Driver getDriver(java.lang.String)>
<java.sql.DriverManager: java.io.PrintStream getLogStream()>
<java.sql.DriverManager: void setLogStream(java.io.PrintStream)>
<java.sql.DriverManager: void setLoginTimeout(int)>
<java.sql.DriverManager: int getLoginTimeout()>
<java.sql.DriverManager: void setLogWriter(java.io.PrintWriter)>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DriverManager: void println(java.lang.String)>
<java.sql.DriverManager: java.util.Enumeration getDrivers()>
<java.sql.DriverManager: java.io.PrintWriter getLogWriter()>
<java.sql.DriverManager: void deregisterDriver(java.sql.Driver)>
<org.json.JSONArray: org.json.JSONArray optJSONArray(int)>
<org.json.JSONArray: java.lang.Object opt(int)>
<org.json.JSONArray: java.lang.String getString(int)>
<org.json.JSONArray: java.lang.String optString(int)>
<org.json.JSONArray: org.json.JSONArray put(int)>
<org.json.JSONArray: double getDouble(int)>
<org.json.JSONArray: boolean optBoolean(int)>
<org.json.JSONArray: java.lang.String optString(int,java.lang.String)>
<org.json.JSONArray: long optLong(int,long)>
<org.json.JSONArray: org.json.JSONArray put(long)>
<org.json.JSONArray: boolean isNull(int)>
<org.json.JSONArray: double optDouble(int)>
<org.json.JSONArray: org.json.JSONArray put(int,long)>
<org.json.JSONArray: void <init>(org.json.JSONTokener)>
<org.json.JSONArray: org.json.JSONArray put(int,boolean)>
<org.json.JSONArray: org.json.JSONArray put(int,double)>
<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>
<org.json.JSONArray: java.lang.String join(java.lang.String)>
<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>
<org.json.JSONArray: org.json.JSONArray put(int,int)>
<org.json.JSONArray: void <init>()>
<org.json.JSONArray: double optDouble(int,double)>
<org.json.JSONArray: org.json.JSONArray put(double)>
<org.json.JSONArray: int optInt(int,int)>
<org.json.JSONArray: boolean optBoolean(int,boolean)>
<org.json.JSONArray: void <init>(java.lang.String)>
<org.json.JSONArray: int length()>
<org.json.JSONArray: int getInt(int)>
<org.json.JSONArray: org.json.JSONArray put(boolean)>
<org.json.JSONArray: org.json.JSONObject optJSONObject(int)>
<org.json.JSONArray: boolean getBoolean(int)>
<org.json.JSONArray: long getLong(int)>
<org.json.JSONArray: long optLong(int)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<org.json.JSONArray: java.lang.Object get(int)>
<org.json.JSONArray: int optInt(int)>
<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>
<org.json.JSONArray: java.lang.String toString(int)>
<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>
<android.R.anim: void <init>()>
<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.ViewManager: void removeView(android.view.View)>
<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup.LayoutParams)>
<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy valueOf(java.lang.String)>
<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy[] values()>
<javax.crypto.ExemptionMechanismSpi: byte[] engineGenExemptionBlob()>
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.ExemptionMechanismSpi: void <init>()>
<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)>
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.AlgorithmParameters)>
<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)>
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key)>
<java.nio.charset.spi.CharsetProvider: void <init>()>
<java.nio.charset.spi.CharsetProvider: java.nio.charset.Charset charsetForName(java.lang.String)>
<java.nio.charset.spi.CharsetProvider: java.util.Iterator charsets()>
<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef: org.apache.http.conn.routing.HttpRoute getRoute()>
<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef: void <init>(org.apache.http.impl.conn.tsccm.BasicPoolEntry,java.lang.ref.ReferenceQueue)>
<android.widget.ImageView: void clearColorFilter()>
<android.widget.ImageView: void setImageURI(android.net.Uri)>
<android.widget.ImageView: int[] onCreateDrawableState(int)>
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageState(int[],boolean)>
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff.Mode)>
<android.widget.ImageView: void setImageLevel(int)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageView: void setAlpha(int)>
<android.widget.ImageView: boolean setFrame(int,int,int,int)>
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>
<android.widget.ImageView: void setScaleType(android.widget.ImageView.ScaleType)>
<android.widget.ImageView: void setMaxWidth(int)>
<android.widget.ImageView: void setImageResource(int)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageView: android.widget.ImageView.ScaleType getScaleType()>
<android.widget.ImageView: void <init>(android.content.Context)>
<android.widget.ImageView: void setAdjustViewBounds(boolean)>
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)>
<android.widget.ImageView: void setMaxHeight(int)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RadioButton: void <init>(android.content.Context)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.FaceDetector: void <init>(int,int,int)>
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,android.media.FaceDetector.Face[])>
<java.nio.channels.NotYetBoundException: void <init>()>
<java.security.cert.CertificateExpiredException: void <init>()>
<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>
<android.webkit.WebView.HitTestResult: java.lang.String getExtra()>
<android.webkit.WebView.HitTestResult: int getType()>
<java.security.SecureRandom: void <init>(byte[])>
<java.security.SecureRandom: byte[] getSeed(int)>
<java.security.SecureRandom: byte[] generateSeed(int)>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>
<java.security.SecureRandom: java.lang.String getAlgorithm()>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>
<java.security.SecureRandom: void <init>()>
<java.security.SecureRandom: java.security.Provider getProvider()>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>
<java.security.SecureRandom: int next(int)>
<java.security.SecureRandom: void setSeed(byte[])>
<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider)>
<android.Manifest: void <init>()>
<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>
<org.apache.http.RequestLine: java.lang.String getUri()>
<org.apache.http.RequestLine: java.lang.String getMethod()>
<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<android.widget.ExpandableListView.OnGroupClickListener: boolean onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)>
<org.apache.http.impl.cookie.NetscapeDraftSpecFactory: void <init>()>
<org.apache.http.impl.cookie.NetscapeDraftSpecFactory: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>
<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>
<java.io.PrintWriter: void close()>
<java.io.PrintWriter: void print(double)>
<java.io.PrintWriter: void println()>
<java.io.PrintWriter: void <init>(java.io.OutputStream)>
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void println(java.lang.Object)>
<java.io.PrintWriter: void print(long)>
<java.io.PrintWriter: void println(java.lang.String)>
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<java.io.PrintWriter: void print(int)>
<java.io.PrintWriter: void print(boolean)>
<java.io.PrintWriter: void print(java.lang.Object)>
<java.io.PrintWriter: boolean checkError()>
<java.io.PrintWriter: void println(long)>
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintWriter: void flush()>
<java.io.PrintWriter: void print(char[])>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void println(boolean)>
<java.io.PrintWriter: void <init>(java.lang.String)>
<java.io.PrintWriter: void print(float)>
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void println(float)>
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void println(char)>
<java.io.PrintWriter: void println(double)>
<java.io.PrintWriter: void println(int)>
<java.io.PrintWriter: void <init>(java.io.File)>
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>
<java.io.PrintWriter: void setError()>
<java.io.PrintWriter: void write(char[],int,int)>
<java.io.PrintWriter: void println(char[])>
<java.io.PrintWriter: void print(char)>
<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>
<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>
<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)>
<java.security.KeyPairGenerator: java.lang.String getAlgorithm()>
<java.security.KeyPairGenerator: void <init>(java.lang.String)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>
<java.security.KeyPairGenerator: void initialize(int)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>
<java.security.KeyPairGenerator: java.security.Provider getProvider()>
<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>
<org.apache.http.conn.ClientConnectionManager: void closeExpiredConnections()>
<org.apache.http.conn.ClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)>
<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>
<org.apache.http.conn.ClientConnectionManager: void shutdown()>
<org.apache.http.conn.ClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>
<java.io.ObjectInputValidation: void validateObject()>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>
<android.location.Geocoder: void <init>(android.content.Context)>
<android.location.Geocoder: void <init>(android.content.Context,java.util.Locale)>
<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<android.hardware.Camera.PreviewCallback: void onPreviewFrame(byte[],android.hardware.Camera)>
<android.view.Surface.OutOfResourcesException: void <init>()>
<android.view.Surface.OutOfResourcesException: void <init>(java.lang.String)>
<javax.net.ssl.SSLException: void <init>(java.lang.String)>
<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>
<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>
<java.nio.channels.UnresolvedAddressException: void <init>()>
<android.content.DialogInterface.OnDismissListener: void onDismiss(android.content.DialogInterface)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html.ImageGetter,android.text.Html.TagHandler)>
<android.text.Html: java.lang.String toHtml(android.text.Spanned)>
<java.security.Guard: void checkGuard(java.lang.Object)>
<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<java.util.Dictionary: V put(K,V)>
<java.util.Dictionary: V get(java.lang.Object)>
<java.util.Dictionary: V remove(java.lang.Object)>
<java.util.Dictionary: void <init>()>
<java.util.Dictionary: boolean isEmpty()>
<java.util.Dictionary: int size()>
<java.util.Dictionary: java.util.Enumeration keys()>
<java.util.Dictionary: java.util.Enumeration elements()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
<java.lang.Throwable: void <init>(java.lang.Throwable)>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.Throwable: void printStackTrace()>
<java.lang.Throwable: void <init>(java.lang.String)>
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Throwable: void <init>()>
<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.LayerDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>
<android.graphics.drawable.LayerDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<android.graphics.drawable.LayerDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.LayerDrawable: void setId(int,int)>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: int getOpacity()>
<android.graphics.drawable.LayerDrawable: void setAlpha(int)>
<android.view.MenuItem.OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
<android.widget.MediaController: void hide()>
<android.widget.MediaController: void show()>
<android.widget.MediaController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.MediaController: void show(int)>
<android.widget.MediaController: void onFinishInflate()>
<android.widget.MediaController: void setPrevNextListeners(android.view.View.OnClickListener,android.view.View.OnClickListener)>
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController.MediaPlayerControl)>
<android.widget.MediaController: void <init>(android.content.Context,boolean)>
<android.widget.MediaController: void <init>(android.content.Context)>
<android.widget.MediaController: void setAnchorView(android.view.View)>
<android.widget.MediaController: boolean isShowing()>
<android.graphics.Path.FillType: android.graphics.Path.FillType[] values()>
<android.graphics.Path.FillType: android.graphics.Path.FillType valueOf(java.lang.String)>
<android.widget.ExpandableListView.OnGroupCollapseListener: void onGroupCollapse(int)>
<android.widget.RadioGroup: int getCheckedRadioButtonId()>
<android.widget.RadioGroup: void clearCheck()>
<android.widget.RadioGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup: void <init>(android.content.Context)>
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener)>
<android.widget.RadioGroup: void check(int)>
<java.io.InterruptedIOException: void <init>()>
<java.io.InterruptedIOException: void <init>(java.lang.String)>
<android.net.LocalSocket: void <init>()>
<android.net.LocalSocket: void shutdownOutput()>
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
<android.net.LocalSocket: java.io.InputStream getInputStream()>
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>
<android.net.LocalSocket: void bind(android.net.LocalSocketAddress)>
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.net.LocalSocket: void shutdownInput()>
<android.net.LocalSocket: boolean isInputShutdown()>
<android.net.LocalSocket: int getSendBufferSize()>
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<android.net.LocalSocket: boolean isBound()>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress,int)>
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>
<android.net.LocalSocket: void close()>
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>
<android.net.LocalSocket: boolean isOutputShutdown()>
<android.net.LocalSocket: boolean isConnected()>
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.LocalSocket: void setReceiveBufferSize(int)>
<android.net.LocalSocket: int getReceiveBufferSize()>
<android.net.LocalSocket: void setSendBufferSize(int)>
<android.net.LocalSocket: int getSoTimeout()>
<android.net.LocalSocket: void setSoTimeout(int)>
<android.net.LocalSocket: boolean isClosed()>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SeekBar: void <init>(android.content.Context)>
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.net.SocketException: void <init>(java.lang.String)>
<java.net.SocketException: void <init>()>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RatingBar: void setStepSize(float)>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RatingBar: int getNumStars()>
<android.widget.RatingBar: void setRating(float)>
<android.widget.RatingBar: float getRating()>
<android.widget.RatingBar: void setNumStars(int)>
<android.widget.RatingBar: void setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener)>
<android.widget.RatingBar: boolean isIndicator()>
<android.widget.RatingBar: float getStepSize()>
<android.widget.RatingBar: android.widget.RatingBar.OnRatingBarChangeListener getOnRatingBarChangeListener()>
<android.widget.RatingBar: void <init>(android.content.Context)>
<android.widget.RatingBar: void setIsIndicator(boolean)>
<java.io.ObjectOutputStream: void <init>()>
<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)>
<java.io.ObjectOutputStream: void drain()>
<java.io.ObjectOutputStream: void writeChar(int)>
<java.io.ObjectOutputStream: void writeLong(long)>
<java.io.ObjectOutputStream: void writeChars(java.lang.String)>
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)>
<java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeFloat(float)>
<java.io.ObjectOutputStream: void writeShort(int)>
<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>
<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>
<java.io.ObjectOutputStream: java.io.ObjectOutputStream.PutField putFields()>
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>
<java.io.ObjectOutputStream: void writeByte(int)>
<java.io.ObjectOutputStream: void writeBoolean(boolean)>
<java.io.ObjectOutputStream: void writeInt(int)>
<java.io.ObjectOutputStream: void reset()>
<java.io.ObjectOutputStream: void useProtocolVersion(int)>
<java.io.ObjectOutputStream: void writeStreamHeader()>
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>
<java.io.ObjectOutputStream: void writeDouble(double)>
<java.io.ObjectOutputStream: void write(int)>
<java.io.ObjectOutputStream: void writeFields()>
<java.io.ObjectOutputStream: void defaultWriteObject()>
<android.content.res.Resources.Theme: void dump(int,java.lang.String,java.lang.String)>
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.res.Resources.Theme: void applyStyle(int,boolean)>
<android.content.res.Resources.Theme: void setTo(android.content.res.Resources.Theme)>
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.res.Resources.Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<org.apache.http.protocol.HTTP: boolean isWhitespace(char)>
<java.text.CollationElementIterator: int previous()>
<java.text.CollationElementIterator: void setText(java.text.CharacterIterator)>
<java.text.CollationElementIterator: void reset()>
<java.text.CollationElementIterator: void setOffset(int)>
<java.text.CollationElementIterator: short secondaryOrder(int)>
<java.text.CollationElementIterator: int getMaxExpansion(int)>
<java.text.CollationElementIterator: void setText(java.lang.String)>
<java.text.CollationElementIterator: int next()>
<java.text.CollationElementIterator: short tertiaryOrder(int)>
<java.text.CollationElementIterator: int primaryOrder(int)>
<java.text.CollationElementIterator: int getOffset()>
<java.util.prefs.PreferenceChangeEvent: java.lang.String getKey()>
<java.util.prefs.PreferenceChangeEvent: void <init>(java.util.prefs.Preferences,java.lang.String,java.lang.String)>
<java.util.prefs.PreferenceChangeEvent: java.lang.String getNewValue()>
<java.util.prefs.PreferenceChangeEvent: java.util.prefs.Preferences getNode()>
<android.provider.CallLog: void <init>()>
<android.graphics.PathDashPathEffect: void <init>(android.graphics.Path,float,float,android.graphics.PathDashPathEffect.Style)>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>
<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils.TruncateAt)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>
<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>
<android.text.TextUtils: boolean isGraphic(char)>
<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence...)>
<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>
<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils.TruncateAt,boolean,android.text.TextUtils.EllipsizeCallback)>
<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>
<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>
<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>
<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence...)>
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>
<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>
<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>
<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>
<java.util.FormatterClosedException: void <init>()>
<junit.framework.AssertionFailedError: void <init>(java.lang.String)>
<junit.framework.AssertionFailedError: void <init>()>
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>
<java.security.spec.ECParameterSpec: int getCofactor()>
<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>
<android.test.ActivityTestCase: void setActivity(android.app.Activity)>
<android.test.ActivityTestCase: void <init>()>
<android.test.ActivityTestCase: android.app.Activity getActivity()>
<android.test.ActivityTestCase: void scrubClass(java.lang.Class)>
<java.net.ProtocolException: void <init>(java.lang.String)>
<java.net.ProtocolException: void <init>()>
<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff.Mode)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: int indexOfKey(int)>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.util.SparseBooleanArray: void <init>(int)>
<android.util.SparseBooleanArray: void <init>()>
<android.util.SparseBooleanArray: int size()>
<android.util.SparseBooleanArray: void delete(int)>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.util.SparseBooleanArray: void clear()>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.util.SparseBooleanArray: void append(int,boolean)>
<android.provider.Contacts.Intents: void <init>()>
<android.content.res.Configuration: int describeContents()>
<android.content.res.Configuration: void setToDefaults()>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.content.res.Configuration: void <init>(android.content.res.Configuration)>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: void <init>()>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<android.content.res.Configuration: boolean needNewResources(int,int)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<org.apache.http.impl.cookie.RFC2109SpecFactory: void <init>()>
<org.apache.http.impl.cookie.RFC2109SpecFactory: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)>
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],java.lang.String)>
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])>
<org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>
<org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)>
<java.lang.ClassFormatError: void <init>(java.lang.String)>
<java.lang.ClassFormatError: void <init>()>
<javax.net.ssl.X509ExtendedKeyManager: void <init>()>
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>
<android.opengl.GLU: void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.opengl.GLU: void <init>()>
<android.opengl.GLU: void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.opengl.GLU: java.lang.String gluErrorString(int)>
<android.opengl.GLU: void gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)>
<android.opengl.GLU: int gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<android.opengl.GLU: int gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<org.apache.http.ProtocolException: void <init>()>
<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.ProtocolException: void <init>(java.lang.String)>
<java.security.cert.CertificateFactory: java.util.Collection generateCRLs(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream,java.lang.String)>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.security.Provider)>
<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>
<java.security.cert.CertificateFactory: java.security.Provider getProvider()>
<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>
<java.security.cert.CertificateFactory: java.util.Iterator getCertPathEncodings()>
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.lang.String getType()>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream)>
<java.util.AbstractList: int lastIndexOf(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>
<java.util.AbstractList: void removeRange(int,int)>
<java.util.AbstractList: E remove(int)>
<java.util.AbstractList: java.util.List subList(int,int)>
<java.util.AbstractList: int indexOf(java.lang.Object)>
<java.util.AbstractList: E set(int,E)>
<java.util.AbstractList: void add(int,E)>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
<java.util.AbstractList: E get(int)>
<java.util.AbstractList: void <init>()>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.concurrent.TimeoutException: void <init>()>
<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>
<org.apache.http.NoHttpResponseException: void <init>(java.lang.String)>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(int,float)>
<java.nio.ByteBuffer: byte get()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>
<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>
<java.nio.ByteBuffer: short getShort()>
<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>
<java.nio.ByteBuffer: java.nio.ByteOrder order()>
<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>
<java.nio.ByteBuffer: int getInt()>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(int,double)>
<java.nio.ByteBuffer: long getLong()>
<java.nio.ByteBuffer: float getFloat()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>
<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>
<java.nio.ByteBuffer: short getShort(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>
<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>
<java.nio.ByteBuffer: char getChar(int)>
<java.nio.ByteBuffer: boolean isDirect()>
<java.nio.ByteBuffer: double getDouble(int)>
<java.nio.ByteBuffer: int arrayOffset()>
<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>
<java.nio.ByteBuffer: int getInt(int)>
<java.nio.ByteBuffer: byte[] array()>
<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<java.nio.ByteBuffer: byte get(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(int,char)>
<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>
<java.nio.ByteBuffer: boolean hasArray()>
<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>
<java.nio.ByteBuffer: long getLong(int)>
<java.nio.ByteBuffer: float getFloat(int)>
<java.nio.ByteBuffer: char getChar()>
<java.nio.ByteBuffer: double getDouble()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>
<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>
<org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String toString()>
<android.view.ViewConfiguration: int getJumpTapTimeout()>
<android.view.ViewConfiguration: int getLongPressTimeout()>
<android.view.ViewConfiguration: void <init>()>
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
<android.view.ViewConfiguration: int getScrollBarSize()>
<android.view.ViewConfiguration: int getFadingEdgeLength()>
<android.view.ViewConfiguration: int getTouchSlop()>
<android.view.ViewConfiguration: int getEdgeSlop()>
<android.view.ViewConfiguration: long getZoomControlsTimeout()>
<android.view.ViewConfiguration: int getWindowTouchSlop()>
<android.view.ViewConfiguration: int getTapTimeout()>
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
<android.view.ViewConfiguration: int getPressedStateDuration()>
<android.view.ViewConfiguration: float getScrollFriction()>
<java.nio.channels.NotYetConnectedException: void <init>()>
<javax.crypto.ExemptionMechanismException: void <init>(java.lang.String)>
<javax.crypto.ExemptionMechanismException: void <init>()>
<java.net.CacheResponse: java.io.InputStream getBody()>
<java.net.CacheResponse: java.util.Map getHeaders()>
<java.net.CacheResponse: void <init>()>
<android.util.AttributeSet: java.lang.String getIdAttribute()>
<android.util.AttributeSet: float getAttributeFloatValue(int,float)>
<android.util.AttributeSet: java.lang.String getAttributeValue(int)>
<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>
<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>
<android.util.AttributeSet: java.lang.String getPositionDescription()>
<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.util.AttributeSet: java.lang.String getAttributeName(int)>
<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>
<android.util.AttributeSet: int getStyleAttribute()>
<android.util.AttributeSet: int getIdAttributeResourceValue(int)>
<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeResourceValue(int,int)>
<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>
<android.util.AttributeSet: java.lang.String getClassAttribute()>
<android.util.AttributeSet: int getAttributeNameResource(int)>
<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>
<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeCount()>
<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.util.AttributeSet: int getAttributeIntValue(int,int)>
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()>
<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()>
<org.apache.http.conn.routing.HttpRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<java.text.ParseException: int getErrorOffset()>
<java.text.ParseException: void <init>(java.lang.String,int)>
<android.provider.MediaStore.Audio.Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Media: void <init>()>
<android.provider.MediaStore.Audio.Media: android.net.Uri getContentUriForPath(java.lang.String)>
<java.util.concurrent.CyclicBarrier: int await()>
<java.util.concurrent.CyclicBarrier: void reset()>
<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>
<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>
<java.util.concurrent.CyclicBarrier: boolean isBroken()>
<java.util.concurrent.CyclicBarrier: int getParties()>
<java.util.concurrent.CyclicBarrier: void <init>(int)>
<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>
<android.text.TextUtils.SimpleStringSplitter: java.lang.String next()>
<android.text.TextUtils.SimpleStringSplitter: java.util.Iterator iterator()>
<android.text.TextUtils.SimpleStringSplitter: void remove()>
<android.text.TextUtils.SimpleStringSplitter: void <init>(char)>
<android.text.TextUtils.SimpleStringSplitter: void setString(java.lang.String)>
<android.text.TextUtils.SimpleStringSplitter: boolean hasNext()>
<android.app.NotificationManager: void notify(int,android.app.Notification)>
<android.app.NotificationManager: void cancelAll()>
<android.app.NotificationManager: void cancel(int)>
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()>
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()>
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()>
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()>
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.HandshakeCompletedEvent: void <init>(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)>
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()>
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()>
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()>
<java.util.logging.Logger: void fine(java.lang.String)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void warning(java.lang.String)>
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)>
<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void config(java.lang.String)>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: boolean getUseParentHandlers()>
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<java.util.logging.Logger: java.lang.String getResourceBundleName()>
<java.util.logging.Logger: java.lang.String getName()>
<java.util.logging.Logger: void log(java.util.logging.LogRecord)>
<java.util.logging.Logger: java.util.logging.Logger getParent()>
<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void finest(java.lang.String)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>
<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void setUseParentHandlers(boolean)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: void setFilter(java.util.logging.Filter)>
<java.util.logging.Logger: java.util.logging.Level getLevel()>
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String)>
<java.util.logging.Logger: java.util.logging.Filter getFilter()>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()>
<java.util.logging.Logger: void throwing(java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void finer(java.lang.String)>
<java.util.logging.Logger: void info(java.lang.String)>
<java.util.logging.Logger: void severe(java.lang.String)>
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
<javax.security.cert.CertificateNotYetValidException: void <init>()>
<javax.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>
<android.widget.AbsSpinner: android.widget.SpinnerAdapter getAdapter()>
<android.widget.AbsSpinner: android.view.View getSelectedView()>
<android.widget.AbsSpinner: void setSelection(int,boolean)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsSpinner: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsSpinner: void <init>(android.content.Context)>
<android.widget.AbsSpinner: void setSelection(int)>
<android.widget.AbsSpinner: int pointToPosition(int,int)>
<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<java.security.DigestOutputStream: void on(boolean)>
<java.security.DigestOutputStream: java.security.MessageDigest getMessageDigest()>
<java.security.DigestOutputStream: void setMessageDigest(java.security.MessageDigest)>
<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>
<java.lang.reflect.MalformedParameterizedTypeException: void <init>()>
<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(android.content.Context)>
<java.security.AccessControlException: void <init>(java.lang.String)>
<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>
<java.security.AccessControlException: java.security.Permission getPermission()>
<org.apache.http.auth.AuthState: boolean isValid()>
<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>
<org.apache.http.auth.AuthState: void setAuthScheme(org.apache.http.auth.AuthScheme)>
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>
<org.apache.http.auth.AuthState: void <init>()>
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScope getAuthScope()>
<org.apache.http.auth.AuthState: void invalidate()>
<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)>
<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>
<org.apache.http.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.auth.AuthenticationException: void <init>()>
<org.apache.http.auth.AuthenticationException: void <init>(java.lang.String)>
<java.security.Certificate: void decode(java.io.InputStream)>
<java.security.Certificate: java.lang.String toString(boolean)>
<java.security.Certificate: java.lang.String getFormat()>
<java.security.Certificate: java.security.Principal getPrincipal()>
<java.security.Certificate: void encode(java.io.OutputStream)>
<java.security.Certificate: java.security.Principal getGuarantor()>
<java.security.Certificate: java.security.PublicKey getPublicKey()>
<android.graphics.Paint.Join: android.graphics.Paint.Join valueOf(java.lang.String)>
<android.graphics.Paint.Join: android.graphics.Paint.Join[] values()>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>
<android.content.Intent: int filterHashCode()>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.content.Intent: int describeContents()>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: java.lang.String getScheme()>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>
<android.content.Intent: android.content.Intent getIntent(java.lang.String)>
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: java.util.Set getCategories()>
<android.content.Intent: boolean hasCategory(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.content.Intent: java.lang.String resolveType(android.content.Context)>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: boolean hasFileDescriptors()>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>
<android.content.Intent: float getFloatExtra(java.lang.String,float)>
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>
<android.content.Intent: java.lang.String toURI()>
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.content.Intent: byte getByteExtra(java.lang.String,byte)>
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>
<android.content.Intent: int fillIn(android.content.Intent,int)>
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.Intent: double getDoubleExtra(java.lang.String,double)>
<android.content.Intent: int getFlags()>
<android.content.Intent: android.os.Bundle getExtras()>
<android.content.Intent: short getShortExtra(java.lang.String,short)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: java.lang.String getDataString()>
<android.content.Intent: java.lang.String getType()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: char getCharExtra(java.lang.String,char)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>
<android.content.Intent: java.lang.Object clone()>
<android.content.Intent: T getParcelableExtra(java.lang.String)>
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: void <init>()>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<android.content.Intent: void removeCategory(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)>
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)>
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)>
<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo.LayerType getLayerType()>
<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>
<org.apache.http.conn.routing.HttpRoute: int getHopCount()>
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost)>
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)>
<org.apache.http.conn.routing.HttpRoute: java.lang.Object clone()>
<org.apache.http.conn.routing.HttpRoute: int hashCode()>
<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()>
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)>
<org.apache.http.conn.routing.HttpRoute: boolean isLayered()>
<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType()>
<org.apache.http.conn.routing.HttpRoute: boolean isSecure()>
<org.apache.http.conn.routing.HttpRoute: boolean isTunnelled()>
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>
<org.apache.http.conn.routing.HttpRoute: java.lang.String toString()>
<java.util.prefs.NodeChangeEvent: java.util.prefs.Preferences getChild()>
<java.util.prefs.NodeChangeEvent: java.util.prefs.Preferences getParent()>
<java.util.prefs.NodeChangeEvent: void <init>(java.util.prefs.Preferences,java.util.prefs.Preferences)>
<java.security.UnrecoverableKeyException: void <init>()>
<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>
<org.xml.sax.Attributes: int getIndex(java.lang.String,java.lang.String)>
<org.xml.sax.Attributes: int getLength()>
<org.xml.sax.Attributes: java.lang.String getValue(int)>
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getType(int)>
<org.xml.sax.Attributes: java.lang.String getType(java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getLocalName(int)>
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getType(java.lang.String,java.lang.String)>
<org.xml.sax.Attributes: int getIndex(java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getURI(int)>
<org.xml.sax.Attributes: java.lang.String getQName(int)>
<org.apache.http.client.HttpRequestRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>
<android.view.ViewGroup.OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>
<android.view.ViewGroup.OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>
<java.awt.font.NumericShaper: boolean isContextual()>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getShaper(int)>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getContextualShaper(int)>
<java.awt.font.NumericShaper: void shape(char[],int,int)>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getContextualShaper(int,int)>
<java.awt.font.NumericShaper: int getRanges()>
<java.awt.font.NumericShaper: void shape(char[],int,int,int)>
<java.net.MalformedURLException: void <init>()>
<java.net.MalformedURLException: void <init>(java.lang.String)>
<org.apache.http.HeaderElement: int getParameterCount()>
<org.apache.http.HeaderElement: java.lang.String getValue()>
<org.apache.http.HeaderElement: java.lang.String getName()>
<org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)>
<org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameter(int)>
<org.apache.http.HeaderElement: org.apache.http.NameValuePair[] getParameters()>
<javax.security.cert.X509Certificate: void <init>()>
<javax.security.cert.X509Certificate: void checkValidity()>
<javax.security.cert.X509Certificate: void checkValidity(java.util.Date)>
<javax.security.cert.X509Certificate: java.security.Principal getIssuerDN()>
<javax.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])>
<javax.security.cert.X509Certificate: java.util.Date getNotAfter()>
<javax.security.cert.X509Certificate: byte[] getSigAlgParams()>
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)>
<javax.security.cert.X509Certificate: java.security.Principal getSubjectDN()>
<javax.security.cert.X509Certificate: java.lang.String getSigAlgName()>
<javax.security.cert.X509Certificate: int getVersion()>
<javax.security.cert.X509Certificate: java.util.Date getNotBefore()>
<javax.security.cert.X509Certificate: java.lang.String getSigAlgOID()>
<org.apache.http.protocol.ResponseDate: void <init>()>
<org.apache.http.protocol.ResponseDate: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean await(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void <init>()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void signal()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void await()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void awaitUninterruptibly()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void signalAll()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean hasWaiters()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: long awaitNanos(long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: java.util.Collection getWaitingThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: int getWaitQueueLength()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean awaitUntil(java.util.Date)>
<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()>
<org.apache.http.conn.params.ConnConnectionParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnConnectionParamBean: void setMaxStatusLineGarbage(int)>
<java.io.FileDescriptor: boolean valid()>
<java.io.FileDescriptor: void <init>()>
<java.io.FileDescriptor: void sync()>
<android.graphics.PorterDuff.Mode: android.graphics.PorterDuff.Mode valueOf(java.lang.String)>
<android.graphics.PorterDuff.Mode: android.graphics.PorterDuff.Mode[] values()>
<org.apache.http.conn.routing.RouteInfo: org.apache.http.HttpHost getProxyHost()>
<org.apache.http.conn.routing.RouteInfo: boolean isTunnelled()>
<org.apache.http.conn.routing.RouteInfo: int getHopCount()>
<org.apache.http.conn.routing.RouteInfo: boolean isSecure()>
<org.apache.http.conn.routing.RouteInfo: org.apache.http.conn.routing.RouteInfo.LayerType getLayerType()>
<org.apache.http.conn.routing.RouteInfo: org.apache.http.HttpHost getHopTarget(int)>
<org.apache.http.conn.routing.RouteInfo: org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType()>
<org.apache.http.conn.routing.RouteInfo: boolean isLayered()>
<org.apache.http.conn.routing.RouteInfo: java.net.InetAddress getLocalAddress()>
<org.apache.http.conn.routing.RouteInfo: org.apache.http.HttpHost getTargetHost()>
<java.security.NoSuchProviderException: void <init>()>
<java.security.NoSuchProviderException: void <init>(java.lang.String)>
<org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.ParserCursor: int getLowerBound()>
<org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.ParserCursor: boolean atEnd()>
<org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.message.ParserCursor: void updatePos(int)>
<android.view.View.OnClickListener: void onClick(android.view.View)>
<org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<java.security.spec.EncodedKeySpec: byte[] getEncoded()>
<java.security.spec.EncodedKeySpec: void <init>(byte[])>
<java.security.spec.EncodedKeySpec: java.lang.String getFormat()>
<android.os.TokenWatcher: void acquired()>
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>
<android.os.TokenWatcher: void released()>
<android.os.TokenWatcher: void release(android.os.IBinder)>
<android.os.TokenWatcher: void dump()>
<android.os.TokenWatcher: void <init>(android.os.Handler,java.lang.String)>
<android.os.TokenWatcher: void cleanup(android.os.IBinder,boolean)>
<android.os.TokenWatcher: boolean isAcquired()>
<dalvik.system.TouchDex: void <init>()>
<dalvik.system.TouchDex: void main(java.lang.String[])>
<dalvik.system.TouchDex: int start(java.lang.String)>
<android.content.DialogInterface.OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>
<android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToInsertHelper(android.database.Cursor,java.lang.String,android.database.DatabaseUtils.InsertHelper,int)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)>
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: void appendValueToSql(java.lang.StringBuilder,java.lang.Object)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)>
<android.database.DatabaseUtils: java.lang.String dumpCursorToString(android.database.Cursor)>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)>
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorDoubleToCursorValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void <init>()>
<android.database.DatabaseUtils: void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor)>
<android.database.DatabaseUtils: void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)>
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<android.database.DatabaseUtils: void writeExceptionToParcel(android.os.Parcel,java.lang.Exception)>
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)>
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor)>
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)>
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.hardware.Camera.PictureCallback: void onPictureTaken(byte[],android.hardware.Camera)>
<org.apache.http.cookie.MalformedCookieException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.cookie.MalformedCookieException: void <init>()>
<org.apache.http.cookie.MalformedCookieException: void <init>(java.lang.String)>
<android.content.pm.IPackageInstallObserver: void packageInstalled(java.lang.String,int)>
<java.security.InvalidParameterException: void <init>(java.lang.String)>
<java.security.InvalidParameterException: void <init>()>
<org.apache.http.params.DefaultedHttpParams: boolean removeParameter(java.lang.String)>
<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>
<org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams getDefaults()>
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>
<android.view.Display: int getWidth()>
<android.view.Display: int getDisplayId()>
<android.view.Display: void getMetrics(android.util.DisplayMetrics)>
<android.view.Display: int getOrientation()>
<android.view.Display: int getPixelFormat()>
<android.view.Display: float getRefreshRate()>
<android.view.Display: int getHeight()>
<android.database.DatabaseUtils.InsertHelper: long insert(android.content.ContentValues)>
<android.database.DatabaseUtils.InsertHelper: long replace(android.content.ContentValues)>
<android.database.DatabaseUtils.InsertHelper: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,float)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,long)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,boolean)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,int)>
<android.database.DatabaseUtils.InsertHelper: long execute()>
<android.database.DatabaseUtils.InsertHelper: void bindNull(int)>
<android.database.DatabaseUtils.InsertHelper: void prepareForReplace()>
<android.database.DatabaseUtils.InsertHelper: void bind(int,byte[])>
<android.database.DatabaseUtils.InsertHelper: void close()>
<android.database.DatabaseUtils.InsertHelper: void bind(int,java.lang.String)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,double)>
<android.database.DatabaseUtils.InsertHelper: int getColumnIndex(java.lang.String)>
<android.database.DatabaseUtils.InsertHelper: void prepareForInsert()>
<org.w3c.dom.Entity: java.lang.String getNotationName()>
<org.w3c.dom.Entity: java.lang.String getPublicId()>
<org.w3c.dom.Entity: java.lang.String getSystemId()>
<android.opengl.GLException: void <init>(int,java.lang.String)>
<android.opengl.GLException: void <init>(int)>
<android.view.ViewTreeObserver.OnPreDrawListener: boolean onPreDraw()>
<java.nio.channels.UnsupportedAddressTypeException: void <init>()>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.MissingResourceException: java.lang.String getClassName()>
<java.util.MissingResourceException: java.lang.String getKey()>
<java.io.PipedWriter: void <init>()>
<java.io.PipedWriter: void write(char[],int,int)>
<java.io.PipedWriter: void <init>(java.io.PipedReader)>
<java.io.PipedWriter: void connect(java.io.PipedReader)>
<java.io.PipedWriter: void flush()>
<java.io.PipedWriter: void close()>
<android.provider.Contacts.Intents.Insert: void <init>()>
<android.text.BoringLayout: android.text.BoringLayout.Metrics isBoring(java.lang.CharSequence,android.text.TextPaint)>
<android.text.BoringLayout: boolean getLineContainsTab(int)>
<android.text.BoringLayout: void ellipsized(int,int)>
<android.text.BoringLayout: int getParagraphDirection(int)>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.BoringLayout: int getEllipsisCount(int)>
<android.text.BoringLayout: android.text.Layout.Directions getLineDirections(int)>
<android.text.BoringLayout: int getLineTop(int)>
<android.text.BoringLayout: android.text.BoringLayout.Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout.Metrics)>
<android.text.BoringLayout: int getLineCount()>
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)>
<android.text.BoringLayout: int getBottomPadding()>
<android.text.BoringLayout: int getTopPadding()>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)>
<android.text.BoringLayout: int getEllipsisStart(int)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)>
<android.text.BoringLayout: int getLineDescent(int)>
<android.text.BoringLayout: int getLineStart(int)>
<java.util.prefs.AbstractPreferences: void removeNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.AbstractPreferences: void exportNode(java.io.OutputStream)>
<java.util.prefs.AbstractPreferences: void <init>(java.util.prefs.AbstractPreferences,java.lang.String)>
<java.util.prefs.AbstractPreferences: void exportSubtree(java.io.OutputStream)>
<java.util.prefs.AbstractPreferences: void removeNode()>
<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNamesSpi()>
<java.util.prefs.AbstractPreferences: boolean isRemoved()>
<java.util.prefs.AbstractPreferences: void flush()>
<java.util.prefs.AbstractPreferences: void remove(java.lang.String)>
<java.util.prefs.AbstractPreferences: double getDouble(java.lang.String,double)>
<java.util.prefs.AbstractPreferences: boolean getBoolean(java.lang.String,boolean)>
<java.util.prefs.AbstractPreferences: void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.AbstractPreferences: void putLong(java.lang.String,long)>
<java.util.prefs.AbstractPreferences: void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.AbstractPreferences: boolean nodeExists(java.lang.String)>
<java.util.prefs.AbstractPreferences: void addNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.AbstractPreferences: void putByteArray(java.lang.String,byte[])>
<java.util.prefs.AbstractPreferences: void putDouble(java.lang.String,double)>
<java.util.prefs.AbstractPreferences: void flushSpi()>
<java.util.prefs.AbstractPreferences: java.lang.String[] keysSpi()>
<java.util.prefs.AbstractPreferences: void putFloat(java.lang.String,float)>
<java.util.prefs.AbstractPreferences: java.lang.String absolutePath()>
<java.util.prefs.AbstractPreferences: java.lang.String[] keys()>
<java.util.prefs.AbstractPreferences: java.lang.String name()>
<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences getChild(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences[] cachedChildren()>
<java.util.prefs.AbstractPreferences: void sync()>
<java.util.prefs.AbstractPreferences: byte[] getByteArray(java.lang.String,byte[])>
<java.util.prefs.AbstractPreferences: boolean isUserNode()>
<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>
<java.util.prefs.AbstractPreferences: void syncSpi()>
<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.Preferences node(java.lang.String)>
<java.util.prefs.AbstractPreferences: void putInt(java.lang.String,int)>
<java.util.prefs.AbstractPreferences: void removeNodeSpi()>
<java.util.prefs.AbstractPreferences: void putBoolean(java.lang.String,boolean)>
<java.util.prefs.AbstractPreferences: void clear()>
<java.util.prefs.AbstractPreferences: float getFloat(java.lang.String,float)>
<java.util.prefs.AbstractPreferences: void removeSpi(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.lang.String getSpi(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.Preferences parent()>
<java.util.prefs.AbstractPreferences: void putSpi(java.lang.String,java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences childSpi(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNames()>
<java.util.prefs.AbstractPreferences: int getInt(java.lang.String,int)>
<java.util.prefs.AbstractPreferences: long getLong(java.lang.String,long)>
<java.util.prefs.AbstractPreferences: java.lang.String toString()>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,java.lang.String[],int[],int,java.lang.String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.SimpleCursorTreeAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleCursorTreeAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,java.lang.String[],int[],int,int,java.lang.String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,java.lang.String[],int[],int,java.lang.String[],int[])>
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>
<android.net.MailTo: android.net.MailTo parse(java.lang.String)>
<android.net.MailTo: java.util.Map getHeaders()>
<android.net.MailTo: boolean isMailTo(java.lang.String)>
<android.net.MailTo: java.lang.String getCc()>
<android.net.MailTo: java.lang.String getTo()>
<android.net.MailTo: java.lang.String getBody()>
<android.net.MailTo: java.lang.String getSubject()>
<android.graphics.Path: void setFillType(android.graphics.Path.FillType)>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path.Direction)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path.Direction)>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.graphics.Path: void rewind()>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<android.graphics.Path: void moveTo(float,float)>
<android.graphics.Path: void set(android.graphics.Path)>
<android.graphics.Path: void close()>
<android.graphics.Path: void incReserve(int)>
<android.graphics.Path: void addPath(android.graphics.Path)>
<android.graphics.Path: void rLineTo(float,float)>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.graphics.Path: android.graphics.Path.FillType getFillType()>
<android.graphics.Path: void setLastPoint(float,float)>
<android.graphics.Path: void reset()>
<android.graphics.Path: void lineTo(float,float)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: boolean isRect(android.graphics.RectF)>
<android.graphics.Path: void transform(android.graphics.Matrix)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.graphics.Path: boolean isEmpty()>
<android.graphics.Path: void offset(float,float,android.graphics.Path)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: void <init>(android.graphics.Path)>
<android.graphics.Path: void <init>()>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path.Direction)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.graphics.Path: void toggleInverseFillType()>
<android.graphics.Path: void offset(float,float)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.graphics.Path: void addPath(android.graphics.Path,float,float)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: boolean isInverseFillType()>
<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket getSocket()>
<org.apache.http.impl.SocketHttpServerConnection: int getSocketTimeout()>
<org.apache.http.impl.SocketHttpServerConnection: void assertNotOpen()>
<org.apache.http.impl.SocketHttpServerConnection: void assertOpen()>
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpServerConnection: void shutdown()>
<org.apache.http.impl.SocketHttpServerConnection: int getLocalPort()>
<org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpServerConnection: void setSocketTimeout(int)>
<org.apache.http.impl.SocketHttpServerConnection: int getRemotePort()>
<org.apache.http.impl.SocketHttpServerConnection: void close()>
<org.apache.http.impl.SocketHttpServerConnection: void <init>()>
<org.apache.http.impl.SocketHttpServerConnection: boolean isOpen()>
<org.apache.http.impl.SocketHttpServerConnection: java.net.InetAddress getRemoteAddress()>
<org.apache.http.impl.SocketHttpServerConnection: java.net.InetAddress getLocalAddress()>
<android.os.Debug.MemoryInfo: void <init>()>
<android.widget.ExpandableListAdapter: void onGroupExpanded(int)>
<android.widget.ExpandableListAdapter: void onGroupCollapsed(int)>
<android.widget.ExpandableListAdapter: java.lang.Object getGroup(int)>
<android.widget.ExpandableListAdapter: long getChildId(int,int)>
<android.widget.ExpandableListAdapter: long getCombinedGroupId(long)>
<android.widget.ExpandableListAdapter: int getGroupCount()>
<android.widget.ExpandableListAdapter: boolean hasStableIds()>
<android.widget.ExpandableListAdapter: boolean isEmpty()>
<android.widget.ExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.ExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.ExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.ExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.widget.ExpandableListAdapter: long getCombinedChildId(long,long)>
<android.widget.ExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.ExpandableListAdapter: long getGroupId(int)>
<android.widget.ExpandableListAdapter: boolean areAllItemsEnabled()>
<android.widget.ExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.widget.ExpandableListAdapter: int getChildrenCount(int)>
<java.security.acl.AclNotFoundException: void <init>()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>
<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>
<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>
<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>
<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>
<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>
<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>
<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()>
<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()>
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()>
<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>
<org.apache.http.impl.io.ContentLengthInputStream: int read()>
<org.apache.http.impl.io.ContentLengthInputStream: void <init>(org.apache.http.io.SessionInputBuffer,long)>
<java.net.SocketTimeoutException: void <init>()>
<java.net.SocketTimeoutException: void <init>(java.lang.String)>
<android.net.UrlQuerySanitizer.ParameterValuePair: void <init>(java.lang.String,java.lang.String)>
<java.lang.UnknownError: void <init>(java.lang.String)>
<java.lang.UnknownError: void <init>()>
<java.util.IllegalFormatWidthException: int getWidth()>
<java.util.IllegalFormatWidthException: void <init>(int)>
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<android.net.SSLCertificateSocketFactory: void <init>(int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<java.io.Flushable: void flush()>
<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>
<java.security.PrivilegedActionException: java.lang.Exception getException()>
<org.apache.http.impl.client.TunnelRefusedException: org.apache.http.HttpResponse getResponse()>
<org.apache.http.impl.client.TunnelRefusedException: void <init>(java.lang.String,org.apache.http.HttpResponse)>
<java.util.concurrent.BrokenBarrierException: void <init>()>
<java.util.concurrent.BrokenBarrierException: void <init>(java.lang.String)>
<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>
<java.io.StringReader: void close()>
<java.io.StringReader: void <init>(java.lang.String)>
<java.io.StringReader: int read(char[],int,int)>
<javax.net.ssl.SSLSessionBindingListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>
<javax.net.ssl.SSLSessionBindingListener: void valueBound(javax.net.ssl.SSLSessionBindingEvent)>
<java.text.Format.Field: void <init>(java.lang.String)>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket(int,int)>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket()>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket(int)>
<javax.net.ServerSocketFactory: void <init>()>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>
<javax.net.ServerSocketFactory: javax.net.ServerSocketFactory getDefault()>
<android.widget.LinearLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.LinearLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout.LayoutParams: void <init>(int,int,float)>
<android.widget.LinearLayout.LayoutParams: void <init>(int,int)>
<android.widget.LinearLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.LinearLayout.LayoutParams: java.lang.String debug(java.lang.String)>
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.PublicKey)>
<java.security.IdentityScope: int size()>
<java.security.IdentityScope: void addIdentity(java.security.Identity)>
<java.security.IdentityScope: void <init>()>
<java.security.IdentityScope: void removeIdentity(java.security.Identity)>
<java.security.IdentityScope: void <init>(java.lang.String)>
<java.security.IdentityScope: java.security.Identity getIdentity(java.lang.String)>
<java.security.IdentityScope: java.security.IdentityScope getSystemScope()>
<java.security.IdentityScope: void <init>(java.lang.String,java.security.IdentityScope)>
<java.security.IdentityScope: void setSystemScope(java.security.IdentityScope)>
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.Principal)>
<java.security.IdentityScope: java.util.Enumeration identities()>
<android.os.FileObserver: void stopWatching()>
<android.os.FileObserver: void <init>(java.lang.String,int)>
<android.os.FileObserver: void onEvent(int,java.lang.String)>
<android.os.FileObserver: void startWatching()>
<android.os.FileObserver: void <init>(java.lang.String)>
<org.apache.http.client.RedirectHandler: boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.RedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.graphics.Bitmap.Config: android.graphics.Bitmap.Config[] values()>
<android.graphics.Bitmap.Config: android.graphics.Bitmap.Config valueOf(java.lang.String)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,float,float)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,int,float,int,float)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float)>
<android.view.animation.ScaleAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider createCredentialsProvider()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.protocol.HttpContext createHttpContext()>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CookieStore createCookieStore()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.UserTokenHandler createUserTokenHandler()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.RedirectHandler createRedirectHandler()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>
<android.graphics.PointF: void <init>()>
<android.graphics.PointF: void <init>(float,float)>
<android.graphics.PointF: boolean equals(float,float)>
<android.graphics.PointF: void <init>(android.graphics.Point)>
<android.graphics.PointF: float length(float,float)>
<android.graphics.PointF: float length()>
<android.graphics.PointF: void negate()>
<android.graphics.PointF: void offset(float,float)>
<android.graphics.PointF: void set(android.graphics.PointF)>
<android.graphics.PointF: void set(float,float)>
<java.util.PriorityQueue: void <init>(java.util.Collection)>
<java.util.PriorityQueue: void <init>(java.util.SortedSet)>
<java.util.PriorityQueue: E poll()>
<java.util.PriorityQueue: int size()>
<java.util.PriorityQueue: java.util.Iterator iterator()>
<java.util.PriorityQueue: boolean offer(E)>
<java.util.PriorityQueue: void <init>()>
<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
<java.util.PriorityQueue: java.util.Comparator comparator()>
<java.util.PriorityQueue: E peek()>
<java.util.PriorityQueue: void <init>(java.util.PriorityQueue)>
<java.util.PriorityQueue: void <init>(int)>
<java.security.KeyStore.Builder: java.security.KeyStore getKeyStore()>
<java.security.KeyStore.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore.Builder: void <init>()>
<java.security.KeyStore.Builder: java.security.KeyStore.Builder newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore.Builder: java.security.KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)>
<android.text.style.TypefaceSpan: void <init>(java.lang.String)>
<android.text.style.TypefaceSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.TypefaceSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.TypefaceSpan: java.lang.String getFamily()>
<java.util.concurrent.PriorityBlockingQueue: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void put(E)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.PriorityBlockingQueue: E poll()>
<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator()>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.PriorityBlockingQueue: void <init>(java.util.Collection)>
<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>
<java.util.concurrent.PriorityBlockingQueue: E peek()>
<java.util.concurrent.PriorityBlockingQueue: void <init>(int)>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(E)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.PriorityBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: E take()>
<java.util.concurrent.PriorityBlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.PriorityBlockingQueue: int size()>
<java.util.concurrent.PriorityBlockingQueue: int remainingCapacity()>
<android.util.AndroidRuntimeException: void <init>()>
<android.util.AndroidRuntimeException: void <init>(java.lang.String)>
<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>
<android.os.PowerManager.WakeLock: void acquire()>
<android.os.PowerManager.WakeLock: void acquire(long)>
<android.os.PowerManager.WakeLock: void setReferenceCounted(boolean)>
<android.os.PowerManager.WakeLock: void release()>
<android.os.PowerManager.WakeLock: boolean isHeld()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>
<java.util.AbstractCollection: int size()>
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>
<java.util.AbstractCollection: T[] toArray(T[])>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: void clear()>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<java.util.AbstractCollection: java.util.Iterator iterator()>
<java.util.AbstractCollection: boolean isEmpty()>
<java.util.AbstractCollection: java.lang.Object[] toArray()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>
<java.util.AbstractCollection: boolean add(E)>
<java.util.AbstractCollection: void <init>()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
<org.apache.http.impl.conn.Wire: void output(int)>
<org.apache.http.impl.conn.Wire: void output(java.io.InputStream)>
<org.apache.http.impl.conn.Wire: void input(int)>
<org.apache.http.impl.conn.Wire: void output(byte[])>
<org.apache.http.impl.conn.Wire: boolean enabled()>
<org.apache.http.impl.conn.Wire: void input(java.lang.String)>
<org.apache.http.impl.conn.Wire: void output(byte[],int,int)>
<org.apache.http.impl.conn.Wire: void input(byte[],int,int)>
<org.apache.http.impl.conn.Wire: void input(java.io.InputStream)>
<org.apache.http.impl.conn.Wire: void <init>(org.apache.commons.logging.Log)>
<org.apache.http.impl.conn.Wire: void input(byte[])>
<org.apache.http.impl.conn.Wire: void output(java.lang.String)>
<javax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])>
<java.io.ByteArrayInputStream: int read()>
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.util.concurrent.atomic.AtomicInteger: void <init>()>
<java.util.concurrent.atomic.AtomicInteger: double doubleValue()>
<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<java.util.concurrent.atomic.AtomicInteger: int get()>
<java.util.concurrent.atomic.AtomicInteger: int intValue()>
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
<java.util.concurrent.atomic.AtomicInteger: long longValue()>
<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSet(int,int)>
<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>
<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>
<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
<java.util.concurrent.atomic.AtomicInteger: float floatValue()>
<java.util.concurrent.atomic.AtomicInteger: void set(int)>
<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>
<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
<android.test.SyncBaseInstrumentation: void <init>()>
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()>
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)>
<java.lang.Readable: int read(java.nio.CharBuffer)>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.lang.SecurityException: void <init>()>
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.SecurityException: void <init>(java.lang.Throwable)>
<java.util.zip.ZipFile: java.util.Enumeration entries()>
<java.util.zip.ZipFile: void <init>(java.io.File,int)>
<java.util.zip.ZipFile: void <init>(java.lang.String)>
<java.util.zip.ZipFile: void <init>(java.io.File)>
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.zip.ZipFile: java.lang.String getName()>
<java.util.zip.ZipFile: void close()>
<java.util.zip.ZipFile: int size()>
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)>
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)>
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)>
<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)>
<android.preference.PreferenceManager: int getSharedPreferencesMode()>
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>
<java.security.UnrecoverableEntryException: void <init>()>
<java.security.UnrecoverableEntryException: void <init>(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getName()>
<android.text.util.Rfc822Token: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.text.util.Rfc822Token: void setName(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteName(java.lang.String)>
<android.text.util.Rfc822Token: void setAddress(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getAddress()>
<android.text.util.Rfc822Token: void setComment(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteNameIfNecessary(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteComment(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getComment()>
<javax.crypto.IllegalBlockSizeException: void <init>()>
<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>
<org.apache.http.HttpEntity: boolean isStreaming()>
<org.apache.http.HttpEntity: boolean isRepeatable()>
<org.apache.http.HttpEntity: java.io.InputStream getContent()>
<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>
<org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.HttpEntity: void consumeContent()>
<org.apache.http.HttpEntity: boolean isChunked()>
<org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>
<org.apache.http.impl.client.RedirectLocations: void <init>()>
<org.apache.http.impl.client.RedirectLocations: void add(java.net.URI)>
<org.apache.http.impl.client.RedirectLocations: boolean remove(java.net.URI)>
<org.apache.http.impl.client.RedirectLocations: boolean contains(java.net.URI)>
<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>
<android.graphics.Paint.FontMetricsInt: void <init>()>
<java.security.Key: byte[] getEncoded()>
<java.security.Key: java.lang.String getFormat()>
<java.security.Key: java.lang.String getAlgorithm()>
<org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>
<org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader()>
<javax.net.ssl.SSLKeyException: void <init>(java.lang.String)>
<android.widget.BaseAdapter: void <init>()>
<android.widget.BaseAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: boolean hasStableIds()>
<android.widget.BaseAdapter: boolean areAllItemsEnabled()>
<android.widget.BaseAdapter: void notifyDataSetInvalidated()>
<android.widget.BaseAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: int getItemViewType(int)>
<android.widget.BaseAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.widget.BaseAdapter: int getViewTypeCount()>
<android.widget.BaseAdapter: void notifyDataSetChanged()>
<android.widget.BaseAdapter: boolean isEmpty()>
<android.widget.BaseAdapter: boolean isEnabled(int)>
<javax.microedition.khronos.egl.EGLConfig: void <init>()>
<java.io.DataInput: float readFloat()>
<java.io.DataInput: int skipBytes(int)>
<java.io.DataInput: void readFully(byte[],int,int)>
<java.io.DataInput: long readLong()>
<java.io.DataInput: short readShort()>
<java.io.DataInput: char readChar()>
<java.io.DataInput: java.lang.String readUTF()>
<java.io.DataInput: java.lang.String readLine()>
<java.io.DataInput: int readUnsignedByte()>
<java.io.DataInput: int readUnsignedShort()>
<java.io.DataInput: double readDouble()>
<java.io.DataInput: byte readByte()>
<java.io.DataInput: int readInt()>
<java.io.DataInput: boolean readBoolean()>
<java.io.DataInput: void readFully(byte[])>
<java.lang.annotation.Annotation: java.lang.Class annotationType()>
<java.lang.annotation.Annotation: java.lang.String toString()>
<java.lang.annotation.Annotation: int hashCode()>
<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>
<java.util.Map.Entry: K getKey()>
<java.util.Map.Entry: V getValue()>
<java.util.Map.Entry: int hashCode()>
<java.util.Map.Entry: boolean equals(java.lang.Object)>
<java.util.Map.Entry: V setValue(V)>
<java.security.cert.PolicyQualifierInfo: java.lang.String getPolicyQualifierId()>
<java.security.cert.PolicyQualifierInfo: byte[] getPolicyQualifier()>
<java.security.cert.PolicyQualifierInfo: byte[] getEncoded()>
<java.security.cert.PolicyQualifierInfo: void <init>(byte[])>
<android.location.Location: double convert(java.lang.String)>
<android.location.Location: void set(android.location.Location)>
<android.location.Location: void setProvider(java.lang.String)>
<android.location.Location: void setSpeed(float)>
<android.location.Location: void writeToParcel(android.os.Parcel,int)>
<android.location.Location: double getLatitude()>
<android.location.Location: void setLongitude(double)>
<android.location.Location: boolean hasSpeed()>
<android.location.Location: android.os.Bundle getExtras()>
<android.location.Location: void setLatitude(double)>
<android.location.Location: void <init>(android.location.Location)>
<android.location.Location: long getTime()>
<android.location.Location: void setAltitude(double)>
<android.location.Location: boolean hasBearing()>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<android.location.Location: void removeSpeed()>
<android.location.Location: java.lang.String getProvider()>
<android.location.Location: void removeAltitude()>
<android.location.Location: float getSpeed()>
<android.location.Location: void removeAccuracy()>
<android.location.Location: float distanceTo(android.location.Location)>
<android.location.Location: int describeContents()>
<android.location.Location: float getBearing()>
<android.location.Location: void setBearing(float)>
<android.location.Location: boolean hasAltitude()>
<android.location.Location: float bearingTo(android.location.Location)>
<android.location.Location: java.lang.String convert(double,int)>
<android.location.Location: boolean hasAccuracy()>
<android.location.Location: void reset()>
<android.location.Location: void setAccuracy(float)>
<android.location.Location: void setTime(long)>
<android.location.Location: float getAccuracy()>
<android.location.Location: void <init>(java.lang.String)>
<android.location.Location: double getLongitude()>
<android.location.Location: double getAltitude()>
<android.location.Location: void removeBearing()>
<android.location.Location: void setExtras(android.os.Bundle)>
<android.content.res.AssetFileDescriptor: void close()>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.content.res.AssetFileDescriptor: long getLength()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<java.util.zip.ZipInputStream: void closeEntry()>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry createZipEntry(java.lang.String)>
<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
<junit.framework.Test: int countTestCases()>
<junit.framework.Test: void run(junit.framework.TestResult)>
<java.net.ResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>
<java.net.ResponseCache: void <init>()>
<java.net.ResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>
<java.net.ResponseCache: void setDefault(java.net.ResponseCache)>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>
<org.w3c.dom.ProcessingInstruction: java.lang.String getData()>
<org.w3c.dom.ProcessingInstruction: void setData(java.lang.String)>
<org.w3c.dom.ProcessingInstruction: java.lang.String getTarget()>
<android.text.GetChars: void getChars(int,int,char[],int)>
<android.os.Binder: void flushPendingCommands()>
<android.os.Binder: int getCallingPid()>
<android.os.Binder: long clearCallingIdentity()>
<android.os.Binder: void joinThreadPool()>
<android.os.Binder: boolean unlinkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.os.Binder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.os.Binder: void attachInterface(android.os.IInterface,java.lang.String)>
<android.os.Binder: boolean pingBinder()>
<android.os.Binder: void <init>()>
<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.Binder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.Binder: int getCallingUid()>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.os.Binder: boolean isBinderAlive()>
<android.os.Binder: java.lang.String getInterfaceDescriptor()>
<android.os.Binder: void linkToDeath(android.os.IBinder.DeathRecipient,int)>
<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>
<org.apache.http.FormattedHeader: int getValuePos()>
<org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: void <init>()>
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<java.lang.EnumConstantNotPresentException: void <init>(java.lang.Class,java.lang.String)>
<java.lang.EnumConstantNotPresentException: java.lang.String constantName()>
<java.lang.EnumConstantNotPresentException: java.lang.Class enumType()>
<java.lang.Boolean: void <init>(boolean)>
<java.lang.Boolean: boolean getBoolean(java.lang.String)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.Boolean: boolean booleanValue()>
<java.lang.Boolean: int compareTo(java.lang.Boolean)>
<java.lang.Boolean: void <init>(java.lang.String)>
<java.lang.Boolean: java.lang.String toString(boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<android.widget.SeekBar.OnSeekBarChangeListener: void onProgressChanged(android.widget.SeekBar,int,boolean)>
<android.widget.SeekBar.OnSeekBarChangeListener: void onStopTrackingTouch(android.widget.SeekBar)>
<android.widget.SeekBar.OnSeekBarChangeListener: void onStartTrackingTouch(android.widget.SeekBar)>
<java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.util.NoSuchElementException: void <init>()>
<android.content.pm.PackageStats: void <init>(android.os.Parcel)>
<android.content.pm.PackageStats: int describeContents()>
<android.content.pm.PackageStats: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageStats: void <init>(android.content.pm.PackageStats)>
<android.content.pm.PackageStats: void <init>(java.lang.String)>
<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>
<org.apache.http.HttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<android.text.style.RelativeSizeSpan: float getSizeChange()>
<android.text.style.RelativeSizeSpan: void <init>(float)>
<android.text.style.RelativeSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.RelativeSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.database.CursorJoiner: void remove()>
<android.database.CursorJoiner: void <init>(android.database.Cursor,java.lang.String[],android.database.Cursor,java.lang.String[])>
<android.database.CursorJoiner: android.database.CursorJoiner.Result next()>
<android.database.CursorJoiner: java.util.Iterator iterator()>
<android.database.CursorJoiner: boolean hasNext()>
<android.preference.Preference.OnPreferenceClickListener: boolean onPreferenceClick(android.preference.Preference)>
<android.text.style.ScaleXSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.ScaleXSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ScaleXSpan: void <init>(float)>
<android.text.style.ScaleXSpan: float getScaleX()>
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: void <init>()>
<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>
<java.security.AlgorithmParameters: void init(byte[])>
<java.security.AlgorithmParameters: java.lang.String toString()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>
<java.security.AlgorithmParameters: byte[] getEncoded()>
<java.security.AlgorithmParameters: void init(byte[],java.lang.String)>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>
<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>
<java.security.AlgorithmParameters: T getParameterSpec(java.lang.Class)>
<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>
<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>
<java.security.AlgorithmParameters: java.security.Provider getProvider()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)>
<dalvik.system.VMStack: java.lang.StackTraceElement[] getThreadStackTrace(java.lang.Thread)>
<dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>
<dalvik.system.VMStack: void <init>()>
<dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader2()>
<dalvik.system.VMStack: java.lang.Class[] getClasses(int,boolean)>
<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)>
<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>
<android.widget.RadioGroup.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup.LayoutParams: void <init>(int,int)>
<android.widget.RadioGroup.LayoutParams: void <init>(int,int,float)>
<android.widget.RadioGroup.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.RadioGroup.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.graphics.PaintFlagsDrawFilter: void <init>(int,int)>
<android.view.View.OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>
<org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>()>
<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)>
<java.net.MulticastSocket: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<java.net.MulticastSocket: int getTimeToLive()>
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>
<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)>
<java.net.MulticastSocket: void setTTL(byte)>
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)>
<java.net.MulticastSocket: void setTimeToLive(int)>
<java.net.MulticastSocket: byte getTTL()>
<java.net.MulticastSocket: java.net.InetAddress getInterface()>
<java.net.MulticastSocket: void <init>(int)>
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()>
<java.net.MulticastSocket: void setLoopbackMode(boolean)>
<java.net.MulticastSocket: boolean getLoopbackMode()>
<java.net.MulticastSocket: void <init>(java.net.SocketAddress)>
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)>
<java.net.MulticastSocket: void <init>()>
<java.net.MulticastSocket: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.app.ActivityManager.RunningServiceInfo: void <init>()>
<android.app.ActivityManager.RunningServiceInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RunningServiceInfo: int describeContents()>
<android.app.ActivityManager.RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.widget.AnalogClock: void <init>(android.content.Context)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.os.Vibrator: void vibrate(long[],int)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(long)>
<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>
<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>
<java.security.cert.CertPathParameters: java.lang.Object clone()>
<android.os.Build.VERSION: void <init>()>
<java.util.Arrays: void fill(long[],long)>
<java.util.Arrays: int hashCode(byte[])>
<java.util.Arrays: int binarySearch(int[],int)>
<java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
<java.util.Arrays: void sort(long[],int,int)>
<java.util.Arrays: int binarySearch(short[],short)>
<java.util.Arrays: boolean equals(short[],short[])>
<java.util.Arrays: void fill(byte[],int,int,byte)>
<java.util.Arrays: void sort(long[])>
<java.util.Arrays: void sort(T[],int,int,java.util.Comparator)>
<java.util.Arrays: void fill(char[],char)>
<java.util.Arrays: int hashCode(float[])>
<java.util.Arrays: void sort(T[],java.util.Comparator)>
<java.util.Arrays: int hashCode(java.lang.Object[])>
<java.util.Arrays: void fill(int[],int,int,int)>
<java.util.Arrays: java.lang.String toString(boolean[])>
<java.util.Arrays: java.lang.String toString(long[])>
<java.util.Arrays: java.lang.String toString(float[])>
<java.util.Arrays: void fill(double[],int,int,double)>
<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>
<java.util.Arrays: void sort(short[])>
<java.util.Arrays: boolean equals(long[],long[])>
<java.util.Arrays: void sort(java.lang.Object[],int,int)>
<java.util.Arrays: void fill(char[],int,int,char)>
<java.util.Arrays: int binarySearch(float[],float)>
<java.util.Arrays: int hashCode(char[])>
<java.util.Arrays: void fill(boolean[],boolean)>
<java.util.Arrays: void fill(byte[],byte)>
<java.util.Arrays: void sort(short[],int,int)>
<java.util.Arrays: void sort(float[])>
<java.util.Arrays: void fill(int[],int)>
<java.util.Arrays: void fill(double[],double)>
<java.util.Arrays: java.lang.String toString(int[])>
<java.util.Arrays: int binarySearch(long[],long)>
<java.util.Arrays: int binarySearch(byte[],byte)>
<java.util.Arrays: boolean equals(float[],float[])>
<java.util.Arrays: java.lang.String toString(byte[])>
<java.util.Arrays: void fill(float[],int,int,float)>
<java.util.Arrays: void sort(int[])>
<java.util.Arrays: boolean equals(byte[],byte[])>
<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>
<java.util.Arrays: int hashCode(short[])>
<java.util.Arrays: void sort(byte[])>
<java.util.Arrays: void sort(double[],int,int)>
<java.util.Arrays: int binarySearch(char[],char)>
<java.util.Arrays: void sort(char[])>
<java.util.Arrays: int binarySearch(double[],double)>
<java.util.Arrays: boolean equals(char[],char[])>
<java.util.Arrays: void fill(short[],short)>
<java.util.Arrays: void fill(long[],int,int,long)>
<java.util.Arrays: int hashCode(long[])>
<java.util.Arrays: boolean equals(int[],int[])>
<java.util.Arrays: int hashCode(int[])>
<java.util.Arrays: java.lang.String toString(double[])>
<java.util.Arrays: void fill(boolean[],int,int,boolean)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>
<java.util.Arrays: int hashCode(boolean[])>
<java.util.Arrays: void sort(float[],int,int)>
<java.util.Arrays: boolean equals(boolean[],boolean[])>
<java.util.Arrays: int binarySearch(T[],T,java.util.Comparator)>
<java.util.Arrays: void sort(java.lang.Object[])>
<java.util.Arrays: java.lang.String toString(char[])>
<java.util.Arrays: int hashCode(double[])>
<java.util.Arrays: java.lang.String toString(java.lang.Object[])>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<java.util.Arrays: boolean equals(double[],double[])>
<java.util.Arrays: java.lang.String toString(short[])>
<java.util.Arrays: void fill(short[],int,int,short)>
<java.util.Arrays: void fill(float[],float)>
<java.util.Arrays: void sort(double[])>
<java.util.Arrays: java.util.List asList(T...)>
<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>
<java.util.Arrays: void sort(int[],int,int)>
<java.util.Arrays: void sort(byte[],int,int)>
<java.util.Arrays: void sort(char[],int,int)>
<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
<org.apache.http.util.LangUtils: int hashCode(int,int)>
<org.apache.http.util.LangUtils: int hashCode(int,boolean)>
<org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>
<org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>
<org.apache.http.util.LangUtils: boolean equals(java.lang.Object[],java.lang.Object[])>
<android.net.Uri: android.net.Uri.Builder buildUpon()>
<android.net.Uri: java.lang.String getHost()>
<android.net.Uri: java.lang.String getEncodedFragment()>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>
<android.net.Uri: int compareTo(android.net.Uri)>
<android.net.Uri: java.lang.String getEncodedAuthority()>
<android.net.Uri: android.net.Uri parse(java.lang.String)>
<android.net.Uri: java.lang.String getEncodedPath()>
<android.net.Uri: boolean isRelative()>
<android.net.Uri: java.lang.String getAuthority()>
<android.net.Uri: android.net.Uri fromFile(java.io.File)>
<android.net.Uri: java.lang.String getFragment()>
<android.net.Uri: java.lang.String getEncodedQuery()>
<android.net.Uri: java.lang.String getSchemeSpecificPart()>
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>
<android.net.Uri: java.lang.String getPath()>
<android.net.Uri: java.lang.String decode(java.lang.String)>
<android.net.Uri: int getPort()>
<android.net.Uri: java.lang.String getScheme()>
<android.net.Uri: boolean isHierarchical()>
<android.net.Uri: java.lang.String getLastPathSegment()>
<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>
<android.net.Uri: java.util.List getPathSegments()>
<android.net.Uri: java.lang.String getEncodedUserInfo()>
<android.net.Uri: java.lang.String getQuery()>
<android.net.Uri: boolean isAbsolute()>
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String)>
<android.net.Uri: java.lang.String getUserInfo()>
<android.net.Uri: java.lang.String toString()>
<android.net.Uri: boolean isOpaque()>
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>
<android.widget.CompoundButton.OnCheckedChangeListener: void onCheckedChanged(android.widget.CompoundButton,boolean)>
<java.util.logging.FileHandler: void <init>(java.lang.String,int,int,boolean)>
<java.util.logging.FileHandler: void <init>(java.lang.String)>
<java.util.logging.FileHandler: void <init>()>
<java.util.logging.FileHandler: void <init>(java.lang.String,boolean)>
<java.util.logging.FileHandler: void <init>(java.lang.String,int,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>()>
<android.telephony.PhoneNumberFormattingTextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void afterTextChanged(android.text.Editable)>
<android.telephony.PhoneNumberFormattingTextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.RingtonePreference: boolean onActivityResult(int,int,android.content.Intent)>
<android.preference.RingtonePreference: boolean getShowDefault()>
<android.preference.RingtonePreference: android.net.Uri onRestoreRingtone()>
<android.preference.RingtonePreference: boolean getShowSilent()>
<android.preference.RingtonePreference: void setShowSilent(boolean)>
<android.preference.RingtonePreference: int getRingtoneType()>
<android.preference.RingtonePreference: void <init>(android.content.Context)>
<android.preference.RingtonePreference: void setShowDefault(boolean)>
<android.preference.RingtonePreference: void onPrepareRingtonePickerIntent(android.content.Intent)>
<android.preference.RingtonePreference: void onSaveRingtone(android.net.Uri)>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.RingtonePreference: void setRingtoneType(int)>
<android.test.suitebuilder.TestSuiteBuilder.FailedToCreateTests: void testSuiteConstructionFailed()>
<android.test.suitebuilder.TestSuiteBuilder.FailedToCreateTests: void <init>(java.lang.Exception)>
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void <init>(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager,org.apache.http.impl.conn.AbstractPoolEntry)>
<android.content.DialogInterface.OnCancelListener: void onCancel(android.content.DialogInterface)>
<android.graphics.Canvas: void translate(float,float)>
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.graphics.Canvas: int save()>
<android.graphics.Canvas: void drawColor(int)>
<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas.EdgeType)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas.EdgeType)>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: int save(int)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: boolean clipRect(int,int,int,int)>
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void <init>(javax.microedition.khronos.opengles.GL)>
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region.Op)>
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas.EdgeType)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void rotate(float)>
<android.graphics.Canvas: int getHeight()>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region.Op)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<android.graphics.Canvas: javax.microedition.khronos.opengles.GL getGL()>
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region.Op)>
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean isOpaque()>
<android.graphics.Canvas: void rotate(float,float,float)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.graphics.Canvas: void setViewport(int,int)>
<android.graphics.Canvas: void skew(float,float)>
<android.graphics.Canvas: void drawARGB(int,int,int,int)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas.VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.graphics.Canvas: void scale(float,float)>
<android.graphics.Canvas: int getSaveCount()>
<android.graphics.Canvas: void drawRGB(int,int,int)>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region.Op)>
<android.graphics.Canvas: void <init>()>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff.Mode)>
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: int getWidth()>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void freeGlCaches()>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void restore()>
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>
<android.text.ClipboardManager: boolean hasText()>
<android.text.ClipboardManager: java.lang.CharSequence getText()>
<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)>
<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)>
<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>
<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>
<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>
<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<javax.sql.ConnectionEventListener: void connectionErrorOccurred(javax.sql.ConnectionEvent)>
<javax.sql.ConnectionEventListener: void connectionClosed(javax.sql.ConnectionEvent)>
<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.HeaderIterator: boolean hasNext()>
<android.text.Spannable.Factory: void <init>()>
<android.text.Spannable.Factory: android.text.Spannable.Factory getInstance()>
<android.text.Spannable.Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>
<org.apache.http.conn.params.ConnRouteParams: void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost)>
<org.apache.http.conn.params.ConnRouteParams: org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnRouteParams: void setForcedRoute(org.apache.http.params.HttpParams,org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnRouteParams: void setLocalAddress(org.apache.http.params.HttpParams,java.net.InetAddress)>
<android.view.animation.Interpolator: float getInterpolation(float)>
<org.apache.http.HttpInetConnection: java.net.InetAddress getLocalAddress()>
<org.apache.http.HttpInetConnection: int getLocalPort()>
<org.apache.http.HttpInetConnection: int getRemotePort()>
<org.apache.http.HttpInetConnection: java.net.InetAddress getRemoteAddress()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String)>
<java.security.Signature: java.lang.String getAlgorithm()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>
<java.security.Signature: java.lang.Object getParameter(java.lang.String)>
<java.security.Signature: java.security.AlgorithmParameters getParameters()>
<java.security.Signature: void update(byte)>
<java.security.Signature: void <init>(java.lang.String)>
<java.security.Signature: void update(java.nio.ByteBuffer)>
<java.security.Signature: void initVerify(java.security.PublicKey)>
<java.security.Signature: void initVerify(java.security.cert.Certificate)>
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)>
<java.security.Signature: void initSign(java.security.PrivateKey)>
<java.security.Signature: boolean verify(byte[],int,int)>
<java.security.Signature: void update(byte[],int,int)>
<java.security.Signature: int sign(byte[],int,int)>
<java.security.Signature: byte[] sign()>
<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>
<java.security.Signature: void update(byte[])>
<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>
<java.security.Signature: java.security.Provider getProvider()>
<java.security.Signature: boolean verify(byte[])>
<org.apache.http.client.AuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.AuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.AuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.provider.Settings.System: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings.System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings.System: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>
<android.provider.Settings.System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings.System: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>
<android.provider.Settings.System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.System: void <init>()>
<android.provider.Settings.System: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<org.apache.http.conn.routing.RouteInfo.LayerType: org.apache.http.conn.routing.RouteInfo.LayerType[] values()>
<org.apache.http.conn.routing.RouteInfo.LayerType: org.apache.http.conn.routing.RouteInfo.LayerType valueOf(java.lang.String)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedAction)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>
<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,T)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory privilegedThreadFactory()>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction)>
<java.security.cert.CertStoreException: void <init>(java.lang.Throwable)>
<java.security.cert.CertStoreException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertStoreException: void <init>(java.lang.String)>
<java.security.cert.CertStoreException: void <init>()>
<java.nio.channels.ClosedByInterruptException: void <init>()>
<android.view.KeyCharacterMap.KeyData: void <init>()>
<android.text.util.Linkify.MatchFilter: boolean acceptMatch(java.lang.CharSequence,int,int)>
<java.util.jar.Pack200.Packer: java.util.SortedMap properties()>
<java.util.jar.Pack200.Packer: void pack(java.util.jar.JarInputStream,java.io.OutputStream)>
<java.util.jar.Pack200.Packer: void pack(java.util.jar.JarFile,java.io.OutputStream)>
<org.apache.http.client.utils.URLEncodedUtils: void <init>()>
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(java.net.URI,java.lang.String)>
<org.apache.http.client.utils.URLEncodedUtils: boolean isEncoded(org.apache.http.HttpEntity)>
<org.apache.http.client.utils.URLEncodedUtils: java.lang.String format(java.util.List,java.lang.String)>
<org.apache.http.client.utils.URLEncodedUtils: void parse(java.util.List,java.util.Scanner,java.lang.String)>
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(org.apache.http.HttpEntity)>
<android.test.suitebuilder.TestMethod: junit.framework.TestCase createTest()>
<android.test.suitebuilder.TestMethod: java.lang.String getName()>
<android.test.suitebuilder.TestMethod: java.lang.String getEnclosingClassname()>
<android.test.suitebuilder.TestMethod: java.lang.Class getEnclosingClass()>
<android.test.suitebuilder.TestMethod: void <init>(java.lang.reflect.Method,java.lang.Class)>
<android.test.suitebuilder.TestMethod: T getAnnotation(java.lang.Class)>
<javax.crypto.spec.PSource.PSpecified: byte[] getValue()>
<javax.crypto.spec.PSource.PSpecified: void <init>(byte[])>
<android.text.SpannedString: void <init>(java.lang.CharSequence)>
<android.text.SpannedString: android.text.SpannedString valueOf(java.lang.CharSequence)>
<android.text.SpannedString: java.lang.CharSequence subSequence(int,int)>
<android.view.GestureDetector: void <init>(android.view.GestureDetector.OnGestureListener)>
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)>
<android.view.GestureDetector: void <init>(android.view.GestureDetector.OnGestureListener,android.os.Handler)>
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.GestureDetector: boolean isLongpressEnabled()>
<android.net.http.SslCertificate.DName: java.lang.String getOName()>
<android.net.http.SslCertificate.DName: void <init>(java.lang.String)>
<android.net.http.SslCertificate.DName: java.lang.String getUName()>
<android.net.http.SslCertificate.DName: java.lang.String getCName()>
<android.net.http.SslCertificate.DName: java.lang.String getDName()>
<android.os.Environment: java.io.File getDataDirectory()>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.os.Environment: java.lang.String getExternalStorageState()>
<android.os.Environment: java.io.File getRootDirectory()>
<android.os.Environment: java.io.File getDownloadCacheDirectory()>
<android.os.Environment: void <init>()>
<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>
<java.util.FormatFlagsConversionMismatchException: char getConversion()>
<java.util.FormatFlagsConversionMismatchException: java.lang.String getFlags()>
<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>
<org.apache.http.client.methods.HttpUriRequest: boolean isAborted()>
<org.apache.http.client.methods.HttpUriRequest: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpUriRequest: void abort()>
<android.os.ConditionVariable: boolean block(long)>
<android.os.ConditionVariable: void block()>
<android.os.ConditionVariable: void open()>
<android.os.ConditionVariable: void close()>
<android.os.ConditionVariable: void <init>()>
<android.os.ConditionVariable: void <init>(boolean)>
<android.text.method.CharacterPickerDialog: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.text.method.CharacterPickerDialog: void onClick(android.view.View)>
<android.text.method.CharacterPickerDialog: void <init>(android.content.Context,android.view.View,android.text.Editable,java.lang.String,boolean)>
<org.apache.http.impl.AbstractHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>
<org.apache.http.impl.AbstractHttpServerConnection: boolean isStale()>
<org.apache.http.impl.AbstractHttpServerConnection: void flush()>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>
<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequestFactory createHttpRequestFactory()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>
<org.apache.http.impl.AbstractHttpServerConnection: void <init>()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpConnectionMetrics getMetrics()>
<org.apache.http.impl.AbstractHttpServerConnection: void doFlush()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<org.apache.http.impl.cookie.BasicSecureHandler: void <init>()>
<org.apache.http.impl.cookie.BasicSecureHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<java.security.cert.CertPathBuilderException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertPathBuilderException: void <init>(java.lang.String)>
<java.security.cert.CertPathBuilderException: void <init>()>
<java.security.cert.CertPathBuilderException: void <init>(java.lang.Throwable)>
<java.sql.SQLException: void <init>(java.lang.String,java.lang.String,int)>
<java.sql.SQLException: java.lang.String getSQLState()>
<java.sql.SQLException: java.sql.SQLException getNextException()>
<java.sql.SQLException: void <init>(java.lang.String)>
<java.sql.SQLException: int getErrorCode()>
<java.sql.SQLException: void <init>(java.lang.String,java.lang.String)>
<java.sql.SQLException: void setNextException(java.sql.SQLException)>
<java.sql.SQLException: void <init>()>
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: org.apache.http.HttpEntity getEntity()>
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: boolean expectContinue()>
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void <init>(org.apache.http.HttpEntityEnclosingRequest)>
<java.net.URLConnection: void <init>(java.net.URL)>
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>
<java.net.URLConnection: boolean getUseCaches()>
<java.net.URLConnection: long getLastModified()>
<java.net.URLConnection: void setIfModifiedSince(long)>
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>
<java.net.URLConnection: long getExpiration()>
<java.net.URLConnection: void setDoOutput(boolean)>
<java.net.URLConnection: java.util.Map getRequestProperties()>
<java.net.URLConnection: void setReadTimeout(int)>
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>
<java.net.URLConnection: int getReadTimeout()>
<java.net.URLConnection: java.security.Permission getPermission()>
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>
<java.net.URLConnection: long getIfModifiedSince()>
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>
<java.net.URLConnection: java.util.Map getHeaderFields()>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URLConnection: boolean getDefaultUseCaches()>
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>
<java.net.URLConnection: void setDefaultUseCaches(boolean)>
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: void connect()>
<java.net.URLConnection: int getConnectTimeout()>
<java.net.URLConnection: java.lang.String getHeaderField(int)>
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>
<java.net.URLConnection: java.lang.Object getContent()>
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<java.net.URLConnection: void setConnectTimeout(int)>
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: java.lang.String getContentType()>
<java.net.URLConnection: void setAllowUserInteraction(boolean)>
<java.net.URLConnection: boolean getDoInput()>
<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>
<java.net.URLConnection: void setDoInput(boolean)>
<java.net.URLConnection: boolean getDoOutput()>
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>
<java.net.URLConnection: boolean getAllowUserInteraction()>
<java.net.URLConnection: java.net.URL getURL()>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: int getContentLength()>
<java.net.URLConnection: java.lang.String getContentEncoding()>
<java.net.URLConnection: void setUseCaches(boolean)>
<java.net.URLConnection: long getDate()>
<org.apache.http.impl.DefaultHttpClientConnection: void <init>()>
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<android.text.Annotation: java.lang.String getValue()>
<android.text.Annotation: java.lang.String getKey()>
<android.text.Annotation: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector getProxySelector()>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: void setProxySelector(java.net.ProxySelector)>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: void <init>(org.apache.http.conn.scheme.SchemeRegistry,java.net.ProxySelector)>
<org.apache.http.cookie.Cookie: java.lang.String getValue()>
<org.apache.http.cookie.Cookie: boolean isSecure()>
<org.apache.http.cookie.Cookie: java.lang.String getCommentURL()>
<org.apache.http.cookie.Cookie: java.lang.String getDomain()>
<org.apache.http.cookie.Cookie: java.lang.String getName()>
<org.apache.http.cookie.Cookie: java.lang.String getComment()>
<org.apache.http.cookie.Cookie: java.util.Date getExpiryDate()>
<org.apache.http.cookie.Cookie: int[] getPorts()>
<org.apache.http.cookie.Cookie: java.lang.String getPath()>
<org.apache.http.cookie.Cookie: int getVersion()>
<org.apache.http.cookie.Cookie: boolean isPersistent()>
<org.apache.http.cookie.Cookie: boolean isExpired(java.util.Date)>
<org.apache.http.client.methods.HttpTrace: void <init>()>
<org.apache.http.client.methods.HttpTrace: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpTrace: void <init>(java.net.URI)>
<org.apache.http.client.methods.HttpTrace: void <init>(java.lang.String)>
<android.graphics.drawable.Drawable.ConstantState: void <init>()>
<android.graphics.drawable.Drawable.ConstantState: int getChangingConfigurations()>
<android.graphics.drawable.Drawable.ConstantState: android.graphics.drawable.Drawable newDrawable()>
<javax.security.auth.SubjectDomainCombiner: javax.security.auth.Subject getSubject()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void <init>()>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(T,long,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndSet(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean weakCompareAndSet(T,long,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAdd(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long decrementAndGet(T)>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.RuntimeException: void <init>()>
<java.security.KeyStoreSpi: java.util.Enumeration engineAliases()>
<java.security.KeyStoreSpi: void engineStore(java.io.OutputStream,char[])>
<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>
<java.security.KeyStoreSpi: int engineSize()>
<java.security.KeyStoreSpi: boolean engineEntryInstanceOf(java.lang.String,java.lang.Class)>
<java.security.KeyStoreSpi: void <init>()>
<java.security.KeyStoreSpi: void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)>
<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)>
<java.security.KeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])>
<java.security.KeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)>
<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>
<java.security.KeyStoreSpi: void engineStore(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>
<java.security.KeyStoreSpi: java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)>
<java.security.KeyStoreSpi: void engineSetEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])>
<java.security.KeyStoreSpi: void engineLoad(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStoreSpi: java.security.KeyStore.Entry engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>
<java.security.KeyStoreSpi: void engineDeleteEntry(java.lang.String)>
<java.security.KeyStoreSpi: java.util.Date engineGetCreationDate(java.lang.String)>
<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateParametersLen(org.apache.http.NameValuePair[])>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>
<org.apache.http.message.BasicHeaderValueFormatter: boolean isSeparator(char)>
<org.apache.http.message.BasicHeaderValueFormatter: boolean isUnsafe(char)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatElements(org.apache.http.HeaderElement[],boolean,org.apache.http.message.HeaderValueFormatter)>
<org.apache.http.message.BasicHeaderValueFormatter: void <init>()>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatParameters(org.apache.http.NameValuePair[],boolean,org.apache.http.message.HeaderValueFormatter)>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatHeaderElement(org.apache.http.HeaderElement,boolean,org.apache.http.message.HeaderValueFormatter)>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateElementsLen(org.apache.http.HeaderElement[])>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatNameValuePair(org.apache.http.NameValuePair,boolean,org.apache.http.message.HeaderValueFormatter)>
<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)>
<org.apache.http.protocol.SyncBasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>
<android.database.MatrixCursor.RowBuilder: android.database.MatrixCursor.RowBuilder add(java.lang.Object)>
<org.apache.http.impl.cookie.RFC2109VersionHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.RFC2109VersionHandler: void <init>()>
<org.apache.http.util.VersionInfo: java.lang.String getClassloader()>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)>
<org.apache.http.util.VersionInfo: java.lang.String getTimestamp()>
<org.apache.http.util.VersionInfo: java.lang.String getModule()>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader)>
<org.apache.http.util.VersionInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>
<org.apache.http.util.VersionInfo: java.lang.String getPackage()>
<org.apache.http.util.VersionInfo: java.lang.String getRelease()>
<org.apache.http.impl.io.HttpResponseWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpMessage)>
<android.app.AlertDialog.Builder: android.app.AlertDialog create()>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setInverseBackgroundForced(boolean)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCursor(android.database.Cursor,android.content.DialogInterface.OnClickListener,java.lang.String)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIcon(int)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface.OnMultiChoiceClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(int)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setItems(int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNeutralButton(int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface.OnMultiChoiceClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNegativeButton(int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog show()>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(int,int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setItems(java.lang.CharSequence[],android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnKeyListener(android.content.DialogInterface.OnKeyListener)>
<android.app.AlertDialog.Builder: void <init>(android.content.Context)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setView(android.view.View)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCancelable(boolean)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(int)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setPositiveButton(int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface.OnMultiChoiceClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnCancelListener(android.content.DialogInterface.OnCancelListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCustomTitle(android.view.View)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface.OnClickListener)>
<android.graphics.Paint.Cap: android.graphics.Paint.Cap[] values()>
<android.graphics.Paint.Cap: android.graphics.Paint.Cap valueOf(java.lang.String)>
<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>
<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>
<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int)>
<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>
<javax.net.ssl.SSLSocket: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLSocket: void startHandshake()>
<javax.net.ssl.SSLSocket: boolean getUseClientMode()>
<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>
<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>
<javax.net.ssl.SSLSocket: boolean getNeedClientAuth()>
<javax.net.ssl.SSLSocket: void setUseClientMode(boolean)>
<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int)>
<javax.net.ssl.SSLSocket: void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>
<javax.net.ssl.SSLSocket: boolean getEnableSessionCreation()>
<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int,java.net.InetAddress,int)>
<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>
<javax.net.ssl.SSLSocket: void <init>()>
<javax.net.ssl.SSLSocket: void setEnableSessionCreation(boolean)>
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>
<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLSocket: boolean getWantClientAuth()>
<android.content.res.XmlResourceParser: void close()>
<java.security.Security: int addProvider(java.security.Provider)>
<java.security.Security: int insertProviderAt(java.security.Provider,int)>
<java.security.Security: java.lang.String getProperty(java.lang.String)>
<java.security.Security: java.security.Provider[] getProviders(java.util.Map)>
<java.security.Security: java.security.Provider getProvider(java.lang.String)>
<java.security.Security: void removeProvider(java.lang.String)>
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)>
<java.security.Security: java.util.Set getAlgorithms(java.lang.String)>
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)>
<java.security.Security: void setProperty(java.lang.String,java.lang.String)>
<java.security.Security: java.security.Provider[] getProviders()>
<java.util.logging.Formatter: void <init>()>
<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>
<java.util.logging.Formatter: java.lang.String format(java.util.logging.LogRecord)>
<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)>
<java.util.logging.Formatter: java.lang.String formatMessage(java.util.logging.LogRecord)>
<java.lang.NullPointerException: void <init>()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<javax.crypto.NullCipher: void <init>()>
<android.util.MonthDisplayHelper: int getYear()>
<android.util.MonthDisplayHelper: int getDayAt(int,int)>
<android.util.MonthDisplayHelper: int getMonth()>
<android.util.MonthDisplayHelper: int getWeekStartDay()>
<android.util.MonthDisplayHelper: void nextMonth()>
<android.util.MonthDisplayHelper: void <init>(int,int,int)>
<android.util.MonthDisplayHelper: void <init>(int,int)>
<android.util.MonthDisplayHelper: int getOffset()>
<android.util.MonthDisplayHelper: int getFirstDayOfMonth()>
<android.util.MonthDisplayHelper: int getColumnOf(int)>
<android.util.MonthDisplayHelper: int[] getDigitsForRow(int)>
<android.util.MonthDisplayHelper: int getRowOf(int)>
<android.util.MonthDisplayHelper: void previousMonth()>
<android.util.MonthDisplayHelper: int getNumberOfDaysInMonth()>
<android.util.MonthDisplayHelper: boolean isWithinCurrentMonth(int,int)>
<org.apache.http.auth.NTCredentials: java.security.Principal getUserPrincipal()>
<org.apache.http.auth.NTCredentials: java.lang.String getWorkstation()>
<org.apache.http.auth.NTCredentials: java.lang.String getDomain()>
<org.apache.http.auth.NTCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.http.auth.NTCredentials: java.lang.String getUserName()>
<org.apache.http.auth.NTCredentials: java.lang.String getPassword()>
<org.apache.http.auth.NTCredentials: void <init>(java.lang.String)>
<java.text.Annotation: java.lang.Object getValue()>
<java.text.Annotation: void <init>(java.lang.Object)>
<java.lang.Math: double expm1(double)>
<java.lang.Math: int round(float)>
<java.lang.Math: long min(long,long)>
<java.lang.Math: double random()>
<java.lang.Math: double atan(double)>
<java.lang.Math: double acos(double)>
<java.lang.Math: double asin(double)>
<java.lang.Math: double exp(double)>
<java.lang.Math: double hypot(double,double)>
<java.lang.Math: float max(float,float)>
<java.lang.Math: float abs(float)>
<java.lang.Math: double log10(double)>
<java.lang.Math: int min(int,int)>
<java.lang.Math: float signum(float)>
<java.lang.Math: double ulp(double)>
<java.lang.Math: float min(float,float)>
<java.lang.Math: double cosh(double)>
<java.lang.Math: double rint(double)>
<java.lang.Math: double ceil(double)>
<java.lang.Math: double min(double,double)>
<java.lang.Math: double sinh(double)>
<java.lang.Math: double IEEEremainder(double,double)>
<java.lang.Math: double max(double,double)>
<java.lang.Math: double toRadians(double)>
<java.lang.Math: double cos(double)>
<java.lang.Math: double floor(double)>
<java.lang.Math: long max(long,long)>
<java.lang.Math: float ulp(float)>
<java.lang.Math: double tan(double)>
<java.lang.Math: double atan2(double,double)>
<java.lang.Math: int max(int,int)>
<java.lang.Math: double sin(double)>
<java.lang.Math: double signum(double)>
<java.lang.Math: double abs(double)>
<java.lang.Math: double log(double)>
<java.lang.Math: double log1p(double)>
<java.lang.Math: double tanh(double)>
<java.lang.Math: int abs(int)>
<java.lang.Math: long abs(long)>
<java.lang.Math: long round(double)>
<java.lang.Math: double cbrt(double)>
<java.lang.Math: double toDegrees(double)>
<java.lang.Math: double sqrt(double)>
<java.lang.Math: double pow(double,double)>
<javax.microedition.khronos.opengles.GL10Ext: int glQueryMatrixxOES(int[],int,int[],int)>
<javax.microedition.khronos.opengles.GL10Ext: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
<android.widget.TextView.BufferType: android.widget.TextView.BufferType valueOf(java.lang.String)>
<android.widget.TextView.BufferType: android.widget.TextView.BufferType[] values()>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.graphics.Matrix: void setRotate(float)>
<android.graphics.Matrix: void mapPoints(float[])>
<android.graphics.Matrix: void setSinCos(float,float)>
<android.graphics.Matrix: void <init>()>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<android.graphics.Matrix: boolean preSkew(float,float)>
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<android.graphics.Matrix: void setSinCos(float,float,float,float)>
<android.graphics.Matrix: void mapVectors(float[])>
<android.graphics.Matrix: void setScale(float,float)>
<android.graphics.Matrix: void setSkew(float,float)>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: void reset()>
<android.graphics.Matrix: float mapRadius(float)>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix.ScaleToFit)>
<android.graphics.Matrix: void setSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postRotate(float)>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.graphics.Matrix: boolean preSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float)>
<android.graphics.Matrix: boolean preScale(float,float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.graphics.Matrix: void <init>(android.graphics.Matrix)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float,float,float)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: boolean preRotate(float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: boolean isIdentity()>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: java.lang.String toShortString()>
<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: boolean canSelectArbitrarily()>
<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<java.lang.ref.PhantomReference: void <init>(T,java.lang.ref.ReferenceQueue)>
<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.LineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<java.net.SecureCacheResponse: void <init>()>
<java.net.SecureCacheResponse: java.lang.String getCipherSuite()>
<java.net.SecureCacheResponse: java.util.List getServerCertificateChain()>
<java.net.SecureCacheResponse: java.security.Principal getPeerPrincipal()>
<java.net.SecureCacheResponse: java.util.List getLocalCertificateChain()>
<java.net.SecureCacheResponse: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()>
<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)>
<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()>
<javax.net.ssl.TrustManagerFactory: void <init>(javax.net.ssl.TrustManagerFactorySpi,java.security.Provider,java.lang.String)>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)>
<javax.net.ssl.TrustManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)>
<org.apache.http.impl.io.AbstractMessageWriter: void writeHeadLine(org.apache.http.HttpMessage)>
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)>
<org.apache.http.impl.io.AbstractMessageWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<android.text.TextUtils.EllipsizeCallback: void ellipsized(int,int)>
<java.util.AbstractSequentialList: void <init>()>
<java.util.AbstractSequentialList: E get(int)>
<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>
<android.test.ActivityInstrumentationTestCase: void <init>(java.lang.String,java.lang.Class,boolean)>
<android.test.ActivityInstrumentationTestCase: T getActivity()>
<android.test.ActivityInstrumentationTestCase: void testActivityTestCaseSetUpProperly()>
<android.test.ActivityInstrumentationTestCase: void <init>(java.lang.String,java.lang.Class)>
<java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.io.FileNotFoundException: void <init>()>
<javax.security.cert.CertificateExpiredException: void <init>(java.lang.String)>
<javax.security.cert.CertificateExpiredException: void <init>()>
<android.util.StateSet: void <init>()>
<android.util.StateSet: int[] trimStateSet(int[],int)>
<android.util.StateSet: boolean stateSetMatches(int[],int[])>
<android.util.StateSet: boolean isWildCard(int[])>
<android.util.StateSet: java.lang.String dump(int[])>
<android.util.StateSet: boolean stateSetMatches(int[],int)>
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)>
<android.graphics.drawable.TransitionDrawable: void startTransition(int)>
<android.graphics.drawable.TransitionDrawable: void reverseTransition(int)>
<android.graphics.drawable.TransitionDrawable: void resetTransition()>
<android.graphics.drawable.TransitionDrawable: boolean isCrossFadeEnabled()>
<java.security.MessageDigestSpi: void <init>()>
<java.security.MessageDigestSpi: void engineReset()>
<java.security.MessageDigestSpi: void engineUpdate(byte)>
<java.security.MessageDigestSpi: java.lang.Object clone()>
<java.security.MessageDigestSpi: int engineGetDigestLength()>
<java.security.MessageDigestSpi: byte[] engineDigest()>
<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)>
<java.security.MessageDigestSpi: int engineDigest(byte[],int,int)>
<java.security.MessageDigestSpi: void engineUpdate(java.nio.ByteBuffer)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: int getCount()>
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CursorAdapter: android.database.Cursor getCursor()>
<android.widget.CursorAdapter: long getItemId(int)>
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.widget.CursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<android.widget.CursorAdapter: void init(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor)>
<android.widget.CursorAdapter: android.widget.Filter getFilter()>
<android.widget.CursorAdapter: java.lang.CharSequence convertToString(android.database.Cursor)>
<android.widget.CursorAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorAdapter: java.lang.Object getItem(int)>
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.CursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>
<java.io.Writer: void write(char[])>
<java.io.Writer: void <init>()>
<java.io.Writer: java.io.Writer append(char)>
<java.io.Writer: void write(int)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.io.Writer: void write(java.lang.String,int,int)>
<java.io.Writer: void <init>(java.lang.Object)>
<java.io.Writer: void write(char[],int,int)>
<java.io.Writer: void flush()>
<java.io.Writer: void write(java.lang.String)>
<java.io.Writer: void close()>
<android.widget.TimePicker: boolean is24HourView()>
<android.widget.TimePicker: void <init>(android.content.Context)>
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)>
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()>
<android.widget.TimePicker: void setCurrentMinute(java.lang.Integer)>
<android.widget.TimePicker: java.lang.Integer getCurrentHour()>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet)>
<java.util.logging.Handler: java.util.logging.Formatter getFormatter()>
<java.util.logging.Handler: void setErrorManager(java.util.logging.ErrorManager)>
<java.util.logging.Handler: void close()>
<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>
<java.util.logging.Handler: java.lang.String getEncoding()>
<java.util.logging.Handler: void <init>()>
<java.util.logging.Handler: java.util.logging.Filter getFilter()>
<java.util.logging.Handler: void setEncoding(java.lang.String)>
<java.util.logging.Handler: java.util.logging.Level getLevel()>
<java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>
<java.util.logging.Handler: void flush()>
<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()>
<java.util.logging.Handler: void setLevel(java.util.logging.Level)>
<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>
<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>
<android.graphics.PathDashPathEffect.Style: android.graphics.PathDashPathEffect.Style[] values()>
<android.graphics.PathDashPathEffect.Style: android.graphics.PathDashPathEffect.Style valueOf(java.lang.String)>
<android.view.animation.DecelerateInterpolator: void <init>(float)>
<android.view.animation.DecelerateInterpolator: void <init>()>
<android.view.animation.DecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)>
<java.util.Formattable: void formatTo(java.util.Formatter,int,int,int)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderView(android.view.View)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(int)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)>
<android.view.ContextMenu: void clearHeader()>
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>
<android.app.ActivityManager.RunningTaskInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RunningTaskInfo: void <init>()>
<android.app.ActivityManager.RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.RunningTaskInfo: int describeContents()>
<java.security.Provider.Service: java.lang.Object newInstance(java.lang.Object)>
<java.security.Provider.Service: java.lang.String getType()>
<java.security.Provider.Service: java.lang.String getAlgorithm()>
<java.security.Provider.Service: java.lang.String getClassName()>
<java.security.Provider.Service: java.lang.String getAttribute(java.lang.String)>
<java.security.Provider.Service: void <init>(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)>
<java.security.Provider.Service: boolean supportsParameter(java.lang.Object)>
<java.security.Provider.Service: java.security.Provider getProvider()>
<java.text.ParsePosition: void <init>(int)>
<java.text.ParsePosition: int getIndex()>
<java.text.ParsePosition: void setErrorIndex(int)>
<java.text.ParsePosition: void setIndex(int)>
<java.text.ParsePosition: int getErrorIndex()>
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter.FilterListener)>
<android.widget.Filter: void <init>()>
<android.widget.Filter: void publishResults(java.lang.CharSequence,android.widget.Filter.FilterResults)>
<android.widget.Filter: void filter(java.lang.CharSequence)>
<android.widget.Filter: android.widget.Filter.FilterResults performFiltering(java.lang.CharSequence)>
<android.widget.Filter: java.lang.CharSequence convertResultToString(java.lang.Object)>
<java.security.cert.CertPathBuilderSpi: java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)>
<java.security.cert.CertPathBuilderSpi: void <init>()>
<android.content.Intent.ShortcutIconResource: int describeContents()>
<android.content.Intent.ShortcutIconResource: void <init>()>
<android.content.Intent.ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent.ShortcutIconResource: android.content.Intent.ShortcutIconResource fromContext(android.content.Context,int)>
<android.graphics.PixelFormat: void getPixelFormatInfo(int,android.graphics.PixelFormat)>
<android.graphics.PixelFormat: boolean formatHasAlpha(int)>
<android.graphics.PixelFormat: void <init>()>
<android.webkit.DateSorter: void <init>(android.content.Context)>
<android.webkit.DateSorter: java.lang.String getLabel(int)>
<android.webkit.DateSorter: int getIndex(long)>
<android.webkit.DateSorter: long getBoundary(int)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void shutdown()>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeExpiredConnections()>
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<android.content.pm.IPackageInstallObserver.Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.content.pm.IPackageInstallObserver.Stub: android.os.IBinder asBinder()>
<android.content.pm.IPackageInstallObserver.Stub: void <init>()>
<android.content.pm.IPackageInstallObserver.Stub: android.content.pm.IPackageInstallObserver asInterface(android.os.IBinder)>
<junit.runner.Version: java.lang.String id()>
<android.database.DataSetObservable: void <init>()>
<android.database.DataSetObservable: void notifyInvalidated()>
<android.database.DataSetObservable: void notifyChanged()>
<java.nio.charset.UnmappableCharacterException: int getInputLength()>
<java.nio.charset.UnmappableCharacterException: void <init>(int)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(int)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void init(java.io.OutputStream,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flush()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void <init>()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)>
<android.database.SQLException: void <init>()>
<android.database.SQLException: void <init>(java.lang.String)>
<java.lang.annotation.ElementType: java.lang.annotation.ElementType[] values()>
<java.lang.annotation.ElementType: java.lang.annotation.ElementType valueOf(java.lang.String)>
<java.util.ListResourceBundle: void <init>()>
<java.util.ListResourceBundle: java.util.Enumeration getKeys()>
<java.util.ListResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<java.util.ListResourceBundle: java.lang.Object[][] getContents()>
<android.content.pm.ResolveInfo: void <init>()>
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: int getIconResource()>
<android.content.pm.ResolveInfo: int describeContents()>
<android.webkit.Plugin: void setDescription(java.lang.String)>
<android.webkit.Plugin: java.lang.String getPath()>
<android.webkit.Plugin: java.lang.String getDescription()>
<android.webkit.Plugin: void setFileName(java.lang.String)>
<android.webkit.Plugin: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.Plugin: void dispatchClickEvent(android.content.Context)>
<android.webkit.Plugin: void setClickHandler(android.webkit.Plugin.PreferencesClickHandler)>
<android.webkit.Plugin: java.lang.String getName()>
<android.webkit.Plugin: void setPath(java.lang.String)>
<android.webkit.Plugin: java.lang.String getFileName()>
<android.webkit.Plugin: void setName(java.lang.String)>
<org.apache.http.impl.cookie.AbstractCookieSpec: void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler)>
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String)>
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)>
<org.apache.http.impl.cookie.AbstractCookieSpec: void <init>()>
<org.apache.http.impl.cookie.AbstractCookieSpec: java.util.Collection getAttribHandlers()>
<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>
<java.text.DateFormatSymbols: java.lang.Object clone()>
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>
<java.text.DateFormatSymbols: void setShortMonths(java.lang.String[])>
<java.text.DateFormatSymbols: void <init>(java.util.Locale)>
<java.text.DateFormatSymbols: void setWeekdays(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>
<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>
<java.text.DateFormatSymbols: void setEras(java.lang.String[])>
<java.text.DateFormatSymbols: void setAmPmStrings(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>
<java.text.DateFormatSymbols: void setMonths(java.lang.String[])>
<java.text.DateFormatSymbols: void setShortWeekdays(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>
<java.text.DateFormatSymbols: void setZoneStrings(java.lang.String[][])>
<java.text.DateFormatSymbols: void <init>()>
<java.text.DateFormatSymbols: java.lang.String[] getMonths()>
<java.text.DateFormatSymbols: void setLocalPatternChars(java.lang.String)>
<java.text.DateFormatSymbols: java.lang.String[] getEras()>
<android.graphics.Picture: void endRecording()>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)>
<android.graphics.Picture: int getWidth()>
<android.graphics.Picture: int getHeight()>
<android.graphics.Picture: void <init>()>
<android.graphics.Picture: void <init>(android.graphics.Picture)>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.graphics.Picture: void writeToStream(java.io.OutputStream)>
<org.xmlpull.v1.sax2.Driver: int getIndex(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getValue(int)>
<org.xmlpull.v1.sax2.Driver: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xmlpull.v1.sax2.Driver: void <init>()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getPublicId()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getValue(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.ContentHandler getContentHandler()>
<org.xmlpull.v1.sax2.Driver: int getIndex(java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: void parse(org.xml.sax.InputSource)>
<org.xmlpull.v1.sax2.Driver: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xmlpull.v1.sax2.Driver: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.DTDHandler getDTDHandler()>
<org.xmlpull.v1.sax2.Driver: void setProperty(java.lang.String,java.lang.Object)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getType(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getValue(java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: int getLineNumber()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getLocalName(int)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getType(int)>
<org.xmlpull.v1.sax2.Driver: void startElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getSystemId()>
<org.xmlpull.v1.sax2.Driver: int getLength()>
<org.xmlpull.v1.sax2.Driver: void parseSubTree(org.xmlpull.v1.XmlPullParser)>
<org.xmlpull.v1.sax2.Driver: void <init>(org.xmlpull.v1.XmlPullParser)>
<org.xmlpull.v1.sax2.Driver: void parse(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xmlpull.v1.sax2.Driver: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getURI(int)>
<org.xmlpull.v1.sax2.Driver: int getColumnNumber()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getQName(int)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getType(java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.Object getProperty(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.EntityResolver getEntityResolver()>
<android.text.BoringLayout.Metrics: void <init>()>
<android.provider.MediaStore.Audio.Artists: void <init>()>
<android.provider.MediaStore.Audio.Artists: android.net.Uri getContentUri(java.lang.String)>
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>
<java.util.logging.SimpleFormatter: void <init>()>
<java.util.logging.SimpleFormatter: java.lang.String format(java.util.logging.LogRecord)>
<android.content.pm.ApplicationInfo.DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo.DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<org.apache.http.client.params.ClientParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.client.params.ClientParamBean: void setCookiePolicy(java.lang.String)>
<org.apache.http.client.params.ClientParamBean: void setAllowCircularRedirects(boolean)>
<org.apache.http.client.params.ClientParamBean: void setDefaultHeaders(java.util.Collection)>
<org.apache.http.client.params.ClientParamBean: void setVirtualHost(org.apache.http.HttpHost)>
<org.apache.http.client.params.ClientParamBean: void setRejectRelativeRedirect(boolean)>
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory)>
<org.apache.http.client.params.ClientParamBean: void setMaxRedirects(int)>
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)>
<org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)>
<org.apache.http.client.params.ClientParamBean: void setDefaultHost(org.apache.http.HttpHost)>
<org.apache.http.client.params.ClientParamBean: void setHandleRedirects(boolean)>
<android.widget.DatePicker.OnDateChangedListener: void onDateChanged(android.widget.DatePicker,int,int,int)>
<android.text.method.NumberKeyListener: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.method.NumberKeyListener: boolean ok(char[],char)>
<android.text.method.NumberKeyListener: char[] getAcceptedChars()>
<android.text.method.NumberKeyListener: void <init>()>
<android.text.method.NumberKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<java.security.cert.CertStoreParameters: java.lang.Object clone()>
<java.lang.NoSuchFieldException: void <init>()>
<java.lang.NoSuchFieldException: void <init>(java.lang.String)>
<org.xml.sax.DTDHandler: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.DTDHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.lang.Long: java.lang.String toHexString(long)>
<java.lang.Long: java.lang.String toString(long,int)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<java.lang.Long: int signum(long)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
<java.lang.Long: java.lang.Long decode(java.lang.String)>
<java.lang.Long: long rotateLeft(long,int)>
<java.lang.Long: int numberOfLeadingZeros(long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>
<java.lang.Long: int numberOfTrailingZeros(long)>
<java.lang.Long: long longValue()>
<java.lang.Long: java.lang.String toString(long)>
<java.lang.Long: int compareTo(java.lang.Long)>
<java.lang.Long: java.lang.String toOctalString(long)>
<java.lang.Long: long reverse(long)>
<java.lang.Long: long highestOneBit(long)>
<java.lang.Long: int intValue()>
<java.lang.Long: double doubleValue()>
<java.lang.Long: float floatValue()>
<java.lang.Long: long reverseBytes(long)>
<java.lang.Long: int bitCount(long)>
<java.lang.Long: java.lang.String toBinaryString(long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.Long: void <init>(long)>
<java.lang.Long: long parseLong(java.lang.String,int)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>
<java.lang.Long: long lowestOneBit(long)>
<java.lang.Long: void <init>(java.lang.String)>
<java.lang.Long: long rotateRight(long,int)>
<android.provider.MediaStore: void <init>()>
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>
<java.lang.ArithmeticException: void <init>()>
<java.lang.ArithmeticException: void <init>(java.lang.String)>
<android.widget.ToggleButton: void <init>(android.content.Context)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ToggleButton: void setTextOn(java.lang.CharSequence)>
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()>
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()>
<android.widget.ToggleButton: void setTextOff(java.lang.CharSequence)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.security.Policy: void <init>()>
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>
<java.security.Policy: void setPolicy(java.security.Policy)>
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<java.security.Policy: java.security.Policy getPolicy()>
<java.security.Policy: boolean implies(java.security.ProtectionDomain,java.security.Permission)>
<java.security.Policy: void refresh()>
<android.content.IntentFilter.AuthorityEntry: int match(android.net.Uri)>
<android.content.IntentFilter.AuthorityEntry: java.lang.String getHost()>
<android.content.IntentFilter.AuthorityEntry: int getPort()>
<android.content.IntentFilter.AuthorityEntry: void <init>(java.lang.String,java.lang.String)>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>
<java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<java.io.ObjectStreamField: int getOffset()>
<java.io.ObjectStreamField: boolean isUnshared()>
<java.io.ObjectStreamField: java.lang.Class getType()>
<java.io.ObjectStreamField: char getTypeCode()>
<java.io.ObjectStreamField: java.lang.String getTypeString()>
<java.io.ObjectStreamField: boolean isPrimitive()>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
<java.io.ObjectStreamField: java.lang.String getName()>
<java.io.ObjectStreamField: void setOffset(int)>
<java.nio.InvalidMarkException: void <init>()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>
<org.xmlpull.v1.XmlPullParser: int getEventType()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: boolean isWhitespace()>
<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: int nextTag()>
<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)>
<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>
<org.xmlpull.v1.XmlPullParser: int getDepth()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>
<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])>
<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>
<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)>
<org.xmlpull.v1.XmlPullParser: int nextToken()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: int next()>
<org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()>
<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: int getColumnNumber()>
<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)>
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>
<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>
<org.xmlpull.v1.XmlPullParser: int getLineNumber()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>
<java.math.MathContext: void <init>(int)>
<java.math.MathContext: void <init>(java.lang.String)>
<java.math.MathContext: int getPrecision()>
<java.math.MathContext: java.math.RoundingMode getRoundingMode()>
<java.math.MathContext: void <init>(int,java.math.RoundingMode)>
<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>
<android.R.xml: void <init>()>
<android.view.FocusFinder: android.view.View findNearestTouchable(android.view.ViewGroup,int,int,int,int[])>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)>
<android.view.FocusFinder: android.view.FocusFinder getInstance()>
<java.util.PropertyResourceBundle: void <init>(java.io.InputStream)>
<java.util.PropertyResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>
<javax.net.ssl.SSLPermission: void <init>(java.lang.String,java.lang.String)>
<javax.net.ssl.SSLPermission: void <init>(java.lang.String)>
<org.apache.http.protocol.UriPatternMatcher: void register(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>
<org.apache.http.protocol.UriPatternMatcher: void <init>()>
<org.apache.http.protocol.UriPatternMatcher: void setHandlers(java.util.Map)>
<org.apache.http.protocol.UriPatternMatcher: void unregister(java.lang.String)>
<org.apache.http.protocol.UriPatternMatcher: java.lang.Object lookup(java.lang.String)>
<android.view.SubMenu: android.view.SubMenu setIcon(int)>
<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>
<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)>
<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)>
<android.view.SubMenu: android.view.MenuItem getItem()>
<android.view.SubMenu: void clearHeader()>
<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>
<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)>
<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>
<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>
<java.sql.PreparedStatement: void setByte(int,byte)>
<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int,int)>
<java.sql.PreparedStatement: void setBoolean(int,boolean)>
<java.sql.PreparedStatement: void setBytes(int,byte[])>
<java.sql.PreparedStatement: void setObject(int,java.lang.Object)>
<java.sql.PreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<java.sql.PreparedStatement: boolean execute()>
<java.sql.PreparedStatement: java.sql.ResultSetMetaData getMetaData()>
<java.sql.PreparedStatement: void setLong(int,long)>
<java.sql.PreparedStatement: void setTime(int,java.sql.Time)>
<java.sql.PreparedStatement: void setRef(int,java.sql.Ref)>
<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int)>
<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,int)>
<java.sql.PreparedStatement: void setFloat(int,float)>
<java.sql.PreparedStatement: int executeUpdate()>
<java.sql.PreparedStatement: void setShort(int,short)>
<java.sql.PreparedStatement: void setInt(int,int)>
<java.sql.PreparedStatement: void setString(int,java.lang.String)>
<java.sql.PreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)>
<java.sql.PreparedStatement: void setNull(int,int)>
<java.sql.PreparedStatement: void setURL(int,java.net.URL)>
<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>
<java.sql.PreparedStatement: void setArray(int,java.sql.Array)>
<java.sql.PreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>
<java.sql.PreparedStatement: void clearParameters()>
<java.sql.PreparedStatement: void setClob(int,java.sql.Clob)>
<java.sql.PreparedStatement: void setNull(int,int,java.lang.String)>
<java.sql.PreparedStatement: void setDate(int,java.sql.Date)>
<java.sql.PreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)>
<java.sql.PreparedStatement: void setCharacterStream(int,java.io.Reader,int)>
<java.sql.PreparedStatement: void addBatch()>
<java.sql.PreparedStatement: void setAsciiStream(int,java.io.InputStream,int)>
<java.sql.PreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)>
<java.sql.PreparedStatement: void setDouble(int,double)>
<java.sql.PreparedStatement: void setTimestamp(int,java.sql.Timestamp)>
<java.sql.PreparedStatement: void setBlob(int,java.sql.Blob)>
<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>
<java.security.spec.X509EncodedKeySpec: java.lang.String getFormat()>
<java.util.concurrent.locks.LockSupport: void park()>
<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>
<java.util.concurrent.locks.LockSupport: void parkNanos(long)>
<java.util.concurrent.locks.LockSupport: void parkUntil(long)>
<org.apache.http.cookie.CookieSpec: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.cookie.CookieSpec: int getVersion()>
<org.apache.http.cookie.CookieSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.cookie.CookieSpec: java.util.List formatCookies(java.util.List)>
<org.apache.http.cookie.CookieSpec: org.apache.http.Header getVersionHeader()>
<org.apache.http.cookie.CookieSpec: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.ListPreference: java.lang.CharSequence getEntry()>
<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])>
<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])>
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()>
<android.preference.ListPreference: java.lang.String getValue()>
<android.preference.ListPreference: void setEntryValues(int)>
<android.preference.ListPreference: void <init>(android.content.Context)>
<android.preference.ListPreference: int findIndexOfValue(java.lang.String)>
<android.preference.ListPreference: void setValueIndex(int)>
<android.preference.ListPreference: void setEntries(int)>
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()>
<android.preference.ListPreference: void setValue(java.lang.String)>
<java.util.jar.Pack200.Unpacker: void unpack(java.io.File,java.util.jar.JarOutputStream)>
<java.util.jar.Pack200.Unpacker: void unpack(java.io.InputStream,java.util.jar.JarOutputStream)>
<java.util.jar.Pack200.Unpacker: java.util.SortedMap properties()>
<java.security.Permission: java.lang.String getName()>
<java.security.Permission: boolean equals(java.lang.Object)>
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>
<java.security.Permission: java.lang.String getActions()>
<java.security.Permission: boolean implies(java.security.Permission)>
<java.security.Permission: int hashCode()>
<java.security.Permission: void checkGuard(java.lang.Object)>
<java.security.Permission: void <init>(java.lang.String)>
<android.text.style.SuperscriptSpan: void <init>()>
<android.text.style.SuperscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SuperscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.media.MediaPlayer.OnPreparedListener: void onPrepared(android.media.MediaPlayer)>
<android.os.BadParcelableException: void <init>(java.lang.String)>
<android.os.BadParcelableException: void <init>(java.lang.Exception)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder reverse()>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>
<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>
<java.lang.StringBuilder: void <init>(java.lang.String)>
<java.lang.StringBuilder: void <init>()>
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>
<java.lang.StringBuilder: void <init>(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.Throwable)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertificateEncodingException: void <init>()>
<java.lang.StackOverflowError: void <init>()>
<java.lang.StackOverflowError: void <init>(java.lang.String)>
<org.apache.http.impl.cookie.BasicCommentHandler: void <init>()>
<org.apache.http.impl.cookie.BasicCommentHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<android.os.BatteryManager: void <init>()>
<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.Throwable)>
<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String,java.lang.Throwable)>
<java.sql.BatchUpdateException: void <init>(int[])>
<java.sql.BatchUpdateException: int[] getUpdateCounts()>
<java.sql.BatchUpdateException: void <init>(java.lang.String,java.lang.String,int[])>
<java.sql.BatchUpdateException: void <init>(java.lang.String,int[])>
<java.sql.BatchUpdateException: void <init>()>
<java.sql.BatchUpdateException: void <init>(java.lang.String,java.lang.String,int,int[])>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void deleteClosedConnections()>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeConnection(org.apache.http.conn.OperatedClientConnection)>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void <init>()>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void handleLostEntry(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void shutdown()>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void enableConnectionGC()>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeExpiredConnections()>
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void handleReference(java.lang.ref.Reference)>
<javax.security.cert.CertificateParsingException: void <init>()>
<javax.security.cert.CertificateParsingException: void <init>(java.lang.String)>
<org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.client.params.HttpClientParams: boolean isAuthenticating(org.apache.http.params.HttpParams)>
<org.apache.http.client.params.HttpClientParams: boolean isRedirecting(org.apache.http.params.HttpParams)>
<org.apache.http.client.params.HttpClientParams: java.lang.String getCookiePolicy(org.apache.http.params.HttpParams)>
<org.apache.http.client.params.HttpClientParams: void setCookiePolicy(org.apache.http.params.HttpParams,java.lang.String)>
<javax.net.ssl.SSLSession: java.security.Principal getPeerPrincipal()>
<javax.net.ssl.SSLSession: java.lang.Object getValue(java.lang.String)>
<javax.net.ssl.SSLSession: void invalidate()>
<javax.net.ssl.SSLSession: int getPeerPort()>
<javax.net.ssl.SSLSession: long getCreationTime()>
<javax.net.ssl.SSLSession: javax.security.cert.X509Certificate[] getPeerCertificateChain()>
<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>
<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>
<javax.net.ssl.SSLSession: void putValue(java.lang.String,java.lang.Object)>
<javax.net.ssl.SSLSession: long getLastAccessedTime()>
<javax.net.ssl.SSLSession: byte[] getId()>
<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>
<javax.net.ssl.SSLSession: boolean isValid()>
<javax.net.ssl.SSLSession: int getPacketBufferSize()>
<javax.net.ssl.SSLSession: javax.net.ssl.SSLSessionContext getSessionContext()>
<javax.net.ssl.SSLSession: void removeValue(java.lang.String)>
<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getLocalCertificates()>
<javax.net.ssl.SSLSession: java.lang.String[] getValueNames()>
<javax.net.ssl.SSLSession: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.SSLSession: java.lang.String getProtocol()>
<javax.net.ssl.SSLSession: int getApplicationBufferSize()>
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<org.apache.http.impl.DefaultHttpServerConnection: void <init>()>
<android.view.MenuInflater: void inflate(int,android.view.Menu)>
<android.view.MenuInflater: void <init>(android.content.Context)>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailBody()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
<android.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>
<android.telephony.gsm.SmsMessage: byte[] getUserData()>
<android.telephony.gsm.SmsMessage: boolean isReplace()>
<android.telephony.gsm.SmsMessage: boolean isMwiDontStore()>
<android.telephony.gsm.SmsMessage: java.lang.String getPseudoSubject()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>
<android.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>
<android.telephony.gsm.SmsMessage: boolean isEmail()>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailFrom()>
<android.telephony.gsm.SmsMessage: int getStatusOnSim()>
<android.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.String,boolean)>
<android.telephony.gsm.SmsMessage: void <init>()>
<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
<android.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.telephony.gsm.SmsMessage: boolean isMWISetMessage()>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>
<android.telephony.gsm.SmsMessage: int getIndexOnSim()>
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage.MessageClass getMessageClass()>
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>
<android.telephony.gsm.SmsMessage: int getStatus()>
<android.telephony.gsm.SmsMessage: byte[] getPdu()>
<android.telephony.gsm.SmsMessage: java.lang.String getServiceCenterAddress()>
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>
<android.webkit.CallbackProxy: android.webkit.WebView createWindow(boolean,boolean)>
<android.webkit.CallbackProxy: boolean uiOverrideKeyEvent(android.view.KeyEvent)>
<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)>
<android.webkit.CallbackProxy: void onReceivedError(int,java.lang.String,java.lang.String)>
<android.webkit.CallbackProxy: void setWebChromeClient(android.webkit.WebChromeClient)>
<android.webkit.CallbackProxy: void setWebViewClient(android.webkit.WebViewClient)>
<android.webkit.CallbackProxy: void onCloseWindow(android.webkit.WebView)>
<android.webkit.CallbackProxy: int getProgress()>
<android.webkit.CallbackProxy: void onReceivedTitle(java.lang.String)>
<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)>
<android.webkit.CallbackProxy: boolean shouldOverrideUrlLoading(java.lang.String)>
<android.webkit.CallbackProxy: void doUpdateVisitedHistory(java.lang.String,boolean)>
<android.webkit.CallbackProxy: boolean onJsBeforeUnload(java.lang.String,java.lang.String)>
<android.webkit.CallbackProxy: java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.CallbackProxy: void onPageStarted(java.lang.String,android.graphics.Bitmap)>
<android.webkit.CallbackProxy: void onPageFinished(java.lang.String)>
<android.webkit.CallbackProxy: boolean onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>
<android.webkit.CallbackProxy: void onProgressChanged(int)>
<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>
<android.webkit.CallbackProxy: void onScaleChanged(float,float)>
<android.webkit.CallbackProxy: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>
<android.webkit.CallbackProxy: void <init>(android.content.Context,android.webkit.WebView)>
<android.webkit.CallbackProxy: void onFormResubmission(android.os.Message,android.os.Message)>
<android.webkit.CallbackProxy: void onUnhandledKeyEvent(android.view.KeyEvent)>
<android.webkit.CallbackProxy: void onTooManyRedirects(android.os.Message,android.os.Message)>
<android.webkit.CallbackProxy: void setDownloadListener(android.webkit.DownloadListener)>
<android.webkit.CallbackProxy: boolean onJsConfirm(java.lang.String,java.lang.String)>
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.webkit.CallbackProxy: void onRequestFocus()>
<android.webkit.CallbackProxy: void onLoadResource(java.lang.String)>
<android.webkit.CallbackProxy: void onReceivedIcon(android.graphics.Bitmap)>
<java.lang.ref.SoftReference: void <init>(T,java.lang.ref.ReferenceQueue)>
<java.lang.ref.SoftReference: void <init>(T)>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<android.content.ContextWrapper: java.lang.String[] databaseList()>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
<android.content.ContextWrapper: boolean stopService(android.content.Intent)>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.content.ContextWrapper: android.content.res.Resources.Theme getTheme()>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: java.lang.String[] fileList()>
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.ContextWrapper: void setTheme(int)>
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>
<android.content.ContextWrapper: void startActivity(android.content.Intent)>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void <init>(android.content.Context)>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream)>
<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>
<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>
<java.security.spec.MGF1ParameterSpec: void <init>(java.lang.String)>
<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[])>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void lockInterruptibly()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void unlock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: boolean tryLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void lock()>
<java.lang.IncompatibleClassChangeError: void <init>()>
<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>
<android.util.Config: void <init>()>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AutoCompleteTextView: void replaceText(java.lang.CharSequence)>
<android.widget.AutoCompleteTextView: java.lang.CharSequence convertSelectionToString(java.lang.Object)>
<android.widget.AutoCompleteTextView: void performFiltering(java.lang.CharSequence,int)>
<android.widget.AutoCompleteTextView: boolean isPopupShowing()>
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView.Validator)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemSelectedListener getItemSelectedListener()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemClickListener getItemClickListener()>
<android.widget.AutoCompleteTextView: void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.widget.AutoCompleteTextView: void showDropDown()>
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()>
<android.widget.AutoCompleteTextView: void setThreshold(int)>
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView.Validator getValidator()>
<android.widget.AutoCompleteTextView: void setAdapter(T)>
<android.widget.AutoCompleteTextView: int getThreshold()>
<android.widget.AutoCompleteTextView: void onFilterComplete(int)>
<android.widget.AutoCompleteTextView: void performValidation()>
<android.widget.AutoCompleteTextView: void dismissDropDown()>
<android.widget.AutoCompleteTextView: void performCompletion()>
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()>
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)>
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)>
<android.widget.AutoCompleteTextView: boolean enoughToFilter()>
<java.text.ChoiceFormat: double nextDouble(double)>
<java.text.ChoiceFormat: void <init>(java.lang.String)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.ChoiceFormat: java.lang.Object[] getFormats()>
<java.text.ChoiceFormat: void applyPattern(java.lang.String)>
<java.text.ChoiceFormat: void setChoices(double[],java.lang.String[])>
<java.text.ChoiceFormat: double nextDouble(double,boolean)>
<java.text.ChoiceFormat: double[] getLimits()>
<java.text.ChoiceFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<java.text.ChoiceFormat: double previousDouble(double)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.ChoiceFormat: void <init>(double[],java.lang.String[])>
<java.text.ChoiceFormat: java.lang.String toPattern()>
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)>
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,int)>
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()>
<android.widget.ViewAnimator: void setDisplayedChild(int)>
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()>
<android.widget.ViewAnimator: void showNext()>
<android.widget.ViewAnimator: void <init>(android.content.Context)>
<android.widget.ViewAnimator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewAnimator: android.view.View getCurrentView()>
<android.widget.ViewAnimator: int getDisplayedChild()>
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,int)>
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)>
<android.widget.ViewAnimator: void showPrevious()>
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)>
<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>
<org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
<org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
<org.apache.http.params.HttpParams: double getDoubleParameter(java.lang.String,double)>
<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)>
<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<android.util.FloatMath: float sin(float)>
<android.util.FloatMath: float floor(float)>
<android.util.FloatMath: float cos(float)>
<android.util.FloatMath: float ceil(float)>
<android.util.FloatMath: float sqrt(float)>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.view.animation.Transformation: float getAlpha()>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.view.animation.Transformation: int getTransformationType()>
<android.view.animation.Transformation: void clear()>
<android.view.animation.Transformation: void <init>()>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<android.view.animation.Transformation: void setAlpha(float)>
<android.view.animation.Transformation: void setTransformationType(int)>
<android.webkit.WebIconDatabase.IconListener: void onReceivedIcon(java.lang.String,android.graphics.Bitmap)>
<android.widget.AutoCompleteTextView.Validator: java.lang.CharSequence fixText(java.lang.CharSequence)>
<android.widget.AutoCompleteTextView.Validator: boolean isValid(java.lang.CharSequence)>
<android.widget.EditText: void <init>(android.content.Context)>
<android.widget.EditText: void setSelection(int,int)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.EditText: void selectAll()>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.EditText: void setSelection(int)>
<android.widget.EditText: void extendSelection(int)>
<java.util.concurrent.Exchanger: V exchange(V,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Exchanger: void <init>()>
<java.util.concurrent.Exchanger: V exchange(V)>
<android.widget.ExpandableListView.ExpandableListContextMenuInfo: void <init>(android.view.View,long,long)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeBlock of(int)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeBlock forName(java.lang.String)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeBlock of(char)>
<java.lang.Thread.UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<android.graphics.drawable.LevelListDrawable: void <init>()>
<android.graphics.drawable.LevelListDrawable: void addLevel(int,int,android.graphics.drawable.Drawable)>
<android.webkit.WebView.PictureListener: void onNewPicture(android.webkit.WebView,android.graphics.Picture)>
<javax.sql.PooledConnection: java.sql.Connection getConnection()>
<javax.sql.PooledConnection: void close()>
<javax.sql.PooledConnection: void addConnectionEventListener(javax.sql.ConnectionEventListener)>
<javax.sql.PooledConnection: void removeConnectionEventListener(javax.sql.ConnectionEventListener)>
<android.webkit.UrlInterceptHandler: android.webkit.CacheManager.CacheResult service(java.lang.String,java.util.Map)>
<org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>
<org.apache.http.impl.client.BasicCredentialsProvider: void clear()>
<org.apache.http.impl.client.BasicCredentialsProvider: void <init>()>
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>()>
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: int getRetryCount()>
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: boolean isRequestSentRetryEnabled()>
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>(int,boolean)>
<java.security.cert.CRL: void <init>(java.lang.String)>
<java.security.cert.CRL: java.lang.String toString()>
<java.security.cert.CRL: java.lang.String getType()>
<java.security.cert.CRL: boolean isRevoked(java.security.cert.Certificate)>
<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>
<android.graphics.RectF: void union(float,float,float,float)>
<android.graphics.RectF: float height()>
<android.graphics.RectF: void roundOut(android.graphics.Rect)>
<android.graphics.RectF: boolean contains(float,float)>
<android.graphics.RectF: void union(float,float)>
<android.graphics.RectF: void offsetTo(float,float)>
<android.graphics.RectF: void <init>()>
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: float centerY()>
<android.graphics.RectF: void setEmpty()>
<android.graphics.RectF: void set(float,float,float,float)>
<android.graphics.RectF: void inset(float,float)>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.graphics.RectF: void offset(float,float)>
<android.graphics.RectF: boolean isEmpty()>
<android.graphics.RectF: void <init>(android.graphics.RectF)>
<android.graphics.RectF: void round(android.graphics.Rect)>
<android.graphics.RectF: void <init>(float,float,float,float)>
<android.graphics.RectF: void <init>(android.graphics.Rect)>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<android.graphics.RectF: boolean intersects(float,float,float,float)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.graphics.RectF: boolean contains(float,float,float,float)>
<android.graphics.RectF: boolean contains(android.graphics.RectF)>
<android.graphics.RectF: float centerX()>
<android.graphics.RectF: float width()>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.graphics.RectF: boolean intersect(android.graphics.RectF)>
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: void sort()>
<javax.security.auth.Destroyable: boolean isDestroyed()>
<javax.security.auth.Destroyable: void destroy()>
<android.net.LocalSocketAddress: void <init>(java.lang.String)>
<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress.Namespace)>
<android.net.LocalSocketAddress: android.net.LocalSocketAddress.Namespace getNamespace()>
<android.net.LocalSocketAddress: java.lang.String getName()>
<android.widget.RatingBar.OnRatingBarChangeListener: void onRatingChanged(android.widget.RatingBar,float,boolean)>
<java.lang.ThreadLocal: T get()>
<java.lang.ThreadLocal: void remove()>
<java.lang.ThreadLocal: void <init>()>
<java.lang.ThreadLocal: void set(T)>
<java.lang.ThreadLocal: T initialValue()>
<android.util.AndroidException: void <init>(java.lang.Exception)>
<android.util.AndroidException: void <init>()>
<android.util.AndroidException: void <init>(java.lang.String)>
<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()>
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void flush()>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.impl.conn.Wire)>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(java.lang.String)>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)>
<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<org.apache.http.conn.EofSensorInputStream: void checkAbort()>
<org.apache.http.conn.EofSensorInputStream: void checkClose()>
<org.apache.http.conn.EofSensorInputStream: void checkEOF(int)>
<org.apache.http.conn.EofSensorInputStream: void <init>(java.io.InputStream,org.apache.http.conn.EofSensorWatcher)>
<org.apache.http.conn.EofSensorInputStream: void releaseConnection()>
<org.apache.http.conn.EofSensorInputStream: void abortConnection()>
<org.apache.http.conn.EofSensorInputStream: int read()>
<org.apache.http.conn.EofSensorInputStream: boolean isReadAllowed()>
<android.net.NetworkInfo: boolean isConnected()>
<android.net.NetworkInfo: void <init>(int)>
<android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
<android.net.NetworkInfo: boolean isAvailable()>
<android.net.NetworkInfo: android.net.NetworkInfo.DetailedState getDetailedState()>
<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkInfo: int describeContents()>
<android.net.NetworkInfo: int getType()>
<android.net.NetworkInfo: java.lang.String getReason()>
<android.net.NetworkInfo: java.lang.String getExtraInfo()>
<android.net.NetworkInfo: java.lang.String getTypeName()>
<android.net.NetworkInfo: boolean isFailover()>
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>
<android.os.Debug.InstructionCount: int globalTotal()>
<android.os.Debug.InstructionCount: void <init>()>
<android.os.Debug.InstructionCount: int globalMethodInvocations()>
<android.os.Debug.InstructionCount: boolean resetAndStart()>
<android.os.Debug.InstructionCount: boolean collect()>
<org.apache.http.entity.StringEntity: boolean isRepeatable()>
<org.apache.http.entity.StringEntity: java.io.InputStream getContent()>
<org.apache.http.entity.StringEntity: boolean isStreaming()>
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.StringEntity: void <init>(java.lang.String)>
<org.apache.http.entity.StringEntity: java.lang.Object clone()>
<org.apache.http.entity.StringEntity: long getContentLength()>
<android.os.RemoteCallbackList: void onCallbackDied(E)>
<android.os.RemoteCallbackList: boolean unregister(E)>
<android.os.RemoteCallbackList: void finishBroadcast()>
<android.os.RemoteCallbackList: void kill()>
<android.os.RemoteCallbackList: void <init>()>
<android.os.RemoteCallbackList: boolean register(E)>
<android.os.RemoteCallbackList: int beginBroadcast()>
<android.os.RemoteCallbackList: E getBroadcastItem(int)>
<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>
<java.security.KeyFactory: T getKeySpec(java.security.Key,java.lang.Class)>
<java.security.KeyFactory: java.security.Provider getProvider()>
<java.security.KeyFactory: void <init>(java.security.KeyFactorySpi,java.security.Provider,java.lang.String)>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>
<java.security.KeyFactory: java.security.Key translateKey(java.security.Key)>
<java.security.KeyFactory: java.lang.String getAlgorithm()>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
<org.apache.http.params.HttpAbstractParamBean: void <init>(org.apache.http.params.HttpParams)>
<android.widget.TabWidget: void setCurrentTab(int)>
<android.widget.TabWidget: void dispatchDraw(android.graphics.Canvas)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TabWidget: void onFocusChange(android.view.View,boolean)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TabWidget: void focusCurrentTab(int)>
<android.widget.TabWidget: void <init>(android.content.Context)>
<android.view.Window: void makeActive()>
<android.view.Window: void closePanel(int)>
<android.view.Window: boolean hasChildren()>
<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>
<android.view.Window: void togglePanel(int,android.view.KeyEvent)>
<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.view.Window: int getFeatures()>
<android.view.Window: void setContainer(android.view.Window)>
<android.view.Window: void setTitle(java.lang.CharSequence)>
<android.view.Window: void closeAllPanels()>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<android.view.Window: boolean isActive()>
<android.view.Window: void onActive()>
<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>
<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.Window: void setBackgroundDrawableResource(int)>
<android.view.Window: void setType(int)>
<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.Window: android.view.WindowManager.LayoutParams getAttributes()>
<android.view.Window: void setContentView(android.view.View)>
<android.view.Window: void setDefaultWindowFormat(int)>
<android.view.Window: void <init>(android.content.Context)>
<android.view.Window: boolean requestFeature(int)>
<android.view.Window: void setFeatureDrawableAlpha(int,int)>
<android.view.Window: void takeKeyEvents(boolean)>
<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>
<android.view.Window: android.view.WindowManager getWindowManager()>
<android.view.Window: void setContentView(int)>
<android.view.Window: android.view.View findViewById(int)>
<android.view.Window: android.view.View getCurrentFocus()>
<android.view.Window: void setChildInt(int,int)>
<android.view.Window: int getForcedWindowFlags()>
<android.view.Window: android.view.Window.Callback getCallback()>
<android.view.Window: android.view.View getDecorView()>
<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.Window: void openPanel(int,android.view.KeyEvent)>
<android.view.Window: void setLayout(int,int)>
<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>
<android.view.Window: void setFeatureDrawableResource(int,int)>
<android.view.Window: int getVolumeControlStream()>
<android.view.Window: void setFlags(int,int)>
<android.view.Window: void addFlags(int)>
<android.view.Window: android.view.LayoutInflater getLayoutInflater()>
<android.view.Window: android.view.View peekDecorView()>
<android.view.Window: void setAttributes(android.view.WindowManager.LayoutParams)>
<android.view.Window: void clearFlags(int)>
<android.view.Window: void setTitleColor(int)>
<android.view.Window: android.content.Context getContext()>
<android.view.Window: void setFormat(int)>
<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>
<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>
<android.view.Window: void setFeatureInt(int,int)>
<android.view.Window: void setVolumeControlStream(int)>
<android.view.Window: void setCallback(android.view.Window.Callback)>
<android.view.Window: void restoreHierarchyState(android.os.Bundle)>
<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>
<android.view.Window: int getLocalFeatures()>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>
<android.view.Window: boolean isFloating()>
<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>
<android.view.Window: android.os.Bundle saveHierarchyState()>
<android.view.Window: void setGravity(int)>
<android.view.Window: android.view.Window getContainer()>
<android.content.res.Resources.NotFoundException: void <init>()>
<android.content.res.Resources.NotFoundException: void <init>(java.lang.String)>
<java.io.UTFDataFormatException: void <init>()>
<java.io.UTFDataFormatException: void <init>(java.lang.String)>
<java.util.concurrent.atomic.AtomicStampedReference: void set(V,int)>
<java.util.concurrent.atomic.AtomicStampedReference: boolean attemptStamp(V,int)>
<java.util.concurrent.atomic.AtomicStampedReference: void <init>(V,int)>
<java.util.concurrent.atomic.AtomicStampedReference: boolean compareAndSet(V,V,int,int)>
<java.util.concurrent.atomic.AtomicStampedReference: int getStamp()>
<java.util.concurrent.atomic.AtomicStampedReference: V get(int[])>
<java.util.concurrent.atomic.AtomicStampedReference: V getReference()>
<java.util.concurrent.atomic.AtomicStampedReference: boolean weakCompareAndSet(V,V,int,int)>
<android.app.ActivityManager: java.util.List getRunningServices(int)>
<android.app.ActivityManager: java.util.List getProcessesInErrorState()>
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager.MemoryInfo)>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>
<javax.security.auth.x500.X500Principal: java.lang.String getName()>
<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>
<javax.security.auth.x500.X500Principal: void <init>(byte[])>
<javax.security.auth.x500.X500Principal: byte[] getEncoded()>
<javax.security.auth.x500.X500Principal: void <init>(java.io.InputStream)>
<android.text.style.TabStopSpan.Standard: int getTabStop()>
<android.text.style.TabStopSpan.Standard: void <init>(int)>
<org.apache.http.message.BasicListHeaderIterator: void <init>(java.util.List,java.lang.String)>
<org.apache.http.message.BasicListHeaderIterator: int findNext(int)>
<org.apache.http.message.BasicListHeaderIterator: boolean hasNext()>
<org.apache.http.message.BasicListHeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.message.BasicListHeaderIterator: java.lang.Object next()>
<org.apache.http.message.BasicListHeaderIterator: boolean filterHeader(int)>
<org.apache.http.message.BasicListHeaderIterator: void remove()>
<java.nio.channels.AlreadyConnectedException: void <init>()>
<android.view.MenuItem: char getNumericShortcut()>
<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>
<android.view.MenuItem: android.view.ContextMenu.ContextMenuInfo getMenuInfo()>
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>
<android.view.MenuItem: android.view.SubMenu getSubMenu()>
<android.view.MenuItem: boolean hasSubMenu()>
<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>
<android.view.MenuItem: int getGroupId()>
<android.view.MenuItem: android.content.Intent getIntent()>
<android.view.MenuItem: java.lang.CharSequence getTitle()>
<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>
<android.view.MenuItem: boolean isEnabled()>
<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>
<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>
<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener)>
<android.view.MenuItem: boolean isCheckable()>
<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()>
<android.view.MenuItem: boolean isVisible()>
<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>
<android.view.MenuItem: int getItemId()>
<android.view.MenuItem: android.view.MenuItem setTitle(int)>
<android.view.MenuItem: android.view.MenuItem setIcon(int)>
<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>
<android.view.MenuItem: char getAlphabeticShortcut()>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>
<android.view.MenuItem: int getOrder()>
<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>
<android.view.MenuItem: boolean isChecked()>
<android.view.animation.AnimationUtils: void <init>()>
<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeOutAnimation(android.content.Context,boolean)>
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeInAnimation(android.content.Context,boolean)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeInChildBottomAnimation(android.content.Context)>
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>
<java.util.jar.JarEntry: void <init>(java.util.zip.ZipEntry)>
<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()>
<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()>
<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()>
<java.util.jar.JarEntry: void <init>(java.util.jar.JarEntry)>
<java.util.jar.JarEntry: void <init>(java.lang.String)>
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.FilterInputStream: int read()>
<android.widget.AbsSeekBar: void setThumbOffset(int)>
<android.widget.AbsSeekBar: void <init>(android.content.Context)>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsSeekBar: int getThumbOffset()>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)>
<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>
<android.test.InstrumentationTestCase: void sendKeys(int...)>
<android.test.InstrumentationTestCase: T launchActivity(java.lang.String,java.lang.Class,android.os.Bundle)>
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)>
<android.test.InstrumentationTestCase: void injectInsrumentation(android.app.Instrumentation)>
<android.test.InstrumentationTestCase: void sendRepeatedKeys(int...)>
<android.test.InstrumentationTestCase: void <init>()>
<javax.microedition.khronos.opengles.GL10: void glClientActiveTexture(int)>
<javax.microedition.khronos.opengles.GL10: void glClearColorx(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glColor4x(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTranslatex(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glMultiTexCoord4f(int,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glGetIntegerv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glFinish()>
<javax.microedition.khronos.opengles.GL10: void glBlendFunc(int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glShadeModel(int)>
<javax.microedition.khronos.opengles.GL10: void glDepthRangex(int,int)>
<javax.microedition.khronos.opengles.GL10: void glSampleCoveragex(int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glTexParameterf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glStencilOp(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTranslatef(float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glVertexPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glFogfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glDeleteTextures(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLightModelfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glBindTexture(int,int)>
<javax.microedition.khronos.opengles.GL10: void glColorPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glStencilMask(int)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glViewport(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glFogfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glClearDepthx(int)>
<javax.microedition.khronos.opengles.GL10: void glStencilFunc(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glMultiTexCoord4x(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glClearStencil(int)>
<javax.microedition.khronos.opengles.GL10: void glSampleCoverage(float,boolean)>
<javax.microedition.khronos.opengles.GL10: void glDrawArrays(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glDrawElements(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixx(int[],int)>
<javax.microedition.khronos.opengles.GL10: void glColor4f(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glNormal3x(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glFrustumx(int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glGenTextures(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glFlush()>
<javax.microedition.khronos.opengles.GL10: void glDepthRangef(float,float)>
<javax.microedition.khronos.opengles.GL10: void glRotatex(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glFogxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glPolygonOffsetx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glPushMatrix()>
<javax.microedition.khronos.opengles.GL10: void glScalef(float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glEnable(int)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixx(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glAlphaFunc(int,float)>
<javax.microedition.khronos.opengles.GL10: void glLightModelf(int,float)>
<javax.microedition.khronos.opengles.GL10: void glLoadIdentity()>
<javax.microedition.khronos.opengles.GL10: void glTexEnvf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixf(float[],int)>
<javax.microedition.khronos.opengles.GL10: void glFrustumf(float,float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glDisable(int)>
<javax.microedition.khronos.opengles.GL10: void glNormalPointer(int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glLightModelfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glClear(int)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixf(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glColorMask(boolean,boolean,boolean,boolean)>
<javax.microedition.khronos.opengles.GL10: void glMaterialfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glNormal3f(float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glClearColor(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glTexParameterx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glPixelStorei(int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL10: void glPointSizex(int)>
<javax.microedition.khronos.opengles.GL10: void glClearDepthf(float)>
<javax.microedition.khronos.opengles.GL10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glLightf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glDisableClientState(int)>
<javax.microedition.khronos.opengles.GL10: void glFogf(int,float)>
<javax.microedition.khronos.opengles.GL10: void glMatrixMode(int)>
<javax.microedition.khronos.opengles.GL10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glActiveTexture(int)>
<javax.microedition.khronos.opengles.GL10: void glScalex(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glLineWidthx(int)>
<javax.microedition.khronos.opengles.GL10: void glOrthof(float,float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glFrontFace(int)>
<javax.microedition.khronos.opengles.GL10: void glPopMatrix()>
<javax.microedition.khronos.opengles.GL10: void glFogx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glMaterialf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glDepthMask(boolean)>
<javax.microedition.khronos.opengles.GL10: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glDepthFunc(int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glAlphaFuncx(int,int)>
<javax.microedition.khronos.opengles.GL10: int glGetError()>
<javax.microedition.khronos.opengles.GL10: void glLightx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glCullFace(int)>
<javax.microedition.khronos.opengles.GL10: void glOrthox(int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glDeleteTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glLogicOp(int)>
<javax.microedition.khronos.opengles.GL10: java.lang.String glGetString(int)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixx(int[],int)>
<javax.microedition.khronos.opengles.GL10: void glRotatef(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glPolygonOffset(float,float)>
<javax.microedition.khronos.opengles.GL10: void glPointSize(float)>
<javax.microedition.khronos.opengles.GL10: void glFogxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glMaterialx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glHint(int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLightxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixx(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glGetIntegerv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixf(float[],int)>
<javax.microedition.khronos.opengles.GL10: void glGenTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glScissor(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixf(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLineWidth(float)>
<java.io.NotActiveException: void <init>()>
<java.io.NotActiveException: void <init>(java.lang.String)>
<javax.microedition.khronos.opengles.GL11: void glGetFloatv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetLightxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteri(int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetPointerv(int,java.nio.Buffer[])>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanef(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glBufferSubData(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glBufferData(int,int,java.nio.Buffer,int)>
<javax.microedition.khronos.opengles.GL11: void glDeleteBuffers(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetFixedv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: boolean glIsEnabled(int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetBooleanv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: boolean glIsBuffer(int)>
<javax.microedition.khronos.opengles.GL11: void glGetBooleanv(int,boolean[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanex(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGenBuffers(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterx(int,int)>
<javax.microedition.khronos.opengles.GL11: void glColor4ub(byte,byte,byte,byte)>
<javax.microedition.khronos.opengles.GL11: void glGetFixedv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glNormalPointer(int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glGetBufferParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexEnviv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnviv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glDrawElements(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glDeleteBuffers(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanef(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanex(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexEnviv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetFloatv(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetLightfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexEnvi(int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanex(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetLightxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterf(int,float)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanef(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanex(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glVertexPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glGenBuffers(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glColorPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: boolean glIsTexture(int)>
<org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)>
<org.apache.http.conn.params.ConnManagerParams: void setTimeout(org.apache.http.params.HttpParams,long)>
<org.apache.http.conn.params.ConnManagerParams: int getMaxTotalConnections(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnManagerParams: void <init>()>
<org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)>
<org.apache.http.conn.params.ConnManagerParams: org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnManagerParams: long getTimeout(org.apache.http.params.HttpParams)>
<org.w3c.dom.NodeList: int getLength()>
<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>
<android.view.animation.Animation.AnimationListener: void onAnimationStart(android.view.animation.Animation)>
<android.view.animation.Animation.AnimationListener: void onAnimationEnd(android.view.animation.Animation)>
<android.view.animation.Animation.AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>
<java.lang.Appendable: java.lang.Appendable append(char)>
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>
<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>
<java.util.IllegalFormatConversionException: java.lang.Class getArgumentClass()>
<java.util.IllegalFormatConversionException: char getConversion()>
<android.text.style.IconMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap,int)>
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap)>
<android.text.style.IconMarginSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.IconMarginSpan: int getLeadingMargin(boolean)>
<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>
<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>
<javax.crypto.spec.RC2ParameterSpec: void <init>(int)>
<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[])>
<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[],int)>
<org.w3c.dom.CharacterData: void setData(java.lang.String)>
<org.w3c.dom.CharacterData: java.lang.String substringData(int,int)>
<org.w3c.dom.CharacterData: void deleteData(int,int)>
<org.w3c.dom.CharacterData: void appendData(java.lang.String)>
<org.w3c.dom.CharacterData: java.lang.String getData()>
<org.w3c.dom.CharacterData: int getLength()>
<org.w3c.dom.CharacterData: void insertData(int,java.lang.String)>
<org.w3c.dom.CharacterData: void replaceData(int,int,java.lang.String)>
<android.os.StatFs: int getBlockSize()>
<android.os.StatFs: void <init>(java.lang.String)>
<android.os.StatFs: int getAvailableBlocks()>
<android.os.StatFs: int getBlockCount()>
<android.os.StatFs: void restat(java.lang.String)>
<android.os.StatFs: int getFreeBlocks()>
<org.apache.http.client.protocol.RequestTargetAuthentication: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.protocol.RequestTargetAuthentication: void <init>()>
<android.test.ActivityUnitTestCase: T getActivity()>
<android.test.ActivityUnitTestCase: int getFinishedActivityRequest()>
<android.test.ActivityUnitTestCase: void setApplication(android.app.Application)>
<android.test.ActivityUnitTestCase: android.content.Intent getStartedActivityIntent()>
<android.test.ActivityUnitTestCase: int getStartedActivityRequest()>
<android.test.ActivityUnitTestCase: T startActivity(android.content.Intent,android.os.Bundle,java.lang.Object)>
<android.test.ActivityUnitTestCase: void setActivityContext(android.content.Context)>
<android.test.ActivityUnitTestCase: void <init>(java.lang.Class)>
<android.test.ActivityUnitTestCase: boolean isFinishCalled()>
<android.test.ActivityUnitTestCase: int getRequestedOrientation()>
<android.view.KeyCharacterMap: boolean isPrintingKey(int)>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<android.view.KeyCharacterMap: int getDeadChar(int,int)>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap.KeyData)>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.view.KeyCharacterMap: char getNumber(int)>
<org.apache.http.message.BasicHeader: java.lang.String getValue()>
<org.apache.http.message.BasicHeader: java.lang.Object clone()>
<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicHeader: org.apache.http.HeaderElement[] getElements()>
<org.apache.http.message.BasicHeader: java.lang.String getName()>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: void notifyAll()>
<java.lang.Object: void <init>()>
<java.lang.Object: void wait()>
<java.lang.Object: java.lang.Object clone()>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: void finalize()>
<java.lang.Object: java.lang.String toString()>
<java.lang.Object: void notify()>
<java.lang.Object: int hashCode()>
<java.lang.Object: void wait(long)>
<java.lang.Object: void wait(long,int)>
<android.text.style.MaskFilterSpan: void <init>(android.graphics.MaskFilter)>
<android.text.style.MaskFilterSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.MaskFilterSpan: android.graphics.MaskFilter getMaskFilter()>
<org.apache.http.conn.params.ConnPerRoute: int getMaxForRoute(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.entity.StrictContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>
<org.apache.http.impl.entity.StrictContentLengthStrategy: void <init>()>
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()>
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()>
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()>
<android.text.method.SingleLineTransformationMethod: void <init>()>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)>
<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineParser: void <init>()>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser)>
<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>
<android.content.pm.PermissionInfo: int describeContents()>
<android.content.pm.PermissionInfo: void <init>()>
<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.widget.ZoomControls: void setZoomSpeed(long)>
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)>
<android.widget.ZoomControls: void hide()>
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)>
<android.widget.ZoomControls: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ZoomControls: void setOnZoomInClickListener(android.view.View.OnClickListener)>
<android.widget.ZoomControls: void show()>
<android.widget.ZoomControls: void <init>(android.content.Context)>
<android.widget.ZoomControls: void setOnZoomOutClickListener(android.view.View.OnClickListener)>
<android.text.method.MultiTapKeyListener: void <init>(android.text.method.TextKeyListener.Capitalize,boolean)>
<android.text.method.MultiTapKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.MultiTapKeyListener: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener.Capitalize)>
<android.text.method.MultiTapKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ColorDrawable: int getOpacity()>
<android.graphics.drawable.ColorDrawable: int getAlpha()>
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ColorDrawable: void setAlpha(int)>
<android.graphics.drawable.ColorDrawable: void <init>()>
<android.graphics.drawable.ColorDrawable: void <init>(int)>
<android.text.style.AbsoluteSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.AbsoluteSizeSpan: void <init>(int)>
<android.text.style.AbsoluteSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.AbsoluteSizeSpan: int getSize()>
<android.view.GestureDetector.OnGestureListener: void onLongPress(android.view.MotionEvent)>
<android.view.GestureDetector.OnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.OnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.view.GestureDetector.OnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.OnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<android.view.GestureDetector.OnGestureListener: boolean onDown(android.view.MotionEvent)>
<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>
<java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[],java.lang.ClassLoader)>
<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>
<java.net.URLClassLoader: void addURL(java.net.URL)>
<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.net.URLStreamHandlerFactory)>
<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>
<java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[])>
<java.net.URLClassLoader: void <init>(java.net.URL[])>
<java.net.URLClassLoader: java.net.URL[] getURLs()>
<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.DefaultHttpResponseFactory: void <init>()>
<org.apache.http.impl.DefaultHttpResponseFactory: java.util.Locale determineLocale(org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.DefaultHttpResponseFactory: void <init>(org.apache.http.ReasonPhraseCatalog)>
<android.view.animation.TranslateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.TranslateAnimation: void <init>(float,float,float,float)>
<android.view.animation.TranslateAnimation: void <init>(int,float,int,float,int,float,int,float)>
<android.webkit.CookieManager: void removeAllCookie()>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>
<android.webkit.CookieManager: boolean hasCookies()>
<android.webkit.CookieManager: void removeExpiredCookie()>
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>
<android.webkit.CookieManager: boolean acceptCookie()>
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
<android.webkit.CookieManager: void removeSessionCookie()>
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>
<javax.sql.RowSetEvent: void <init>(javax.sql.RowSet)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.RequestContent: void <init>()>
<java.lang.InternalError: void <init>()>
<java.lang.InternalError: void <init>(java.lang.String)>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.lang.String)>
<java.security.cert.CertPathBuilder: void <init>(java.security.cert.CertPathBuilderSpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)>
<java.security.cert.CertPathBuilder: java.security.Provider getProvider()>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.security.Provider)>
<java.security.cert.CertPathBuilder: java.lang.String getAlgorithm()>
<java.security.cert.CertPathBuilder: java.lang.String getDefaultType()>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)>
<android.graphics.ColorMatrix: void reset()>
<android.graphics.ColorMatrix: void <init>(float[])>
<android.graphics.ColorMatrix: void setRotate(int,float)>
<android.graphics.ColorMatrix: void setRGB2YUV()>
<android.graphics.ColorMatrix: void <init>()>
<android.graphics.ColorMatrix: void <init>(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void setScale(float,float,float,float)>
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void set(float[])>
<android.graphics.ColorMatrix: float[] getArray()>
<android.graphics.ColorMatrix: void setSaturation(float)>
<android.graphics.ColorMatrix: void postConcat(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void preConcat(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void setYUV2RGB()>
<java.lang.reflect.ReflectPermission: void <init>(java.lang.String)>
<java.lang.reflect.ReflectPermission: void <init>(java.lang.String,java.lang.String)>
<java.util.Set: boolean contains(java.lang.Object)>
<java.util.Set: boolean equals(java.lang.Object)>
<java.util.Set: boolean isEmpty()>
<java.util.Set: boolean removeAll(java.util.Collection)>
<java.util.Set: java.util.Iterator iterator()>
<java.util.Set: T[] toArray(T[])>
<java.util.Set: int hashCode()>
<java.util.Set: java.lang.Object[] toArray()>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean add(E)>
<java.util.Set: int size()>
<java.util.Set: boolean remove(java.lang.Object)>
<java.util.Set: boolean retainAll(java.util.Collection)>
<java.util.Set: void clear()>
<java.util.Set: boolean containsAll(java.util.Collection)>
<java.security.cert.CertPathBuilderResult: java.lang.Object clone()>
<java.security.cert.CertPathBuilderResult: java.security.cert.CertPath getCertPath()>
<android.graphics.drawable.Drawable.Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.Drawable.Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.Drawable.Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.RotateDrawable: void <init>()>
<android.graphics.drawable.RotateDrawable: void setAlpha(int)>
<android.graphics.drawable.RotateDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.RotateDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.RotateDrawable: int getOpacity()>
<android.graphics.drawable.RotateDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.RotateDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.RotateDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.ClassLoader)>
<android.provider.MediaStore.Audio.Artists.Albums: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore.Audio.Artists.Albums: void <init>()>
<org.apache.http.cookie.SetCookie2: void setDiscard(boolean)>
<org.apache.http.cookie.SetCookie2: void setPorts(int[])>
<org.apache.http.cookie.SetCookie2: void setCommentURL(java.lang.String)>
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>
<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>
<java.net.DatagramPacket: int getOffset()>
<java.net.DatagramPacket: void setData(byte[],int,int)>
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>
<java.net.DatagramPacket: int getLength()>
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>
<java.net.DatagramPacket: void setPort(int)>
<java.net.DatagramPacket: void setData(byte[])>
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>
<java.net.DatagramPacket: void <init>(byte[],int)>
<java.net.DatagramPacket: java.net.InetAddress getAddress()>
<java.net.DatagramPacket: byte[] getData()>
<java.net.DatagramPacket: int getPort()>
<java.net.DatagramPacket: void <init>(byte[],int,int)>
<java.net.DatagramPacket: void setLength(int)>
<org.apache.http.impl.cookie.RFC2109DomainHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.RFC2109DomainHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2109DomainHandler: void <init>()>
<org.apache.http.impl.cookie.RFC2109DomainHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<android.text.method.BaseKeyListener: void <init>()>
<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean weakCompareAndSet(T,int,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void <init>()>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(T,int,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndIncrement(T)>
<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class...)>
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>
<android.database.sqlite.SQLiteProgram: void native_bind_string(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void compile(java.lang.String,boolean)>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void native_compile(java.lang.String)>
<android.database.sqlite.SQLiteProgram: void native_bind_null(int)>
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>
<android.database.sqlite.SQLiteProgram: void bindNull(int)>
<android.database.sqlite.SQLiteProgram: void close()>
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
<android.database.sqlite.SQLiteProgram: void native_finalize()>
<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteProgram: void native_bind_double(int,double)>
<android.database.sqlite.SQLiteProgram: void native_bind_long(int,long)>
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>
<android.database.sqlite.SQLiteProgram: void clearBindings()>
<android.database.sqlite.SQLiteProgram: void native_bind_blob(int,byte[])>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatStatusLine(org.apache.http.StatusLine,org.apache.http.message.LineFormatter)>
<org.apache.http.message.BasicLineFormatter: void <init>()>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion,org.apache.http.message.LineFormatter)>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<org.apache.http.message.BasicLineFormatter: int estimateProtocolVersionLen(org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatRequestLine(org.apache.http.RequestLine,org.apache.http.message.LineFormatter)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatHeader(org.apache.http.Header,org.apache.http.message.LineFormatter)>
<javax.net.ssl.SSLEngineResult: int bytesProduced()>
<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult.Status,javax.net.ssl.SSLEngineResult.HandshakeStatus,int,int)>
<javax.net.ssl.SSLEngineResult: int bytesConsumed()>
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus()>
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult.Status getStatus()>
<org.xml.sax.helpers.XMLReaderAdapter: void endDocument()>
<org.xml.sax.helpers.XMLReaderAdapter: void endPrefixMapping(java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentHandler(org.xml.sax.DocumentHandler)>
<org.xml.sax.helpers.XMLReaderAdapter: void <init>(org.xml.sax.XMLReader)>
<org.xml.sax.helpers.XMLReaderAdapter: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void setLocale(java.util.Locale)>
<org.xml.sax.helpers.XMLReaderAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.helpers.XMLReaderAdapter: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.XMLReaderAdapter: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.helpers.XMLReaderAdapter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<org.xml.sax.helpers.XMLReaderAdapter: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void skippedEntity(java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void parse(org.xml.sax.InputSource)>
<org.xml.sax.helpers.XMLReaderAdapter: void parse(java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void startDocument()>
<org.xml.sax.helpers.XMLReaderAdapter: void <init>()>
<org.xml.sax.helpers.XMLReaderAdapter: void characters(char[],int,int)>
<org.xml.sax.helpers.XMLReaderAdapter: void setEntityResolver(org.xml.sax.EntityResolver)>
<java.lang.VirtualMachineError: void <init>()>
<java.lang.VirtualMachineError: void <init>(java.lang.String)>
<java.sql.SQLOutput: void writeObject(java.sql.SQLData)>
<java.sql.SQLOutput: void writeURL(java.net.URL)>
<java.sql.SQLOutput: void writeShort(short)>
<java.sql.SQLOutput: void writeTimestamp(java.sql.Timestamp)>
<java.sql.SQLOutput: void writeBigDecimal(java.math.BigDecimal)>
<java.sql.SQLOutput: void writeByte(byte)>
<java.sql.SQLOutput: void writeTime(java.sql.Time)>
<java.sql.SQLOutput: void writeFloat(float)>
<java.sql.SQLOutput: void writeRef(java.sql.Ref)>
<java.sql.SQLOutput: void writeArray(java.sql.Array)>
<java.sql.SQLOutput: void writeBlob(java.sql.Blob)>
<java.sql.SQLOutput: void writeAsciiStream(java.io.InputStream)>
<java.sql.SQLOutput: void writeStruct(java.sql.Struct)>
<java.sql.SQLOutput: void writeInt(int)>
<java.sql.SQLOutput: void writeBinaryStream(java.io.InputStream)>
<java.sql.SQLOutput: void writeDate(java.sql.Date)>
<java.sql.SQLOutput: void writeLong(long)>
<java.sql.SQLOutput: void writeBoolean(boolean)>
<java.sql.SQLOutput: void writeCharacterStream(java.io.Reader)>
<java.sql.SQLOutput: void writeClob(java.sql.Clob)>
<java.sql.SQLOutput: void writeDouble(double)>
<java.sql.SQLOutput: void writeBytes(byte[])>
<java.sql.SQLOutput: void writeString(java.lang.String)>
<org.apache.http.auth.params.AuthParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.auth.params.AuthParamBean: void setCredentialCharset(java.lang.String)>
<org.apache.http.auth.AuthSchemeFactory: org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: void <init>()>
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>
<android.graphics.SweepGradient: void <init>(float,float,int,int)>
<java.security.Signer: void <init>()>
<java.security.Signer: void <init>(java.lang.String,java.security.IdentityScope)>
<java.security.Signer: void setKeyPair(java.security.KeyPair)>
<java.security.Signer: java.security.PrivateKey getPrivateKey()>
<java.security.Signer: void <init>(java.lang.String)>
<android.database.AbstractWindowedCursor: short getShort(int)>
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>
<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)>
<android.database.AbstractWindowedCursor: double getDouble(int)>
<android.database.AbstractWindowedCursor: boolean hasWindow()>
<android.database.AbstractWindowedCursor: void <init>()>
<android.database.AbstractWindowedCursor: long getLong(int)>
<android.database.AbstractWindowedCursor: int getInt(int)>
<android.database.AbstractWindowedCursor: boolean isNull(int)>
<android.database.AbstractWindowedCursor: boolean isBlob(int)>
<android.database.AbstractWindowedCursor: float getFloat(int)>
<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.lang.UnsupportedOperationException: void <init>()>
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getServerCertificates()>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()>
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getLocalCertificates()>
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<javax.net.ssl.HttpsURLConnection: java.lang.String getCipherSuite()>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteQueryBuilder: void <init>()>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)>
<org.apache.http.impl.cookie.RFC2965Spec: void <init>(java.lang.String[],boolean)>
<org.apache.http.impl.cookie.RFC2965Spec: void <init>()>
<android.widget.TabHost.OnTabChangeListener: void onTabChanged(java.lang.String)>
<android.opengl.GLDebugHelper: void <init>()>
<android.opengl.GLDebugHelper: javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL,int,java.io.Writer)>
<android.opengl.GLDebugHelper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer)>
<android.provider.MediaStore.Video.Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Video.Media: void <init>()>
<java.lang.NumberFormatException: void <init>(java.lang.String)>
<java.lang.NumberFormatException: void <init>()>
<org.apache.http.impl.SocketHttpClientConnection: java.net.InetAddress getRemoteAddress()>
<org.apache.http.impl.SocketHttpClientConnection: void <init>()>
<org.apache.http.impl.SocketHttpClientConnection: void close()>
<org.apache.http.impl.SocketHttpClientConnection: void assertNotOpen()>
<org.apache.http.impl.SocketHttpClientConnection: boolean isOpen()>
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)>
<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpClientConnection: int getSocketTimeout()>
<org.apache.http.impl.SocketHttpClientConnection: java.net.Socket getSocket()>
<org.apache.http.impl.SocketHttpClientConnection: void shutdown()>
<org.apache.http.impl.SocketHttpClientConnection: java.net.InetAddress getLocalAddress()>
<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpClientConnection: void assertOpen()>
<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpClientConnection: int getLocalPort()>
<org.apache.http.impl.SocketHttpClientConnection: int getRemotePort()>
<org.apache.http.impl.cookie.RFC2109Spec: java.util.List formatCookies(java.util.List)>
<org.apache.http.impl.cookie.RFC2109Spec: org.apache.http.Header getVersionHeader()>
<org.apache.http.impl.cookie.RFC2109Spec: void <init>()>
<org.apache.http.impl.cookie.RFC2109Spec: void formatParamAsVer(org.apache.http.util.CharArrayBuffer,java.lang.String,java.lang.String,int)>
<org.apache.http.impl.cookie.RFC2109Spec: int getVersion()>
<org.apache.http.impl.cookie.RFC2109Spec: void <init>(java.lang.String[],boolean)>
<org.apache.http.impl.cookie.RFC2109Spec: void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int)>
<org.apache.http.impl.cookie.RFC2109Spec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>
<java.util.logging.XMLFormatter: void <init>()>
<java.util.logging.XMLFormatter: java.lang.String format(java.util.logging.LogRecord)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertMatchesRegex(java.lang.String,java.lang.String)>
<android.test.MoreAsserts: void assertNotMatchesRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertContainsRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.test.MoreAsserts: void assertNotEmpty(java.lang.String,java.util.Map)>
<android.test.MoreAsserts: void assertEmpty(java.lang.Iterable)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,double[],double[])>
<android.test.MoreAsserts: void assertEquals(byte[],byte[])>
<android.test.MoreAsserts: void assertContentsInAnyOrder(java.lang.Iterable,java.lang.Object...)>
<android.test.MoreAsserts: void assertNotEmpty(java.lang.Iterable)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>
<android.test.MoreAsserts: void assertEquals(java.util.Set,java.util.Set)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,int[],int[])>
<android.test.MoreAsserts: void assertNotEqual(java.lang.String,java.lang.Object,java.lang.Object)>
<android.test.MoreAsserts: void assertEmpty(java.lang.String,java.lang.Iterable)>
<android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String)>
<android.test.MoreAsserts: void assertContentsInOrder(java.lang.Iterable,java.lang.Object...)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertContainsRegex(java.lang.String,java.lang.String)>
<android.test.MoreAsserts: void assertContentsInAnyOrder(java.lang.String,java.lang.Iterable,java.lang.Object...)>
<android.test.MoreAsserts: void assertNotEmpty(java.util.Map)>
<android.test.MoreAsserts: void assertEmpty(java.lang.String,java.util.Map)>
<android.test.MoreAsserts: void checkEqualsAndHashCodeMethods(java.lang.Object,java.lang.Object,boolean)>
<android.test.MoreAsserts: void assertContentsInOrder(java.lang.String,java.lang.Iterable,java.lang.Object...)>
<android.test.MoreAsserts: void assertEquals(java.lang.Object[],java.lang.Object[])>
<android.test.MoreAsserts: void assertEquals(java.lang.String,java.util.Set,java.util.Set)>
<android.test.MoreAsserts: void checkEqualsAndHashCodeMethods(java.lang.String,java.lang.Object,java.lang.Object,boolean)>
<android.test.MoreAsserts: void assertAssignableFrom(java.lang.Class,java.lang.Object)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,byte[],byte[])>
<android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.test.MoreAsserts: void assertEquals(int[],int[])>
<android.test.MoreAsserts: void assertEquals(double[],double[])>
<android.test.MoreAsserts: void assertNotEmpty(java.lang.String,java.lang.Iterable)>
<android.test.MoreAsserts: void assertNotEqual(java.lang.Object,java.lang.Object)>
<android.test.MoreAsserts: void assertAssignableFrom(java.lang.Class,java.lang.Class)>
<android.test.MoreAsserts: void assertEmpty(java.util.Map)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertMatchesRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.test.MoreAsserts: void assertNotMatchesRegex(java.lang.String,java.lang.String)>
<android.media.RingtoneManager: void <init>(android.app.Activity)>
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.media.RingtoneManager: void <init>(android.content.Context)>
<android.media.RingtoneManager: void setIncludeDrm(boolean)>
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>
<android.media.RingtoneManager: boolean getIncludeDrm()>
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>
<android.media.RingtoneManager: boolean getStopPreviousRingtone()>
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)>
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.media.RingtoneManager: android.database.Cursor getCursor()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>
<android.media.RingtoneManager: void setType(int)>
<android.widget.Gallery.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery.LayoutParams: void <init>(int,int)>
<android.widget.Gallery.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<javax.xml.parsers.DocumentBuilder: boolean isNamespaceAware()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.lang.String)>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>
<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>
<javax.xml.parsers.DocumentBuilder: boolean isValidating()>
<javax.xml.parsers.DocumentBuilder: void reset()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>
<javax.xml.parsers.DocumentBuilder: void <init>()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)>
<javax.xml.parsers.DocumentBuilder: boolean isXIncludeAware()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.DOMImplementation getDOMImplementation()>
<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream,java.lang.String)>
<java.security.DigestInputStream: void setMessageDigest(java.security.MessageDigest)>
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()>
<java.security.DigestInputStream: void on(boolean)>
<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>
<java.lang.Comparable: int compareTo(T)>
<java.security.CodeSource: boolean implies(java.security.CodeSource)>
<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>
<java.security.CodeSource: java.net.URL getLocation()>
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>
<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.net.http.SslCertificate: android.net.http.SslCertificate.DName getIssuedBy()>
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>
<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>
<android.net.http.SslCertificate: android.net.http.SslCertificate.DName getIssuedTo()>
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>
<android.R.drawable: void <init>()>
<java.io.ObjectInputStream.GetField: short get(java.lang.String,short)>
<java.io.ObjectInputStream.GetField: char get(java.lang.String,char)>
<java.io.ObjectInputStream.GetField: double get(java.lang.String,double)>
<java.io.ObjectInputStream.GetField: long get(java.lang.String,long)>
<java.io.ObjectInputStream.GetField: void <init>()>
<java.io.ObjectInputStream.GetField: java.io.ObjectStreamClass getObjectStreamClass()>
<java.io.ObjectInputStream.GetField: float get(java.lang.String,float)>
<java.io.ObjectInputStream.GetField: java.lang.Object get(java.lang.String,java.lang.Object)>
<java.io.ObjectInputStream.GetField: byte get(java.lang.String,byte)>
<java.io.ObjectInputStream.GetField: boolean defaulted(java.lang.String)>
<java.io.ObjectInputStream.GetField: int get(java.lang.String,int)>
<java.io.ObjectInputStream.GetField: boolean get(java.lang.String,boolean)>
<javax.security.auth.login.LoginException: void <init>()>
<javax.security.auth.login.LoginException: void <init>(java.lang.String)>
<org.apache.http.params.BasicHttpParams: boolean removeParameter(java.lang.String)>
<org.apache.http.params.BasicHttpParams: void clear()>
<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)>
<org.apache.http.params.BasicHttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.BasicHttpParams: boolean isParameterSet(java.lang.String)>
<org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>
<org.apache.http.params.BasicHttpParams: void <init>()>
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>
<org.apache.http.params.BasicHttpParams: java.lang.Object clone()>
<org.apache.http.params.BasicHttpParams: boolean isParameterSetLocally(java.lang.String)>
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>
<java.net.URL: java.net.URI toURI()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
<java.net.URL: java.lang.String getAuthority()>
<java.net.URL: java.lang.String getPath()>
<java.net.URL: java.lang.String getHost()>
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>
<java.net.URL: java.lang.String getRef()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URL: java.lang.Object getContent()>
<java.net.URL: void <init>(java.lang.String)>
<java.net.URL: boolean sameFile(java.net.URL)>
<java.net.URL: java.lang.String toExternalForm()>
<java.net.URL: java.lang.String getUserInfo()>
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
<java.net.URL: int getPort()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.net.URL: java.lang.String getProtocol()>
<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.net.URL: java.lang.String getFile()>
<java.net.URL: java.lang.String getQuery()>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: int getDefaultPort()>
<java.io.ObjectOutput: void write(byte[],int,int)>
<java.io.ObjectOutput: void write(int)>
<java.io.ObjectOutput: void flush()>
<java.io.ObjectOutput: void write(byte[])>
<java.io.ObjectOutput: void writeObject(java.lang.Object)>
<java.io.ObjectOutput: void close()>
<java.lang.UnsupportedClassVersionError: void <init>()>
<java.lang.UnsupportedClassVersionError: void <init>(java.lang.String)>
<java.util.regex.MatchResult: int groupCount()>
<java.util.regex.MatchResult: int end()>
<java.util.regex.MatchResult: int start()>
<java.util.regex.MatchResult: java.lang.String group(int)>
<java.util.regex.MatchResult: int end(int)>
<java.util.regex.MatchResult: int start(int)>
<java.util.regex.MatchResult: java.lang.String group()>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,int,java.lang.String[],int[])>
<android.widget.SimpleExpandableListAdapter: boolean hasStableIds()>
<android.widget.SimpleExpandableListAdapter: android.view.View newGroupView(boolean,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])>
<android.widget.SimpleExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.widget.SimpleExpandableListAdapter: long getChildId(int,int)>
<android.widget.SimpleExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: android.view.View newChildView(boolean,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: int getGroupCount()>
<android.widget.SimpleExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: int getChildrenCount(int)>
<android.widget.SimpleExpandableListAdapter: long getGroupId(int)>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getGroup(int)>
<org.apache.http.impl.cookie.BasicExpiresHandler: void <init>(java.lang.String[])>
<org.apache.http.impl.cookie.BasicExpiresHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<java.nio.channels.FileLockInterruptionException: void <init>()>
<android.text.style.TabStopSpan: int getTabStop()>
<java.lang.Enum: java.lang.Object clone()>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.lang.Enum: java.lang.Class getDeclaringClass()>
<java.lang.Enum: int compareTo(E)>
<java.lang.Enum: T valueOf(java.lang.Class,java.lang.String)>
<java.lang.Enum: int ordinal()>
<java.lang.Enum: int hashCode()>
<java.lang.Enum: boolean equals(java.lang.Object)>
<java.lang.Enum: java.lang.String name()>
<android.graphics.drawable.StateListDrawable: void <init>()>
<android.graphics.drawable.StateListDrawable: void addState(int[],android.graphics.drawable.Drawable)>
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)>
<org.apache.http.impl.io.ContentLengthOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,long)>
<android.test.ViewAsserts: void assertLeftAligned(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertBottomAligned(android.view.View,android.view.View,int)>
<android.test.ViewAsserts: void assertOffScreenAbove(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertTopAligned(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertHorizontalCenterAligned(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertOffScreenBelow(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertTopAligned(android.view.View,android.view.View,int)>
<android.test.ViewAsserts: void assertGroupContains(android.view.ViewGroup,android.view.View)>
<android.test.ViewAsserts: void assertRightAligned(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertHasScreenCoordinates(android.view.View,android.view.View,int,int)>
<android.test.ViewAsserts: void assertOnScreen(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertLeftAligned(android.view.View,android.view.View,int)>
<android.test.ViewAsserts: void assertGroupNotContains(android.view.ViewGroup,android.view.View)>
<android.test.ViewAsserts: void assertBaselineAligned(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertGroupIntegrity(android.view.ViewGroup)>
<android.test.ViewAsserts: void assertBottomAligned(android.view.View,android.view.View)>
<android.test.ViewAsserts: void assertRightAligned(android.view.View,android.view.View,int)>
<android.test.ViewAsserts: void assertVerticalCenterAligned(android.view.View,android.view.View)>
<android.text.Layout.Alignment: android.text.Layout.Alignment[] values()>
<android.text.Layout.Alignment: android.text.Layout.Alignment valueOf(java.lang.String)>
<junit.framework.TestResult: void stop()>
<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>
<junit.framework.TestResult: void endTest(junit.framework.Test)>
<junit.framework.TestResult: void addListener(junit.framework.TestListener)>
<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>
<junit.framework.TestResult: int runCount()>
<junit.framework.TestResult: boolean shouldStop()>
<junit.framework.TestResult: java.util.Enumeration failures()>
<junit.framework.TestResult: int failureCount()>
<junit.framework.TestResult: int errorCount()>
<junit.framework.TestResult: java.util.Enumeration errors()>
<junit.framework.TestResult: void <init>()>
<junit.framework.TestResult: void run(junit.framework.TestCase)>
<junit.framework.TestResult: boolean wasSuccessful()>
<junit.framework.TestResult: void removeListener(junit.framework.TestListener)>
<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>
<junit.framework.TestResult: void startTest(junit.framework.Test)>
<org.apache.http.protocol.HttpDateGenerator: void <init>()>
<org.apache.http.protocol.HttpDateGenerator: java.lang.String getCurrentDate()>
<org.apache.http.entity.ContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>
<java.net.URI: boolean isAbsolute()>
<java.net.URI: int compareTo(java.net.URI)>
<java.net.URI: java.lang.String getRawQuery()>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.lang.String getFragment()>
<java.net.URI: boolean isOpaque()>
<java.net.URI: void <init>(java.lang.String)>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.lang.String getPath()>
<java.net.URI: java.lang.String getUserInfo()>
<java.net.URI: int getPort()>
<java.net.URI: java.lang.String getRawFragment()>
<java.net.URI: java.net.URI relativize(java.net.URI)>
<java.net.URI: java.net.URI resolve(java.lang.String)>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.lang.String getRawAuthority()>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.lang.String getRawSchemeSpecificPart()>
<java.net.URI: java.net.URI resolve(java.net.URI)>
<java.net.URI: java.lang.String getSchemeSpecificPart()>
<java.net.URI: java.lang.String getRawPath()>
<java.net.URI: java.net.URI create(java.lang.String)>
<java.net.URI: java.lang.String getRawUserInfo()>
<java.net.URI: java.lang.String getHost()>
<java.net.URI: java.lang.String getQuery()>
<java.net.URI: java.net.URI parseServerAuthority()>
<java.net.URI: java.lang.String getScheme()>
<java.net.URI: java.lang.String toASCIIString()>
<java.net.URI: java.net.URL toURL()>
<java.net.URI: java.net.URI normalize()>
<java.net.URI: java.lang.String getAuthority()>
<java.sql.SQLWarning: java.sql.SQLWarning getNextWarning()>
<java.sql.SQLWarning: void setNextWarning(java.sql.SQLWarning)>
<java.sql.SQLWarning: void <init>(java.lang.String,java.lang.String,int)>
<java.sql.SQLWarning: void <init>(java.lang.String,java.lang.String)>
<java.sql.SQLWarning: void <init>(java.lang.String)>
<java.sql.SQLWarning: void <init>()>
<android.test.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.view.SurfaceHolder: void setFixedSize(int,int)>
<android.view.SurfaceHolder: void setType(int)>
<android.view.SurfaceHolder: void setFormat(int)>
<android.view.SurfaceHolder: boolean isCreating()>
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>
<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>
<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>
<android.view.SurfaceHolder: void setSizeFromLayout()>
<android.view.SurfaceHolder: android.view.Surface getSurface()>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder.Callback)>
<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder.Callback)>
<android.webkit.HttpAuthHandler: void cancel()>
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>
<javax.crypto.ShortBufferException: void <init>()>
<javax.crypto.ShortBufferException: void <init>(java.lang.String)>
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader.TileMode,android.graphics.Shader.TileMode)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<org.apache.http.impl.AbstractHttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isStale()>
<org.apache.http.impl.AbstractHttpClientConnection: void <init>()>
<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>
<org.apache.http.impl.AbstractHttpClientConnection: void flush()>
<org.apache.http.impl.AbstractHttpClientConnection: void doFlush()>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isResponseAvailable(int)>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>
<android.webkit.WebSyncManager: void onSyncInit()>
<android.webkit.WebSyncManager: void resetSync()>
<android.webkit.WebSyncManager: void stopSync()>
<android.webkit.WebSyncManager: void sync()>
<android.webkit.WebSyncManager: void run()>
<android.webkit.WebSyncManager: void startSync()>
<android.webkit.WebSyncManager: void <init>(android.content.Context,java.lang.String)>
<org.apache.http.impl.cookie.BestMatchSpecFactory: void <init>()>
<org.apache.http.impl.cookie.BestMatchSpecFactory: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>
<android.telephony.ServiceState: void <init>()>
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ServiceState: void setStateOff()>
<android.telephony.ServiceState: void <init>(android.os.Parcel)>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<android.telephony.ServiceState: void setIsManualSelection(boolean)>
<android.telephony.ServiceState: boolean getRoaming()>
<android.telephony.ServiceState: int describeContents()>
<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>
<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>
<android.telephony.ServiceState: void setState(int)>
<android.telephony.ServiceState: void setStateOutOfService()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<android.telephony.ServiceState: int getState()>
<android.telephony.ServiceState: void setRoaming(boolean)>
<java.net.Authenticator: java.net.PasswordAuthentication getPasswordAuthentication()>
<java.net.Authenticator: java.net.Authenticator.RequestorType getRequestorType()>
<java.net.Authenticator: java.net.InetAddress getRequestingSite()>
<java.net.Authenticator: java.lang.String getRequestingPrompt()>
<java.net.Authenticator: java.net.URL getRequestingURL()>
<java.net.Authenticator: java.lang.String getRequestingProtocol()>
<java.net.Authenticator: void setDefault(java.net.Authenticator)>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.Authenticator: void <init>()>
<java.net.Authenticator: java.lang.String getRequestingHost()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.Authenticator: int getRequestingPort()>
<java.net.Authenticator: java.lang.String getRequestingScheme()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator.RequestorType)>
<org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getContentCharset(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpProtocolParams: void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String)>
<org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>
<org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>
<android.test.ServiceTestCase: void shutdownService()>
<android.test.ServiceTestCase: void startService(android.content.Intent)>
<android.test.ServiceTestCase: void setApplication(android.app.Application)>
<android.test.ServiceTestCase: void testServiceTestCaseSetUpProperly()>
<android.test.ServiceTestCase: T getService()>
<android.test.ServiceTestCase: void setupService()>
<android.test.ServiceTestCase: android.os.IBinder bindService(android.content.Intent)>
<android.test.ServiceTestCase: android.content.Context getSystemContext()>
<android.test.ServiceTestCase: void <init>(java.lang.Class)>
<android.test.ServiceTestCase: android.app.Application getApplication()>
<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy: void <init>()>
<javax.net.ssl.SSLEngineResult.Status: javax.net.ssl.SSLEngineResult.Status valueOf(java.lang.String)>
<javax.net.ssl.SSLEngineResult.Status: javax.net.ssl.SSLEngineResult.Status[] values()>
<java.io.CharArrayWriter: void close()>
<java.io.CharArrayWriter: void reset()>
<java.io.CharArrayWriter: char[] toCharArray()>
<java.io.CharArrayWriter: int size()>
<java.io.CharArrayWriter: void write(char[],int,int)>
<java.io.CharArrayWriter: void <init>()>
<java.io.CharArrayWriter: void <init>(int)>
<java.io.CharArrayWriter: void writeTo(java.io.Writer)>
<java.io.CharArrayWriter: void flush()>
<android.provider.Contacts.Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>
<android.provider.Contacts.Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<java.util.logging.LogRecord: int getThreadID()>
<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>
<java.util.logging.LogRecord: long getMillis()>
<java.util.logging.LogRecord: java.lang.Object[] getParameters()>
<java.util.logging.LogRecord: java.lang.String getResourceBundleName()>
<java.util.logging.LogRecord: java.lang.Throwable getThrown()>
<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>
<java.util.logging.LogRecord: java.lang.String getSourceClassName()>
<java.util.logging.LogRecord: void setLevel(java.util.logging.Level)>
<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
<java.util.logging.LogRecord: long getSequenceNumber()>
<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>
<java.util.logging.LogRecord: void setThreadID(int)>
<java.util.logging.LogRecord: void setMillis(long)>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>
<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>
<java.util.logging.LogRecord: void setMessage(java.lang.String)>
<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>
<java.util.logging.LogRecord: void setSequenceNumber(long)>
<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
<java.util.logging.LogRecord: java.lang.String getMessage()>
<java.util.logging.LogRecord: java.lang.String getLoggerName()>
<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup.LayoutParams,boolean)>
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
<android.view.ViewGroup: void dispatchSetSelected(boolean)>
<android.view.ViewGroup: void removeViewAt(int)>
<android.view.ViewGroup: void removeViews(int,int)>
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewGroup: void addView(android.view.View,int)>
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewGroup: void setClipToPadding(boolean)>
<android.view.ViewGroup: void removeViewInLayout(android.view.View)>
<android.view.ViewGroup: void addView(android.view.View,int,int)>
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation.AnimationListener)>
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>
<android.view.ViewGroup: android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()>
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<android.view.ViewGroup: void clearDisappearingChildren()>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewGroup: void addView(android.view.View)>
<android.view.ViewGroup: void removeViewsInLayout(int,int)>
<android.view.ViewGroup: void scheduleLayoutAnimation()>
<android.view.ViewGroup: void measureChild(android.view.View,int,int)>
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: int getDescendantFocusability()>
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
<android.view.ViewGroup: void bringChildToFront(android.view.View)>
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>
<android.view.ViewGroup: void removeAllViews()>
<android.view.ViewGroup: boolean canAnimate()>
<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup: void removeView(android.view.View)>
<android.view.ViewGroup: android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewGroup: int indexOfChild(android.view.View)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: void detachViewFromParent(int)>
<android.view.ViewGroup: android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: int getChildDrawingOrder(int,int)>
<android.view.ViewGroup: void removeAllViewsInLayout()>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<android.view.ViewGroup: void clearChildFocus(android.view.View)>
<android.view.ViewGroup: void <init>(android.content.Context)>
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: int getChildCount()>
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
<android.view.ViewGroup: void setClipChildren(boolean)>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>
<android.view.ViewGroup: void debug(int)>
<android.view.ViewGroup: void detachViewsFromParent(int,int)>
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
<android.view.ViewGroup: void startLayoutAnimation()>
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup.LayoutParams,int,int)>
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>
<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<android.view.ViewGroup: boolean addStatesFromChildren()>
<android.view.ViewGroup: int getPersistentDrawingCache()>
<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<android.view.ViewGroup: void measureChildren(int,int)>
<android.view.ViewGroup: void detachAllViewsFromParent()>
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewGroup: android.view.animation.Animation.AnimationListener getLayoutAnimationListener()>
<android.database.ContentObserver: void onChange(boolean)>
<android.database.ContentObserver: void <init>(android.os.Handler)>
<android.database.ContentObserver: void dispatchChange(boolean)>
<android.database.ContentObserver: boolean deliverSelfNotifications()>
<android.util.SparseArray: void remove(int)>
<android.util.SparseArray: int indexOfKey(int)>
<android.util.SparseArray: int indexOfValue(E)>
<android.util.SparseArray: int size()>
<android.util.SparseArray: void <init>()>
<android.util.SparseArray: void append(int,E)>
<android.util.SparseArray: void delete(int)>
<android.util.SparseArray: int keyAt(int)>
<android.util.SparseArray: void put(int,E)>
<android.util.SparseArray: E valueAt(int)>
<android.util.SparseArray: void clear()>
<android.util.SparseArray: E get(int)>
<android.util.SparseArray: void setValueAt(int,E)>
<android.util.SparseArray: void <init>(int)>
<android.util.SparseArray: E get(int,E)>
<org.apache.http.conn.scheme.Scheme: boolean equals(java.lang.Object)>
<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()>
<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>
<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>
<org.apache.http.conn.scheme.Scheme: int getDefaultPort()>
<org.apache.http.conn.scheme.Scheme: boolean isLayered()>
<org.apache.http.conn.scheme.Scheme: java.lang.String toString()>
<org.apache.http.conn.scheme.Scheme: int resolvePort(int)>
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue.IdleHandler)>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue.IdleHandler)>
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>
<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>
<java.net.URLStreamHandler: void <init>()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>
<java.net.URLStreamHandler: int getDefaultPort()>
<java.net.URLStreamHandler: int hashCode(java.net.URL)>
<org.apache.http.impl.EnglishReasonPhraseCatalog: java.lang.String getReason(int,java.util.Locale)>
<org.apache.http.impl.EnglishReasonPhraseCatalog: void <init>()>
<android.graphics.DrawFilter: void <init>()>
<android.text.style.ReplacementSpan: void <init>()>
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.ReplacementSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<android.text.style.ReplacementSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)>
<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.ApplicationInfo: void <init>()>
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ApplicationInfo: int describeContents()>
<android.util.StringBuilderPrinter: void <init>(java.lang.StringBuilder)>
<android.util.StringBuilderPrinter: void println(java.lang.String)>
<org.apache.http.impl.conn.DefaultResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.DefaultResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>
<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(E)>
<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentLinkedQueue: int size()>
<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<java.util.concurrent.ConcurrentLinkedQueue: E peek()>
<java.util.concurrent.ConcurrentLinkedQueue: E poll()>
<android.widget.Filter.FilterListener: void onFilterComplete(int)>
<java.security.BasicPermission: void <init>(java.lang.String)>
<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>
<java.security.BasicPermission: java.lang.String getActions()>
<java.security.BasicPermission: boolean implies(java.security.Permission)>
<java.security.BasicPermission: boolean equals(java.lang.Object)>
<java.security.BasicPermission: int hashCode()>
<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>
<android.text.LoginFilter: void onStop()>
<android.text.LoginFilter: boolean isAllowed(char)>
<android.text.LoginFilter: void onStart()>
<android.text.LoginFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.LoginFilter: void onInvalidCharacter(char)>
<android.util.PrintWriterPrinter: void println(java.lang.String)>
<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: boolean canConstantState()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getOpacity()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: boolean isStateful()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void setVariablePadding(boolean)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: android.graphics.Rect getConstantPadding()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void growArray(int,int)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantWidth()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantHeight()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: boolean isConstantSize()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getChildCount()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantMinimumHeight()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantMinimumWidth()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getChangingConfigurations()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void setConstantSize(boolean)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)>
<android.text.util.Linkify: void <init>()>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)>
<android.text.util.Linkify: boolean addLinks(android.widget.TextView,int)>
<java.security.cert.PKIXCertPathValidatorResult: java.lang.Object clone()>
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()>
<java.security.cert.PKIXCertPathValidatorResult: void <init>(java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)>
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()>
<java.security.cert.PKIXCertPathValidatorResult: java.security.PublicKey getPublicKey()>
<java.util.zip.Checksum: void update(byte[],int,int)>
<java.util.zip.Checksum: void reset()>
<java.util.zip.Checksum: void update(int)>
<java.util.zip.Checksum: long getValue()>
<java.net.CookieHandler: void put(java.net.URI,java.util.Map)>
<java.net.CookieHandler: void <init>()>
<java.net.CookieHandler: java.util.Map get(java.net.URI,java.util.Map)>
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>
<org.apache.http.auth.InvalidCredentialsException: void <init>()>
<org.apache.http.auth.InvalidCredentialsException: void <init>(java.lang.String)>
<org.apache.http.auth.InvalidCredentialsException: void <init>(java.lang.String,java.lang.Throwable)>
<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isNonSeparator(char)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String convertKeypadLettersToDigits(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isISODigit(char)>
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean is12Key(char)>
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isStartsPostDial(char)>
<android.telephony.PhoneNumberUtils: java.lang.String stringFromStringAndTOA(java.lang.String,int)>
<android.telephony.PhoneNumberUtils: boolean isDialable(char)>
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isGlobalPhoneNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String extractPostDialPortion(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: int toaFromString(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: void formatNanpNumber(android.text.Editable)>
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isReallyDialable(char)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>
<android.telephony.PhoneNumberUtils: void <init>()>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int)>
<android.telephony.PhoneNumberUtils: void formatNumber(android.text.Editable,int)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>
<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>
<javax.crypto.spec.PBEKeySpec: void clearPassword()>
<javax.crypto.spec.PBEKeySpec: int getIterationCount()>
<javax.crypto.spec.PBEKeySpec: void <init>(char[])>
<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int)>
<javax.crypto.spec.PBEKeySpec: int getKeyLength()>
<javax.crypto.spec.PBEKeySpec: char[] getPassword()>
<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()>
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()>
<javax.crypto.spec.DHPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()>
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>
<android.database.sqlite.SQLiteStatement: void execute()>
<android.database.sqlite.SQLiteStatement: long executeInsert()>
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>
<javax.xml.XMLConstants: void <init>()>
<java.util.Hashtable: boolean containsValue(java.lang.Object)>
<java.util.Hashtable: void rehash()>
<java.util.Hashtable: void <init>(int)>
<java.util.Hashtable: java.lang.Object clone()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: V put(K,V)>
<java.util.Hashtable: V remove(java.lang.Object)>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.util.Hashtable: java.util.Collection values()>
<java.util.Hashtable: void <init>()>
<java.util.Hashtable: void <init>(int,float)>
<java.util.Hashtable: void <init>(java.util.Map)>
<java.util.Hashtable: int size()>
<java.util.Hashtable: void clear()>
<java.util.Hashtable: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.util.Hashtable: V get(java.lang.Object)>
<java.util.Hashtable: boolean isEmpty()>
<java.util.Hashtable: void putAll(java.util.Map)>
<java.util.Hashtable: java.util.Set entrySet()>
<android.net.NetworkInfo.DetailedState: android.net.NetworkInfo.DetailedState[] values()>
<android.net.NetworkInfo.DetailedState: android.net.NetworkInfo.DetailedState valueOf(java.lang.String)>
<android.media.FaceDetector.Face: float confidence()>
<android.media.FaceDetector.Face: float pose(int)>
<android.media.FaceDetector.Face: float eyesDistance()>
<android.media.FaceDetector.Face: void getMidPoint(android.graphics.PointF)>
<android.app.TimePickerDialog.OnTimeSetListener: void onTimeSet(android.widget.TimePicker,int,int)>
<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>
<java.util.IllegalFormatFlagsException: java.lang.String getFlags()>
<android.view.AbsSavedState: void <init>(android.os.Parcelable)>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<android.view.AbsSavedState: int describeContents()>
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>
<android.view.AbsSavedState: void <init>(android.os.Parcel)>
<java.io.FileWriter: void <init>(java.io.File,boolean)>
<java.io.FileWriter: void <init>(java.io.File)>
<java.io.FileWriter: void <init>(java.io.FileDescriptor)>
<java.io.FileWriter: void <init>(java.lang.String)>
<java.io.FileWriter: void <init>(java.lang.String,boolean)>
<android.widget.PopupWindow: void <init>()>
<android.widget.PopupWindow: android.view.View getContentView()>
<android.widget.PopupWindow: void setWidth(int)>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.PopupWindow: void setAnimationStyle(int)>
<android.widget.PopupWindow: void setFocusable(boolean)>
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.PopupWindow: void update(android.view.View,int,int)>
<android.widget.PopupWindow: int getAnimationStyle()>
<android.widget.PopupWindow: void update(int,int,int,int)>
<android.widget.PopupWindow: int getWidth()>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>
<android.widget.PopupWindow: void setContentView(android.view.View)>
<android.widget.PopupWindow: boolean isShowing()>
<android.widget.PopupWindow: void <init>(int,int)>
<android.widget.PopupWindow: int getHeight()>
<android.widget.PopupWindow: void setHeight(int)>
<android.widget.PopupWindow: boolean isFocusable()>
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>
<android.widget.PopupWindow: void dismiss()>
<android.widget.PopupWindow: void <init>(android.view.View,int,int)>
<android.widget.PopupWindow: void setIgnoreCheekPress()>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow.OnDismissListener)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>
<android.widget.PopupWindow: void <init>(android.content.Context)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.PopupWindow: void <init>(android.view.View)>
<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>
<javax.net.ssl.KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactorySpi,java.security.Provider,java.lang.String)>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.security.Provider)>
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>
<javax.net.ssl.KeyManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)>
<org.apache.http.MethodNotSupportedException: void <init>(java.lang.String)>
<org.apache.http.MethodNotSupportedException: void <init>(java.lang.String,java.lang.Throwable)>
<android.os.Messenger: void send(android.os.Message)>
<android.os.Messenger: int describeContents()>
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>
<android.os.Messenger: void <init>(android.os.IBinder)>
<android.os.Messenger: android.os.IBinder getBinder()>
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>
<android.os.Messenger: void <init>(android.os.Handler)>
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>
<java.security.cert.CertificateException: void <init>()>
<java.security.cert.CertificateException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>
<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.conn.ManagedClientConnection: void setState(java.lang.Object)>
<org.apache.http.conn.ManagedClientConnection: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ManagedClientConnection: void unmarkReusable()>
<org.apache.http.conn.ManagedClientConnection: void tunnelTarget(boolean,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ManagedClientConnection: java.lang.Object getState()>
<org.apache.http.conn.ManagedClientConnection: boolean isSecure()>
<org.apache.http.conn.ManagedClientConnection: void markReusable()>
<org.apache.http.conn.ManagedClientConnection: org.apache.http.conn.routing.HttpRoute getRoute()>
<org.apache.http.conn.ManagedClientConnection: void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ManagedClientConnection: void setIdleDuration(long,java.util.concurrent.TimeUnit)>
<org.apache.http.conn.ManagedClientConnection: boolean isMarkedReusable()>
<org.apache.http.conn.ManagedClientConnection: javax.net.ssl.SSLSession getSSLSession()>
<org.apache.http.conn.ManagedClientConnection: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<android.provider.Contacts.ContactMethods: java.lang.String encodePredefinedImProtocol(int)>
<android.provider.Contacts.ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)>
<android.provider.Contacts.ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.Contacts.ContactMethods: java.lang.String encodeCustomImProtocol(java.lang.String)>
<android.provider.Contacts.ContactMethods: java.lang.Object decodeImProtocol(java.lang.String)>
<java.security.acl.AclEntry: boolean isNegative()>
<java.security.acl.AclEntry: boolean removePermission(java.security.acl.Permission)>
<java.security.acl.AclEntry: java.lang.Object clone()>
<java.security.acl.AclEntry: void setNegativePermissions()>
<java.security.acl.AclEntry: boolean checkPermission(java.security.acl.Permission)>
<java.security.acl.AclEntry: java.util.Enumeration permissions()>
<java.security.acl.AclEntry: java.security.Principal getPrincipal()>
<java.security.acl.AclEntry: java.lang.String toString()>
<java.security.acl.AclEntry: boolean addPermission(java.security.acl.Permission)>
<java.security.acl.AclEntry: boolean setPrincipal(java.security.Principal)>
<android.util.Xml.Encoding: android.util.Xml.Encoding[] values()>
<android.util.Xml.Encoding: android.util.Xml.Encoding valueOf(java.lang.String)>
<android.view.WindowManager.BadTokenException: void <init>()>
<android.view.WindowManager.BadTokenException: void <init>(java.lang.String)>
<android.text.method.ReplacementTransformationMethod: void <init>()>
<android.text.method.ReplacementTransformationMethod: char[] getReplacement()>
<android.text.method.ReplacementTransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
<android.text.method.ReplacementTransformationMethod: char[] getOriginal()>
<android.text.method.ReplacementTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: void <init>()>
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: boolean domainMatch(java.lang.String,java.lang.String)>
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<android.webkit.WebSettings.TextSize: android.webkit.WebSettings.TextSize valueOf(java.lang.String)>
<android.webkit.WebSettings.TextSize: android.webkit.WebSettings.TextSize[] values()>
<android.content.ContentUris: void <init>()>
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>
<android.content.ContentUris: android.net.Uri.Builder appendId(android.net.Uri.Builder,long)>
<android.content.ContentUris: long parseId(android.net.Uri)>
<java.io.RandomAccessFile: short readShort()>
<java.io.RandomAccessFile: void writeShort(int)>
<java.io.RandomAccessFile: void readFully(byte[])>
<java.io.RandomAccessFile: void readFully(byte[],int,int)>
<java.io.RandomAccessFile: void writeFloat(float)>
<java.io.RandomAccessFile: void writeUTF(java.lang.String)>
<java.io.RandomAccessFile: void writeByte(int)>
<java.io.RandomAccessFile: void writeBoolean(boolean)>
<java.io.RandomAccessFile: int skipBytes(int)>
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>
<java.io.RandomAccessFile: void setLength(long)>
<java.io.RandomAccessFile: void writeDouble(double)>
<java.io.RandomAccessFile: long getFilePointer()>
<java.io.RandomAccessFile: byte readByte()>
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>
<java.io.RandomAccessFile: float readFloat()>
<java.io.RandomAccessFile: void writeChars(java.lang.String)>
<java.io.RandomAccessFile: int read(byte[],int,int)>
<java.io.RandomAccessFile: void write(byte[])>
<java.io.RandomAccessFile: double readDouble()>
<java.io.RandomAccessFile: long readLong()>
<java.io.RandomAccessFile: int readUnsignedShort()>
<java.io.RandomAccessFile: void seek(long)>
<java.io.RandomAccessFile: char readChar()>
<java.io.RandomAccessFile: java.lang.String readUTF()>
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>
<java.io.RandomAccessFile: int readInt()>
<java.io.RandomAccessFile: void write(int)>
<java.io.RandomAccessFile: long length()>
<java.io.RandomAccessFile: java.lang.String readLine()>
<java.io.RandomAccessFile: int read(byte[])>
<java.io.RandomAccessFile: void write(byte[],int,int)>
<java.io.RandomAccessFile: void writeLong(long)>
<java.io.RandomAccessFile: void close()>
<java.io.RandomAccessFile: void writeInt(int)>
<java.io.RandomAccessFile: int readUnsignedByte()>
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>
<java.io.RandomAccessFile: boolean readBoolean()>
<java.io.RandomAccessFile: void writeBytes(java.lang.String)>
<java.io.RandomAccessFile: void writeChar(int)>
<java.io.RandomAccessFile: int read()>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
<java.security.KeyException: void <init>()>
<java.security.KeyException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.KeyException: void <init>(java.lang.Throwable)>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>(java.lang.String)>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>()>
<android.provider.MediaStore.Audio: java.lang.String keyFor(java.lang.String)>
<android.provider.MediaStore.Audio: void <init>()>
<org.apache.http.protocol.HttpExpectationVerifier: void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<javax.sql.RowSetWriter: boolean writeData(javax.sql.RowSetInternal)>
<junit.framework.TestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)>
<junit.framework.TestSuite: void <init>(java.lang.Class,java.lang.String)>
<junit.framework.TestSuite: void addTest(junit.framework.Test)>
<junit.framework.TestSuite: int countTestCases()>
<junit.framework.TestSuite: java.lang.String getName()>
<junit.framework.TestSuite: java.util.Enumeration tests()>
<junit.framework.TestSuite: void <init>(java.lang.Class)>
<junit.framework.TestSuite: void <init>(java.lang.String)>
<junit.framework.TestSuite: void addTestSuite(java.lang.Class)>
<junit.framework.TestSuite: void run(junit.framework.TestResult)>
<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>
<junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>
<junit.framework.TestSuite: junit.framework.Test testAt(int)>
<junit.framework.TestSuite: void <init>()>
<junit.framework.TestSuite: void setName(java.lang.String)>
<junit.framework.TestSuite: int testCount()>
<org.json.JSONException: void <init>(java.lang.String)>
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)>
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)>
<org.w3c.dom.Document: org.w3c.dom.Attr createAttribute(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Comment createComment(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.DocumentFragment createDocumentFragment()>
<org.w3c.dom.Document: org.w3c.dom.EntityReference createEntityReference(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>
<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>
<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Element getElementById(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>
<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>
<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
<android.telephony.PhoneStateListener: void <init>()>
<android.telephony.PhoneStateListener: void onDataActivity(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>
<android.test.mock.MockContentResolver: void <init>()>
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>
<android.graphics.Canvas.VertexMode: android.graphics.Canvas.VertexMode valueOf(java.lang.String)>
<android.graphics.Canvas.VertexMode: android.graphics.Canvas.VertexMode[] values()>
<java.lang.InheritableThreadLocal: void <init>()>
<java.lang.InheritableThreadLocal: T childValue(T)>
<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int addAndGet(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndAdd(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndDecrement(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int[])>
<java.util.concurrent.atomic.AtomicIntegerArray: int length()>
<java.util.concurrent.atomic.AtomicIntegerArray: boolean weakCompareAndSet(int,int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int incrementAndGet(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int decrementAndGet(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndIncrement(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>
<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<java.nio.channels.Channel: boolean isOpen()>
<java.nio.channels.Channel: void close()>
<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
<org.apache.http.impl.auth.BasicScheme: boolean isConnectionBased()>
<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>
<org.apache.http.impl.auth.BasicScheme: java.lang.String getSchemeName()>
<org.apache.http.impl.auth.BasicScheme: boolean isComplete()>
<org.apache.http.impl.auth.BasicScheme: void <init>()>
<android.sax.RootElement: void <init>(java.lang.String)>
<android.sax.RootElement: void <init>(java.lang.String,java.lang.String)>
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()>
<java.lang.LinkageError: void <init>()>
<java.lang.LinkageError: void <init>(java.lang.String)>
<java.util.concurrent.BlockingQueue: void put(E)>
<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.BlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingQueue: boolean add(E)>
<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.BlockingQueue: int remainingCapacity()>
<java.util.concurrent.BlockingQueue: boolean offer(E)>
<java.util.concurrent.BlockingQueue: E take()>
<java.util.concurrent.BlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.logging.ErrorManager: void <init>()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>
<java.util.concurrent.CopyOnWriteArraySet: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArraySet: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: int size()>
<android.test.AndroidTestCase: void scrubClass(java.lang.Class)>
<android.test.AndroidTestCase: void <init>()>
<android.test.AndroidTestCase: void testAndroidTestCaseSetupProperly()>
<android.test.AndroidTestCase: void setContext(android.content.Context)>
<android.test.AndroidTestCase: android.content.Context getContext()>
<java.io.SyncFailedException: void <init>(java.lang.String)>
<java.util.concurrent.CountDownLatch: void <init>(int)>
<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.CountDownLatch: long getCount()>
<java.util.concurrent.CountDownLatch: void await()>
<java.util.concurrent.CountDownLatch: void countDown()>
<android.util.LogPrinter: void <init>(int,java.lang.String)>
<android.util.LogPrinter: void println(java.lang.String)>
<org.apache.http.impl.client.RequestWrapper: void abort()>
<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.impl.client.RequestWrapper: boolean isAborted()>
<org.apache.http.impl.client.RequestWrapper: void incrementExecCount()>
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>
<org.apache.http.impl.client.RequestWrapper: boolean isRepeatable()>
<org.apache.http.impl.client.RequestWrapper: int getExecCount()>
<org.apache.http.impl.client.RequestWrapper: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.impl.client.RequestWrapper: void setURI(java.net.URI)>
<org.apache.http.impl.client.RequestWrapper: java.lang.String getMethod()>
<org.apache.http.impl.client.RequestWrapper: void <init>(org.apache.http.HttpRequest)>
<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()>
<org.apache.http.impl.client.RequestWrapper: void setMethod(java.lang.String)>
<org.apache.http.impl.client.RequestWrapper: void resetHeaders()>
<org.apache.http.impl.client.RequestWrapper: void setProtocolVersion(org.apache.http.ProtocolVersion)>
<java.text.CollationKey: int compareTo(java.text.CollationKey)>
<java.text.CollationKey: java.lang.String getSourceString()>
<java.text.CollationKey: byte[] toByteArray()>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream,int)>
<java.security.SecureRandomSpi: void engineSetSeed(byte[])>
<java.security.SecureRandomSpi: void engineNextBytes(byte[])>
<java.security.SecureRandomSpi: void <init>()>
<java.security.SecureRandomSpi: byte[] engineGenerateSeed(int)>
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key)>
<javax.crypto.SealedObject: java.lang.String getAlgorithm()>
<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key,java.lang.String)>
<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>
<javax.crypto.SealedObject: void <init>(javax.crypto.SealedObject)>
<java.lang.Character.Subset: boolean equals(java.lang.Object)>
<java.lang.Character.Subset: java.lang.String toString()>
<java.lang.Character.Subset: void <init>(java.lang.String)>
<java.lang.Character.Subset: int hashCode()>
<android.view.View.OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.app.TimePickerDialog: void onTimeChanged(android.widget.TimePicker,int,int)>
<android.app.TimePickerDialog: void <init>(android.content.Context,android.app.TimePickerDialog.OnTimeSetListener,int,int,boolean)>
<android.app.TimePickerDialog: void updateTime(int,int)>
<android.app.TimePickerDialog: void <init>(android.content.Context,int,android.app.TimePickerDialog.OnTimeSetListener,int,int,boolean)>
<android.app.TimePickerDialog: void onClick(android.content.DialogInterface,int)>
<java.io.ByteArrayOutputStream: void write(int)>
<java.io.ByteArrayOutputStream: void <init>()>
<java.io.ByteArrayOutputStream: int size()>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>
<java.io.ByteArrayOutputStream: java.lang.String toString(int)>
<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>
<java.io.ByteArrayOutputStream: void <init>(int)>
<java.io.ByteArrayOutputStream: void reset()>
<java.awt.font.TextAttribute: void <init>(java.lang.String)>
<javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)>
<javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>
<javax.crypto.spec.DESKeySpec: void <init>(byte[],int)>
<javax.crypto.spec.DESKeySpec: byte[] getKey()>
<javax.crypto.spec.DESKeySpec: void <init>(byte[])>
<android.os.SystemClock: boolean setCurrentTimeMillis(long)>
<android.os.SystemClock: void sleep(long)>
<android.os.SystemClock: long elapsedRealtime()>
<android.os.SystemClock: long uptimeMillis()>
<android.os.SystemClock: long currentThreadTimeMillis()>
<android.view.LayoutInflater.Filter: boolean onLoadClass(java.lang.Class)>
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Constructor: int getModifiers()>
<java.lang.reflect.Constructor: boolean isVarArgs()>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Constructor: java.lang.String getName()>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Constructor: boolean isSynthetic()>
<java.lang.reflect.Constructor: T newInstance(java.lang.Object...)>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Constructor: java.lang.String toGenericString()>
<java.security.cert.CRLSelector: java.lang.Object clone()>
<java.security.cert.CRLSelector: boolean match(java.security.cert.CRL)>
<org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>
<org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)>
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)>
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.StatusLine)>
<org.apache.http.message.BasicHttpResponse: java.util.Locale getLocale()>
<org.apache.http.message.BasicHttpResponse: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicHttpResponse: void setLocale(java.util.Locale)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)>
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setEntity(org.apache.http.HttpEntity)>
<java.util.Calendar: java.util.Locale[] getAvailableLocales()>
<java.util.Calendar: void set(int,int,int,int,int,int)>
<java.util.Calendar: int getActualMaximum(int)>
<java.util.Calendar: boolean before(java.lang.Object)>
<java.util.Calendar: int getMinimalDaysInFirstWeek()>
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>
<java.util.Calendar: int getLeastMaximum(int)>
<java.util.Calendar: java.util.TimeZone getTimeZone()>
<java.util.Calendar: int getGreatestMinimum(int)>
<java.util.Calendar: void roll(int,int)>
<java.util.Calendar: int getMinimum(int)>
<java.util.Calendar: java.util.Date getTime()>
<java.util.Calendar: boolean after(java.lang.Object)>
<java.util.Calendar: boolean isLenient()>
<java.util.Calendar: int getFirstDayOfWeek()>
<java.util.Calendar: void setLenient(boolean)>
<java.util.Calendar: int getActualMinimum(int)>
<java.util.Calendar: int compareTo(java.util.Calendar)>
<java.util.Calendar: void <init>()>
<java.util.Calendar: long getTimeInMillis()>
<java.util.Calendar: void roll(int,boolean)>
<java.util.Calendar: void clear()>
<java.util.Calendar: java.lang.Object clone()>
<java.util.Calendar: void add(int,int)>
<java.util.Calendar: void setTime(java.util.Date)>
<java.util.Calendar: void setTimeInMillis(long)>
<java.util.Calendar: java.util.Calendar getInstance()>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: void computeFields()>
<java.util.Calendar: int getMaximum(int)>
<java.util.Calendar: boolean isSet(int)>
<java.util.Calendar: void setTimeZone(java.util.TimeZone)>
<java.util.Calendar: void clear(int)>
<java.util.Calendar: void set(int,int,int)>
<java.util.Calendar: void set(int,int)>
<java.util.Calendar: void setMinimalDaysInFirstWeek(int)>
<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: void computeTime()>
<java.util.Calendar: int internalGet(int)>
<java.util.Calendar: void setFirstDayOfWeek(int)>
<java.util.Calendar: void set(int,int,int,int,int)>
<java.util.Calendar: void complete()>
<java.util.Calendar: int get(int)>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.nio.Buffer: java.nio.Buffer reset()>
<java.nio.Buffer: int limit()>
<java.nio.Buffer: int remaining()>
<java.nio.Buffer: int capacity()>
<java.nio.Buffer: java.nio.Buffer mark()>
<java.nio.Buffer: int position()>
<java.nio.Buffer: boolean hasRemaining()>
<java.nio.Buffer: boolean isReadOnly()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.nio.Buffer: java.nio.Buffer rewind()>
<java.text.AttributedCharacterIterator.Attribute: java.lang.String getName()>
<java.text.AttributedCharacterIterator.Attribute: boolean equals(java.lang.Object)>
<java.text.AttributedCharacterIterator.Attribute: void <init>(java.lang.String)>
<java.text.AttributedCharacterIterator.Attribute: int hashCode()>
<java.text.AttributedCharacterIterator.Attribute: java.lang.Object readResolve()>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>
<android.graphics.ColorFilter: void <init>()>
<android.os.ParcelFileDescriptor.AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.os.Parcelable: int describeContents()>
<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>
<org.apache.http.conn.routing.HttpRouteDirector: int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>
<java.lang.reflect.TypeVariable: java.lang.String getName()>
<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>
<java.lang.reflect.TypeVariable: D getGenericDeclaration()>
<android.text.style.StyleSpan: int getStyle()>
<android.text.style.StyleSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.StyleSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.StyleSpan: void <init>(int)>
<java.sql.SQLPermission: void <init>(java.lang.String)>
<java.sql.SQLPermission: void <init>(java.lang.String,java.lang.String)>
<java.io.ObjectStreamException: void <init>(java.lang.String)>
<java.io.ObjectStreamException: void <init>()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>
<org.apache.http.impl.io.AbstractMessageParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>
<android.test.AssertionFailedError: void <init>()>
<android.test.AssertionFailedError: void <init>(java.lang.String)>
<org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)>
<org.apache.http.params.HttpProtocolParamBean: void setUserAgent(java.lang.String)>
<org.apache.http.params.HttpProtocolParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpProtocolParamBean: void setVersion(org.apache.http.HttpVersion)>
<org.apache.http.params.HttpProtocolParamBean: void setHttpElementCharset(java.lang.String)>
<org.apache.http.params.HttpProtocolParamBean: void setContentCharset(java.lang.String)>
<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>
<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>
<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.TreeMap: K lastKey()>
<java.util.TreeMap: void <init>(java.util.SortedMap)>
<java.util.TreeMap: java.util.Set entrySet()>
<java.util.TreeMap: void <init>(java.util.Map)>
<java.util.TreeMap: java.util.SortedMap subMap(K,K)>
<java.util.TreeMap: void <init>()>
<java.util.TreeMap: java.util.SortedMap headMap(K)>
<java.util.TreeMap: java.util.SortedMap tailMap(K)>
<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.util.TreeMap: java.util.Comparator comparator()>
<java.util.TreeMap: K firstKey()>
<java.util.TreeMap: java.lang.Object clone()>
<org.apache.http.conn.routing.BasicRouteDirector: int directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>
<org.apache.http.conn.routing.BasicRouteDirector: int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>
<org.apache.http.conn.routing.BasicRouteDirector: int firstStep(org.apache.http.conn.routing.RouteInfo)>
<org.apache.http.conn.routing.BasicRouteDirector: void <init>()>
<org.apache.http.conn.routing.BasicRouteDirector: int proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>
<android.graphics.Bitmap.CompressFormat: android.graphics.Bitmap.CompressFormat[] values()>
<android.graphics.Bitmap.CompressFormat: android.graphics.Bitmap.CompressFormat valueOf(java.lang.String)>
<android.widget.TableRow: void <init>(android.content.Context)>
<android.widget.TableRow: int getVirtualChildCount()>
<android.widget.TableRow: android.view.View getVirtualChildAt(int)>
<android.widget.TableRow: void <init>(android.content.Context,android.util.AttributeSet)>
<org.apache.http.client.NonRepeatableRequestException: void <init>()>
<org.apache.http.client.NonRepeatableRequestException: void <init>(java.lang.String)>
<org.w3c.dom.Notation: java.lang.String getPublicId()>
<org.w3c.dom.Notation: java.lang.String getSystemId()>
<android.widget.AbsListView.RecyclerListener: void onMovedToScrapHeap(android.view.View)>
<java.nio.ReadOnlyBufferException: void <init>()>
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult)>
<android.app.KeyguardManager: android.app.KeyguardManager.KeyguardLock newKeyguardLock(java.lang.String)>
<java.security.cert.X509Certificate: void checkValidity()>
<java.security.cert.X509Certificate: int getVersion()>
<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>
<java.security.cert.X509Certificate: byte[] getTBSCertificate()>
<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()>
<java.security.cert.X509Certificate: byte[] getSigAlgParams()>
<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>
<java.security.cert.X509Certificate: java.util.Date getNotAfter()>
<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>
<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()>
<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()>
<java.security.cert.X509Certificate: int getBasicConstraints()>
<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()>
<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>
<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>
<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>
<java.security.cert.X509Certificate: void <init>()>
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<java.security.cert.X509Certificate: boolean[] getKeyUsage()>
<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>
<java.security.cert.X509Certificate: java.util.Date getNotBefore()>
<java.security.cert.X509Certificate: byte[] getSignature()>
<android.net.Credentials: int getPid()>
<android.net.Credentials: int getUid()>
<android.net.Credentials: void <init>(int,int,int)>
<android.net.Credentials: int getGid()>
<java.util.SortedSet: java.util.SortedSet headSet(E)>
<java.util.SortedSet: java.util.SortedSet subSet(E,E)>
<java.util.SortedSet: java.util.Comparator comparator()>
<java.util.SortedSet: E first()>
<java.util.SortedSet: java.util.SortedSet tailSet(E)>
<java.util.SortedSet: E last()>
<java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy: void <init>()>
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>
<java.lang.NoSuchFieldError: void <init>(java.lang.String)>
<java.lang.NoSuchFieldError: void <init>()>
<android.view.View.OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>
<java.util.zip.Adler32: long getValue()>
<java.util.zip.Adler32: void update(int)>
<java.util.zip.Adler32: void <init>()>
<java.util.zip.Adler32: void update(byte[],int,int)>
<java.util.zip.Adler32: void reset()>
<java.util.zip.Adler32: void update(byte[])>
<java.security.KeyStore.PasswordProtection: boolean isDestroyed()>
<java.security.KeyStore.PasswordProtection: void <init>(char[])>
<java.security.KeyStore.PasswordProtection: void destroy()>
<java.security.KeyStore.PasswordProtection: char[] getPassword()>
<javax.crypto.spec.RC5ParameterSpec: void <init>(int,int,int,byte[])>
<javax.crypto.spec.RC5ParameterSpec: void <init>(int,int,int,byte[],int)>
<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>
<javax.crypto.spec.RC5ParameterSpec: int getVersion()>
<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>
<javax.crypto.spec.RC5ParameterSpec: void <init>(int,int,int)>
<javax.crypto.spec.RC5ParameterSpec: int getRounds()>
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void <init>()>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>
<android.webkit.WebBackForwardList: int getSize()>
<android.webkit.WebBackForwardList: int getCurrentIndex()>
<org.apache.http.impl.conn.tsccm.WaitingThread: boolean await(java.util.Date)>
<org.apache.http.impl.conn.tsccm.WaitingThread: java.util.concurrent.locks.Condition getCondition()>
<org.apache.http.impl.conn.tsccm.WaitingThread: java.lang.Thread getThread()>
<org.apache.http.impl.conn.tsccm.WaitingThread: void <init>(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool)>
<org.apache.http.impl.conn.tsccm.WaitingThread: void wakeup()>
<org.apache.http.impl.conn.tsccm.WaitingThread: org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool()>
<org.apache.http.impl.conn.tsccm.WaitingThread: void interrupt()>
<android.net.Proxy: java.lang.String getHost(android.content.Context)>
<android.net.Proxy: void <init>()>
<android.net.Proxy: int getPort(android.content.Context)>
<android.net.Proxy: int getDefaultPort()>
<android.net.Proxy: java.lang.String getDefaultHost()>
<android.widget.AdapterView: android.widget.AdapterView.OnItemClickListener getOnItemClickListener()>
<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener)>
<android.widget.AdapterView: void setSelection(int)>
<android.widget.AdapterView: int getPositionForView(android.view.View)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterView: long getSelectedItemId()>
<android.widget.AdapterView: android.view.View getEmptyView()>
<android.widget.AdapterView: int getCount()>
<android.widget.AdapterView: int getLastVisiblePosition()>
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>
<android.widget.AdapterView: android.view.View getSelectedView()>
<android.widget.AdapterView: T getAdapter()>
<android.widget.AdapterView: void <init>(android.content.Context)>
<android.widget.AdapterView: java.lang.Object getSelectedItem()>
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.widget.AdapterView: android.widget.AdapterView.OnItemLongClickListener getOnItemLongClickListener()>
<android.widget.AdapterView: long getItemIdAtPosition(int)>
<android.widget.AdapterView: void setAdapter(T)>
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterView: int getSelectedItemPosition()>
<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)>
<android.widget.AdapterView: int getFirstVisiblePosition()>
<android.widget.AdapterView: android.widget.AdapterView.OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.AdapterView: void setEmptyView(android.view.View)>
<java.net.SocketPermission: int hashCode()>
<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<java.net.SocketPermission: boolean implies(java.security.Permission)>
<java.net.SocketPermission: java.lang.String getActions()>
<java.net.SocketPermission: boolean equals(java.lang.Object)>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()>
<java.security.cert.CertPathValidatorException: void <init>()>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.Throwable)>
<java.security.cert.CertPathValidatorException: int getIndex()>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>
<android.database.DataSetObserver: void onInvalidated()>
<android.database.DataSetObserver: void onChanged()>
<android.database.DataSetObserver: void <init>()>
<java.net.HttpRetryException: java.lang.String getReason()>
<java.net.HttpRetryException: int responseCode()>
<java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>
<java.net.HttpRetryException: java.lang.String getLocation()>
<java.net.HttpRetryException: void <init>(java.lang.String,int)>
<android.widget.ViewSwitcher: void <init>(android.content.Context)>
<android.widget.ViewSwitcher: void reset()>
<android.widget.ViewSwitcher: android.view.View getNextView()>
<android.widget.ViewSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewSwitcher: void setFactory(android.widget.ViewSwitcher.ViewFactory)>
<org.apache.http.conn.params.ConnPerRouteBean: int getMaxForRoute(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.conn.params.ConnPerRouteBean: void setDefaultMaxPerRoute(int)>
<org.apache.http.conn.params.ConnPerRouteBean: int getDefaultMax()>
<org.apache.http.conn.params.ConnPerRouteBean: void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int)>
<org.apache.http.conn.params.ConnPerRouteBean: void setMaxForRoutes(java.util.Map)>
<org.apache.http.conn.params.ConnPerRouteBean: void <init>(int)>
<org.apache.http.conn.params.ConnPerRouteBean: void <init>()>
<java.sql.Timestamp: boolean after(java.sql.Timestamp)>
<java.sql.Timestamp: boolean equals(java.sql.Timestamp)>
<java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>
<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>
<java.sql.Timestamp: void <init>(int,int,int,int,int,int,int)>
<java.sql.Timestamp: boolean before(java.sql.Timestamp)>
<java.sql.Timestamp: int getNanos()>
<java.sql.Timestamp: void setNanos(int)>
<java.sql.Timestamp: void <init>(long)>
<android.os.Parcelable.Creator: T createFromParcel(android.os.Parcel)>
<android.os.Parcelable.Creator: T[] newArray(int)>
<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore: boolean entryInstanceOf(java.lang.String,java.lang.Class)>
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>
<java.security.KeyStore: boolean containsAlias(java.lang.String)>
<java.security.KeyStore: boolean isKeyEntry(java.lang.String)>
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>
<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>
<java.security.KeyStore: int size()>
<java.security.KeyStore: void store(java.io.OutputStream,char[])>
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)>
<java.security.KeyStore: java.lang.String getType()>
<java.security.KeyStore: void deleteEntry(java.lang.String)>
<java.security.KeyStore: java.lang.String getDefaultType()>
<java.security.KeyStore: void load(java.io.InputStream,char[])>
<java.security.KeyStore: void load(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStore: void store(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStore: java.security.KeyStore.Entry getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)>
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])>
<java.security.KeyStore: java.security.Provider getProvider()>
<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)>
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>
<java.security.KeyStore: java.util.Enumeration aliases()>
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>
<android.graphics.PorterDuff: void <init>()>
<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>
<java.security.Provider: java.lang.String getInfo()>
<java.security.Provider: double getVersion()>
<java.security.Provider: void removeService(java.security.Provider.Service)>
<java.security.Provider: void putAll(java.util.Map)>
<java.security.Provider: java.lang.String getName()>
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.security.Provider: java.security.Provider.Service getService(java.lang.String,java.lang.String)>
<java.security.Provider: java.util.Set getServices()>
<java.security.Provider: void putService(java.security.Provider.Service)>
<android.sax.EndElementListener: void end()>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void setState(java.lang.Object)>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void shutdown()>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void close()>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.impl.conn.AbstractPoolEntry)>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: java.lang.Object getState()>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void tunnelTarget(boolean,org.apache.http.params.HttpParams)>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void assertAttached()>
<org.apache.http.impl.conn.AbstractPooledConnAdapter: org.apache.http.conn.routing.HttpRoute getRoute()>
<org.xml.sax.ext.DefaultHandler2: void endCDATA()>
<org.xml.sax.ext.DefaultHandler2: void endDTD()>
<org.xml.sax.ext.DefaultHandler2: void startEntity(java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void comment(char[],int,int)>
<org.xml.sax.ext.DefaultHandler2: void internalEntityDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void elementDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void endEntity(java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void startDTD(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void startCDATA()>
<org.xml.sax.ext.DefaultHandler2: void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void <init>()>
<org.xml.sax.ext.DefaultHandler2: void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<java.nio.charset.CharsetEncoder: void implReset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>
<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>
<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>
<java.nio.charset.CharsetEncoder: byte[] replacement()>
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>
<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.CharsetEncoder: boolean canEncode(char)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>
<android.content.ActivityNotFoundException: void <init>(java.lang.String)>
<android.content.ActivityNotFoundException: void <init>()>
<android.widget.ListView: int getCheckedItemPosition()>
<android.widget.ListView: void addHeaderView(android.view.View)>
<android.widget.ListView: int getChoiceMode()>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: android.widget.ListAdapter getAdapter()>
<android.widget.ListView: void setItemsCanFocus(boolean)>
<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: int getDividerHeight()>
<android.widget.ListView: boolean getItemsCanFocus()>
<android.widget.ListView: android.view.View findViewWithTagTraversal(java.lang.Object)>
<android.widget.ListView: void setSelection(int)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void <init>(android.content.Context)>
<android.widget.ListView: void setSelectionFromTop(int,int)>
<android.widget.ListView: boolean removeHeaderView(android.view.View)>
<android.widget.ListView: void setSelectionAfterHeaderView()>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ListView: android.util.SparseBooleanArray getCheckedItemPositions()>
<android.widget.ListView: boolean isItemChecked(int)>
<android.widget.ListView: int getMaxScrollAmount()>
<android.widget.ListView: void setItemChecked(int,boolean)>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.widget.ListView: int getFooterViewsCount()>
<android.widget.ListView: void setDividerHeight(int)>
<android.widget.ListView: void addFooterView(android.view.View)>
<android.widget.ListView: void clearChoices()>
<android.widget.ListView: boolean removeFooterView(android.view.View)>
<android.widget.ListView: android.view.View findViewTraversal(int)>
<android.widget.ListView: void setChoiceMode(int)>
<android.widget.ListView: int getHeaderViewsCount()>
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int,int)>
<android.text.style.TextAppearanceSpan: int getTextSize()>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int)>
<android.text.style.TextAppearanceSpan: void <init>(java.lang.String,int,int,android.content.res.ColorStateList,android.content.res.ColorStateList)>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()>
<android.text.style.TextAppearanceSpan: int getTextStyle()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()>
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.TextAppearanceSpan: void updateMeasureState(android.text.TextPaint)>
<android.view.ViewStub.OnInflateListener: void onInflate(android.view.ViewStub,android.view.View)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>
<java.util.SimpleTimeZone: int getRawOffset()>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setDSTSavings(int)>
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int,boolean)>
<java.util.SimpleTimeZone: void setStartYear(int)>
<java.util.SimpleTimeZone: int getOffset(int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)>
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int,boolean)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setRawOffset(int)>
<java.util.SimpleTimeZone: boolean inDaylightTime(java.util.Date)>
<java.util.SimpleTimeZone: void setStartRule(int,int,int)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)>
<java.util.SimpleTimeZone: void setEndRule(int,int,int)>
<java.util.SimpleTimeZone: boolean useDaylightTime()>
<android.widget.SimpleCursorAdapter.ViewBinder: boolean setViewValue(android.view.View,android.database.Cursor,int)>
<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor,java.util.concurrent.BlockingQueue)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.lang.Runnable,V)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future take()>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll()>
<android.content.IntentFilter.MalformedMimeTypeException: void <init>(java.lang.String)>
<android.content.IntentFilter.MalformedMimeTypeException: void <init>()>
<java.io.DataInputStream: java.lang.String readUTF()>
<java.io.DataInputStream: char readChar()>
<java.io.DataInputStream: java.lang.String readLine()>
<java.io.DataInputStream: int read(byte[],int,int)>
<java.io.DataInputStream: double readDouble()>
<java.io.DataInputStream: boolean readBoolean()>
<java.io.DataInputStream: int read(byte[])>
<java.io.DataInputStream: short readShort()>
<java.io.DataInputStream: void readFully(byte[],int,int)>
<java.io.DataInputStream: byte readByte()>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.io.DataInputStream: float readFloat()>
<java.io.DataInputStream: int readUnsignedByte()>
<java.io.DataInputStream: int readUnsignedShort()>
<java.io.DataInputStream: int skipBytes(int)>
<java.io.DataInputStream: long readLong()>
<java.io.DataInputStream: int readInt()>
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>
<java.io.DataInputStream: void readFully(byte[])>
<java.security.GuardedObject: java.lang.Object getObject()>
<java.security.GuardedObject: void <init>(java.lang.Object,java.security.Guard)>
<android.test.PerformanceTestCase.Intermediates: void startTiming(boolean)>
<android.test.PerformanceTestCase.Intermediates: void finishTiming(boolean)>
<android.test.PerformanceTestCase.Intermediates: void addIntermediate(java.lang.String,long)>
<android.test.PerformanceTestCase.Intermediates: void addIntermediate(java.lang.String)>
<android.test.PerformanceTestCase.Intermediates: void setInternalIterations(int)>
<org.apache.http.auth.BasicUserPrincipal: void <init>(java.lang.String)>
<org.apache.http.auth.BasicUserPrincipal: java.lang.String getName()>
<javax.crypto.spec.DESedeKeySpec: void <init>(byte[],int)>
<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>
<javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[],int)>
<javax.crypto.spec.DESedeKeySpec: byte[] getKey()>
<javax.net.ssl.SSLEngine: int getPeerPort()>
<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: boolean getEnableSessionCreation()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>
<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledProtocols()>
<javax.net.ssl.SSLEngine: java.lang.Runnable getDelegatedTask()>
<javax.net.ssl.SSLEngine: void <init>()>
<javax.net.ssl.SSLEngine: void closeOutbound()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: boolean isOutboundDone()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)>
<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledCipherSuites()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>
<javax.net.ssl.SSLEngine: void beginHandshake()>
<javax.net.ssl.SSLEngine: boolean getNeedClientAuth()>
<javax.net.ssl.SSLEngine: void setEnableSessionCreation(boolean)>
<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedProtocols()>
<javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>
<javax.net.ssl.SSLEngine: void closeInbound()>
<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLEngine: boolean getUseClientMode()>
<javax.net.ssl.SSLEngine: boolean isInboundDone()>
<javax.net.ssl.SSLEngine: boolean getWantClientAuth()>
<javax.net.ssl.SSLEngine: void setEnabledCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>
<javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[])>
<org.xml.sax.SAXNotRecognizedException: void <init>()>
<org.xml.sax.SAXNotRecognizedException: void <init>(java.lang.String)>
<android.graphics.BlurMaskFilter.Blur: android.graphics.BlurMaskFilter.Blur[] values()>
<android.graphics.BlurMaskFilter.Blur: android.graphics.BlurMaskFilter.Blur valueOf(java.lang.String)>
<java.nio.channels.spi.AbstractSelector: void end()>
<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>
<java.nio.channels.spi.AbstractSelector: boolean isOpen()>
<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>
<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>
<java.nio.channels.spi.AbstractSelector: void close()>
<java.nio.channels.spi.AbstractSelector: void begin()>
<java.net.NetPermission: void <init>(java.lang.String)>
<java.net.NetPermission: void <init>(java.lang.String,java.lang.String)>
<javax.crypto.spec.DHGenParameterSpec: void <init>(int,int)>
<javax.crypto.spec.DHGenParameterSpec: int getExponentSize()>
<javax.crypto.spec.DHGenParameterSpec: int getPrimeSize()>
<org.w3c.dom.NamedNodeMap: int getLength()>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItem(java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)>
<java.lang.ProcessBuilder: java.util.Map environment()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String...)>
<java.lang.ProcessBuilder: boolean redirectErrorStream()>
<java.lang.ProcessBuilder: java.lang.Process start()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>
<java.lang.ProcessBuilder: void <init>(java.lang.String...)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>
<java.lang.ProcessBuilder: java.io.File directory()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>
<java.lang.ProcessBuilder: void <init>(java.util.List)>
<java.lang.ProcessBuilder: java.util.List command()>
<java.nio.channels.Pipe.SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.Pipe.SourceChannel: int validOps()>
<dalvik.system.StaleDexCacheError: void <init>(java.lang.String)>
<dalvik.system.StaleDexCacheError: void <init>()>
<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>
<android.graphics.MaskFilter: void <init>()>
<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.Package: java.lang.String getName()>
<java.lang.Package: java.lang.String getImplementationVendor()>
<java.lang.Package: java.lang.String getSpecificationVendor()>
<java.lang.Package: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Package: java.lang.Package getPackage(java.lang.String)>
<java.lang.Package: java.lang.String getSpecificationTitle()>
<java.lang.Package: boolean isCompatibleWith(java.lang.String)>
<java.lang.Package: java.lang.String getImplementationTitle()>
<java.lang.Package: java.lang.Package[] getPackages()>
<java.lang.Package: boolean isSealed(java.net.URL)>
<java.lang.Package: java.lang.String getImplementationVersion()>
<java.lang.Package: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Package: java.lang.String getSpecificationVersion()>
<java.lang.Package: boolean isSealed()>
<java.lang.Package: T getAnnotation(java.lang.Class)>
<java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>
<java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>
<java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)>
<java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.lang.String)>
<java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)>
<java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>
<java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>
<java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.lang.String)>
<java.security.cert.PKIXParameters: java.util.Set getTrustAnchors()>
<java.security.cert.PKIXParameters: void setPolicyMappingInhibited(boolean)>
<java.security.cert.PKIXParameters: void <init>(java.util.Set)>
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()>
<java.security.cert.PKIXParameters: void <init>(java.security.KeyStore)>
<java.security.cert.PKIXParameters: java.util.List getCertStores()>
<java.security.cert.PKIXParameters: void setDate(java.util.Date)>
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()>
<java.security.cert.PKIXParameters: void setAnyPolicyInhibited(boolean)>
<java.security.cert.PKIXParameters: void addCertPathChecker(java.security.cert.PKIXCertPathChecker)>
<java.security.cert.PKIXParameters: boolean isRevocationEnabled()>
<java.security.cert.PKIXParameters: boolean isAnyPolicyInhibited()>
<java.security.cert.PKIXParameters: boolean isPolicyMappingInhibited()>
<java.security.cert.PKIXParameters: void addCertStore(java.security.cert.CertStore)>
<java.security.cert.PKIXParameters: void setPolicyQualifiersRejected(boolean)>
<java.security.cert.PKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)>
<java.security.cert.PKIXParameters: void setExplicitPolicyRequired(boolean)>
<java.security.cert.PKIXParameters: void setTrustAnchors(java.util.Set)>
<java.security.cert.PKIXParameters: boolean getPolicyQualifiersRejected()>
<java.security.cert.PKIXParameters: java.util.List getCertPathCheckers()>
<java.security.cert.PKIXParameters: void setRevocationEnabled(boolean)>
<java.security.cert.PKIXParameters: void setSigProvider(java.lang.String)>
<java.security.cert.PKIXParameters: java.util.Set getInitialPolicies()>
<java.security.cert.PKIXParameters: boolean isExplicitPolicyRequired()>
<java.security.cert.PKIXParameters: void setCertStores(java.util.List)>
<java.security.cert.PKIXParameters: java.lang.Object clone()>
<java.security.cert.PKIXParameters: void setCertPathCheckers(java.util.List)>
<java.security.cert.PKIXParameters: void setInitialPolicies(java.util.Set)>
<java.security.cert.PKIXParameters: java.util.Date getDate()>
<org.apache.http.client.UserTokenHandler: java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)>
<android.app.ActivityManager.RecentTaskInfo: int describeContents()>
<android.app.ActivityManager.RecentTaskInfo: void <init>()>
<android.app.ActivityManager.RecentTaskInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>
<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()>
<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable,java.lang.String)>
<javax.xml.parsers.FactoryConfigurationError: void <init>()>
<javax.xml.parsers.FactoryConfigurationError: void <init>(java.lang.Exception)>
<javax.xml.parsers.FactoryConfigurationError: void <init>(java.lang.String)>
<javax.xml.parsers.FactoryConfigurationError: java.lang.Exception getException()>
<javax.xml.parsers.FactoryConfigurationError: void <init>(java.lang.Exception,java.lang.String)>
<org.w3c.dom.DocumentType: java.lang.String getPublicId()>
<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getNotations()>
<org.w3c.dom.DocumentType: java.lang.String getInternalSubset()>
<org.w3c.dom.DocumentType: java.lang.String getName()>
<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>
<org.w3c.dom.DocumentType: java.lang.String getSystemId()>
<android.os.HandlerThread: void onLooperPrepared()>
<android.os.HandlerThread: void <init>(java.lang.String,int)>
<android.os.HandlerThread: android.os.Looper getLooper()>
<android.os.HandlerThread: int getThreadId()>
<android.os.HandlerThread: void <init>(java.lang.String)>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: int getHeight()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void recycle()>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap.Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: int getWidth()>
<android.graphics.Bitmap: void eraseColor(int)>
<android.graphics.Bitmap: android.graphics.Bitmap.Config getConfig()>
<android.graphics.Bitmap: int describeContents()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: int getPixel(int,int)>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<android.graphics.Bitmap: int getRowBytes()>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: boolean hasAlpha()>
<android.graphics.Bitmap: boolean isMutable()>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap.CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: void setPixel(int,int,int)>
<android.widget.TextSwitcher: void <init>(android.content.Context)>
<android.widget.TextSwitcher: void setCurrentText(java.lang.CharSequence)>
<android.widget.TextSwitcher: void setText(java.lang.CharSequence)>
<android.widget.TextSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<java.lang.Class: boolean isAnonymousClass()>
<java.lang.Class: boolean isLocalClass()>
<java.lang.Class: T cast(java.lang.Object)>
<java.lang.Class: java.lang.Class getComponentType()>
<java.lang.Class: java.lang.reflect.Field[] getFields()>
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.String getSimpleName()>
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.Class: boolean isArray()>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class...)>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class...)>
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class...)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: java.lang.Class[] getClasses()>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class...)>
<java.lang.Class: boolean isAnnotation()>
<java.lang.Class: boolean isEnum()>
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>
<java.lang.Class: boolean isMemberClass()>
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: T newInstance()>
<java.lang.Class: java.lang.Object[] getSigners()>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: java.lang.Class[] getInterfaces()>
<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>
<java.lang.Class: java.lang.Class getEnclosingClass()>
<java.lang.Class: boolean isInterface()>
<java.lang.Class: boolean isSynthetic()>
<java.lang.Class: A getAnnotation(java.lang.Class)>
<java.lang.Class: java.lang.String getCanonicalName()>
<java.lang.Class: java.lang.Package getPackage()>
<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.Class getDeclaringClass()>
<java.lang.Class: java.lang.reflect.Method[] getMethods()>
<java.lang.Class: int getModifiers()>
<java.lang.Class: T[] getEnumConstants()>
<java.lang.Class: java.lang.Class getSuperclass()>
<java.lang.Class: java.net.URL getResource(java.lang.String)>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.apache.http.ConnectionClosedException: void <init>(java.lang.String)>
<org.apache.http.conn.ConnectionReleaseTrigger: void releaseConnection()>
<org.apache.http.conn.ConnectionReleaseTrigger: void abortConnection()>
<android.text.method.TextKeyListener.Capitalize: android.text.method.TextKeyListener.Capitalize valueOf(java.lang.String)>
<android.text.method.TextKeyListener.Capitalize: android.text.method.TextKeyListener.Capitalize[] values()>
<android.provider.MediaStore.Audio.Playlists.Members: void <init>()>
<android.provider.MediaStore.Audio.Playlists.Members: android.net.Uri getContentUri(java.lang.String,long)>
<java.security.KeyPair: java.security.PublicKey getPublic()>
<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>
<java.security.KeyPair: java.security.PrivateKey getPrivate()>
<android.text.Selection: int getSelectionStart(java.lang.CharSequence)>
<android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void removeSelection(android.text.Spannable)>
<android.text.Selection: void setSelection(android.text.Spannable,int,int)>
<android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void setSelection(android.text.Spannable,int)>
<android.text.Selection: boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>
<android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void selectAll(android.text.Spannable)>
<android.text.Selection: boolean extendToRightEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void extendSelection(android.text.Spannable,int)>
<java.util.concurrent.atomic.AtomicReferenceArray: int length()>
<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSet(int,E,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: E get(int)>
<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>
<java.util.concurrent.atomic.AtomicReferenceArray: E getAndSet(int,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,E,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(E[])>
<android.widget.ExpandableListView.OnChildClickListener: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
<org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>
<org.apache.http.io.SessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.io.SessionOutputBuffer: void write(byte[])>
<org.apache.http.io.SessionOutputBuffer: void write(int)>
<org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.io.SessionOutputBuffer: void writeLine(java.lang.String)>
<java.sql.ResultSet: java.sql.Time getTime(java.lang.String)>
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)>
<java.sql.ResultSet: void updateRef(int,java.sql.Ref)>
<java.sql.ResultSet: void refreshRow()>
<java.sql.ResultSet: java.io.InputStream getBinaryStream(java.lang.String)>
<java.sql.ResultSet: void deleteRow()>
<java.sql.ResultSet: boolean first()>
<java.sql.ResultSet: boolean isLast()>
<java.sql.ResultSet: void close()>
<java.sql.ResultSet: java.lang.Object getObject(int,java.util.Map)>
<java.sql.ResultSet: java.sql.Time getTime(int)>
<java.sql.ResultSet: boolean relative(int)>
<java.sql.ResultSet: float getFloat(int)>
<java.sql.ResultSet: void updateBlob(java.lang.String,java.sql.Blob)>
<java.sql.ResultSet: java.sql.Clob getClob(int)>
<java.sql.ResultSet: java.sql.Array getArray(int)>
<java.sql.ResultSet: java.sql.Time getTime(int,java.util.Calendar)>
<java.sql.ResultSet: void clearWarnings()>
<java.sql.ResultSet: double getDouble(java.lang.String)>
<java.sql.ResultSet: java.io.InputStream getUnicodeStream(java.lang.String)>
<java.sql.ResultSet: boolean isAfterLast()>
<java.sql.ResultSet: java.sql.SQLWarning getWarnings()>
<java.sql.ResultSet: void updateTime(int,java.sql.Time)>
<java.sql.ResultSet: boolean last()>
<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>
<java.sql.ResultSet: void cancelRowUpdates()>
<java.sql.ResultSet: int getType()>
<java.sql.ResultSet: void updateLong(java.lang.String,long)>
<java.sql.ResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)>
<java.sql.ResultSet: boolean absolute(int)>
<java.sql.ResultSet: void updateBinaryStream(int,java.io.InputStream,int)>
<java.sql.ResultSet: java.net.URL getURL(int)>
<java.sql.ResultSet: java.sql.Date getDate(int,java.util.Calendar)>
<java.sql.ResultSet: void updateDate(int,java.sql.Date)>
<java.sql.ResultSet: void updateObject(int,java.lang.Object)>
<java.sql.ResultSet: java.sql.Date getDate(int)>
<java.sql.ResultSet: void updateString(java.lang.String,java.lang.String)>
<java.sql.ResultSet: byte getByte(java.lang.String)>
<java.sql.ResultSet: byte[] getBytes(int)>
<java.sql.ResultSet: java.sql.Date getDate(java.lang.String)>
<java.sql.ResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)>
<java.sql.ResultSet: boolean wasNull()>
<java.sql.ResultSet: boolean rowUpdated()>
<java.sql.ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)>
<java.sql.ResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)>
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)>
<java.sql.ResultSet: void afterLast()>
<java.sql.ResultSet: void updateByte(int,byte)>
<java.sql.ResultSet: java.lang.String getString(int)>
<java.sql.ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)>
<java.sql.ResultSet: void updateShort(int,short)>
<java.sql.ResultSet: boolean getBoolean(java.lang.String)>
<java.sql.ResultSet: int getRow()>
<java.sql.ResultSet: boolean previous()>
<java.sql.ResultSet: void updateDate(java.lang.String,java.sql.Date)>
<java.sql.ResultSet: java.io.Reader getCharacterStream(java.lang.String)>
<java.sql.ResultSet: java.sql.Clob getClob(java.lang.String)>
<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>
<java.sql.ResultSet: void updateByte(java.lang.String,byte)>
<java.sql.ResultSet: void updateBoolean(int,boolean)>
<java.sql.ResultSet: void updateBytes(int,byte[])>
<java.sql.ResultSet: int findColumn(java.lang.String)>
<java.sql.ResultSet: java.net.URL getURL(java.lang.String)>
<java.sql.ResultSet: void updateShort(java.lang.String,short)>
<java.sql.ResultSet: void updateTimestamp(int,java.sql.Timestamp)>
<java.sql.ResultSet: void updateArray(java.lang.String,java.sql.Array)>
<java.sql.ResultSet: void updateInt(int,int)>
<java.sql.ResultSet: void updateNull(int)>
<java.sql.ResultSet: java.io.Reader getCharacterStream(int)>
<java.sql.ResultSet: double getDouble(int)>
<java.sql.ResultSet: boolean isFirst()>
<java.sql.ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)>
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)>
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(java.lang.String)>
<java.sql.ResultSet: byte[] getBytes(java.lang.String)>
<java.sql.ResultSet: java.io.InputStream getAsciiStream(int)>
<java.sql.ResultSet: void updateInt(java.lang.String,int)>
<java.sql.ResultSet: java.sql.Statement getStatement()>
<java.sql.ResultSet: void updateObject(java.lang.String,java.lang.Object)>
<java.sql.ResultSet: java.io.InputStream getBinaryStream(int)>
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int,int)>
<java.sql.ResultSet: void updateArray(int,java.sql.Array)>
<java.sql.ResultSet: void setFetchDirection(int)>
<java.sql.ResultSet: void updateBlob(int,java.sql.Blob)>
<java.sql.ResultSet: int getConcurrency()>
<java.sql.ResultSet: java.io.InputStream getAsciiStream(java.lang.String)>
<java.sql.ResultSet: java.lang.Object getObject(int)>
<java.sql.ResultSet: void updateLong(int,long)>
<java.sql.ResultSet: float getFloat(java.lang.String)>
<java.sql.ResultSet: java.sql.Ref getRef(java.lang.String)>
<java.sql.ResultSet: void updateFloat(int,float)>
<java.sql.ResultSet: void updateNull(java.lang.String)>
<java.sql.ResultSet: void updateString(int,java.lang.String)>
<java.sql.ResultSet: void updateClob(int,java.sql.Clob)>
<java.sql.ResultSet: int getFetchDirection()>
<java.sql.ResultSet: void updateCharacterStream(int,java.io.Reader,int)>
<java.sql.ResultSet: java.lang.String getCursorName()>
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int)>
<java.sql.ResultSet: boolean next()>
<java.sql.ResultSet: void updateBigDecimal(int,java.math.BigDecimal)>
<java.sql.ResultSet: byte getByte(int)>
<java.sql.ResultSet: long getLong(int)>
<java.sql.ResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)>
<java.sql.ResultSet: long getLong(java.lang.String)>
<java.sql.ResultSet: short getShort(java.lang.String)>
<java.sql.ResultSet: boolean getBoolean(int)>
<java.sql.ResultSet: void moveToCurrentRow()>
<java.sql.ResultSet: boolean rowDeleted()>
<java.sql.ResultSet: void updateObject(java.lang.String,java.lang.Object,int)>
<java.sql.ResultSet: int getInt(java.lang.String)>
<java.sql.ResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)>
<java.sql.ResultSet: void updateFloat(java.lang.String,float)>
<java.sql.ResultSet: int getFetchSize()>
<java.sql.ResultSet: java.sql.Blob getBlob(java.lang.String)>
<java.sql.ResultSet: void updateTime(java.lang.String,java.sql.Time)>
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)>
<java.sql.ResultSet: void updateClob(java.lang.String,java.sql.Clob)>
<java.sql.ResultSet: java.lang.String getString(java.lang.String)>
<java.sql.ResultSet: void updateBoolean(java.lang.String,boolean)>
<java.sql.ResultSet: short getShort(int)>
<java.sql.ResultSet: void updateDouble(java.lang.String,double)>
<java.sql.ResultSet: void insertRow()>
<java.sql.ResultSet: void beforeFirst()>
<java.sql.ResultSet: void setFetchSize(int)>
<java.sql.ResultSet: boolean rowInserted()>
<java.sql.ResultSet: void updateRow()>
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(int)>
<java.sql.ResultSet: void moveToInsertRow()>
<java.sql.ResultSet: java.sql.Blob getBlob(int)>
<java.sql.ResultSet: java.sql.Ref getRef(int)>
<java.sql.ResultSet: void updateObject(int,java.lang.Object,int)>
<java.sql.ResultSet: java.io.InputStream getUnicodeStream(int)>
<java.sql.ResultSet: void updateRef(java.lang.String,java.sql.Ref)>
<java.sql.ResultSet: boolean isBeforeFirst()>
<java.sql.ResultSet: void updateDouble(int,double)>
<java.sql.ResultSet: void updateBytes(java.lang.String,byte[])>
<java.sql.ResultSet: void updateAsciiStream(int,java.io.InputStream,int)>
<java.sql.ResultSet: java.sql.Array getArray(java.lang.String)>
<java.sql.ResultSet: int getInt(int)>
<android.os.Looper: void prepareMainLooper()>
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
<android.os.Looper: void loop()>
<android.os.Looper: void quit()>
<android.os.Looper: void prepare()>
<android.os.Looper: android.os.MessageQueue myQueue()>
<android.os.Looper: android.os.Looper myLooper()>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.text.Editable.Factory: void <init>()>
<android.text.Editable.Factory: android.text.Editable.Factory getInstance()>
<android.text.Editable.Factory: android.text.Editable newEditable(java.lang.CharSequence)>
<org.apache.http.HttpMessage: void setHeader(java.lang.String,java.lang.String)>
<org.apache.http.HttpMessage: boolean containsHeader(java.lang.String)>
<org.apache.http.HttpMessage: void setHeader(org.apache.http.Header)>
<org.apache.http.HttpMessage: org.apache.http.Header getLastHeader(java.lang.String)>
<org.apache.http.HttpMessage: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.HttpMessage: org.apache.http.HeaderIterator headerIterator()>
<org.apache.http.HttpMessage: void removeHeader(org.apache.http.Header)>
<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.HttpMessage: void setHeaders(org.apache.http.Header[])>
<org.apache.http.HttpMessage: org.apache.http.HeaderIterator headerIterator(java.lang.String)>
<org.apache.http.HttpMessage: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.HttpMessage: void setParams(org.apache.http.params.HttpParams)>
<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>
<org.apache.http.HttpMessage: void addHeader(org.apache.http.Header)>
<org.apache.http.HttpMessage: org.apache.http.Header[] getAllHeaders()>
<org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>
<org.apache.http.HttpMessage: void removeHeaders(java.lang.String)>
<junit.framework.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.app.SearchManager.OnCancelListener: void onCancel()>
<android.net.Uri.Builder: android.net.Uri.Builder encodedAuthority(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedOpaquePart(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedFragment(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedPath(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder path(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedQuery(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder query(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder opaquePart(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder scheme(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder authority(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder fragment(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder appendPath(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.net.Uri.Builder: android.net.Uri build()>
<android.net.Uri.Builder: android.net.Uri.Builder appendEncodedPath(java.lang.String)>
<android.net.Uri.Builder: void <init>()>
<android.preference.PreferenceManager.OnActivityResultListener: boolean onActivityResult(int,int,android.content.Intent)>
<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>
<org.w3c.dom.DOMImplementation: org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)>
<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>
<android.webkit.WebView.WebViewTransport: void setWebView(android.webkit.WebView)>
<android.webkit.WebView.WebViewTransport: android.webkit.WebView getWebView()>
<android.webkit.WebView.WebViewTransport: void <init>()>
<java.io.StreamCorruptedException: void <init>(java.lang.String)>
<java.io.StreamCorruptedException: void <init>()>
<java.util.EnumMap: java.util.EnumMap clone()>
<java.util.EnumMap: java.util.Set entrySet()>
<java.util.EnumMap: void <init>(java.lang.Class)>
<java.util.EnumMap: void <init>(java.util.EnumMap)>
<java.util.EnumMap: void <init>(java.util.Map)>
<android.view.SurfaceHolder.BadSurfaceTypeException: void <init>(java.lang.String)>
<android.view.SurfaceHolder.BadSurfaceTypeException: void <init>()>
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>
<java.lang.Runtime: void loadLibrary(java.lang.String)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>
<java.lang.Runtime: java.lang.Runtime getRuntime()>
<java.lang.Runtime: void runFinalizersOnExit(boolean)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>
<java.lang.Runtime: void runFinalization()>
<java.lang.Runtime: void traceInstructions(boolean)>
<java.lang.Runtime: long freeMemory()>
<java.lang.Runtime: void traceMethodCalls(boolean)>
<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>
<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)>
<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>
<java.lang.Runtime: void exit(int)>
<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)>
<java.lang.Runtime: long totalMemory()>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>
<java.lang.Runtime: void halt(int)>
<java.lang.Runtime: void load(java.lang.String)>
<java.lang.Runtime: long maxMemory()>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>
<java.lang.Runtime: int availableProcessors()>
<java.lang.Runtime: void gc()>
<org.apache.http.client.methods.HttpOptions: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpOptions: void <init>()>
<org.apache.http.client.methods.HttpOptions: java.util.Set getAllowedMethods(org.apache.http.HttpResponse)>
<org.apache.http.client.methods.HttpOptions: void <init>(java.net.URI)>
<org.apache.http.client.methods.HttpOptions: void <init>(java.lang.String)>
<android.text.style.MetricAffectingSpan: void <init>()>
<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>
<org.apache.http.entity.FileEntity: boolean isRepeatable()>
<org.apache.http.entity.FileEntity: boolean isStreaming()>
<org.apache.http.entity.FileEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.FileEntity: void <init>(java.io.File,java.lang.String)>
<org.apache.http.entity.FileEntity: java.io.InputStream getContent()>
<org.apache.http.entity.FileEntity: long getContentLength()>
<org.apache.http.entity.FileEntity: java.lang.Object clone()>
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>
<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<javax.crypto.spec.DHParameterSpec: int getL()>
<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>
<javax.sql.RowSetListener: void rowChanged(javax.sql.RowSetEvent)>
<javax.sql.RowSetListener: void cursorMoved(javax.sql.RowSetEvent)>
<javax.sql.RowSetListener: void rowSetChanged(javax.sql.RowSetEvent)>
<android.test.mock.MockApplication: void <init>()>
<android.os.Message: void <init>()>
<android.os.Message: void setTarget(android.os.Handler)>
<android.os.Message: long getWhen()>
<android.os.Message: android.os.Handler getTarget()>
<android.os.Message: void recycle()>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
<android.os.Message: void setData(android.os.Bundle)>
<android.os.Message: android.os.Bundle getData()>
<android.os.Message: android.os.Message obtain(android.os.Handler)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
<android.os.Message: android.os.Message obtain(android.os.Message)>
<android.os.Message: android.os.Bundle peekData()>
<android.os.Message: int describeContents()>
<android.os.Message: void sendToTarget()>
<android.os.Message: java.lang.Runnable getCallback()>
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
<android.os.Message: void copyFrom(android.os.Message)>
<android.os.Message: android.os.Message obtain()>
<android.provider.MediaStore.Audio.Playlists: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Playlists: void <init>()>
<android.text.TextPaint: void <init>(android.graphics.Paint)>
<android.text.TextPaint: void set(android.text.TextPaint)>
<android.text.TextPaint: void <init>()>
<android.text.TextPaint: void <init>(int)>
<android.graphics.Paint.Align: android.graphics.Paint.Align[] values()>
<android.graphics.Paint.Align: android.graphics.Paint.Align valueOf(java.lang.String)>
<android.database.sqlite.SQLiteConstraintException: void <init>()>
<android.database.sqlite.SQLiteConstraintException: void <init>(java.lang.String)>
<dalvik.system.AllocationLimitError: void <init>(java.lang.String)>
<dalvik.system.AllocationLimitError: void <init>()>
<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>
<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.WrapperListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<org.apache.http.protocol.RequestTargetHost: void <init>()>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<android.sax.StartElementListener: void start(org.xml.sax.Attributes)>
<java.nio.channels.CancelledKeyException: void <init>()>
<android.media.MediaPlayer.OnCompletionListener: void onCompletion(android.media.MediaPlayer)>
<java.security.spec.InvalidKeySpecException: void <init>()>
<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>
<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>
<android.text.method.QwertyKeyListener: void <init>(android.text.method.TextKeyListener.Capitalize,boolean)>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener.Capitalize)>
<android.text.method.QwertyKeyListener: void markAsReplaced(android.text.Spannable,int,int,java.lang.String)>
<android.sax.EndTextElementListener: void end(java.lang.String)>
<android.widget.SimpleCursorAdapter: void setStringConversionColumn(int)>
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()>
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)>
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[])>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter.CursorToStringConverter getCursorToStringConverter()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter.ViewBinder getViewBinder()>
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)>
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)>
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpRequestExecutor: void <init>()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>
<org.apache.http.entity.ByteArrayEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.ByteArrayEntity: long getContentLength()>
<org.apache.http.entity.ByteArrayEntity: boolean isRepeatable()>
<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>
<org.apache.http.entity.ByteArrayEntity: boolean isStreaming()>
<org.apache.http.entity.ByteArrayEntity: java.lang.Object clone()>
<org.apache.http.entity.ByteArrayEntity: java.io.InputStream getContent()>
<android.os.Parcel: android.os.Parcel obtain()>
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void writeString(java.lang.String)>
<android.os.Parcel: boolean hasFileDescriptors()>
<android.os.Parcel: void readFloatArray(float[])>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeFloat(float)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.os.Parcel: void writeException(java.lang.Exception)>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.os.Parcel: void writeByteArray(byte[])>
<android.os.Parcel: android.os.Parcel obtain(int)>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.os.Parcel: void writeByte(byte)>
<android.os.Parcel: void recycle()>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.Parcel: void writeIntArray(int[])>
<android.os.Parcel: void readDoubleArray(double[])>
<android.os.Parcel: void writeBinderList(java.util.List)>
<android.os.Parcel: double[] createDoubleArray()>
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>
<android.os.Parcel: void writeTypedArray(T[],int)>
<android.os.Parcel: int dataPosition()>
<android.os.Parcel: int readInt()>
<android.os.Parcel: float readFloat()>
<android.os.Parcel: void readByteArray(byte[])>
<android.os.Parcel: void readTypedArray(T[],android.os.Parcelable.Creator)>
<android.os.Parcel: java.lang.String readString()>
<android.os.Parcel: void readStringList(java.util.List)>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.os.Parcel: byte[] createByteArray()>
<android.os.Parcel: void writeList(java.util.List)>
<android.os.Parcel: void enforceInterface(java.lang.String)>
<android.os.Parcel: void readIntArray(int[])>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: long[] createLongArray()>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.os.Parcel: void writeLong(long)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: byte readByte()>
<android.os.Parcel: void readLongArray(long[])>
<android.os.Parcel: T readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: long readLong()>
<android.os.Parcel: void setDataPosition(int)>
<android.os.Parcel: void writeDouble(double)>
<android.os.Parcel: void readException()>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.os.Parcel: int[] createIntArray()>
<android.os.Parcel: T[] createTypedArray(android.os.Parcelable.Creator)>
<android.os.Parcel: void writeCharArray(char[])>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<android.os.Parcel: void writeInt(int)>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.os.Parcel: void setDataSize(int)>
<android.os.Parcel: void setDataCapacity(int)>
<android.os.Parcel: double readDouble()>
<android.os.Parcel: int dataSize()>
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>
<android.os.Parcel: void writeLongArray(long[])>
<android.os.Parcel: void readBooleanArray(boolean[])>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<android.os.Parcel: void writeParcelableArray(T[],int)>
<android.os.Parcel: void writeFloatArray(float[])>
<android.os.Parcel: java.lang.String[] createStringArray()>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>
<android.os.Parcel: void readCharArray(char[])>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.os.Parcel: byte[] marshall()>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.os.Parcel: float[] createFloatArray()>
<android.os.Parcel: int dataAvail()>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable.Creator)>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable.Creator)>
<android.os.Parcel: char[] createCharArray()>
<android.os.Parcel: int dataCapacity()>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>
<android.os.Parcel: void writeNoException()>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<java.text.NumberFormat: int getMaximumFractionDigits()>
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>
<java.text.NumberFormat: boolean isParseIntegerOnly()>
<java.text.NumberFormat: void setMaximumFractionDigits(int)>
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance()>
<java.text.NumberFormat: int getMinimumFractionDigits()>
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>
<java.text.NumberFormat: java.util.Currency getCurrency()>
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()>
<java.text.NumberFormat: void setMinimumIntegerDigits(int)>
<java.text.NumberFormat: void <init>()>
<java.text.NumberFormat: void setParseIntegerOnly(boolean)>
<java.text.NumberFormat: java.text.NumberFormat getInstance()>
<java.text.NumberFormat: boolean isGroupingUsed()>
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>
<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()>
<java.text.NumberFormat: java.lang.String format(double)>
<java.text.NumberFormat: int getMinimumIntegerDigits()>
<java.text.NumberFormat: void setGroupingUsed(boolean)>
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>
<java.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>
<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<java.text.NumberFormat: java.lang.String format(long)>
<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>
<java.text.NumberFormat: void setMaximumIntegerDigits(int)>
<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>
<java.text.NumberFormat: void setCurrency(java.util.Currency)>
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()>
<java.text.NumberFormat: int getMaximumIntegerDigits()>
<java.text.NumberFormat: void setMinimumFractionDigits(int)>
<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.util.InvalidPropertiesFormatException: void <init>(java.lang.String)>
<java.util.InvalidPropertiesFormatException: void <init>(java.lang.Throwable)>
<android.content.SearchRecentSuggestionsProvider: void <init>()>
<android.content.SearchRecentSuggestionsProvider: java.lang.String getType(android.net.Uri)>
<android.content.SearchRecentSuggestionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.SearchRecentSuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.SearchRecentSuggestionsProvider: boolean onCreate()>
<android.content.SearchRecentSuggestionsProvider: void setupSuggestions(java.lang.String,int)>
<android.content.SearchRecentSuggestionsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<org.apache.http.conn.ConnectTimeoutException: void <init>()>
<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>
<android.content.res.AssetManager: java.lang.String[] getLocales()>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>
<android.content.res.AssetManager: void close()>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>
<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>
<java.nio.channels.IllegalSelectorException: void <init>()>
<org.apache.http.impl.client.BasicResponseHandler: void <init>()>
<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)>
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void <init>()>
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread)>
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void abort()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.ResponseContent: void <init>()>
<android.hardware.Camera.Parameters: java.lang.String flatten()>
<android.hardware.Camera.Parameters: android.hardware.Camera.Size getPictureSize()>
<android.hardware.Camera.Parameters: void setPictureSize(int,int)>
<android.hardware.Camera.Parameters: void setPreviewSize(int,int)>
<android.hardware.Camera.Parameters: java.lang.String get(java.lang.String)>
<android.hardware.Camera.Parameters: int getPreviewFormat()>
<android.hardware.Camera.Parameters: void unflatten(java.lang.String)>
<android.hardware.Camera.Parameters: void set(java.lang.String,int)>
<android.hardware.Camera.Parameters: void setPictureFormat(int)>
<android.hardware.Camera.Parameters: int getPreviewFrameRate()>
<android.hardware.Camera.Parameters: int getInt(java.lang.String)>
<android.hardware.Camera.Parameters: int getPictureFormat()>
<android.hardware.Camera.Parameters: void setPreviewFormat(int)>
<android.hardware.Camera.Parameters: void setPreviewFrameRate(int)>
<android.hardware.Camera.Parameters: void set(java.lang.String,java.lang.String)>
<android.hardware.Camera.Parameters: android.hardware.Camera.Size getPreviewSize()>
<android.hardware.Camera.Parameters: void remove(java.lang.String)>
<java.util.LinkedHashSet: void <init>(int)>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.util.LinkedHashSet: void <init>()>
<java.util.LinkedHashSet: void <init>(int,float)>
<org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>
<java.util.EmptyStackException: void <init>()>
<android.widget.TabHost: int getCurrentTab()>
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener)>
<android.widget.TabHost: android.widget.TabHost.TabSpec newTabSpec(java.lang.String)>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TabHost: java.lang.String getCurrentTabTag()>
<android.widget.TabHost: void addTab(android.widget.TabHost.TabSpec)>
<android.widget.TabHost: void setup()>
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>
<android.widget.TabHost: void setCurrentTab(int)>
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>
<android.widget.TabHost: void <init>(android.content.Context)>
<android.widget.TabHost: void clearAllTabs()>
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>
<android.widget.TabHost: void setup(android.app.LocalActivityManager)>
<android.widget.TabHost: android.view.View getCurrentTabView()>
<android.widget.TabHost: void onTouchModeChanged(boolean)>
<android.widget.TabHost: android.view.View getCurrentView()>
<android.content.AsyncQueryHandler.WorkerHandler: void <init>(android.os.Looper)>
<java.sql.DriverPropertyInfo: void <init>(java.lang.String,java.lang.String)>
<android.graphics.LightingColorFilter: void <init>(int,int)>
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.lang.String)>
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>
<org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost)>
<org.apache.http.client.utils.URIUtils: java.net.URI createURI(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<android.net.wifi.WifiManager: int compareSignalLevel(int,int)>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(java.lang.String)>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: int getWifiState()>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>
<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>
<org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)>
<org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.ProtocolVersion: int getMinor()>
<org.apache.http.ProtocolVersion: int getMajor()>
<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)>
<org.apache.http.ProtocolVersion: int hashCode()>
<org.apache.http.ProtocolVersion: java.lang.Object clone()>
<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>
<org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)>
<android.widget.CursorTreeAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorTreeAdapter: android.database.Cursor getGroup(int)>
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.widget.CursorTreeAdapter: void setChildrenCursor(int,android.database.Cursor)>
<android.widget.CursorTreeAdapter: int getGroupCount()>
<android.widget.CursorTreeAdapter: int getChildrenCount(int)>
<android.widget.CursorTreeAdapter: void <init>(android.database.Cursor,android.content.Context)>
<android.widget.CursorTreeAdapter: android.database.Cursor getChild(int,int)>
<android.widget.CursorTreeAdapter: void <init>(android.database.Cursor,android.content.Context,boolean)>
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()>
<android.widget.CursorTreeAdapter: void notifyDataSetChanged(boolean)>
<android.widget.CursorTreeAdapter: long getChildId(int,int)>
<android.widget.CursorTreeAdapter: java.lang.String convertToString(android.database.Cursor)>
<android.widget.CursorTreeAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorTreeAdapter: long getGroupId(int)>
<android.widget.CursorTreeAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.CursorTreeAdapter: boolean hasStableIds()>
<android.widget.CursorTreeAdapter: boolean isChildSelectable(int,int)>
<android.widget.CursorTreeAdapter: void setGroupCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.widget.Filter getFilter()>
<android.util.TypedValue: void setTo(android.util.TypedValue)>
<android.util.TypedValue: void <init>()>
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFraction(int,float,float)>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFloat(int)>
<android.util.TypedValue: float getFloat()>
<android.util.TypedValue: float getFraction(float,float)>
<android.util.TypedValue: java.lang.String coerceToString(int,int)>
<android.util.TypedValue: java.lang.CharSequence coerceToString()>
<org.apache.http.auth.AuthScope: java.lang.String getRealm()>
<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.apache.http.auth.AuthScope: java.lang.String getHost()>
<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.http.auth.AuthScope: int getPort()>
<org.apache.http.auth.AuthScope: java.lang.String getScheme()>
<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int)>
<org.apache.http.auth.AuthScope: void <init>(org.apache.http.auth.AuthScope)>
<org.apache.http.auth.AuthScope: int match(org.apache.http.auth.AuthScope)>
<org.xml.sax.ext.EntityResolver2: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.EntityResolver2: org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)>
<android.text.style.StrikethroughSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.StrikethroughSpan: void <init>()>
<java.sql.Statement: boolean execute(java.lang.String)>
<java.sql.Statement: int getFetchDirection()>
<java.sql.Statement: void setMaxFieldSize(int)>
<java.sql.Statement: void setMaxRows(int)>
<java.sql.Statement: int getResultSetHoldability()>
<java.sql.Statement: java.sql.SQLWarning getWarnings()>
<java.sql.Statement: void setCursorName(java.lang.String)>
<java.sql.Statement: boolean execute(java.lang.String,int)>
<java.sql.Statement: boolean execute(java.lang.String,java.lang.String[])>
<java.sql.Statement: java.sql.ResultSet getResultSet()>
<java.sql.Statement: void setQueryTimeout(int)>
<java.sql.Statement: java.sql.Connection getConnection()>
<java.sql.Statement: int[] executeBatch()>
<java.sql.Statement: int executeUpdate(java.lang.String)>
<java.sql.Statement: int getMaxFieldSize()>
<java.sql.Statement: int executeUpdate(java.lang.String,int)>
<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>
<java.sql.Statement: int executeUpdate(java.lang.String,java.lang.String[])>
<java.sql.Statement: java.sql.ResultSet getGeneratedKeys()>
<java.sql.Statement: int getResultSetType()>
<java.sql.Statement: void cancel()>
<java.sql.Statement: int getUpdateCount()>
<java.sql.Statement: void setFetchDirection(int)>
<java.sql.Statement: void setFetchSize(int)>
<java.sql.Statement: void addBatch(java.lang.String)>
<java.sql.Statement: int getFetchSize()>
<java.sql.Statement: int getMaxRows()>
<java.sql.Statement: boolean getMoreResults()>
<java.sql.Statement: int executeUpdate(java.lang.String,int[])>
<java.sql.Statement: boolean getMoreResults(int)>
<java.sql.Statement: int getResultSetConcurrency()>
<java.sql.Statement: void clearWarnings()>
<java.sql.Statement: void close()>
<java.sql.Statement: boolean execute(java.lang.String,int[])>
<java.sql.Statement: void setEscapeProcessing(boolean)>
<java.sql.Statement: void clearBatch()>
<java.sql.Statement: int getQueryTimeout()>
<java.lang.ClassNotFoundException: void <init>(java.lang.String)>
<java.lang.ClassNotFoundException: void <init>()>
<java.lang.ClassNotFoundException: java.lang.Throwable getException()>
<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: int read(char[],int,int)>
<java.io.BufferedReader: void close()>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.SurfaceView: void <init>(android.content.Context)>
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>
<java.util.zip.Inflater: int getAdler()>
<java.util.zip.Inflater: int inflate(byte[],int,int)>
<java.util.zip.Inflater: boolean needsInput()>
<java.util.zip.Inflater: boolean needsDictionary()>
<java.util.zip.Inflater: long getBytesRead()>
<java.util.zip.Inflater: int getRemaining()>
<java.util.zip.Inflater: void reset()>
<java.util.zip.Inflater: void <init>()>
<java.util.zip.Inflater: int inflate(byte[])>
<java.util.zip.Inflater: int getTotalOut()>
<java.util.zip.Inflater: void setInput(byte[])>
<java.util.zip.Inflater: void setDictionary(byte[])>
<java.util.zip.Inflater: void setInput(byte[],int,int)>
<java.util.zip.Inflater: boolean finished()>
<java.util.zip.Inflater: void setDictionary(byte[],int,int)>
<java.util.zip.Inflater: int getTotalIn()>
<java.util.zip.Inflater: void end()>
<java.util.zip.Inflater: void <init>(boolean)>
<java.util.zip.Inflater: long getBytesWritten()>
<javax.net.ssl.KeyStoreBuilderParameters: void <init>(java.util.List)>
<javax.net.ssl.KeyStoreBuilderParameters: void <init>(java.security.KeyStore.Builder)>
<javax.net.ssl.KeyStoreBuilderParameters: java.util.List getParameters()>
<android.text.style.UnderlineSpan: void <init>()>
<android.text.style.UnderlineSpan: void updateDrawState(android.text.TextPaint)>
<android.os.IBinder: java.lang.String getInterfaceDescriptor()>
<android.os.IBinder: void linkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.IBinder: boolean pingBinder()>
<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.IBinder: boolean isBinderAlive()>
<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.EditTextPreference: java.lang.String getText()>
<android.preference.EditTextPreference: void <init>(android.content.Context)>
<android.preference.EditTextPreference: android.widget.EditText getEditText()>
<android.preference.EditTextPreference: void onAddEditTextToDialogView(android.view.View,android.widget.EditText)>
<android.preference.EditTextPreference: void setText(java.lang.String)>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>
<java.nio.channels.SocketChannel: java.net.Socket socket()>
<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.SocketChannel: boolean isConnected()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.SocketChannel: boolean isConnectionPending()>
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>
<java.nio.channels.SocketChannel: boolean finishConnect()>
<java.nio.channels.SocketChannel: int validOps()>
<javax.net.ssl.HandshakeCompletedListener: void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources.Theme,int,boolean)>
<android.view.ContextThemeWrapper: void <init>()>
<android.graphics.drawable.shapes.ArcShape: void <init>(float,float)>
<javax.security.auth.callback.PasswordCallback: boolean isEchoOn()>
<javax.security.auth.callback.PasswordCallback: java.lang.String getPrompt()>
<javax.security.auth.callback.PasswordCallback: char[] getPassword()>
<javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>
<javax.security.auth.callback.PasswordCallback: void clearPassword()>
<javax.security.auth.callback.PasswordCallback: void setPassword(char[])>
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>
<java.nio.CharBuffer: char get(int)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<java.nio.CharBuffer: char[] array()>
<java.nio.CharBuffer: boolean hasArray()>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
<java.nio.CharBuffer: java.nio.CharBuffer put(int,char)>
<java.nio.CharBuffer: java.nio.CharBuffer append(char)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>
<java.nio.CharBuffer: java.lang.CharSequence subSequence(int,int)>
<java.nio.CharBuffer: char charAt(int)>
<java.nio.CharBuffer: int length()>
<java.nio.CharBuffer: java.nio.ByteOrder order()>
<java.nio.CharBuffer: java.nio.CharBuffer compact()>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>
<java.nio.CharBuffer: int read(java.nio.CharBuffer)>
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>
<java.nio.CharBuffer: int arrayOffset()>
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
<java.nio.CharBuffer: java.nio.CharBuffer put(char)>
<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>
<java.nio.CharBuffer: char get()>
<java.nio.CharBuffer: boolean isDirect()>
<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
<java.nio.CharBuffer: java.nio.CharBuffer slice()>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>
<android.database.sqlite.SQLiteDatabase.CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
<android.app.PendingIntent.CanceledException: void <init>(java.lang.String)>
<android.app.PendingIntent.CanceledException: void <init>()>
<android.app.PendingIntent.CanceledException: void <init>(java.lang.Exception)>
<java.util.List: int size()>
<java.util.List: boolean containsAll(java.util.Collection)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean equals(java.lang.Object)>
<java.util.List: boolean removeAll(java.util.Collection)>
<java.util.List: E set(int,E)>
<java.util.List: boolean addAll(int,java.util.Collection)>
<java.util.List: E remove(int)>
<java.util.List: boolean add(E)>
<java.util.List: java.util.ListIterator listIterator(int)>
<java.util.List: void add(int,E)>
<java.util.List: void clear()>
<java.util.List: java.util.Iterator iterator()>
<java.util.List: java.util.ListIterator listIterator()>
<java.util.List: int hashCode()>
<java.util.List: boolean isEmpty()>
<java.util.List: boolean addAll(java.util.Collection)>
<java.util.List: java.util.List subList(int,int)>
<java.util.List: boolean remove(java.lang.Object)>
<java.util.List: java.lang.Object[] toArray()>
<java.util.List: T[] toArray(T[])>
<java.util.List: boolean retainAll(java.util.Collection)>
<java.util.List: int indexOf(java.lang.Object)>
<java.util.List: int lastIndexOf(java.lang.Object)>
<java.util.List: E get(int)>
<org.apache.http.HttpResponseInterceptor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<android.text.style.SubscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.SubscriptSpan: void <init>()>
<android.text.style.SubscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.widget.RelativeLayout: void setVerticalGravity(int)>
<android.widget.RelativeLayout: void <init>(android.content.Context)>
<android.widget.RelativeLayout: void setIgnoreGravity(int)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RelativeLayout: void setGravity(int)>
<android.widget.RelativeLayout: void setHorizontalGravity(int)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout: void onLayout(boolean,int,int,int,int)>
<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)>
<org.apache.http.protocol.RequestDate: void <init>()>
<org.apache.http.protocol.RequestDate: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<android.content.Context: int getWallpaperDesiredMinimumWidth()>
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>
<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.Context: void clearWallpaper()>
<android.content.Context: void unbindService(android.content.ServiceConnection)>
<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: java.io.File getDir(java.lang.String,int)>
<android.content.Context: int getWallpaperDesiredMinimumHeight()>
<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.Context: android.content.ComponentName startService(android.content.Intent)>
<android.content.Context: void revokeUriPermission(android.net.Uri,int)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>
<android.content.Context: boolean deleteFile(java.lang.String)>
<android.content.Context: void sendBroadcast(android.content.Intent)>
<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>
<android.content.Context: java.lang.String[] databaseList()>
<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.Context: void setTheme(int)>
<android.content.Context: void removeStickyBroadcast(android.content.Intent)>
<android.content.Context: java.lang.String[] fileList()>
<android.content.Context: android.content.res.Resources getResources()>
<android.content.Context: java.lang.String getString(int,java.lang.Object...)>
<android.content.Context: void startActivity(android.content.Intent)>
<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.Context: android.content.pm.PackageManager getPackageManager()>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.Context: android.os.Looper getMainLooper()>
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.Context: java.lang.CharSequence getText(int)>
<android.content.Context: android.content.ContentResolver getContentResolver()>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.Context: java.lang.String getPackageName()>
<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.Context: android.content.Context getApplicationContext()>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.Context: boolean deleteDatabase(java.lang.String)>
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.Context: void <init>()>
<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.Context: java.io.File getFilesDir()>
<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.Context: java.lang.Object getSystemService(java.lang.String)>
<android.content.Context: boolean stopService(android.content.Intent)>
<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.Context: java.io.File getCacheDir()>
<android.content.Context: java.io.File getDatabasePath(java.lang.String)>
<android.content.Context: int checkPermission(java.lang.String,int,int)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
<android.content.Context: android.content.res.Resources.Theme getTheme()>
<android.content.Context: int checkCallingPermission(java.lang.String)>
<android.content.Context: java.lang.String getString(int)>
<android.content.Context: android.content.res.AssetManager getAssets()>
<android.content.Context: java.lang.ClassLoader getClassLoader()>
<java.net.SocketOptions: java.lang.Object getOption(int)>
<java.net.SocketOptions: void setOption(int,java.lang.Object)>
<java.util.AbstractSet: void <init>()>
<org.apache.http.message.BasicHeaderIterator: void <init>(org.apache.http.Header[],java.lang.String)>
<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.message.BasicHeaderIterator: boolean hasNext()>
<org.apache.http.message.BasicHeaderIterator: java.lang.Object next()>
<org.apache.http.message.BasicHeaderIterator: void remove()>
<org.apache.http.message.BasicHeaderIterator: boolean filterHeader(int)>
<org.apache.http.message.BasicHeaderIterator: int findNext(int)>
<java.lang.Iterable: java.util.Iterator iterator()>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: void recycle()>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: int getIndex(int)>
<android.content.res.TypedArray: float getDimension(int,float)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.content.res.TypedArray: int getColor(int,int)>
<android.content.res.TypedArray: int getInt(int,int)>
<android.content.res.TypedArray: java.lang.String getString(int)>
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<android.view.animation.CycleInterpolator: float getInterpolation(float)>
<android.view.animation.CycleInterpolator: void <init>(float)>
<android.view.animation.CycleInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<java.security.cert.LDAPCertStoreParameters: java.lang.Object clone()>
<java.security.cert.LDAPCertStoreParameters: int getPort()>
<java.security.cert.LDAPCertStoreParameters: java.lang.String getServerName()>
<java.security.cert.LDAPCertStoreParameters: void <init>(java.lang.String,int)>
<java.security.cert.LDAPCertStoreParameters: void <init>(java.lang.String)>
<java.security.cert.LDAPCertStoreParameters: void <init>()>
<android.view.VelocityTracker: void recycle()>
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>
<android.view.VelocityTracker: float getYVelocity()>
<android.view.VelocityTracker: void clear()>
<android.view.VelocityTracker: android.view.VelocityTracker obtain()>
<android.view.VelocityTracker: void computeCurrentVelocity(int)>
<android.view.VelocityTracker: float getXVelocity()>
<java.lang.NoClassDefFoundError: void <init>()>
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<org.apache.http.protocol.HttpRequestInterceptorList: void removeRequestInterceptorByClass(java.lang.Class)>
<org.apache.http.protocol.HttpRequestInterceptorList: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>
<org.apache.http.protocol.HttpRequestInterceptorList: void setInterceptors(java.util.List)>
<org.apache.http.protocol.HttpRequestInterceptorList: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>
<org.apache.http.protocol.HttpRequestInterceptorList: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int)>
<org.apache.http.protocol.HttpRequestInterceptorList: void clearRequestInterceptors()>
<org.apache.http.protocol.HttpRequestInterceptorList: int getRequestInterceptorCount()>
<android.database.Cursor: boolean moveToPosition(int)>
<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.Cursor: boolean moveToNext()>
<android.database.Cursor: java.lang.String[] getColumnNames()>
<android.database.Cursor: android.os.Bundle getExtras()>
<android.database.Cursor: double getDouble(int)>
<android.database.Cursor: int getColumnCount()>
<android.database.Cursor: boolean isNull(int)>
<android.database.Cursor: java.lang.String getColumnName(int)>
<android.database.Cursor: boolean isLast()>
<android.database.Cursor: boolean isBeforeFirst()>
<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>
<android.database.Cursor: boolean move(int)>
<android.database.Cursor: long getLong(int)>
<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>
<android.database.Cursor: void deactivate()>
<android.database.Cursor: int getPosition()>
<android.database.Cursor: byte[] getBlob(int)>
<android.database.Cursor: boolean isAfterLast()>
<android.database.Cursor: boolean moveToPrevious()>
<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.Cursor: boolean moveToLast()>
<android.database.Cursor: java.lang.String getString(int)>
<android.database.Cursor: boolean moveToFirst()>
<android.database.Cursor: short getShort(int)>
<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.Cursor: int getCount()>
<android.database.Cursor: boolean isClosed()>
<android.database.Cursor: boolean isFirst()>
<android.database.Cursor: void close()>
<android.database.Cursor: float getFloat(int)>
<android.database.Cursor: int getInt(int)>
<android.database.Cursor: boolean getWantsAllOnMoveCalls()>
<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.Cursor: int getColumnIndex(java.lang.String)>
<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>
<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.Cursor: boolean requery()>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,short)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,byte)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,java.lang.Object)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,char)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,int)>
<java.io.ObjectOutputStream.PutField: void write(java.io.ObjectOutput)>
<java.io.ObjectOutputStream.PutField: void <init>()>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,double)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,long)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,float)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,boolean)>
<java.nio.channels.Pipe: void <init>()>
<java.nio.channels.Pipe: java.nio.channels.Pipe open()>
<java.nio.channels.Pipe: java.nio.channels.Pipe.SourceChannel source()>
<java.nio.channels.Pipe: java.nio.channels.Pipe.SinkChannel sink()>
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)>
<org.apache.http.conn.scheme.SchemeRegistry: void setItems(java.util.Map)>
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)>
<org.apache.http.conn.scheme.SchemeRegistry: java.util.List getSchemeNames()>
<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme unregister(java.lang.String)>
<org.apache.http.ParseException: void <init>(java.lang.String)>
<org.apache.http.ParseException: void <init>()>
<android.content.res.AssetManager.AssetInputStream: int getAssetInt()>
<android.content.res.AssetManager.AssetInputStream: void mark(int)>
<android.content.res.AssetManager.AssetInputStream: void reset()>
<android.content.res.AssetManager.AssetInputStream: int read(byte[])>
<android.content.res.AssetManager.AssetInputStream: long skip(long)>
<android.content.res.AssetManager.AssetInputStream: int read()>
<android.content.res.AssetManager.AssetInputStream: int read(byte[],int,int)>
<android.content.res.AssetManager.AssetInputStream: void close()>
<android.content.res.AssetManager.AssetInputStream: int available()>
<android.content.res.AssetManager.AssetInputStream: boolean markSupported()>
<org.apache.http.client.protocol.ResponseProcessCookies: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.protocol.ResponseProcessCookies: void <init>()>
<java.io.FilterWriter: void close()>
<java.io.FilterWriter: void <init>(java.io.Writer)>
<java.io.FilterWriter: void flush()>
<java.io.FilterWriter: void write(char[],int,int)>
<android.widget.AbsListView: void invalidateViews()>
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>
<android.widget.AbsListView: void handleDataChanged()>
<android.widget.AbsListView: long pointToRowId(int,int)>
<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>
<android.widget.AbsListView: int getTranscriptMode()>
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>
<android.widget.AbsListView: boolean hasTextFilter()>
<android.widget.AbsListView: int getCacheColorHint()>
<android.widget.AbsListView: void reclaimViews(java.util.List)>
<android.widget.AbsListView: int getListPaddingBottom()>
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView.RecyclerListener)>
<android.widget.AbsListView: int getListPaddingRight()>
<android.widget.AbsListView: void setFilterText(java.lang.String)>
<android.widget.AbsListView: void onGlobalLayout()>
<android.widget.AbsListView: void onTouchModeChanged(boolean)>
<android.widget.AbsListView: void setTextFilterEnabled(boolean)>
<android.widget.AbsListView: void setTranscriptMode(int)>
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>
<android.widget.AbsListView: void setSelector(int)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>
<android.widget.AbsListView: boolean isScrollingCacheEnabled()>
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView.OnScrollListener)>
<android.widget.AbsListView: boolean isStackFromBottom()>
<android.widget.AbsListView: void onFilterComplete(int)>
<android.widget.AbsListView: void setCacheColorHint(int)>
<android.widget.AbsListView: void setStackFromBottom(boolean)>
<android.widget.AbsListView: boolean isTextFilterEnabled()>
<android.widget.AbsListView: void <init>(android.content.Context)>
<android.widget.AbsListView: int getListPaddingTop()>
<android.widget.AbsListView: void layoutChildren()>
<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.AbsListView: int pointToPosition(int,int)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>
<android.widget.AbsListView: void clearTextFilter()>
<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.AbsListView: boolean isInFilterMode()>
<android.widget.AbsListView: int getListPaddingLeft()>
<android.widget.AbsListView: android.view.View getSelectedView()>
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<java.io.NotSerializableException: void <init>()>
<java.io.NotSerializableException: void <init>(java.lang.String)>
<android.graphics.Canvas.EdgeType: android.graphics.Canvas.EdgeType valueOf(java.lang.String)>
<android.graphics.Canvas.EdgeType: android.graphics.Canvas.EdgeType[] values()>
<android.graphics.drawable.shapes.RoundRectShape: void <init>(float[],android.graphics.RectF,float[])>
<android.widget.DigitalClock: void <init>(android.content.Context)>
<android.widget.DigitalClock: void <init>(android.content.Context,android.util.AttributeSet)>
<java.io.Closeable: void close()>
<android.graphics.AvoidXfermode.Mode: android.graphics.AvoidXfermode.Mode valueOf(java.lang.String)>
<android.graphics.AvoidXfermode.Mode: android.graphics.AvoidXfermode.Mode[] values()>
<android.view.animation.GridLayoutAnimationController.AnimationParameters: void <init>()>
<javax.sql.RowSetInternal: java.sql.ResultSet getOriginalRow()>
<javax.sql.RowSetInternal: void setMetaData(javax.sql.RowSetMetaData)>
<javax.sql.RowSetInternal: java.lang.Object[] getParams()>
<javax.sql.RowSetInternal: java.sql.ResultSet getOriginal()>
<javax.sql.RowSetInternal: java.sql.Connection getConnection()>
<org.apache.commons.logging.Log: void fatal(java.lang.Object,java.lang.Throwable)>
<org.apache.commons.logging.Log: boolean isFatalEnabled()>
<org.apache.commons.logging.Log: void fatal(java.lang.Object)>
<org.apache.commons.logging.Log: void trace(java.lang.Object)>
<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>
<org.apache.commons.logging.Log: void info(java.lang.Object,java.lang.Throwable)>
<org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.commons.logging.Log: void warn(java.lang.Object)>
<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>
<org.apache.commons.logging.Log: boolean isWarnEnabled()>
<org.apache.commons.logging.Log: void info(java.lang.Object)>
<org.apache.commons.logging.Log: boolean isInfoEnabled()>
<org.apache.commons.logging.Log: boolean isTraceEnabled()>
<org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>
<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>
<org.apache.commons.logging.Log: boolean isErrorEnabled()>
<org.apache.commons.logging.Log: void error(java.lang.Object)>
<dalvik.system.VMDebug: int setAllocationLimit(int)>
<dalvik.system.VMDebug: void stopEmulatorTracing()>
<dalvik.system.VMDebug: long lastDebuggerActivity()>
<dalvik.system.VMDebug: void stopMethodTracing()>
<dalvik.system.VMDebug: void stopAllocCounting()>
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>
<dalvik.system.VMDebug: void startEmulatorTracing()>
<dalvik.system.VMDebug: void getInstructionCount(int[])>
<dalvik.system.VMDebug: int setGlobalAllocationLimit(int)>
<dalvik.system.VMDebug: long threadCpuTimeNanos()>
<dalvik.system.VMDebug: void resetInstructionCount()>
<dalvik.system.VMDebug: int getLoadedClassCount()>
<dalvik.system.VMDebug: void printLoadedClasses(int)>
<dalvik.system.VMDebug: boolean isDebuggerConnected()>
<dalvik.system.VMDebug: void startAllocCounting()>
<dalvik.system.VMDebug: void startInstructionCounting()>
<dalvik.system.VMDebug: void startMethodTracing()>
<dalvik.system.VMDebug: void resetAllocCount(int)>
<dalvik.system.VMDebug: int getAllocCount(int)>
<dalvik.system.VMDebug: void stopInstructionCounting()>
<org.apache.http.HttpConnection: org.apache.http.HttpConnectionMetrics getMetrics()>
<org.apache.http.HttpConnection: void shutdown()>
<org.apache.http.HttpConnection: boolean isOpen()>
<org.apache.http.HttpConnection: int getSocketTimeout()>
<org.apache.http.HttpConnection: boolean isStale()>
<org.apache.http.HttpConnection: void close()>
<org.apache.http.HttpConnection: void setSocketTimeout(int)>
<org.apache.http.client.ResponseHandler: T handleResponse(org.apache.http.HttpResponse)>
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>
<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>
<java.security.Timestamp: java.util.Date getTimestamp()>
<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[])>
<java.util.jar.Manifest: void <init>(java.io.InputStream)>
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>
<java.util.jar.Manifest: void read(java.io.InputStream)>
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
<java.util.jar.Manifest: void <init>(java.util.jar.Manifest)>
<java.util.jar.Manifest: void clear()>
<java.util.jar.Manifest: void <init>()>
<java.util.jar.Manifest: java.lang.Object clone()>
<java.util.jar.Manifest: java.util.Map getEntries()>
<java.util.jar.Manifest: void write(java.io.OutputStream)>
<org.w3c.dom.Text: org.w3c.dom.Text splitText(int)>
<java.nio.charset.MalformedInputException: void <init>(int)>
<java.nio.charset.MalformedInputException: int getInputLength()>
<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<java.lang.AbstractMethodError: void <init>(java.lang.String)>
<java.lang.AbstractMethodError: void <init>()>
<java.util.InputMismatchException: void <init>(java.lang.String)>
<java.util.InputMismatchException: void <init>()>
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.AbstractCursor: boolean onMove(int,int)>
<android.database.AbstractCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.AbstractCursor: boolean moveToLast()>
<android.database.AbstractCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.AbstractCursor: boolean requery()>
<android.database.AbstractCursor: int getPosition()>
<android.database.AbstractCursor: java.lang.String getColumnName(int)>
<android.database.AbstractCursor: boolean moveToPosition(int)>
<android.database.AbstractCursor: void onChange(boolean)>
<android.database.AbstractCursor: android.os.Bundle getExtras()>
<android.database.AbstractCursor: int getInt(int)>
<android.database.AbstractCursor: void <init>()>
<android.database.AbstractCursor: void deactivate()>
<android.database.AbstractCursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.AbstractCursor: boolean isNull(int)>
<android.database.AbstractCursor: byte[] getBlob(int)>
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>
<android.database.AbstractCursor: boolean moveToPrevious()>
<android.database.AbstractCursor: void close()>
<android.database.AbstractCursor: boolean move(int)>
<android.database.AbstractCursor: long getLong(int)>
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>
<android.database.AbstractCursor: void checkPosition()>
<android.database.AbstractCursor: double getDouble(int)>
<android.database.AbstractCursor: android.os.Bundle respond(android.os.Bundle)>
<android.database.AbstractCursor: boolean isFieldUpdated(int)>
<android.database.AbstractCursor: java.lang.String[] getColumnNames()>
<android.database.AbstractCursor: void registerContentObserver(android.database.ContentObserver)>
<android.database.AbstractCursor: boolean moveToNext()>
<android.database.AbstractCursor: void fillWindow(int,android.database.CursorWindow)>
<android.database.AbstractCursor: java.lang.String getString(int)>
<android.database.AbstractCursor: boolean isFirst()>
<android.database.AbstractCursor: boolean isBeforeFirst()>
<android.database.AbstractCursor: float getFloat(int)>
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>
<android.database.AbstractCursor: int getColumnCount()>
<android.database.AbstractCursor: boolean isLast()>
<android.database.AbstractCursor: short getShort(int)>
<android.database.AbstractCursor: int getCount()>
<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.AbstractCursor: boolean isAfterLast()>
<android.database.AbstractCursor: boolean isClosed()>
<android.database.AbstractCursor: boolean moveToFirst()>
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<android.preference.PreferenceActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceActivity: void addPreferencesFromIntent(android.content.Intent)>
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)>
<android.preference.PreferenceActivity: void <init>()>
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()>
<android.widget.DatePicker: void <init>(android.content.Context)>
<android.widget.DatePicker: int getMonth()>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.DatePicker: int getYear()>
<android.widget.DatePicker: void init(int,int,int,android.widget.DatePicker.OnDateChangedListener)>
<android.widget.DatePicker: int getDayOfMonth()>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.DatePicker: void updateDate(int,int,int)>
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>
<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>
<java.net.ServerSocket: java.net.InetAddress getInetAddress()>
<java.net.ServerSocket: int getSoTimeout()>
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>
<java.net.ServerSocket: void <init>()>
<java.net.ServerSocket: void <init>(java.net.SocketImpl)>
<java.net.ServerSocket: void close()>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>
<java.net.ServerSocket: void setSoTimeout(int)>
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.ServerSocket: void setReceiveBufferSize(int)>
<java.net.ServerSocket: int getReceiveBufferSize()>
<java.net.ServerSocket: boolean isBound()>
<java.net.ServerSocket: void <init>(int)>
<java.net.ServerSocket: void implAccept(java.net.Socket)>
<java.net.ServerSocket: void <init>(int,int)>
<java.net.ServerSocket: boolean getReuseAddress()>
<java.net.ServerSocket: java.net.Socket accept()>
<java.net.ServerSocket: int getLocalPort()>
<java.net.ServerSocket: boolean isClosed()>
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>
<java.net.ServerSocket: void setReuseAddress(boolean)>
<android.webkit.SslErrorHandler: void cancel()>
<android.webkit.SslErrorHandler: void proceed()>
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object removeAttribute(java.lang.String)>
<org.apache.http.protocol.DefaultedHttpContext: void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.DefaultedHttpContext: org.apache.http.protocol.HttpContext getDefaults()>
<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)>
<java.text.Bidi: void <init>(java.lang.String,int)>
<java.text.Bidi: boolean isLeftToRight()>
<java.text.Bidi: int getRunLevel(int)>
<java.text.Bidi: int getBaseLevel()>
<java.text.Bidi: int getRunLimit(int)>
<java.text.Bidi: boolean requiresBidi(char[],int,int)>
<java.text.Bidi: int getRunCount()>
<java.text.Bidi: int getRunStart(int)>
<java.text.Bidi: boolean isMixed()>
<java.text.Bidi: int getLength()>
<java.text.Bidi: boolean baseIsLeftToRight()>
<java.text.Bidi: int getLevelAt(int)>
<java.text.Bidi: void <init>(java.text.AttributedCharacterIterator)>
<java.text.Bidi: java.text.Bidi createLineBidi(int,int)>
<java.text.Bidi: boolean isRightToLeft()>
<java.text.Bidi: void <init>(char[],int,byte[],int,int,int)>
<java.text.Bidi: void reorderVisually(byte[],int,java.lang.Object[],int,int)>
<java.io.InvalidObjectException: void <init>(java.lang.String)>
<java.math.BigInteger: java.math.BigInteger probablePrime(int,java.util.Random)>
<java.math.BigInteger: void <init>(byte[])>
<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>
<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger abs()>
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger valueOf(long)>
<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>
<java.math.BigInteger: int intValue()>
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger clearBit(int)>
<java.math.BigInteger: long longValue()>
<java.math.BigInteger: java.math.BigInteger shiftRight(int)>
<java.math.BigInteger: int signum()>
<java.math.BigInteger: java.lang.String toString(int)>
<java.math.BigInteger: java.math.BigInteger setBit(int)>
<java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger pow(int)>
<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>
<java.math.BigInteger: byte[] toByteArray()>
<java.math.BigInteger: float floatValue()>
<java.math.BigInteger: int bitLength()>
<java.math.BigInteger: int bitCount()>
<java.math.BigInteger: java.math.BigInteger nextProbablePrime()>
<java.math.BigInteger: void <init>(java.lang.String)>
<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger not()>
<java.math.BigInteger: double doubleValue()>
<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>
<java.math.BigInteger: boolean isProbablePrime(int)>
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
<java.math.BigInteger: void <init>(int,int,java.util.Random)>
<java.math.BigInteger: java.math.BigInteger flipBit(int)>
<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger negate()>
<java.math.BigInteger: int getLowestSetBit()>
<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>
<java.math.BigInteger: boolean testBit(int)>
<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)>
<java.math.BigInteger: void <init>(java.lang.String,int)>
<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>
<java.math.BigInteger: void <init>(int,java.util.Random)>
<java.math.BigInteger: int compareTo(java.math.BigInteger)>
<java.math.BigInteger: void <init>(int,byte[])>
<java.sql.Struct: java.lang.Object[] getAttributes(java.util.Map)>
<java.sql.Struct: java.lang.String getSQLTypeName()>
<java.sql.Struct: java.lang.Object[] getAttributes()>
<android.widget.AdapterView.OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>
<android.R.attr: void <init>()>
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String,java.lang.String)>
<android.sax.Element: void setTextElementListener(android.sax.TextElementListener)>
<android.sax.Element: void setEndElementListener(android.sax.EndElementListener)>
<android.sax.Element: void setEndTextElementListener(android.sax.EndTextElementListener)>
<android.sax.Element: void setElementListener(android.sax.ElementListener)>
<android.sax.Element: void setStartElementListener(android.sax.StartElementListener)>
<android.sax.Element: android.sax.Element getChild(java.lang.String)>
<java.util.GregorianCalendar: void <init>(int,int,int)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<java.util.GregorianCalendar: int getMaximum(int)>
<java.util.GregorianCalendar: int getGreatestMinimum(int)>
<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>
<java.util.GregorianCalendar: void <init>()>
<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>
<java.util.GregorianCalendar: int getLeastMaximum(int)>
<java.util.GregorianCalendar: void roll(int,boolean)>
<java.util.GregorianCalendar: void <init>(java.util.Locale)>
<java.util.GregorianCalendar: void computeTime()>
<java.util.GregorianCalendar: java.util.Date getGregorianChange()>
<java.util.GregorianCalendar: int getMinimum(int)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.GregorianCalendar: void add(int,int)>
<java.util.GregorianCalendar: boolean isLeapYear(int)>
<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int)>
<java.util.GregorianCalendar: void computeFields()>
<android.view.Surface: void setLayer(int)>
<android.view.Surface: void setMatrix(float,float,float,float)>
<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)>
<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>
<android.view.Surface: void freeze()>
<android.view.Surface: void setOrientation(int,int)>
<android.view.Surface: void show()>
<android.view.Surface: void setPosition(int,int)>
<android.view.Surface: boolean isValid()>
<android.view.Surface: void setSize(int,int)>
<android.view.Surface: void readFromParcel(android.os.Parcel)>
<android.view.Surface: void setAlpha(float)>
<android.view.Surface: void setFreezeTint(int)>
<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.Surface: void unfreeze()>
<android.view.Surface: int describeContents()>
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.Surface: void setFlags(int,int)>
<android.view.Surface: void writeToParcel(android.os.Parcel,int)>
<android.view.Surface: void hide()>
<java.security.UnresolvedPermission: int hashCode()>
<java.security.UnresolvedPermission: boolean implies(java.security.Permission)>
<java.security.UnresolvedPermission: java.security.cert.Certificate[] getUnresolvedCerts()>
<java.security.UnresolvedPermission: java.lang.String getUnresolvedName()>
<java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<java.security.UnresolvedPermission: java.lang.String getUnresolvedActions()>
<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>
<java.security.UnresolvedPermission: java.lang.String getUnresolvedType()>
<java.security.UnresolvedPermission: java.lang.String getActions()>
<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>
<android.text.method.ScrollingMovementMethod: boolean canSelectArbitrarily()>
<android.text.method.ScrollingMovementMethod: boolean up(android.widget.TextView,android.text.Spannable)>
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()>
<android.text.method.ScrollingMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.ScrollingMovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.ScrollingMovementMethod: boolean left(android.widget.TextView,android.text.Spannable)>
<android.text.method.ScrollingMovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.ScrollingMovementMethod: boolean right(android.widget.TextView,android.text.Spannable)>
<android.text.method.ScrollingMovementMethod: boolean down(android.widget.TextView,android.text.Spannable)>
<android.text.method.ScrollingMovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.ScrollingMovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.ScrollingMovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.ScrollingMovementMethod: void <init>()>
<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>
<java.lang.ThreadDeath: void <init>()>
<android.view.InflateException: void <init>(java.lang.String)>
<android.view.InflateException: void <init>()>
<android.view.InflateException: void <init>(java.lang.Throwable)>
<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>
<android.view.WindowManager.LayoutParams: java.lang.String debug(java.lang.String)>
<android.view.WindowManager.LayoutParams: void <init>(int,int,int,int,int,int,int)>
<android.view.WindowManager.LayoutParams: int copyFrom(android.view.WindowManager.LayoutParams)>
<android.view.WindowManager.LayoutParams: int describeContents()>
<android.view.WindowManager.LayoutParams: java.lang.CharSequence getTitle()>
<android.view.WindowManager.LayoutParams: void <init>(android.os.Parcel)>
<android.view.WindowManager.LayoutParams: void <init>()>
<android.view.WindowManager.LayoutParams: void <init>(int,int)>
<android.view.WindowManager.LayoutParams: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManager.LayoutParams: void <init>(int)>
<android.view.WindowManager.LayoutParams: void <init>(int,int,int)>
<android.view.WindowManager.LayoutParams: void setTitle(java.lang.CharSequence)>
<android.view.WindowManager.LayoutParams: void <init>(int,int,int,int,int)>
<org.xmlpull.v1.XmlPullParserFactory: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>
<org.xmlpull.v1.XmlPullParserFactory: void <init>()>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String,java.lang.Class)>
<org.xmlpull.v1.XmlPullParserFactory: boolean isNamespaceAware()>
<org.xmlpull.v1.XmlPullParserFactory: boolean isValidating()>
<org.xmlpull.v1.XmlPullParserFactory: void setValidating(boolean)>
<org.xmlpull.v1.XmlPullParserFactory: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>
<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>
<android.location.LocationProvider: int getPowerRequirement()>
<android.location.LocationProvider: boolean supportsSpeed()>
<android.location.LocationProvider: boolean requiresNetwork()>
<android.location.LocationProvider: boolean requiresSatellite()>
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)>
<android.location.LocationProvider: int getAccuracy()>
<android.location.LocationProvider: boolean supportsBearing()>
<android.location.LocationProvider: boolean supportsAltitude()>
<android.location.LocationProvider: java.lang.String getName()>
<android.location.LocationProvider: boolean hasMonetaryCost()>
<android.location.LocationProvider: boolean requiresCell()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendEquation(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: boolean glIsRenderbufferOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeniv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferRenderbufferOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteRenderbuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glStencilOp(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glRenderbufferStorageOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetIntegerv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendEquationSeparate(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetIntegerv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvx(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int glCheckFramebufferStatusOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glEnable(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferTexture2DOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendFuncSeparate(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindFramebufferOES(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexParameterf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGeniv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGeniv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindRenderbufferOES(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenRenderbuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenerateMipmapOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeni(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: boolean glIsFramebufferOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeniv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindTexture(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenFramebuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenx(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,int[],int)>
<java.io.WriteAbortedException: void <init>(java.lang.String,java.lang.Exception)>
<org.apache.http.impl.cookie.BasicMaxAgeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.BasicMaxAgeHandler: void <init>()>
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getRealm()>
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)>
<org.apache.http.impl.auth.RFC2617Scheme: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>
<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map getParameters()>
<org.apache.http.impl.auth.RFC2617Scheme: void <init>()>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.PreferenceCategory: void <init>(android.content.Context)>
<org.apache.http.client.methods.HttpHead: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpHead: void <init>(java.lang.String)>
<org.apache.http.client.methods.HttpHead: void <init>()>
<org.apache.http.client.methods.HttpHead: void <init>(java.net.URI)>
<org.apache.http.params.AbstractHttpParams: void <init>()>
<org.apache.http.params.AbstractHttpParams: boolean isParameterTrue(java.lang.String)>
<org.apache.http.params.AbstractHttpParams: boolean isParameterFalse(java.lang.String)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.AbstractHttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.params.AbstractHttpParams: double getDoubleParameter(java.lang.String,double)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
<org.apache.http.params.AbstractHttpParams: long getLongParameter(java.lang.String,long)>
<android.util.TimingLogger: void reset()>
<android.util.TimingLogger: void <init>(java.lang.String,java.lang.String)>
<android.util.TimingLogger: void reset(java.lang.String,java.lang.String)>
<android.util.TimingLogger: void addSplit(java.lang.String)>
<android.util.TimingLogger: void dumpToLog()>
<java.nio.channels.Selector: java.nio.channels.Selector wakeup()>
<java.nio.channels.Selector: int select()>
<java.nio.channels.Selector: java.util.Set keys()>
<java.nio.channels.Selector: void <init>()>
<java.nio.channels.Selector: void close()>
<java.nio.channels.Selector: java.nio.channels.Selector open()>
<java.nio.channels.Selector: int select(long)>
<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.Selector: java.util.Set selectedKeys()>
<java.nio.channels.Selector: boolean isOpen()>
<java.nio.channels.Selector: int selectNow()>
<android.os.RemoteException: void <init>()>
<org.xml.sax.Locator: int getLineNumber()>
<org.xml.sax.Locator: java.lang.String getSystemId()>
<org.xml.sax.Locator: int getColumnNumber()>
<org.xml.sax.Locator: java.lang.String getPublicId()>
<org.apache.http.conn.routing.RouteInfo.TunnelType: org.apache.http.conn.routing.RouteInfo.TunnelType[] values()>
<org.apache.http.conn.routing.RouteInfo.TunnelType: org.apache.http.conn.routing.RouteInfo.TunnelType valueOf(java.lang.String)>
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>
<android.text.SpannableStringBuilder: void clearSpans()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>
<android.text.SpannableStringBuilder: void clear()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: char charAt(int)>
<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>
<android.text.SpannableStringBuilder: int length()>
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>
<android.text.SpannableStringBuilder: void <init>()>
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: T[] getSpans(int,int,java.lang.Class)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>
<java.util.StringTokenizer: int countTokens()>
<java.util.StringTokenizer: boolean hasMoreElements()>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.StringTokenizer: java.lang.Object nextElement()>
<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.security.KeyStore.LoadStoreParameter: java.security.KeyStore.ProtectionParameter getProtectionParameter()>
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()>
<android.text.method.ArrowKeyMovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.ArrowKeyMovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.ArrowKeyMovementMethod: void <init>()>
<android.text.method.ArrowKeyMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.ArrowKeyMovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.ArrowKeyMovementMethod: boolean canSelectArbitrarily()>
<android.text.method.ArrowKeyMovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.ArrowKeyMovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<java.security.SecurityPermission: void <init>(java.lang.String,java.lang.String)>
<java.security.SecurityPermission: void <init>(java.lang.String)>
<java.util.UnknownFormatFlagsException: java.lang.String getFlags()>
<java.util.UnknownFormatFlagsException: void <init>(java.lang.String)>
<org.apache.http.conn.ConnectionPoolTimeoutException: void <init>()>
<org.apache.http.conn.ConnectionPoolTimeoutException: void <init>(java.lang.String)>
<java.lang.NoSuchMethodError: void <init>(java.lang.String)>
<java.lang.NoSuchMethodError: void <init>()>
<android.hardware.Camera.ErrorCallback: void onError(int,android.hardware.Camera)>
<org.xml.sax.helpers.XMLFilterImpl: void parse(org.xml.sax.InputSource)>
<org.xml.sax.helpers.XMLFilterImpl: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.XMLFilterImpl: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xml.sax.helpers.XMLFilterImpl: void error(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.XMLFilterImpl: void <init>()>
<org.xml.sax.helpers.XMLFilterImpl: void startDocument()>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.DTDHandler getDTDHandler()>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setProperty(java.lang.String,java.lang.Object)>
<org.xml.sax.helpers.XMLFilterImpl: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.XMLReader getParent()>
<org.xml.sax.helpers.XMLFilterImpl: java.lang.Object getProperty(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setParent(org.xml.sax.XMLReader)>
<org.xml.sax.helpers.XMLFilterImpl: void skippedEntity(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setFeature(java.lang.String,boolean)>
<org.xml.sax.helpers.XMLFilterImpl: void characters(char[],int,int)>
<org.xml.sax.helpers.XMLFilterImpl: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void endPrefixMapping(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.EntityResolver getEntityResolver()>
<org.xml.sax.helpers.XMLFilterImpl: void fatalError(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.XMLFilterImpl: void parse(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xml.sax.helpers.XMLFilterImpl: void endDocument()>
<org.xml.sax.helpers.XMLFilterImpl: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void <init>(org.xml.sax.XMLReader)>
<org.xml.sax.helpers.XMLFilterImpl: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.XMLFilterImpl: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.ContentHandler getContentHandler()>
<org.xml.sax.helpers.XMLFilterImpl: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.XMLFilterImpl: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<org.xml.sax.helpers.XMLFilterImpl: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.helpers.XMLFilterImpl: boolean getFeature(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.helpers.XMLFilterImpl: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<android.app.ProgressDialog: void setMax(int)>
<android.app.ProgressDialog: void setSecondaryProgress(int)>
<android.app.ProgressDialog: void incrementSecondaryProgressBy(int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>
<android.app.ProgressDialog: void setIndeterminate(boolean)>
<android.app.ProgressDialog: int getSecondaryProgress()>
<android.app.ProgressDialog: void onStart()>
<android.app.ProgressDialog: void incrementProgressBy(int)>
<android.app.ProgressDialog: boolean isIndeterminate()>
<android.app.ProgressDialog: void setProgress(int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>
<android.app.ProgressDialog: int getProgress()>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface.OnCancelListener)>
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void <init>(android.content.Context)>
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setProgressStyle(int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>
<android.app.ProgressDialog: void <init>(android.content.Context,int)>
<android.app.ProgressDialog: int getMax()>
<java.io.IOException: void <init>()>
<java.io.IOException: void <init>(java.lang.String)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.io.InputStreamReader: void close()>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.io.InputStreamReader: java.lang.String getEncoding()>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
<java.io.InputStreamReader: int read(char[],int,int)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>
<android.graphics.drawable.ScaleDrawable: void <init>(android.graphics.drawable.Drawable,int,float,float)>
<android.graphics.drawable.ScaleDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.ScaleDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.ScaleDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ScaleDrawable: void setAlpha(int)>
<android.graphics.drawable.ScaleDrawable: int getOpacity()>
<android.graphics.drawable.ScaleDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ScaleDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.text.LoginFilter.PasswordFilterGMail: void <init>()>
<android.text.LoginFilter.PasswordFilterGMail: boolean isAllowed(char)>
<android.text.LoginFilter.PasswordFilterGMail: void <init>(boolean)>
<org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.ResponseServer: void <init>()>
<java.security.spec.DSAParameterSpec: java.math.BigInteger getP()>
<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()>
<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()>
<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.util.concurrent.atomic.AtomicLong: long longValue()>
<java.util.concurrent.atomic.AtomicLong: void set(long)>
<java.util.concurrent.atomic.AtomicLong: int intValue()>
<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>
<java.util.concurrent.atomic.AtomicLong: double doubleValue()>
<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()>
<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>
<java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<java.util.concurrent.atomic.AtomicLong: float floatValue()>
<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>
<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSet(long,long)>
<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>
<java.util.concurrent.atomic.AtomicLong: long get()>
<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
<java.util.concurrent.atomic.AtomicLong: void <init>()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllButNulAndAngleBracketsLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAmpLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getSpaceLegal()>
<android.net.UrlQuerySanitizer: void <init>(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllButNulLegal()>
<android.net.UrlQuerySanitizer: java.util.List getParameterList()>
<android.net.UrlQuerySanitizer: void parseUrl(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getUrlLegal()>
<android.net.UrlQuerySanitizer: void addSanitizedEntry(java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer: void setAllowUnregisteredParamaters(boolean)>
<android.net.UrlQuerySanitizer: int decodeHexDigit(char)>
<android.net.UrlQuerySanitizer: void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getEffectiveValueSanitizer(java.lang.String)>
<android.net.UrlQuerySanitizer: void registerParameters(java.lang.String[],android.net.UrlQuerySanitizer.ValueSanitizer)>
<android.net.UrlQuerySanitizer: java.lang.String unescape(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getUnregisteredParameterValueSanitizer()>
<android.net.UrlQuerySanitizer: void <init>()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllButWhitespaceLegal()>
<android.net.UrlQuerySanitizer: void parseQuery(java.lang.String)>
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()>
<android.net.UrlQuerySanitizer: boolean getPreferFirstRepeatedParameter()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getValueSanitizer(java.lang.String)>
<android.net.UrlQuerySanitizer: void registerParameter(java.lang.String,android.net.UrlQuerySanitizer.ValueSanitizer)>
<android.net.UrlQuerySanitizer: void setPreferFirstRepeatedParameter(boolean)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllIllegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAmpAndSpaceLegal()>
<android.net.UrlQuerySanitizer: java.lang.String getValue(java.lang.String)>
<android.net.UrlQuerySanitizer: boolean hasParameter(java.lang.String)>
<android.net.UrlQuerySanitizer: void clear()>
<android.net.UrlQuerySanitizer: boolean isHexDigit(char)>
<android.net.UrlQuerySanitizer: boolean getAllowUnregisteredParamaters()>
<android.net.UrlQuerySanitizer: void parseEntry(java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getUrlAndSpaceLegal()>
<java.util.jar.JarException: void <init>()>
<java.util.jar.JarException: void <init>(java.lang.String)>
<org.apache.http.impl.client.BasicCookieStore: boolean clearExpired(java.util.Date)>
<org.apache.http.impl.client.BasicCookieStore: void addCookies(org.apache.http.cookie.Cookie[])>
<org.apache.http.impl.client.BasicCookieStore: void addCookie(org.apache.http.cookie.Cookie)>
<org.apache.http.impl.client.BasicCookieStore: java.util.List getCookies()>
<org.apache.http.impl.client.BasicCookieStore: void <init>()>
<org.apache.http.impl.client.BasicCookieStore: void clear()>
<java.text.NumberFormat.Field: void <init>(java.lang.String)>
<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>
<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.HttpContext: java.lang.Object removeAttribute(java.lang.String)>
<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv4Address(java.lang.String)>
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv6StdAddress(java.lang.String)>
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv6Address(java.lang.String)>
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv6HexCompressedAddress(java.lang.String)>
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>
<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>
<android.provider.CallLog.Calls: void <init>()>
<org.apache.http.entity.SerializableEntity: void <init>(java.io.Serializable,boolean)>
<org.apache.http.entity.SerializableEntity: boolean isRepeatable()>
<org.apache.http.entity.SerializableEntity: boolean isStreaming()>
<org.apache.http.entity.SerializableEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.SerializableEntity: long getContentLength()>
<org.apache.http.entity.SerializableEntity: java.io.InputStream getContent()>
<android.app.KeyguardManager.OnKeyguardExitResult: void onKeyguardExitResult(boolean)>
<org.apache.http.cookie.CookiePathComparator: int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie)>
<org.apache.http.cookie.CookiePathComparator: void <init>()>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<android.media.Ringtone: void setStreamType(int)>
<android.media.Ringtone: int getStreamType()>
<android.media.Ringtone: boolean isPlaying()>
<android.media.Ringtone: void stop()>
<android.media.Ringtone: void play()>
<org.xml.sax.SAXNotSupportedException: void <init>()>
<org.xml.sax.SAXNotSupportedException: void <init>(java.lang.String)>
<android.test.AndroidTestRunner: void runTest(junit.framework.TestResult)>
<android.test.AndroidTestRunner: void setContext(android.content.Context)>
<android.test.AndroidTestRunner: void testEnded(java.lang.String)>
<android.test.AndroidTestRunner: void setTestClassName(java.lang.String,java.lang.String)>
<android.test.AndroidTestRunner: void testStarted(java.lang.String)>
<android.test.AndroidTestRunner: void runFailed(java.lang.String)>
<android.test.AndroidTestRunner: void runTest()>
<android.test.AndroidTestRunner: void setInstrumentaiton(android.app.Instrumentation)>
<android.test.AndroidTestRunner: java.util.List getTestCases()>
<android.test.AndroidTestRunner: junit.framework.TestResult getTestResult()>
<android.test.AndroidTestRunner: void <init>()>
<android.test.AndroidTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>
<android.test.AndroidTestRunner: java.lang.String getTestClassName()>
<android.test.AndroidTestRunner: void setTest(junit.framework.Test)>
<android.test.AndroidTestRunner: junit.framework.TestResult createTestResult()>
<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>
<android.test.AndroidTestRunner: void clearTestListeners()>
<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>
<android.content.pm.PackageManager: void <init>()>
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>
<android.content.pm.PackageManager: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>
<android.content.pm.PackageManager: void removePermission(java.lang.String)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>
<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>
<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<android.content.pm.PackageManager: void installPackage(android.net.Uri)>
<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>
<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>
<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>
<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>
<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>
<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<java.util.ListIterator: int previousIndex()>
<java.util.ListIterator: E next()>
<java.util.ListIterator: void remove()>
<java.util.ListIterator: boolean hasNext()>
<java.util.ListIterator: E previous()>
<java.util.ListIterator: int nextIndex()>
<java.util.ListIterator: void set(E)>
<java.util.ListIterator: void add(E)>
<java.util.ListIterator: boolean hasPrevious()>
<java.util.Date: void setSeconds(int)>
<java.util.Date: int getMinutes()>
<java.util.Date: int getDay()>
<java.util.Date: boolean after(java.util.Date)>
<java.util.Date: void setYear(int)>
<java.util.Date: long getTime()>
<java.util.Date: boolean before(java.util.Date)>
<java.util.Date: int getYear()>
<java.util.Date: int getDate()>
<java.util.Date: void <init>(int,int,int,int,int,int)>
<java.util.Date: void setDate(int)>
<java.util.Date: void setTime(long)>
<java.util.Date: int compareTo(java.util.Date)>
<java.util.Date: void setHours(int)>
<java.util.Date: java.lang.String toGMTString()>
<java.util.Date: void <init>(int,int,int,int,int)>
<java.util.Date: void <init>(java.lang.String)>
<java.util.Date: void setMonth(int)>
<java.util.Date: void setMinutes(int)>
<java.util.Date: void <init>()>
<java.util.Date: long UTC(int,int,int,int,int,int)>
<java.util.Date: java.lang.Object clone()>
<java.util.Date: int getSeconds()>
<java.util.Date: int getTimezoneOffset()>
<java.util.Date: java.lang.String toLocaleString()>
<java.util.Date: int getMonth()>
<java.util.Date: void <init>(long)>
<java.util.Date: void <init>(int,int,int)>
<java.util.Date: long parse(java.lang.String)>
<java.util.Date: int getHours()>
<java.io.ObjectInputStream: int read()>
<java.io.ObjectInputStream: java.io.ObjectInputStream.GetField readFields()>
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>
<java.io.ObjectInputStream: long readLong()>
<java.io.ObjectInputStream: char readChar()>
<java.io.ObjectInputStream: double readDouble()>
<java.io.ObjectInputStream: java.lang.String readUTF()>
<java.io.ObjectInputStream: java.lang.Object readUnshared()>
<java.io.ObjectInputStream: void <init>()>
<java.io.ObjectInputStream: void registerValidation(java.io.ObjectInputValidation,int)>
<java.io.ObjectInputStream: boolean enableResolveObject(boolean)>
<java.io.ObjectInputStream: int skipBytes(int)>
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: void readFully(byte[])>
<java.io.ObjectInputStream: short readShort()>
<java.io.ObjectInputStream: void defaultReadObject()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>
<java.io.ObjectInputStream: int readInt()>
<java.io.ObjectInputStream: void readStreamHeader()>
<java.io.ObjectInputStream: boolean readBoolean()>
<java.io.ObjectInputStream: int readUnsignedByte()>
<java.io.ObjectInputStream: float readFloat()>
<java.io.ObjectInputStream: void readFully(byte[],int,int)>
<java.io.ObjectInputStream: int readUnsignedShort()>
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>
<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>
<java.io.ObjectInputStream: java.lang.String readLine()>
<java.io.ObjectInputStream: byte readByte()>
<java.io.ObjectInputStream: java.lang.Object readObject()>
<java.util.Random: void setSeed(long)>
<java.util.Random: int nextInt(int)>
<java.util.Random: void nextBytes(byte[])>
<java.util.Random: int nextInt()>
<java.util.Random: double nextDouble()>
<java.util.Random: float nextFloat()>
<java.util.Random: void <init>()>
<java.util.Random: long nextLong()>
<java.util.Random: double nextGaussian()>
<java.util.Random: int next(int)>
<java.util.Random: void <init>(long)>
<java.util.Random: boolean nextBoolean()>
<android.graphics.Path.Direction: android.graphics.Path.Direction[] values()>
<android.graphics.Path.Direction: android.graphics.Path.Direction valueOf(java.lang.String)>
<org.apache.http.Header: java.lang.String getName()>
<org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>
<java.nio.channels.FileLock: boolean isValid()>
<java.nio.channels.FileLock: void release()>
<java.nio.channels.FileLock: boolean isShared()>
<java.nio.channels.FileLock: boolean overlaps(long,long)>
<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>
<java.nio.channels.FileLock: long size()>
<java.nio.channels.FileLock: long position()>
<java.nio.channels.FileLock: java.lang.String toString()>
<android.app.DatePickerDialog: void <init>(android.content.Context,android.app.DatePickerDialog.OnDateSetListener,int,int,int)>
<android.app.DatePickerDialog: void <init>(android.content.Context,int,android.app.DatePickerDialog.OnDateSetListener,int,int,int)>
<android.app.DatePickerDialog: void onClick(android.content.DialogInterface,int)>
<android.app.DatePickerDialog: void onDateChanged(android.widget.DatePicker,int,int,int)>
<android.app.DatePickerDialog: void updateDate(int,int,int)>
<org.xml.sax.helpers.LocatorImpl: java.lang.String getPublicId()>
<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)>
<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)>
<org.xml.sax.helpers.LocatorImpl: int getLineNumber()>
<org.xml.sax.helpers.LocatorImpl: void <init>(org.xml.sax.Locator)>
<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)>
<org.xml.sax.helpers.LocatorImpl: java.lang.String getSystemId()>
<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>
<org.xml.sax.helpers.LocatorImpl: void <init>()>
<org.xml.sax.helpers.LocatorImpl: int getColumnNumber()>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: void cancelSync(android.net.Uri)>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>
<android.content.ContentResolver: void <init>(android.content.Context)>
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()>
<android.view.animation.GridLayoutAnimationController: void setDirection(int)>
<android.view.animation.GridLayoutAnimationController: int getDirection()>
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()>
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation,float,float)>
<android.view.animation.GridLayoutAnimationController: float getRowDelay()>
<android.view.animation.GridLayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)>
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation)>
<java.util.logging.SocketHandler: void <init>()>
<java.util.logging.SocketHandler: void <init>(java.lang.String,int)>
<java.util.zip.ZipEntry: java.lang.String getComment()>
<java.util.zip.ZipEntry: void <init>(java.lang.String)>
<java.util.zip.ZipEntry: void setCrc(long)>
<java.util.zip.ZipEntry: void setMethod(int)>
<java.util.zip.ZipEntry: void setTime(long)>
<java.util.zip.ZipEntry: long getCrc()>
<java.util.zip.ZipEntry: long getCompressedSize()>
<java.util.zip.ZipEntry: void setSize(long)>
<java.util.zip.ZipEntry: void setCompressedSize(long)>
<java.util.zip.ZipEntry: boolean isDirectory()>
<java.util.zip.ZipEntry: void setExtra(byte[])>
<java.util.zip.ZipEntry: java.lang.Object clone()>
<java.util.zip.ZipEntry: java.lang.String getName()>
<java.util.zip.ZipEntry: byte[] getExtra()>
<java.util.zip.ZipEntry: void setComment(java.lang.String)>
<java.util.zip.ZipEntry: int getMethod()>
<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>
<java.util.zip.ZipEntry: long getTime()>
<java.util.zip.ZipEntry: long getSize()>
<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()>
<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>
<org.apache.http.util.ByteArrayBuffer: void append(int)>
<org.apache.http.util.ByteArrayBuffer: void <init>(int)>
<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>
<org.apache.http.util.ByteArrayBuffer: void clear()>
<org.apache.http.util.ByteArrayBuffer: int capacity()>
<org.apache.http.util.ByteArrayBuffer: int length()>
<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.http.util.ByteArrayBuffer: void setLength(int)>
<org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>
<org.apache.http.util.ByteArrayBuffer: boolean isFull()>
<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)>
<android.widget.TableLayout: void setShrinkAllColumns(boolean)>
<android.widget.TableLayout: boolean isColumnCollapsed(int)>
<android.widget.TableLayout: boolean isShrinkAllColumns()>
<android.widget.TableLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout: void setColumnStretchable(int,boolean)>
<android.widget.TableLayout: boolean isColumnShrinkable(int)>
<android.widget.TableLayout: boolean isColumnStretchable(int)>
<android.widget.TableLayout: boolean isStretchAllColumns()>
<android.widget.TableLayout: void setStretchAllColumns(boolean)>
<android.widget.TableLayout: void <init>(android.content.Context)>
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)>
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)>
<java.util.concurrent.SynchronousQueue: E peek()>
<java.util.concurrent.SynchronousQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.SynchronousQueue: E take()>
<java.util.concurrent.SynchronousQueue: void <init>()>
<java.util.concurrent.SynchronousQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.SynchronousQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.SynchronousQueue: java.util.Iterator iterator()>
<java.util.concurrent.SynchronousQueue: E poll()>
<java.util.concurrent.SynchronousQueue: int remainingCapacity()>
<java.util.concurrent.SynchronousQueue: int size()>
<java.util.concurrent.SynchronousQueue: boolean offer(E)>
<java.util.concurrent.SynchronousQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.SynchronousQueue: void put(E)>
<java.util.concurrent.SynchronousQueue: void <init>(boolean)>
<java.util.prefs.PreferencesFactory: java.util.prefs.Preferences systemRoot()>
<java.util.prefs.PreferencesFactory: java.util.prefs.Preferences userRoot()>
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>
<android.util.DisplayMetrics: void setToDefaults()>
<android.util.DisplayMetrics: void <init>()>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<android.widget.AbsListView.OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>
<android.widget.AbsListView.OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>
<java.lang.ref.Reference: boolean enqueue()>
<java.lang.ref.Reference: void clear()>
<java.lang.ref.Reference: T get()>
<java.lang.ref.Reference: boolean isEnqueued()>
<android.app.AliasActivity: void <init>()>
<android.text.InputFilter.AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.InputFilter.AllCaps: void <init>()>
<java.io.CharConversionException: void <init>(java.lang.String)>
<java.io.CharConversionException: void <init>()>
<java.text.AttributedCharacterIterator: int getRunStart(java.util.Set)>
<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator.Attribute)>
<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>
<java.text.AttributedCharacterIterator: int getRunLimit()>
<java.text.AttributedCharacterIterator: int getRunStart()>
<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator.Attribute)>
<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>
<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator.Attribute)>
<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>
<java.util.jar.Pack200: java.util.jar.Pack200.Unpacker newUnpacker()>
<java.util.jar.Pack200: java.util.jar.Pack200.Packer newPacker()>
<org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)>
<org.apache.http.conn.scheme.SocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<java.io.ObjectInput: int available()>
<java.io.ObjectInput: java.lang.Object readObject()>
<java.io.ObjectInput: int read(byte[],int,int)>
<java.io.ObjectInput: int read()>
<java.io.ObjectInput: long skip(long)>
<java.io.ObjectInput: int read(byte[])>
<java.io.ObjectInput: void close()>
<android.text.method.DigitsKeyListener: void <init>()>
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()>
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)>
<org.apache.http.HttpVersion: void <init>(int,int)>
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<android.webkit.WebViewDatabase: boolean hasHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: void clearFormData()>
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
<android.webkit.WebViewDatabase: boolean hasFormData()>
<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler: void <init>()>
<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.message.BasicHeaderElementIterator: void remove()>
<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser)>
<org.apache.http.message.BasicHeaderElementIterator: boolean hasNext()>
<org.apache.http.message.BasicHeaderElementIterator: java.lang.Object next()>
<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement nextElement()>
<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator)>
<android.hardware.Camera.Size: void <init>(int,int)>
<android.text.style.RasterizerSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.RasterizerSpan: android.graphics.Rasterizer getRasterizer()>
<android.text.style.RasterizerSpan: void <init>(android.graphics.Rasterizer)>
<android.view.OrientationListener: void disable()>
<android.view.OrientationListener: void enable()>
<android.view.OrientationListener: void onSensorChanged(int,float[])>
<android.view.OrientationListener: void <init>(android.content.Context)>
<android.view.OrientationListener: void onOrientationChanged(int)>
<android.view.OrientationListener: void onAccuracyChanged(int,int)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getCapacity()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getEntryCount()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: boolean hasThread()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.impl.conn.tsccm.WaitingThread nextThread()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void dropEntry()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: boolean isUnused()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute getRoute()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void <init>(org.apache.http.conn.routing.HttpRoute,int)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getMaxEntries()>
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object)>
<android.provider.Contacts.Intents.UI: void <init>()>
<java.util.Stack: int search(java.lang.Object)>
<java.util.Stack: E push(E)>
<java.util.Stack: boolean empty()>
<java.util.Stack: E pop()>
<java.util.Stack: void <init>()>
<java.util.Stack: E peek()>
<android.media.AudioManager: void loadSoundEffects()>
<android.media.AudioManager: int getMode()>
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>
<android.media.AudioManager: boolean isBluetoothScoOn()>
<android.media.AudioManager: void setRingerMode(int)>
<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>
<android.media.AudioManager: void setStreamSolo(int,boolean)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: boolean isMicrophoneMute()>
<android.media.AudioManager: boolean isSpeakerphoneOn()>
<android.media.AudioManager: void playSoundEffect(int)>
<android.media.AudioManager: void adjustVolume(int,int)>
<android.media.AudioManager: int getRingerMode()>
<android.media.AudioManager: void setVibrateSetting(int,int)>
<android.media.AudioManager: int getRouting(int)>
<android.media.AudioManager: boolean shouldVibrate(int)>
<android.media.AudioManager: void setStreamMute(int,boolean)>
<android.media.AudioManager: void setMode(int)>
<android.media.AudioManager: int getStreamVolume(int)>
<android.media.AudioManager: void setStreamVolume(int,int,int)>
<android.media.AudioManager: int getStreamMaxVolume(int)>
<android.media.AudioManager: void setRouting(int,int,int)>
<android.media.AudioManager: boolean isMusicActive()>
<android.media.AudioManager: void unloadSoundEffects()>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: int getVibrateSetting(int)>
<java.util.concurrent.ConcurrentMap: V replace(K,V)>
<java.util.concurrent.ConcurrentMap: boolean replace(K,V,V)>
<java.util.concurrent.ConcurrentMap: V putIfAbsent(K,V)>
<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>
<java.util.logging.Level: java.lang.String getResourceBundleName()>
<java.util.logging.Level: void <init>(java.lang.String,int)>
<java.util.logging.Level: java.lang.String getName()>
<java.util.logging.Level: int intValue()>
<java.util.logging.Level: java.lang.String toString()>
<java.util.logging.Level: java.lang.String getLocalizedName()>
<java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>
<java.util.logging.Level: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.http.conn.ClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()>
<org.apache.http.conn.ClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>
<junit.runner.TestSuiteLoader: java.lang.Class load(java.lang.String)>
<junit.runner.TestSuiteLoader: java.lang.Class reload(java.lang.Class)>
<android.app.DatePickerDialog.OnDateSetListener: void onDateSet(android.widget.DatePicker,int,int,int)>
<android.graphics.ComposePathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
<java.lang.annotation.IncompleteAnnotationException: void <init>(java.lang.Class,java.lang.String)>
<java.lang.annotation.IncompleteAnnotationException: java.lang.String elementName()>
<java.lang.annotation.IncompleteAnnotationException: java.lang.Class annotationType()>
<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>
<java.security.spec.PKCS8EncodedKeySpec: java.lang.String getFormat()>
<android.graphics.Shader.TileMode: android.graphics.Shader.TileMode[] values()>
<android.graphics.Shader.TileMode: android.graphics.Shader.TileMode valueOf(java.lang.String)>
<java.util.concurrent.locks.Condition: void await()>
<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.Condition: long awaitNanos(long)>
<java.util.concurrent.locks.Condition: void signal()>
<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>
<java.util.concurrent.locks.Condition: void signalAll()>
<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>
<org.apache.http.client.methods.HttpPut: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpPut: void <init>()>
<org.apache.http.client.methods.HttpPut: void <init>(java.net.URI)>
<org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>
<javax.security.cert.CertificateException: void <init>(java.lang.String)>
<javax.security.cert.CertificateException: void <init>()>
<android.widget.Filter.FilterResults: void <init>()>
<android.database.MatrixCursor: void addRow(java.lang.Iterable)>
<android.database.MatrixCursor: void <init>(java.lang.String[])>
<android.database.MatrixCursor: int getCount()>
<android.database.MatrixCursor: float getFloat(int)>
<android.database.MatrixCursor: void addRow(java.lang.Object[])>
<android.database.MatrixCursor: int getInt(int)>
<android.database.MatrixCursor: short getShort(int)>
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>
<android.database.MatrixCursor: long getLong(int)>
<android.database.MatrixCursor: android.database.MatrixCursor.RowBuilder newRow()>
<android.database.MatrixCursor: void <init>(java.lang.String[],int)>
<android.database.MatrixCursor: double getDouble(int)>
<android.database.MatrixCursor: java.lang.String getString(int)>
<android.database.MatrixCursor: boolean isNull(int)>
<android.view.animation.LayoutAnimationController.AnimationParameters: void <init>()>
<android.net.LocalSocketAddress.Namespace: android.net.LocalSocketAddress.Namespace[] values()>
<android.net.LocalSocketAddress.Namespace: android.net.LocalSocketAddress.Namespace valueOf(java.lang.String)>
<java.util.Comparator: boolean equals(java.lang.Object)>
<java.util.Comparator: int compare(T,T)>
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>
<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>
<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.FileChannel: long size()>
<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>
<java.nio.channels.FileChannel: void <init>()>
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>
<java.nio.channels.FileChannel: void force(boolean)>
<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>
<java.nio.channels.FileChannel: long position()>
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel.MapMode,long,long)>
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>
<android.content.res.Resources: int getInteger(int)>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>
<android.content.res.Resources: int getDimensionPixelOffset(int)>
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>
<android.content.res.Resources: float getDimension(int)>
<android.content.res.Resources: int[] getIntArray(int)>
<android.content.res.Resources: java.lang.String getResourceName(int)>
<android.content.res.Resources: java.lang.String getString(int)>
<android.content.res.Resources: void finishPreloading()>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.Resources: java.lang.String getResourceTypeName(int)>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.content.res.Resources: int getColor(int)>
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.Resources: java.lang.String[] getStringArray(int)>
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object...)>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>
<android.content.res.Resources: android.content.res.Resources.Theme newTheme()>
<android.content.res.Resources: int getDimensionPixelSize(int)>
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object...)>
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int)>
<android.content.res.Resources: java.lang.String getResourceEntryName(int)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>
<android.content.res.Resources: void flushLayoutCache()>
<android.content.res.Resources: android.graphics.Movie getMovie(int)>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<android.content.res.Resources: java.lang.String getQuantityString(int,int)>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.content.res.Resources: java.lang.String getResourcePackageName(int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.os.ParcelFileDescriptor: void close()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.os.ParcelFileDescriptor: int describeContents()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<java.security.SignedObject: void <init>(java.io.Serializable,java.security.PrivateKey,java.security.Signature)>
<java.security.SignedObject: java.lang.Object getObject()>
<java.security.SignedObject: byte[] getSignature()>
<java.security.SignedObject: boolean verify(java.security.PublicKey,java.security.Signature)>
<java.security.SignedObject: java.lang.String getAlgorithm()>
<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>
<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()>
<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()>
<java.util.AbstractQueue: E remove()>
<java.util.AbstractQueue: void <init>()>
<java.util.AbstractQueue: E element()>
<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader.TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,int,int,android.graphics.Shader.TileMode)>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>
<java.nio.channels.spi.SelectorProvider: void <init>()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>
<java.io.DataOutputStream: void writeChars(java.lang.String)>
<java.io.DataOutputStream: void writeDouble(double)>
<java.io.DataOutputStream: void writeLong(long)>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>
<java.io.DataOutputStream: void writeFloat(float)>
<java.io.DataOutputStream: void writeInt(int)>
<java.io.DataOutputStream: void writeShort(int)>
<java.io.DataOutputStream: void writeUTF(java.lang.String)>
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
<java.io.DataOutputStream: void writeByte(int)>
<java.io.DataOutputStream: void writeBoolean(boolean)>
<java.io.DataOutputStream: void writeChar(int)>
<java.io.DataOutputStream: int size()>
<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>
<java.io.FilePermission: boolean equals(java.lang.Object)>
<java.io.FilePermission: boolean implies(java.security.Permission)>
<java.io.FilePermission: java.lang.String getActions()>
<java.io.FilePermission: int hashCode()>
<android.text.style.ForegroundColorSpan: void <init>(int)>
<android.text.style.ForegroundColorSpan: int getForegroundColor()>
<android.text.style.ForegroundColorSpan: void updateDrawState(android.text.TextPaint)>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor,int)>
<org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int)>
<org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>
<org.apache.http.protocol.BasicHttpProcessor: void <init>()>
<org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int)>
<org.apache.http.protocol.BasicHttpProcessor: void removeRequestInterceptorByClass(java.lang.Class)>
<org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)>
<org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>
<org.apache.http.protocol.BasicHttpProcessor: void removeResponseInterceptorByClass(java.lang.Class)>
<org.apache.http.protocol.BasicHttpProcessor: java.lang.Object clone()>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)>
<org.apache.http.protocol.BasicHttpProcessor: void setInterceptors(java.util.List)>
<org.apache.http.protocol.BasicHttpProcessor: void clearInterceptors()>
<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()>
<org.apache.http.protocol.BasicHttpProcessor: void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)>
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor,int)>
<org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>
<org.apache.http.protocol.BasicHttpProcessor: void clearResponseInterceptors()>
<org.apache.http.protocol.BasicHttpProcessor: void clearRequestInterceptors()>
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.protocol.BasicHttpProcessor copy()>
<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()>
<java.io.Externalizable: void writeExternal(java.io.ObjectOutput)>
<java.io.Externalizable: void readExternal(java.io.ObjectInput)>
<java.text.CharacterIterator: char setIndex(int)>
<java.text.CharacterIterator: java.lang.Object clone()>
<java.text.CharacterIterator: char next()>
<java.text.CharacterIterator: char current()>
<java.text.CharacterIterator: int getIndex()>
<java.text.CharacterIterator: int getEndIndex()>
<java.text.CharacterIterator: char previous()>
<java.text.CharacterIterator: int getBeginIndex()>
<java.text.CharacterIterator: char first()>
<java.text.CharacterIterator: char last()>
<org.apache.http.entity.EntityTemplate: boolean isRepeatable()>
<org.apache.http.entity.EntityTemplate: boolean isStreaming()>
<org.apache.http.entity.EntityTemplate: java.io.InputStream getContent()>
<org.apache.http.entity.EntityTemplate: void <init>(org.apache.http.entity.ContentProducer)>
<org.apache.http.entity.EntityTemplate: long getContentLength()>
<org.apache.http.entity.EntityTemplate: void writeTo(java.io.OutputStream)>
<org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)>
<org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<javax.crypto.Mac: void <init>(javax.crypto.MacSpi,java.security.Provider,java.lang.String)>
<javax.crypto.Mac: java.lang.Object clone()>
<javax.crypto.Mac: void update(byte[],int,int)>
<javax.crypto.Mac: void init(java.security.Key)>
<javax.crypto.Mac: void update(byte[])>
<javax.crypto.Mac: java.security.Provider getProvider()>
<javax.crypto.Mac: java.lang.String getAlgorithm()>
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>
<javax.crypto.Mac: int getMacLength()>
<javax.crypto.Mac: byte[] doFinal()>
<javax.crypto.Mac: void update(java.nio.ByteBuffer)>
<javax.crypto.Mac: void reset()>
<javax.crypto.Mac: byte[] doFinal(byte[])>
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<javax.crypto.Mac: void update(byte)>
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.Mac: void doFinal(byte[],int)>
<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<java.security.PrivilegedExceptionAction: T run()>
<android.graphics.Camera: void rotateY(float)>
<android.graphics.Camera: void translate(float,float,float)>
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>
<android.graphics.Camera: void rotateX(float)>
<android.graphics.Camera: void <init>()>
<android.graphics.Camera: void restore()>
<android.graphics.Camera: void save()>
<android.graphics.Camera: void rotateZ(float)>
<android.graphics.Camera: float dotWithNormal(float,float,float)>
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>
<android.text.style.LineBackgroundSpan: void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)>
<android.preference.PreferenceManager.OnActivityStopListener: void onActivityStop()>
<java.security.cert.PKIXBuilderParameters: void <init>(java.util.Set,java.security.cert.CertSelector)>
<java.security.cert.PKIXBuilderParameters: int getMaxPathLength()>
<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)>
<java.security.cert.PKIXBuilderParameters: void <init>(java.security.KeyStore,java.security.cert.CertSelector)>
<org.xml.sax.ext.Attributes2: boolean isSpecified(int)>
<org.xml.sax.ext.Attributes2: boolean isSpecified(java.lang.String)>
<org.xml.sax.ext.Attributes2: boolean isDeclared(java.lang.String)>
<org.xml.sax.ext.Attributes2: boolean isDeclared(int)>
<org.xml.sax.ext.Attributes2: boolean isDeclared(java.lang.String,java.lang.String)>
<org.xml.sax.ext.Attributes2: boolean isSpecified(java.lang.String,java.lang.String)>
<java.net.CacheRequest: void <init>()>
<java.net.CacheRequest: java.io.OutputStream getBody()>
<java.net.CacheRequest: void abort()>
<android.text.TextUtils.StringSplitter: void setString(java.lang.String)>
<java.sql.SQLInput: java.sql.Timestamp readTimestamp()>
<java.sql.SQLInput: java.sql.Array readArray()>
<java.sql.SQLInput: byte readByte()>
<java.sql.SQLInput: java.lang.Object readObject()>
<java.sql.SQLInput: java.sql.Blob readBlob()>
<java.sql.SQLInput: java.sql.Date readDate()>
<java.sql.SQLInput: java.math.BigDecimal readBigDecimal()>
<java.sql.SQLInput: boolean readBoolean()>
<java.sql.SQLInput: java.io.Reader readCharacterStream()>
<java.sql.SQLInput: int readInt()>
<java.sql.SQLInput: java.lang.String readString()>
<java.sql.SQLInput: java.io.InputStream readBinaryStream()>
<java.sql.SQLInput: float readFloat()>
<java.sql.SQLInput: byte[] readBytes()>
<java.sql.SQLInput: double readDouble()>
<java.sql.SQLInput: java.sql.Ref readRef()>
<java.sql.SQLInput: java.net.URL readURL()>
<java.sql.SQLInput: java.sql.Time readTime()>
<java.sql.SQLInput: short readShort()>
<java.sql.SQLInput: java.io.InputStream readAsciiStream()>
<java.sql.SQLInput: java.sql.Clob readClob()>
<java.sql.SQLInput: long readLong()>
<java.sql.SQLInput: boolean wasNull()>
<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff.Mode)>
<android.graphics.Xfermode: void <init>()>
<org.apache.http.client.protocol.RequestProxyAuthentication: void <init>()>
<org.apache.http.client.protocol.RequestProxyAuthentication: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.HttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>
<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>
<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.http.HttpServerConnection: void flush()>
<org.apache.http.HttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>
<android.database.sqlite.SQLiteFullException: void <init>()>
<android.database.sqlite.SQLiteFullException: void <init>(java.lang.String)>
<org.xml.sax.AttributeList: java.lang.String getName(int)>
<org.xml.sax.AttributeList: java.lang.String getType(java.lang.String)>
<org.xml.sax.AttributeList: java.lang.String getValue(java.lang.String)>
<org.xml.sax.AttributeList: java.lang.String getValue(int)>
<org.xml.sax.AttributeList: java.lang.String getType(int)>
<org.xml.sax.AttributeList: int getLength()>
<org.apache.http.message.BasicHeaderValueParser: void <init>()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser)>
<android.graphics.RegionIterator: void <init>(android.graphics.Region)>
<android.graphics.RegionIterator: boolean next(android.graphics.Rect)>
<java.text.SimpleDateFormat: void applyLocalizedPattern(java.lang.String)>
<java.text.SimpleDateFormat: void <init>()>
<java.text.SimpleDateFormat: java.lang.String toPattern()>
<java.text.SimpleDateFormat: void <init>(java.lang.String)>
<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.text.DateFormatSymbols)>
<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<java.text.SimpleDateFormat: void setDateFormatSymbols(java.text.DateFormatSymbols)>
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.SimpleDateFormat: java.lang.String toLocalizedPattern()>
<java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()>
<java.text.SimpleDateFormat: java.util.Date get2DigitYearStart()>
<java.security.acl.Acl: boolean removeEntry(java.security.Principal,java.security.acl.AclEntry)>
<java.security.acl.Acl: java.lang.String getName()>
<java.security.acl.Acl: boolean addEntry(java.security.Principal,java.security.acl.AclEntry)>
<java.security.acl.Acl: void setName(java.security.Principal,java.lang.String)>
<java.security.acl.Acl: boolean checkPermission(java.security.Principal,java.security.acl.Permission)>
<java.security.acl.Acl: java.lang.String toString()>
<java.security.acl.Acl: java.util.Enumeration getPermissions(java.security.Principal)>
<java.security.acl.Acl: java.util.Enumeration entries()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedWriterThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock writeLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLocked()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.Thread getOwner()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThread(java.lang.Thread)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedReaderThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isFair()>
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>
<android.text.TextUtils.TruncateAt: android.text.TextUtils.TruncateAt[] values()>
<android.text.TextUtils.TruncateAt: android.text.TextUtils.TruncateAt valueOf(java.lang.String)>
<org.apache.http.io.SessionInputBuffer: int read(byte[])>
<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.io.SessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>
<org.apache.http.io.SessionInputBuffer: int read()>
<org.apache.http.io.SessionInputBuffer: java.lang.String readLine()>
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>
<android.graphics.Movie: int duration()>
<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>
<android.graphics.Movie: boolean isOpaque()>
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>
<android.graphics.Movie: int width()>
<android.graphics.Movie: boolean setTime(int)>
<android.graphics.Movie: int height()>
<android.util.DebugUtils: boolean isObjectSelected(java.lang.Object)>
<android.util.DebugUtils: void <init>()>
<android.R.layout: void <init>()>
<android.graphics.drawable.GradientDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.GradientDrawable: void setAlpha(int)>
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.GradientDrawable: void <init>()>
<android.graphics.drawable.GradientDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)>
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>
<android.graphics.drawable.GradientDrawable: void setShape(int)>
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable.Orientation,int[])>
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)>
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)>
<android.graphics.drawable.GradientDrawable: void setSize(int,int)>
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)>
<android.graphics.drawable.GradientDrawable: int getOpacity()>
<android.graphics.drawable.GradientDrawable: void setColor(int)>
<android.graphics.drawable.GradientDrawable: void setGradientType(int)>
<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>
<java.lang.NegativeArraySizeException: void <init>()>
<android.view.ViewTreeObserver.OnTouchModeChangeListener: void onTouchModeChanged(boolean)>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.RequestExpectContinue: void <init>()>
<com.android.internal.util.Predicate: boolean apply(T)>
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>
<java.io.BufferedWriter: void newLine()>
<java.io.BufferedWriter: void flush()>
<java.io.BufferedWriter: void close()>
<java.io.BufferedWriter: void write(char[],int,int)>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
<android.database.sqlite.SQLiteDoneException: void <init>(java.lang.String)>
<android.database.sqlite.SQLiteDoneException: void <init>()>
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
<java.io.FileOutputStream: void <init>(java.lang.String)>
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>
<java.io.FileOutputStream: void write(int)>
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>
<java.io.FileOutputStream: void <init>(java.io.File)>
<android.preference.Preference.BaseSavedState: void <init>(android.os.Parcelable)>
<android.preference.Preference.BaseSavedState: void <init>(android.os.Parcel)>
<org.apache.http.TokenIterator: java.lang.String nextToken()>
<org.apache.http.TokenIterator: boolean hasNext()>
<java.io.File: java.lang.String getParent()>
<java.io.File: java.io.File getAbsoluteFile()>
<java.io.File: java.net.URL toURL()>
<java.io.File: boolean isAbsolute()>
<java.io.File: boolean setLastModified(long)>
<java.io.File: boolean renameTo(java.io.File)>
<java.io.File: boolean isHidden()>
<java.io.File: boolean createNewFile()>
<java.io.File: java.lang.String[] list()>
<java.io.File: boolean isDirectory()>
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
<java.io.File: void <init>(java.net.URI)>
<java.io.File: long lastModified()>
<java.io.File: long length()>
<java.io.File: java.net.URI toURI()>
<java.io.File: boolean delete()>
<java.io.File: java.io.File[] listFiles()>
<java.io.File: java.io.File[] listRoots()>
<java.io.File: boolean setReadOnly()>
<java.io.File: int compareTo(java.io.File)>
<java.io.File: java.lang.String getName()>
<java.io.File: void deleteOnExit()>
<java.io.File: boolean canWrite()>
<java.io.File: java.io.File getCanonicalFile()>
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>
<java.io.File: java.lang.String getAbsolutePath()>
<java.io.File: java.lang.String getPath()>
<java.io.File: void <init>(java.lang.String,java.lang.String)>
<java.io.File: boolean canRead()>
<java.io.File: boolean mkdir()>
<java.io.File: java.lang.String getCanonicalPath()>
<java.io.File: java.io.File getParentFile()>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
<java.io.File: boolean isFile()>
<java.io.File: void <init>(java.lang.String)>
<java.io.File: boolean mkdirs()>
<java.io.File: void <init>(java.io.File,java.lang.String)>
<java.io.File: boolean exists()>
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
<android.view.LayoutInflater.Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<javax.crypto.MacSpi: java.lang.Object clone()>
<javax.crypto.MacSpi: void engineReset()>
<javax.crypto.MacSpi: void engineUpdate(byte)>
<javax.crypto.MacSpi: void engineUpdate(java.nio.ByteBuffer)>
<javax.crypto.MacSpi: int engineGetMacLength()>
<javax.crypto.MacSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>
<javax.crypto.MacSpi: void <init>()>
<javax.crypto.MacSpi: byte[] engineDoFinal()>
<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>
<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>
<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>
<org.apache.http.util.ExceptionUtils: void initCause(java.lang.Throwable,java.lang.Throwable)>
<java.lang.OutOfMemoryError: void <init>(java.lang.String)>
<java.lang.OutOfMemoryError: void <init>()>
<java.net.SocketImpl: boolean supportsUrgentData()>
<java.net.SocketImpl: java.lang.Object getOption(int)>
<java.net.SocketImpl: int available()>
<java.net.SocketImpl: void create(boolean)>
<java.net.SocketImpl: void setOption(int,java.lang.Object)>
<java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<java.net.SocketImpl: void bind(java.net.InetAddress,int)>
<java.net.SocketImpl: void connect(java.net.InetAddress,int)>
<java.net.SocketImpl: void listen(int)>
<java.net.SocketImpl: int getPort()>
<java.net.SocketImpl: void shutdownInput()>
<java.net.SocketImpl: void accept(java.net.SocketImpl)>
<java.net.SocketImpl: void sendUrgentData(int)>
<java.net.SocketImpl: void connect(java.lang.String,int)>
<java.net.SocketImpl: int getLocalPort()>
<java.net.SocketImpl: void shutdownOutput()>
<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>
<java.net.SocketImpl: java.io.InputStream getInputStream()>
<java.net.SocketImpl: java.io.OutputStream getOutputStream()>
<java.net.SocketImpl: void close()>
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.SocketImpl: void <init>()>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
<java.lang.IllegalStateException: void <init>()>
<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.KeyPairGeneratorSpi: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.security.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
<java.security.KeyPairGeneratorSpi: void <init>()>
<java.security.KeyPairGeneratorSpi: void initialize(int,java.security.SecureRandom)>
<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>
<org.apache.http.MalformedChunkCodingException: void <init>()>
<android.hardware.SensorListener: void onSensorChanged(int,float[])>
<android.hardware.SensorListener: void onAccuracyChanged(int,int)>
<android.net.LocalServerSocket: android.net.LocalSocket accept()>
<android.net.LocalServerSocket: void close()>
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.LocalServerSocket: void <init>(java.io.FileDescriptor)>
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.net.LocalServerSocket: void <init>(java.lang.String)>
<android.webkit.CacheManager: boolean endCacheTransaction()>
<android.webkit.CacheManager: void saveCacheFile(java.lang.String,android.webkit.CacheManager.CacheResult)>
<android.webkit.CacheManager: void <init>()>
<android.webkit.CacheManager: boolean cacheDisabled()>
<android.webkit.CacheManager: boolean startCacheTransaction()>
<android.webkit.CacheManager: android.webkit.CacheManager.CacheResult getCacheFile(java.lang.String,java.util.Map)>
<android.webkit.CacheManager: java.io.File getCacheFileBaseDir()>
<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>
<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()>
<java.security.spec.RSAKeyGenParameterSpec: void <init>(int,java.math.BigInteger)>
<android.database.CursorWrapper: void close()>
<android.database.CursorWrapper: int getColumnCount()>
<android.database.CursorWrapper: boolean requery()>
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.CursorWrapper: byte[] getBlob(int)>
<android.database.CursorWrapper: int getPosition()>
<android.database.CursorWrapper: boolean isLast()>
<android.database.CursorWrapper: double getDouble(int)>
<android.database.CursorWrapper: void registerContentObserver(android.database.ContentObserver)>
<android.database.CursorWrapper: short getShort(int)>
<android.database.CursorWrapper: float getFloat(int)>
<android.database.CursorWrapper: boolean moveToNext()>
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)>
<android.database.CursorWrapper: java.lang.String getColumnName(int)>
<android.database.CursorWrapper: boolean isBeforeFirst()>
<android.database.CursorWrapper: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>
<android.database.CursorWrapper: android.os.Bundle getExtras()>
<android.database.CursorWrapper: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.CursorWrapper: int getInt(int)>
<android.database.CursorWrapper: boolean moveToPosition(int)>
<android.database.CursorWrapper: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.CursorWrapper: int getCount()>
<android.database.CursorWrapper: boolean moveToFirst()>
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>
<android.database.CursorWrapper: void deactivate()>
<android.database.CursorWrapper: boolean isNull(int)>
<android.database.CursorWrapper: boolean isFirst()>
<android.database.CursorWrapper: android.os.Bundle respond(android.os.Bundle)>
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)>
<android.database.CursorWrapper: boolean isClosed()>
<android.database.CursorWrapper: boolean moveToPrevious()>
<android.database.CursorWrapper: void <init>(android.database.Cursor)>
<android.database.CursorWrapper: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.CursorWrapper: boolean moveToLast()>
<android.database.CursorWrapper: boolean isAfterLast()>
<android.database.CursorWrapper: java.lang.String getString(int)>
<android.database.CursorWrapper: long getLong(int)>
<android.database.CursorWrapper: boolean move(int)>
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase.IconListener)>
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Browser: void saveBookmark(android.content.Context,java.lang.String,java.lang.String)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.provider.Browser: void <init>()>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.view.View: int computeVerticalScrollRange()>
<android.view.View: int getWidth()>
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: boolean requestFocus(int)>
<android.view.View: int computeHorizontalScrollOffset()>
<android.view.View: int getPaddingBottom()>
<android.view.View: void setOnLongClickListener(android.view.View.OnLongClickListener)>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>
<android.view.View: void setFadingEdgeLength(int)>
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>
<android.view.View: void playSoundEffect(int)>
<android.view.View: void setEnabled(boolean)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void getFocusedRect(android.graphics.Rect)>
<android.view.View: int getMeasuredHeight()>
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.view.View: void dispatchWindowFocusChanged(boolean)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.View: void onDetachedFromWindow()>
<android.view.View: void invalidate()>
<android.view.View: int getId()>
<android.view.View: boolean isEnabled()>
<android.view.View: void setVerticalScrollBarEnabled(boolean)>
<android.view.View: void measure(int,int)>
<android.view.View: int getScrollY()>
<android.view.View: boolean performClick()>
<android.view.View: void setNextFocusLeftId(int)>
<android.view.View: void restoreHierarchyState(android.util.SparseArray)>
<android.view.View: void scrollBy(int,int)>
<android.view.View: boolean getKeepScreenOn()>
<android.view.View: void setWillNotCacheDrawing(boolean)>
<android.view.View: boolean isFocusable()>
<android.view.View: int computeHorizontalScrollRange()>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.view.View: android.content.res.Resources getResources()>
<android.view.View: void setScrollBarStyle(int)>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: void dispatchSetSelected(boolean)>
<android.view.View: int getNextFocusUpId()>
<android.view.View: boolean isSelected()>
<android.view.View: int getScrollX()>
<android.view.View: int getVerticalScrollbarWidth()>
<android.view.View: boolean isFocusableInTouchMode()>
<android.view.View: void dispatchWindowVisibilityChanged(int)>
<android.view.View: void refreshDrawableState()>
<android.view.View: android.view.View.OnFocusChangeListener getOnFocusChangeListener()>
<android.view.View: int getBottom()>
<android.view.View: int getWindowVisibility()>
<android.view.View: void offsetLeftAndRight(int)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: int getPaddingTop()>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.view.View: boolean isDuplicateParentStateEnabled()>
<android.view.View: boolean isLayoutRequested()>
<android.view.View: boolean requestFocusFromTouch()>
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.view.View: java.util.ArrayList getTouchables()>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.View: void setSaveEnabled(boolean)>
<android.view.View: void onAttachedToWindow()>
<android.view.View: void setId(int)>
<android.view.View: android.os.Parcelable onSaveInstanceState()>
<android.view.View: void setBackgroundColor(int)>
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.view.View: float getLeftFadingEdgeStrength()>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.view.View: android.view.View getRootView()>
<android.view.View: int getSuggestedMinimumHeight()>
<android.view.View: boolean isPressed()>
<android.view.View: void onAnimationEnd()>
<android.view.View: int getNextFocusRightId()>
<android.view.View: int getSolidColor()>
<android.view.View: void setOnCreateContextMenuListener(android.view.View.OnCreateContextMenuListener)>
<android.view.View: void setNextFocusRightId(int)>
<android.view.View: boolean hasFocusable()>
<android.view.View: void bringToFront()>
<android.view.View: void buildDrawingCache()>
<android.view.View: int getNextFocusDownId()>
<android.view.View: boolean onSetAlpha(int)>
<android.view.View: int getMeasuredWidth()>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.View: android.view.ViewParent getParent()>
<android.view.View: int[] mergeDrawableStates(int[],int[])>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.View: int getNextFocusLeftId()>
<android.view.View: void drawableStateChanged()>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.view.View: void postInvalidate()>
<android.view.View: void draw(android.graphics.Canvas)>
<android.view.View: void destroyDrawingCache()>
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>
<android.view.View: float getRightFadingEdgeStrength()>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<android.view.View: void onWindowVisibilityChanged(int)>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.view.View: void setMeasuredDimension(int,int)>
<android.view.View: void createContextMenu(android.view.ContextMenu)>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.view.View: long getDrawingTime()>
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>
<android.view.View: boolean isSaveEnabled()>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.View: int getBaseline()>
<android.view.View: boolean isInTouchMode()>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<android.view.View: int computeHorizontalScrollExtent()>
<android.view.View: android.os.Handler getHandler()>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<android.view.View: void setOnKeyListener(android.view.View.OnKeyListener)>
<android.view.View: android.view.View findViewWithTag(java.lang.Object)>
<android.view.View: boolean requestFocus()>
<android.view.View: void setPadding(int,int,int,int)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.View: boolean isClickable()>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: void clearFocus()>
<android.view.View: boolean requestFocus(int,android.graphics.Rect)>
<android.view.View: void setSoundEffectsEnabled(boolean)>
<android.view.View: void setTag(java.lang.Object)>
<android.view.View: android.view.View findFocus()>
<android.view.View: int getDefaultSize(int,int)>
<android.view.View: void setDrawingCacheBackgroundColor(int)>
<android.view.View: java.util.ArrayList getFocusables(int)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.view.View: boolean isShown()>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.view.View: void setKeepScreenOn(boolean)>
<android.view.View: int getDrawingCacheQuality()>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setMinimumWidth(int)>
<android.view.View: void clearAnimation()>
<android.view.View: void initializeFadingEdge(android.content.res.TypedArray)>
<android.view.View: boolean willNotCacheDrawing()>
<android.view.View: void setHorizontalScrollBarEnabled(boolean)>
<android.view.View: int getHeight()>
<android.view.View: int getRight()>
<android.view.View: boolean isLongClickable()>
<android.view.View: android.content.Context getContext()>
<android.view.View: void onFinishInflate()>
<android.view.View: int getPaddingLeft()>
<android.view.View: void setLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.view.View: void onWindowFocusChanged(boolean)>
<android.view.View: void setOnClickListener(android.view.View.OnClickListener)>
<android.view.View: void setSelected(boolean)>
<android.view.View: void invalidate(android.graphics.Rect)>
<android.view.View: android.view.View focusSearch(int)>
<android.view.View: float getBottomFadingEdgeStrength()>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<android.view.View: void setPressed(boolean)>
<android.view.View: void addFocusables(java.util.ArrayList,int)>
<android.view.View: int getScrollBarStyle()>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<android.view.View: void requestLayout()>
<android.view.View: void initializeScrollbars(android.content.res.TypedArray)>
<android.view.View: boolean hasFocus()>
<android.view.View: void postInvalidateDelayed(long)>
<android.view.View: void setNextFocusDownId(int)>
<android.view.View: void invalidate(int,int,int,int)>
<android.view.View: void setDuplicateParentStateEnabled(boolean)>
<android.view.View: int[] onCreateDrawableState(int)>
<android.view.View: void onSizeChanged(int,int,int,int)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>
<android.view.View: int computeVerticalScrollExtent()>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.view.View: void dispatchSetPressed(boolean)>
<android.view.View: void setOnFocusChangeListener(android.view.View.OnFocusChangeListener)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.view.View: android.view.ContextMenu.ContextMenuInfo getContextMenuInfo()>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<android.view.View: void onLayout(boolean,int,int,int,int)>
<android.view.View: int resolveSize(int,int)>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View: void scrollTo(int,int)>
<android.view.View: int getLeft()>
<android.view.View: void getLocationOnScreen(int[])>
<android.view.View: int getVisibility()>
<android.view.View: void setMinimumHeight(int)>
<android.view.View: boolean post(java.lang.Runnable)>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<android.view.View: void setBackgroundResource(int)>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: float getTopFadingEdgeStrength()>
<android.view.View: void onScrollChanged(int,int,int,int)>
<android.view.View: void setClickable(boolean)>
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.View: int getSuggestedMinimumWidth()>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.view.View: android.view.View findViewById(int)>
<android.view.View: boolean isFocused()>
<android.view.View: void <init>(android.content.Context)>
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>
<android.view.View: void forceLayout()>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.view.View: int getDrawingCacheBackgroundColor()>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>
<android.view.View: void onAnimationStart()>
<android.view.View: void onDraw(android.graphics.Canvas)>
<android.view.View: void saveHierarchyState(android.util.SparseArray)>
<android.view.View: void dispatchDraw(android.graphics.Canvas)>
<android.view.View: android.os.IBinder getWindowToken()>
<android.view.View: void setDrawingCacheQuality(int)>
<android.view.View: int[] getDrawableState()>
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<android.view.View: boolean willNotDraw()>
<android.view.View: java.lang.Object getTag()>
<android.view.View: void setNextFocusUpId(int)>
<android.view.View: boolean performLongClick()>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.View: void addTouchables(java.util.ArrayList)>
<android.view.View: int getWindowAttachCount()>
<android.view.View: boolean hasWindowFocus()>
<android.view.View: android.view.ViewGroup.LayoutParams getLayoutParams()>
<android.view.View: int getTop()>
<android.view.View: void setVisibility(int)>
<android.view.View: int getPaddingRight()>
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>
<android.view.View: void setOnTouchListener(android.view.View.OnTouchListener)>
<android.view.View: boolean showContextMenu()>
<android.view.View: void computeScroll()>
<android.view.View: int computeVerticalScrollOffset()>
<android.view.View: void offsetTopAndBottom(int)>
<android.view.View: void onMeasure(int,int)>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.view.View: void cancelLongPress()>
<org.xml.sax.DocumentHandler: void endDocument()>
<org.xml.sax.DocumentHandler: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.DocumentHandler: void characters(char[],int,int)>
<org.xml.sax.DocumentHandler: void startElement(java.lang.String,org.xml.sax.AttributeList)>
<org.xml.sax.DocumentHandler: void endElement(java.lang.String)>
<org.xml.sax.DocumentHandler: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.DocumentHandler: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.DocumentHandler: void startDocument()>
<java.lang.Byte: int intValue()>
<java.lang.Byte: void <init>(byte)>
<java.lang.Byte: byte parseByte(java.lang.String)>
<java.lang.Byte: long longValue()>
<java.lang.Byte: double doubleValue()>
<java.lang.Byte: float floatValue()>
<java.lang.Byte: byte parseByte(java.lang.String,int)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>
<java.lang.Byte: java.lang.Byte decode(java.lang.String)>
<java.lang.Byte: java.lang.String toString(byte)>
<java.lang.Byte: void <init>(java.lang.String)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>
<java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.lang.Byte: int compareTo(java.lang.Byte)>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.ResponseConnControl: void <init>()>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: int getLength()>
<org.xml.sax.helpers.AttributesImpl: void setAttributes(org.xml.sax.Attributes)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setLocalName(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setQName(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void removeAttribute(int)>
<org.xml.sax.helpers.AttributesImpl: void setURI(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void <init>(org.xml.sax.Attributes)>
<org.xml.sax.helpers.AttributesImpl: void clear()>
<org.xml.sax.helpers.AttributesImpl: void setValue(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(int)>
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setType(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(int)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getQName(int)>
<org.xml.sax.helpers.AttributesImpl: void <init>()>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getLocalName(int)>
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()>
<android.text.method.DateTimeKeyListener: void <init>()>
<java.util.IdentityHashMap: void <init>(int)>
<java.util.IdentityHashMap: void <init>(java.util.Map)>
<java.util.IdentityHashMap: java.util.Set entrySet()>
<java.util.IdentityHashMap: void <init>()>
<java.util.IdentityHashMap: java.lang.Object clone()>
<android.app.Service: void stopSelf()>
<android.app.Service: boolean onUnbind(android.content.Intent)>
<android.app.Service: void <init>()>
<android.app.Service: boolean stopSelfResult(int)>
<android.app.Service: android.app.Application getApplication()>
<android.app.Service: android.os.IBinder onBind(android.content.Intent)>
<android.app.Service: void onStart(android.content.Intent,int)>
<android.app.Service: void onLowMemory()>
<android.app.Service: void stopSelf(int)>
<android.app.Service: void onRebind(android.content.Intent)>
<android.app.Service: void setForeground(boolean)>
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Service: void onCreate()>
<android.app.Service: void onDestroy()>
<java.security.acl.NotOwnerException: void <init>()>
<android.text.method.Touch: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.Touch: void scrollTo(android.widget.TextView,android.text.Layout,int,int)>
<java.security.ProviderException: void <init>(java.lang.Throwable)>
<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.ProviderException: void <init>(java.lang.String)>
<java.security.ProviderException: void <init>()>
<android.media.MediaPlayer.OnBufferingUpdateListener: void onBufferingUpdate(android.media.MediaPlayer,int)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: void <init>()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader.TileMode getTileModeX()>
<android.graphics.drawable.BitmapDrawable: void <init>(java.lang.String)>
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader.TileMode)>
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader.TileMode)>
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader.TileMode,android.graphics.Shader.TileMode)>
<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.BitmapDrawable: int getGravity()>
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)>
<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)>
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>
<android.graphics.drawable.BitmapDrawable: void setGravity(int)>
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader.TileMode getTileModeY()>
<android.graphics.drawable.BitmapDrawable: int getOpacity()>
<java.io.EOFException: void <init>()>
<java.io.EOFException: void <init>(java.lang.String)>
<java.security.cert.CertPathValidatorSpi: void <init>()>
<java.security.cert.CertPathValidatorSpi: java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>
<org.apache.http.impl.io.HttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>
<org.apache.http.conn.OperatedClientConnection: void opening(java.net.Socket,org.apache.http.HttpHost)>
<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>
<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>
<org.apache.http.conn.OperatedClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>
<org.apache.http.conn.OperatedClientConnection: org.apache.http.HttpHost getTargetHost()>
<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: java.lang.String toString()>
<android.widget.MultiAutoCompleteTextView.Tokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.Tokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.Tokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
<android.widget.ListAdapter: boolean areAllItemsEnabled()>
<android.widget.ListAdapter: boolean isEnabled(int)>
<java.lang.reflect.Modifier: boolean isSynchronized(int)>
<java.lang.reflect.Modifier: boolean isFinal(int)>
<java.lang.reflect.Modifier: boolean isVolatile(int)>
<java.lang.reflect.Modifier: boolean isProtected(int)>
<java.lang.reflect.Modifier: void <init>()>
<java.lang.reflect.Modifier: boolean isAbstract(int)>
<java.lang.reflect.Modifier: boolean isTransient(int)>
<java.lang.reflect.Modifier: boolean isStatic(int)>
<java.lang.reflect.Modifier: boolean isInterface(int)>
<java.lang.reflect.Modifier: boolean isStrict(int)>
<java.lang.reflect.Modifier: boolean isPublic(int)>
<java.lang.reflect.Modifier: boolean isPrivate(int)>
<java.lang.reflect.Modifier: boolean isNative(int)>
<java.lang.reflect.Modifier: java.lang.String toString(int)>
<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()>
<org.apache.http.impl.auth.DigestScheme: boolean isConnectionBased()>
<org.apache.http.impl.auth.DigestScheme: java.lang.String getSchemeName()>
<org.apache.http.impl.auth.DigestScheme: boolean isComplete()>
<org.apache.http.impl.auth.DigestScheme: void <init>()>
<org.apache.http.impl.auth.DigestScheme: void overrideParamter(java.lang.String,java.lang.String)>
<java.security.cert.X509Extension: boolean hasUnsupportedCriticalExtension()>
<java.security.cert.X509Extension: java.util.Set getCriticalExtensionOIDs()>
<java.security.cert.X509Extension: java.util.Set getNonCriticalExtensionOIDs()>
<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)>
<android.widget.TableLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.TableLayout.LayoutParams: void <init>()>
<android.widget.TableLayout.LayoutParams: void <init>(int,int)>
<android.widget.TableLayout.LayoutParams: void <init>(int,int,float)>
<android.widget.TableLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>
<android.database.Observable: void registerObserver(T)>
<android.database.Observable: void <init>()>
<android.database.Observable: void unregisterAll()>
<android.database.Observable: void unregisterObserver(T)>
<java.net.Socket: void shutdownInput()>
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.Socket: void <init>(java.net.Proxy)>
<java.net.Socket: void setPerformancePreferences(int,int,int)>
<java.net.Socket: java.net.InetAddress getLocalAddress()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>
<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>
<java.net.Socket: void sendUrgentData(int)>
<java.net.Socket: void shutdownOutput()>
<java.net.Socket: int getPort()>
<java.net.Socket: int getSendBufferSize()>
<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>
<java.net.Socket: void setTcpNoDelay(boolean)>
<java.net.Socket: boolean isInputShutdown()>
<java.net.Socket: void <init>(java.net.InetAddress,int)>
<java.net.Socket: java.nio.channels.SocketChannel getChannel()>
<java.net.Socket: int getTrafficClass()>
<java.net.Socket: void setSoLinger(boolean,int)>
<java.net.Socket: boolean isOutputShutdown()>
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>
<java.net.Socket: boolean isClosed()>
<java.net.Socket: void setReuseAddress(boolean)>
<java.net.Socket: void setOOBInline(boolean)>
<java.net.Socket: void setSoTimeout(int)>
<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>
<java.net.Socket: boolean isConnected()>
<java.net.Socket: int getSoTimeout()>
<java.net.Socket: java.net.InetAddress getInetAddress()>
<java.net.Socket: void <init>(java.net.SocketImpl)>
<java.net.Socket: void setKeepAlive(boolean)>
<java.net.Socket: void bind(java.net.SocketAddress)>
<java.net.Socket: boolean getTcpNoDelay()>
<java.net.Socket: boolean getReuseAddress()>
<java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.Socket: java.io.InputStream getInputStream()>
<java.net.Socket: void <init>(java.lang.String,int)>
<java.net.Socket: void close()>
<java.net.Socket: int getLocalPort()>
<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>
<java.net.Socket: void <init>(java.lang.String,int,boolean)>
<java.net.Socket: void setSendBufferSize(int)>
<java.net.Socket: boolean getKeepAlive()>
<java.net.Socket: void <init>()>
<java.net.Socket: void connect(java.net.SocketAddress)>
<java.net.Socket: boolean getOOBInline()>
<java.net.Socket: void setReceiveBufferSize(int)>
<java.net.Socket: boolean isBound()>
<java.net.Socket: void setTrafficClass(int)>
<java.net.Socket: int getReceiveBufferSize()>
<java.net.Socket: int getSoLinger()>
<android.view.KeyEvent: void <init>(long,long,int,int,int)>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: boolean isAltPressed()>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap.KeyData)>
<android.view.KeyEvent: int getAction()>
<android.view.KeyEvent: int getDeadChar(int,int)>
<android.view.KeyEvent: int describeContents()>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.view.KeyEvent: int getScanCode()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.KeyEvent: boolean isModifierKey(int)>
<android.view.KeyEvent: int getFlags()>
<android.view.KeyEvent: boolean isShiftPressed()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>
<android.view.KeyEvent: int getDeviceId()>
<android.view.KeyEvent: long getEventTime()>
<android.view.KeyEvent: int getRepeatCount()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>
<android.view.KeyEvent: boolean isSymPressed()>
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyEvent: boolean isSystem()>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent.Callback)>
<android.view.KeyEvent: char getNumber()>
<android.view.KeyEvent: char getDisplayLabel()>
<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: long getDownTime()>
<android.view.KeyEvent: boolean isPrintingKey()>
<android.view.KeyEvent: int getKeyCode()>
<android.view.KeyEvent: void <init>(int,int)>
<android.view.KeyEvent: int getMetaState()>
<android.view.KeyEvent: char getMatch(char[])>
<android.widget.AbsListView.LayoutParams: void <init>(int,int,int)>
<android.widget.AbsListView.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView.LayoutParams: void <init>(int,int)>
<android.widget.AbsListView.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<java.lang.reflect.GenericSignatureFormatError: void <init>()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()>
<java.util.concurrent.ThreadPoolExecutor: void shutdown()>
<java.util.concurrent.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>
<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>
<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminating()>
<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: boolean prestartCoreThread()>
<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>
<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>
<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ThreadPoolExecutor: int prestartAllCoreThreads()>
<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>
<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>
<java.util.concurrent.ThreadPoolExecutor: void terminated()>
<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>
<java.util.concurrent.ThreadPoolExecutor: void purge()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>
<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>
<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>
<java.net.DatagramSocketImpl: void close()>
<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>
<java.net.DatagramSocketImpl: byte getTTL()>
<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>
<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>
<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>
<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>
<java.net.DatagramSocketImpl: void setTimeToLive(int)>
<java.net.DatagramSocketImpl: void setTTL(byte)>
<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>
<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>
<java.net.DatagramSocketImpl: void disconnect()>
<java.net.DatagramSocketImpl: int getTimeToLive()>
<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>
<java.net.DatagramSocketImpl: int getLocalPort()>
<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>
<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>
<java.net.DatagramSocketImpl: void <init>()>
<java.net.DatagramSocketImpl: void create()>
<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>
<javax.xml.parsers.SAXParserFactory: boolean isValidating()>
<javax.xml.parsers.SAXParserFactory: boolean isXIncludeAware()>
<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)>
<javax.xml.parsers.SAXParserFactory: boolean getFeature(java.lang.String)>
<javax.xml.parsers.SAXParserFactory: boolean isNamespaceAware()>
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>
<javax.xml.parsers.SAXParserFactory: void setXIncludeAware(boolean)>
<javax.xml.parsers.SAXParserFactory: void <init>()>
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>
<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>
<android.app.ExpandableListActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
<android.app.ExpandableListActivity: void setSelectedGroup(int)>
<android.app.ExpandableListActivity: long getSelectedPosition()>
<android.app.ExpandableListActivity: void onGroupCollapse(int)>
<android.app.ExpandableListActivity: void onGroupExpand(int)>
<android.app.ExpandableListActivity: void <init>()>
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.app.ExpandableListActivity: long getSelectedId()>
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)>
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()>
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)>
<java.util.HashMap: void <init>(int,float)>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void <init>(int)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: java.lang.Object clone()>
<java.net.BindException: void <init>(java.lang.String)>
<java.net.BindException: void <init>()>
<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>
<java.io.InvalidClassException: void <init>(java.lang.String)>
<android.R.plurals: void <init>()>
<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>
<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.RejectedExecutionException: void <init>()>
<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.Throwable)>
<java.nio.charset.CoderResult: boolean isUnderflow()>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>
<java.nio.charset.CoderResult: boolean isMalformed()>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>
<java.nio.charset.CoderResult: void throwException()>
<java.nio.charset.CoderResult: boolean isError()>
<java.nio.charset.CoderResult: int length()>
<java.nio.charset.CoderResult: boolean isOverflow()>
<java.nio.charset.CoderResult: boolean isUnmappable()>
<org.apache.http.client.CookieStore: void clear()>
<org.apache.http.client.CookieStore: java.util.List getCookies()>
<org.apache.http.client.CookieStore: boolean clearExpired(java.util.Date)>
<org.apache.http.client.CookieStore: void addCookie(org.apache.http.cookie.Cookie)>
<android.media.MediaScannerConnection.MediaScannerConnectionClient: void onMediaScannerConnected()>
<android.media.MediaScannerConnection.MediaScannerConnectionClient: void onScanCompleted(java.lang.String,android.net.Uri)>
<org.apache.http.impl.io.IdentityOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)>
<org.apache.http.impl.io.IdentityOutputStream: void write(int)>
<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.ContentHandler: void endDocument()>
<org.xml.sax.ContentHandler: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>
<org.xml.sax.ContentHandler: void characters(char[],int,int)>
<org.xml.sax.ContentHandler: void startDocument()>
<org.xml.sax.ContentHandler: void skippedEntity(java.lang.String)>
<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<android.widget.VideoView: int resolveAdjustedSize(int,int)>
<android.widget.VideoView: void pause()>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.VideoView: int getBufferPercentage()>
<android.widget.VideoView: void stopPlayback()>
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)>
<android.widget.VideoView: int getCurrentPosition()>
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer.OnErrorListener)>
<android.widget.VideoView: boolean isPlaying()>
<android.widget.VideoView: void <init>(android.content.Context)>
<android.widget.VideoView: int getDuration()>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.widget.VideoView: void start()>
<android.widget.VideoView: void seekTo(int)>
<java.lang.IllegalThreadStateException: void <init>()>
<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>
<android.view.ViewStub: void setOnInflateListener(android.view.ViewStub.OnInflateListener)>
<android.view.ViewStub: int getLayoutResource()>
<android.view.ViewStub: void setInflatedId(int)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewStub: int getInflatedId()>
<android.view.ViewStub: void <init>(android.content.Context,int)>
<android.view.ViewStub: android.view.View inflate()>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewStub: void <init>(android.content.Context)>
<android.view.ViewStub: void setLayoutResource(int)>
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantLock: boolean isFair()>
<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>
<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()>
<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantLock: void unlock()>
<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>
<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>
<java.util.concurrent.locks.ReentrantLock: void <init>()>
<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>
<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>
<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>
<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>
<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>
<android.app.ActivityManager.ProcessErrorStateInfo: void <init>()>
<android.app.ActivityManager.ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.ProcessErrorStateInfo: int describeContents()>
<java.security.cert.CertPath: java.util.List getCertificates()>
<java.security.cert.CertPath: java.lang.String getType()>
<java.security.cert.CertPath: void <init>(java.lang.String)>
<java.security.cert.CertPath: java.lang.Object writeReplace()>
<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>
<java.security.cert.CertPath: byte[] getEncoded()>
<java.security.cert.CertPath: java.util.Iterator getEncodings()>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
<java.lang.IllegalArgumentException: void <init>()>
<android.net.UrlQuerySanitizer.ValueSanitizer: java.lang.String sanitize(java.lang.String)>
<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>
<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>
<java.nio.channels.ServerSocketChannel: int validOps()>
<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>
<android.database.MergeCursor: void <init>(android.database.Cursor[])>
<android.database.MergeCursor: int getInt(int)>
<android.database.MergeCursor: double getDouble(int)>
<android.database.MergeCursor: long getLong(int)>
<android.database.MergeCursor: boolean isNull(int)>
<android.database.MergeCursor: java.lang.String[] getColumnNames()>
<android.database.MergeCursor: java.lang.String getString(int)>
<android.database.MergeCursor: int getCount()>
<android.database.MergeCursor: float getFloat(int)>
<android.database.MergeCursor: short getShort(int)>
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>
<org.apache.http.impl.conn.IdleConnectionHandler: void removeAll()>
<org.apache.http.impl.conn.IdleConnectionHandler: void add(org.apache.http.HttpConnection,long,java.util.concurrent.TimeUnit)>
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()>
<org.apache.http.impl.conn.IdleConnectionHandler: boolean remove(org.apache.http.HttpConnection)>
<org.apache.http.impl.conn.IdleConnectionHandler: void <init>()>
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)>
<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>
<org.xml.sax.SAXParseException: int getLineNumber()>
<org.xml.sax.SAXParseException: java.lang.String getSystemId()>
<org.xml.sax.SAXParseException: java.lang.String getPublicId()>
<org.xml.sax.SAXParseException: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>
<org.xml.sax.SAXParseException: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.Exception)>
<org.xml.sax.SAXParseException: int getColumnNumber()>
<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator,java.lang.Exception)>
<android.graphics.DashPathEffect: void <init>(float[],float)>
<android.webkit.WebSettings.LayoutAlgorithm: android.webkit.WebSettings.LayoutAlgorithm valueOf(java.lang.String)>
<android.webkit.WebSettings.LayoutAlgorithm: android.webkit.WebSettings.LayoutAlgorithm[] values()>
<java.lang.InterruptedException: void <init>()>
<java.lang.InterruptedException: void <init>(java.lang.String)>
<java.security.acl.Group: java.util.Enumeration members()>
<java.security.acl.Group: boolean isMember(java.security.Principal)>
<java.security.acl.Group: boolean addMember(java.security.Principal)>
<java.security.acl.Group: boolean removeMember(java.security.Principal)>
<android.text.util.Linkify.TransformFilter: java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String)>
<java.util.Collections: java.util.List singletonList(E)>
<java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)>
<java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>
<java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>
<java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>
<java.util.Collections: int binarySearch(java.util.List,T)>
<java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)>
<java.util.Collections: java.util.List nCopies(int,T)>
<java.util.Collections: java.util.Set singleton(E)>
<java.util.Collections: java.util.List synchronizedList(java.util.List)>
<java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)>
<java.util.Collections: T min(java.util.Collection)>
<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>
<java.util.Collections: void sort(java.util.List)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: T min(java.util.Collection,java.util.Comparator)>
<java.util.Collections: void reverse(java.util.List)>
<java.util.Collections: java.util.List emptyList()>
<java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)>
<java.util.Collections: boolean replaceAll(java.util.List,T,T)>
<java.util.Collections: boolean addAll(java.util.Collection,T...)>
<java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>
<java.util.Collections: java.util.Map singletonMap(K,V)>
<java.util.Collections: java.util.Comparator reverseOrder()>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)>
<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.Collections: java.util.Set emptySet()>
<java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>
<java.util.Collections: void fill(java.util.List,T)>
<java.util.Collections: T max(java.util.Collection)>
<java.util.Collections: int binarySearch(java.util.List,T,java.util.Comparator)>
<java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>
<java.util.Collections: void shuffle(java.util.List,java.util.Random)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)>
<java.util.Collections: void copy(java.util.List,java.util.List)>
<java.util.Collections: void shuffle(java.util.List)>
<java.util.Collections: T max(java.util.Collection,java.util.Comparator)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>
<java.util.Collections: java.util.Map emptyMap()>
<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>
<java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)>
<java.util.Collections: void rotate(java.util.List,int)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>
<java.util.Collections: void swap(java.util.List,int,int)>
<java.util.Collections: int indexOfSubList(java.util.List,java.util.List)>
<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>
<java.nio.MappedByteBuffer: boolean isLoaded()>
<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.Format: java.lang.String format(java.lang.Object)>
<java.text.Format: void <init>()>
<java.text.Format: java.lang.Object clone()>
<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<java.text.Format: java.lang.Object parseObject(java.lang.String)>
<android.widget.ProgressBar: int getMax()>
<android.widget.ProgressBar: void incrementSecondaryProgressBy(int)>
<android.widget.ProgressBar: void setMax(int)>
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setProgress(int)>
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: boolean isIndeterminate()>
<android.widget.ProgressBar: void setIndeterminate(boolean)>
<android.widget.ProgressBar: void <init>(android.content.Context)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)>
<android.widget.ProgressBar: void setSecondaryProgress(int)>
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()>
<android.widget.ProgressBar: int getSecondaryProgress()>
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.ProgressBar: int getProgress()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ProgressBar: void incrementProgressBy(int)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.util.Enumeration: boolean hasMoreElements()>
<java.util.Enumeration: E nextElement()>
<org.apache.http.impl.cookie.BasicClientCookie2: void setDiscard(boolean)>
<org.apache.http.impl.cookie.BasicClientCookie2: void setPorts(int[])>
<org.apache.http.impl.cookie.BasicClientCookie2: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.impl.cookie.BasicClientCookie2: void setCommentURL(java.lang.String)>
<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.AlgorithmParameters)>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.lang.String)>
<javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()>
<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)>
<javax.crypto.ExemptionMechanism: java.lang.String getName()>
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])>
<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()>
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[],int)>
<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>
<javax.crypto.ExemptionMechanism: int getOutputSize(int)>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)>
<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.ExemptionMechanism: void init(java.security.Key)>
<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ComponentCallbacks: void onLowMemory()>
<java.io.FilterReader: int read(char[],int,int)>
<java.io.FilterReader: void <init>(java.io.Reader)>
<java.io.FilterReader: void close()>
<java.security.KeyStoreException: void <init>(java.lang.Throwable)>
<java.security.KeyStoreException: void <init>(java.lang.String)>
<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.KeyStoreException: void <init>()>
<java.security.KeyStore.CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()>
<java.security.KeyStore.CallbackHandlerProtection: void <init>(javax.security.auth.callback.CallbackHandler)>
<java.util.concurrent.Future: V get(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Future: boolean isDone()>
<java.util.concurrent.Future: boolean isCancelled()>
<java.util.concurrent.Future: V get()>
<java.util.concurrent.Future: boolean cancel(boolean)>
<org.xml.sax.ErrorHandler: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.ErrorHandler: void fatalError(org.xml.sax.SAXParseException)>
<org.xml.sax.ErrorHandler: void error(org.xml.sax.SAXParseException)>
<java.security.spec.ECFieldF2m: void <init>(int,int[])>
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()>
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()>
<java.security.spec.ECFieldF2m: int getM()>
<java.security.spec.ECFieldF2m: void <init>(int,java.math.BigInteger)>
<java.security.spec.ECFieldF2m: int getFieldSize()>
<java.security.spec.ECFieldF2m: void <init>(int)>
<java.net.Proxy: java.net.Proxy.Type type()>
<java.net.Proxy: java.net.SocketAddress address()>
<java.net.Proxy: void <init>(java.net.Proxy.Type,java.net.SocketAddress)>
<java.net.Proxy: boolean equals(java.lang.Object)>
<java.net.Proxy: int hashCode()>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>
<java.lang.Thread: void interrupt()>
<java.lang.Thread: void <init>()>
<java.lang.Thread: boolean isDaemon()>
<java.lang.Thread: void join(long,int)>
<java.lang.Thread: void sleep(long)>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: void join()>
<java.lang.Thread: java.util.Map getAllStackTraces()>
<java.lang.Thread: void resume()>
<java.lang.Thread: boolean isInterrupted()>
<java.lang.Thread: long getId()>
<java.lang.Thread: void setPriority(int)>
<java.lang.Thread: void yield()>
<java.lang.Thread: int countStackFrames()>
<java.lang.Thread: boolean isAlive()>
<java.lang.Thread: void checkAccess()>
<java.lang.Thread: java.lang.String getName()>
<java.lang.Thread: void setName(java.lang.String)>
<java.lang.Thread: void join(long)>
<java.lang.Thread: void <init>(java.lang.String)>
<java.lang.Thread: int getPriority()>
<java.lang.Thread: void run()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: java.lang.Thread.State getState()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.Thread: boolean interrupted()>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)>
<java.lang.Thread: void stop(java.lang.Throwable)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.Thread: void suspend()>
<java.lang.Thread: int activeCount()>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)>
<java.lang.Thread: int enumerate(java.lang.Thread[])>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void stop()>
<java.lang.Thread: void destroy()>
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Thread: void sleep(long,int)>
<java.lang.Thread: void dumpStack()>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
<java.lang.Thread: void start()>
<java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void setDaemon(boolean)>
<java.lang.Thread: java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()>
<java.lang.Thread: java.lang.Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>
<java.lang.Thread: boolean holdsLock(java.lang.Object)>
<android.text.AutoText: java.lang.String get(java.lang.CharSequence,int,int,android.view.View)>
<org.apache.http.impl.io.SocketInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>
<java.lang.Compiler: boolean compileClasses(java.lang.String)>
<java.lang.Compiler: java.lang.Object command(java.lang.Object)>
<java.lang.Compiler: boolean compileClass(java.lang.Class)>
<java.lang.Compiler: void enable()>
<java.lang.Compiler: void disable()>
<android.text.style.AlignmentSpan.Standard: void <init>(android.text.Layout.Alignment)>
<android.text.style.AlignmentSpan.Standard: android.text.Layout.Alignment getAlignment()>
<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.StringIndexOutOfBoundsException: void <init>()>
<java.lang.StringIndexOutOfBoundsException: void <init>(int)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>
<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>
<java.nio.charset.CharsetDecoder: java.lang.String replacement()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>
<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>
<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>
<java.nio.charset.CharsetDecoder: void implReset()>
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>
<android.media.MediaRecorder: void setAudioEncoder(int)>
<android.media.MediaRecorder: void reset()>
<android.media.MediaRecorder: void <init>()>
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>
<android.media.MediaRecorder: void start()>
<android.media.MediaRecorder: void setOutputFormat(int)>
<android.media.MediaRecorder: void prepare()>
<android.media.MediaRecorder: int getMaxAmplitude()>
<android.media.MediaRecorder: void release()>
<android.media.MediaRecorder: void setAudioSource(int)>
<android.media.MediaRecorder: void stop()>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])>
<android.database.sqlite.SQLiteCursor: int getCount()>
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>
<java.security.acl.Owner: boolean isOwner(java.security.Principal)>
<java.security.acl.Owner: boolean addOwner(java.security.Principal,java.security.Principal)>
<java.security.acl.Owner: boolean deleteOwner(java.security.Principal,java.security.Principal)>
<org.apache.http.HttpException: void <init>(java.lang.String)>
<org.apache.http.HttpException: void <init>()>
<org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>
<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>
<android.media.ToneGenerator: void release()>
<android.media.ToneGenerator: void <init>(int,int)>
<android.media.ToneGenerator: boolean startTone(int)>
<android.media.ToneGenerator: void stopTone()>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint.Align)>
<android.graphics.Paint: void setAlpha(int)>
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>
<android.graphics.Paint: void setStyle(android.graphics.Paint.Style)>
<android.graphics.Paint: void setTextSkewX(float)>
<android.graphics.Paint: void clearShadowLayer()>
<android.graphics.Paint: boolean isDither()>
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()>
<android.graphics.Paint: float getTextSkewX()>
<android.graphics.Paint: void setAntiAlias(boolean)>
<android.graphics.Paint: boolean isAntiAlias()>
<android.graphics.Paint: int getColor()>
<android.graphics.Paint: void reset()>
<android.graphics.Paint: int getFlags()>
<android.graphics.Paint: android.graphics.Paint.Align getTextAlign()>
<android.graphics.Paint: void setStrokeMiter(float)>
<android.graphics.Paint: void setSubpixelText(boolean)>
<android.graphics.Paint: boolean isStrikeThruText()>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.graphics.Paint: void <init>(android.graphics.Paint)>
<android.graphics.Paint: void setLinearText(boolean)>
<android.graphics.Paint: void setTextSize(float)>
<android.graphics.Paint: boolean isUnderlineText()>
<android.graphics.Paint: void setDither(boolean)>
<android.graphics.Paint: android.graphics.Paint.FontMetrics getFontMetrics()>
<android.graphics.Paint: int getAlpha()>
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.graphics.Paint: float getTextSize()>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: android.graphics.Paint.Join getStrokeJoin()>
<android.graphics.Paint: void setStrikeThruText(boolean)>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.graphics.Paint: boolean isFakeBoldText()>
<android.graphics.Paint: void setFlags(int)>
<android.graphics.Paint: android.graphics.Paint.Cap getStrokeCap()>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<android.graphics.Paint: void setStrokeWidth(float)>
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.Paint: float getTextScaleX()>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.graphics.Paint: void <init>(int)>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: float getFontSpacing()>
<android.graphics.Paint: void setFilterBitmap(boolean)>
<android.graphics.Paint: float getFontMetrics(android.graphics.Paint.FontMetrics)>
<android.graphics.Paint: android.graphics.Paint.Style getStyle()>
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint.FontMetricsInt)>
<android.graphics.Paint: void setColor(int)>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<android.graphics.Paint: float ascent()>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.graphics.Paint: void setUnderlineText(boolean)>
<android.graphics.Paint: float getStrokeWidth()>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: void <init>()>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.graphics.Paint: float descent()>
<android.graphics.Paint: void set(android.graphics.Paint)>
<android.graphics.Paint: void setFakeBoldText(boolean)>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint.Cap)>
<android.graphics.Paint: void setTextScaleX(float)>
<android.graphics.Paint: float getStrokeMiter()>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint.Join)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.graphics.Paint: boolean isSubpixelText()>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<android.graphics.Paint: boolean isLinearText()>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.graphics.Paint: android.graphics.Paint.FontMetricsInt getFontMetricsInt()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isExpandEntityReferences()>
<javax.xml.parsers.DocumentBuilderFactory: java.lang.Object getAttribute(java.lang.String)>
<javax.xml.parsers.DocumentBuilderFactory: void setExpandEntityReferences(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>
<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringElementContentWhitespace(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void <init>()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isIgnoringComments()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isNamespaceAware()>
<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringComments(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: boolean isIgnoringElementContentWhitespace()>
<javax.xml.parsers.DocumentBuilderFactory: boolean getFeature(java.lang.String)>
<javax.xml.parsers.DocumentBuilderFactory: boolean isXIncludeAware()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isValidating()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isCoalescing()>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>
<javax.xml.parsers.DocumentBuilderFactory: void setXIncludeAware(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.impl.conn.tsccm.PoolEntryRequest: void abortRequest()>
<org.apache.http.impl.conn.tsccm.PoolEntryRequest: org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit)>
<android.widget.RelativeLayout.LayoutParams: void addRule(int,int)>
<android.widget.RelativeLayout.LayoutParams: void addRule(int)>
<android.widget.RelativeLayout.LayoutParams: int[] getRules()>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout.LayoutParams: void <init>(int,int)>
<android.widget.RelativeLayout.LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<java.util.EventListenerProxy: java.util.EventListener getListener()>
<java.util.EventListenerProxy: void <init>(java.util.EventListener)>
<android.text.method.TextKeyListener: void clear(android.text.Editable)>
<android.text.method.TextKeyListener: void release()>
<android.text.method.TextKeyListener: boolean shouldCap(android.text.method.TextKeyListener.Capitalize,java.lang.CharSequence,int)>
<android.text.method.TextKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.TextKeyListener: void <init>(android.text.method.TextKeyListener.Capitalize,boolean)>
<android.text.method.TextKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener.Capitalize)>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()>
<android.text.method.TextKeyListener: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<javax.security.cert.Certificate: void <init>()>
<javax.security.cert.Certificate: byte[] getEncoded()>
<javax.security.cert.Certificate: void verify(java.security.PublicKey)>
<javax.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>
<javax.security.cert.Certificate: java.lang.String toString()>
<javax.security.cert.Certificate: java.security.PublicKey getPublicKey()>
<java.nio.channels.spi.AbstractSelectionKey: void <init>()>
<java.nio.channels.spi.AbstractSelectionKey: void cancel()>
<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>
<java.security.KeyFactorySpi: void <init>()>
<java.security.KeyFactorySpi: java.security.Key engineTranslateKey(java.security.Key)>
<java.security.KeyFactorySpi: T engineGetKeySpec(java.security.Key,java.lang.Class)>
<java.security.KeyFactorySpi: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>
<java.security.KeyFactorySpi: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>
<java.security.interfaces.ECKey: java.security.spec.ECParameterSpec getParams()>
<org.apache.http.impl.auth.UnsupportedDigestAlgorithmException: void <init>()>
<org.apache.http.impl.auth.UnsupportedDigestAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.impl.auth.UnsupportedDigestAlgorithmException: void <init>(java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsOpenCursorsAcrossCommit()>
<java.sql.DatabaseMetaData: boolean supportsCoreSQLGrammar()>
<java.sql.DatabaseMetaData: boolean supportsOrderByUnrelated()>
<java.sql.DatabaseMetaData: boolean supportsLikeEscapeClause()>
<java.sql.DatabaseMetaData: java.lang.String getProcedureTerm()>
<java.sql.DatabaseMetaData: java.lang.String getTimeDateFunctions()>
<java.sql.DatabaseMetaData: int getMaxColumnsInTable()>
<java.sql.DatabaseMetaData: boolean supportsResultSetType(int)>
<java.sql.DatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()>
<java.sql.DatabaseMetaData: boolean supportsMixedCaseIdentifiers()>
<java.sql.DatabaseMetaData: int getMaxTablesInSelect()>
<java.sql.DatabaseMetaData: int getMaxColumnsInOrderBy()>
<java.sql.DatabaseMetaData: boolean storesLowerCaseIdentifiers()>
<java.sql.DatabaseMetaData: java.lang.String getNumericFunctions()>
<java.sql.DatabaseMetaData: boolean supportsConvert()>
<java.sql.DatabaseMetaData: java.lang.String getSearchStringEscape()>
<java.sql.DatabaseMetaData: boolean othersUpdatesAreVisible(int)>
<java.sql.DatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean ownDeletesAreVisible(int)>
<java.sql.DatabaseMetaData: boolean dataDefinitionCausesTransactionCommit()>
<java.sql.DatabaseMetaData: boolean dataDefinitionIgnoredInTransactions()>
<java.sql.DatabaseMetaData: java.lang.String getUserName()>
<java.sql.DatabaseMetaData: boolean supportsSchemasInDataManipulation()>
<java.sql.DatabaseMetaData: boolean doesMaxRowSizeIncludeBlobs()>
<java.sql.DatabaseMetaData: boolean supportsOuterJoins()>
<java.sql.DatabaseMetaData: int getMaxCharLiteralLength()>
<java.sql.DatabaseMetaData: int getMaxConnections()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsGetGeneratedKeys()>
<java.sql.DatabaseMetaData: boolean supportsOpenStatementsAcrossRollback()>
<java.sql.DatabaseMetaData: boolean nullsAreSortedAtEnd()>
<java.sql.DatabaseMetaData: boolean ownUpdatesAreVisible(int)>
<java.sql.DatabaseMetaData: boolean updatesAreDetected(int)>
<java.sql.DatabaseMetaData: int getMaxCursorNameLength()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsSchemasInTableDefinitions()>
<java.sql.DatabaseMetaData: java.lang.String getIdentifierQuoteString()>
<java.sql.DatabaseMetaData: boolean supportsMultipleResultSets()>
<java.sql.DatabaseMetaData: boolean allTablesAreSelectable()>
<java.sql.DatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsDifferentTableCorrelationNames()>
<java.sql.DatabaseMetaData: int getMaxIndexLength()>
<java.sql.DatabaseMetaData: int getMaxRowSize()>
<java.sql.DatabaseMetaData: int getMaxProcedureNameLength()>
<java.sql.DatabaseMetaData: java.sql.Connection getConnection()>
<java.sql.DatabaseMetaData: java.lang.String getSchemaTerm()>
<java.sql.DatabaseMetaData: boolean supportsANSI92FullSQL()>
<java.sql.DatabaseMetaData: int getJDBCMajorVersion()>
<java.sql.DatabaseMetaData: boolean storesMixedCaseIdentifiers()>
<java.sql.DatabaseMetaData: boolean supportsGroupByBeyondSelect()>
<java.sql.DatabaseMetaData: boolean supportsSchemasInProcedureCalls()>
<java.sql.DatabaseMetaData: boolean supportsTransactions()>
<java.sql.DatabaseMetaData: int getJDBCMinorVersion()>
<java.sql.DatabaseMetaData: int getMaxSchemaNameLength()>
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInExists()>
<java.sql.DatabaseMetaData: boolean supportsExtendedSQLGrammar()>
<java.sql.DatabaseMetaData: java.lang.String getDatabaseProductVersion()>
<java.sql.DatabaseMetaData: boolean nullsAreSortedHigh()>
<java.sql.DatabaseMetaData: int getMaxStatements()>
<java.sql.DatabaseMetaData: boolean ownInsertsAreVisible(int)>
<java.sql.DatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()>
<java.sql.DatabaseMetaData: boolean supportsColumnAliasing()>
<java.sql.DatabaseMetaData: boolean supportsTableCorrelationNames()>
<java.sql.DatabaseMetaData: boolean nullsAreSortedAtStart()>
<java.sql.DatabaseMetaData: boolean supportsOpenStatementsAcrossCommit()>
<java.sql.DatabaseMetaData: boolean usesLocalFiles()>
<java.sql.DatabaseMetaData: boolean deletesAreDetected(int)>
<java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
<java.sql.DatabaseMetaData: int getResultSetHoldability()>
<java.sql.DatabaseMetaData: boolean othersDeletesAreVisible(int)>
<java.sql.DatabaseMetaData: boolean supportsCatalogsInTableDefinitions()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsOpenCursorsAcrossRollback()>
<java.sql.DatabaseMetaData: int getSQLStateType()>
<java.sql.DatabaseMetaData: int getMaxBinaryLiteralLength()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsUnion()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsGroupBy()>
<java.sql.DatabaseMetaData: boolean supportsResultSetHoldability(int)>
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInQuantifieds()>
<java.sql.DatabaseMetaData: java.lang.String getDatabaseProductName()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])>
<java.sql.DatabaseMetaData: boolean supportsIntegrityEnhancementFacility()>
<java.sql.DatabaseMetaData: boolean supportsCorrelatedSubqueries()>
<java.sql.DatabaseMetaData: java.lang.String getDriverName()>
<java.sql.DatabaseMetaData: boolean isReadOnly()>
<java.sql.DatabaseMetaData: boolean supportsANSI92IntermediateSQL()>
<java.sql.DatabaseMetaData: boolean nullPlusNonNullIsNull()>
<java.sql.DatabaseMetaData: int getMaxColumnsInSelect()>
<java.sql.DatabaseMetaData: boolean supportsBatchUpdates()>
<java.sql.DatabaseMetaData: boolean supportsPositionedUpdate()>
<java.sql.DatabaseMetaData: boolean supportsTransactionIsolationLevel(int)>
<java.sql.DatabaseMetaData: java.lang.String getURL()>
<java.sql.DatabaseMetaData: boolean supportsStatementPooling()>
<java.sql.DatabaseMetaData: boolean insertsAreDetected(int)>
<java.sql.DatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)>
<java.sql.DatabaseMetaData: boolean isCatalogAtStart()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsAlterTableWithDropColumn()>
<java.sql.DatabaseMetaData: boolean supportsMinimumSQLGrammar()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<java.sql.DatabaseMetaData: boolean locatorsUpdateCopy()>
<java.sql.DatabaseMetaData: boolean supportsLimitedOuterJoins()>
<java.sql.DatabaseMetaData: int getMaxColumnNameLength()>
<java.sql.DatabaseMetaData: boolean storesUpperCaseIdentifiers()>
<java.sql.DatabaseMetaData: java.lang.String getCatalogTerm()>
<java.sql.DatabaseMetaData: boolean supportsDataDefinitionAndDataManipulationTransactions()>
<java.sql.DatabaseMetaData: boolean supportsSavepoints()>
<java.sql.DatabaseMetaData: int getMaxTableNameLength()>
<java.sql.DatabaseMetaData: boolean supportsCatalogsInProcedureCalls()>
<java.sql.DatabaseMetaData: java.lang.String getSQLKeywords()>
<java.sql.DatabaseMetaData: boolean supportsConvert(int,int)>
<java.sql.DatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData: boolean supportsANSI92EntryLevelSQL()>
<java.sql.DatabaseMetaData: boolean supportsMultipleTransactions()>
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInIns()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getTableTypes()>
<java.sql.DatabaseMetaData: boolean supportsDataManipulationTransactionsOnly()>
<java.sql.DatabaseMetaData: java.lang.String getSystemFunctions()>
<java.sql.DatabaseMetaData: boolean storesUpperCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData: boolean supportsNonNullableColumns()>
<java.sql.DatabaseMetaData: boolean supportsPositionedDelete()>
<java.sql.DatabaseMetaData: boolean supportsExpressionsInOrderBy()>
<java.sql.DatabaseMetaData: boolean supportsMultipleOpenResults()>
<java.sql.DatabaseMetaData: boolean allProceduresAreCallable()>
<java.sql.DatabaseMetaData: int getMaxStatementLength()>
<java.sql.DatabaseMetaData: boolean supportsAlterTableWithAddColumn()>
<java.sql.DatabaseMetaData: java.lang.String getCatalogSeparator()>
<java.sql.DatabaseMetaData: boolean othersInsertsAreVisible(int)>
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInComparisons()>
<java.sql.DatabaseMetaData: int getDefaultTransactionIsolation()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsSchemasInIndexDefinitions()>
<java.sql.DatabaseMetaData: int getDriverMinorVersion()>
<java.sql.DatabaseMetaData: boolean supportsStoredProcedures()>
<java.sql.DatabaseMetaData: int getDriverMajorVersion()>
<java.sql.DatabaseMetaData: java.lang.String getExtraNameCharacters()>
<java.sql.DatabaseMetaData: boolean supportsNamedParameters()>
<java.sql.DatabaseMetaData: int getMaxColumnsInIndex()>
<java.sql.DatabaseMetaData: java.lang.String getDriverVersion()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: int getDatabaseMajorVersion()>
<java.sql.DatabaseMetaData: int getMaxCatalogNameLength()>
<java.sql.DatabaseMetaData: int getDatabaseMinorVersion()>
<java.sql.DatabaseMetaData: int getMaxUserNameLength()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getTypeInfo()>
<java.sql.DatabaseMetaData: boolean supportsCatalogsInDataManipulation()>
<java.sql.DatabaseMetaData: int getMaxColumnsInGroupBy()>
<java.sql.DatabaseMetaData: boolean usesLocalFilePerTable()>
<java.sql.DatabaseMetaData: java.lang.String getStringFunctions()>
<java.sql.DatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getCatalogs()>
<java.sql.DatabaseMetaData: boolean nullsAreSortedLow()>
<java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData: boolean supportsGroupByUnrelated()>
<java.sql.DatabaseMetaData: boolean supportsResultSetConcurrency(int,int)>
<java.sql.DatabaseMetaData: boolean supportsFullOuterJoins()>
<java.sql.DatabaseMetaData: boolean supportsUnionAll()>
<java.sql.DatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()>
<java.sql.DatabaseMetaData: boolean supportsSelectForUpdate()>
<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>
<android.text.AndroidCharacter: void getDirectionalities(char[],byte[],int)>
<android.text.AndroidCharacter: void <init>()>
<android.text.AndroidCharacter: char getMirror(char)>
<android.text.AndroidCharacter: boolean mirror(char[],int,int)>
<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>
<org.apache.http.auth.Credentials: java.lang.String getPassword()>
<java.security.KeyRep: void <init>(java.security.KeyRep.Type,java.lang.String,java.lang.String,byte[])>
<java.security.KeyRep: java.lang.Object readResolve()>
<android.widget.ImageSwitcher: void setImageURI(android.net.Uri)>
<android.widget.ImageSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageSwitcher: void <init>(android.content.Context)>
<android.widget.ImageSwitcher: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageSwitcher: void setImageResource(int)>
<java.net.ConnectException: void <init>(java.lang.String)>
<java.net.ConnectException: void <init>()>
<org.apache.http.io.HttpMessageParser: org.apache.http.HttpMessage parse()>
<junit.framework.TestCase: void <init>()>
<junit.framework.TestCase: int countTestCases()>
<junit.framework.TestCase: void tearDown()>
<junit.framework.TestCase: junit.framework.TestResult run()>
<junit.framework.TestCase: void setName(java.lang.String)>
<junit.framework.TestCase: void runTest()>
<junit.framework.TestCase: java.lang.String getName()>
<junit.framework.TestCase: void <init>(java.lang.String)>
<junit.framework.TestCase: junit.framework.TestResult createResult()>
<junit.framework.TestCase: void runBare()>
<junit.framework.TestCase: void setUp()>
<junit.framework.TestCase: void run(junit.framework.TestResult)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void <init>()>
<java.text.Collator: int getStrength()>
<java.text.Collator: java.text.Collator getInstance(java.util.Locale)>
<java.text.Collator: java.text.CollationKey getCollationKey(java.lang.String)>
<java.text.Collator: int getDecomposition()>
<java.text.Collator: int hashCode()>
<java.text.Collator: java.util.Locale[] getAvailableLocales()>
<java.text.Collator: java.text.Collator getInstance()>
<java.text.Collator: java.lang.Object clone()>
<java.text.Collator: void setDecomposition(int)>
<java.text.Collator: int compare(java.lang.String,java.lang.String)>
<java.text.Collator: void <init>()>
<java.text.Collator: boolean equals(java.lang.String,java.lang.String)>
<java.text.Collator: int compare(java.lang.Object,java.lang.Object)>
<java.text.Collator: void setStrength(int)>
<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.widget.RemoteViews.ActionException: void <init>(java.lang.String)>
<android.hardware.Camera.ShutterCallback: void onShutter()>
<org.json.JSONTokener: char next(char)>
<org.json.JSONTokener: void back()>
<org.json.JSONTokener: int dehexchar(char)>
<org.json.JSONTokener: boolean more()>
<org.json.JSONTokener: java.lang.String nextTo(java.lang.String)>
<org.json.JSONTokener: void <init>(java.lang.String)>
<org.json.JSONTokener: java.lang.Object nextValue()>
<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>
<org.json.JSONTokener: java.lang.String nextTo(char)>
<org.json.JSONTokener: char next()>
<org.json.JSONTokener: void skipPast(java.lang.String)>
<org.json.JSONTokener: java.lang.String next(int)>
<org.json.JSONTokener: char skipTo(char)>
<org.json.JSONTokener: char nextClean()>
<org.json.JSONTokener: java.lang.String nextString(char)>
<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>
<org.apache.http.impl.client.RoutedRequest: void <init>(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String readLine()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[])>
<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>
<java.net.UnknownHostException: void <init>()>
<java.net.UnknownHostException: void <init>(java.lang.String)>
<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.String)>
<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.Throwable)>
<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.String,java.lang.Throwable)>
<android.os.DeadObjectException: void <init>()>
<android.widget.TabHost.TabContentFactory: android.view.View createTabContent(java.lang.String)>
<java.util.concurrent.ExecutionException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>
<java.util.concurrent.ExecutionException: void <init>()>
<java.util.concurrent.ExecutionException: void <init>(java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void characters(char[],int,int)>
<org.xml.sax.helpers.DefaultHandler: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void startDocument()>
<org.xml.sax.helpers.DefaultHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.DefaultHandler: void endDocument()>
<org.xml.sax.helpers.DefaultHandler: void <init>()>
<org.xml.sax.helpers.DefaultHandler: void error(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.DefaultHandler: void skippedEntity(java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<org.xml.sax.helpers.DefaultHandler: void endPrefixMapping(java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.DefaultHandler: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.DefaultHandler: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void fatalError(org.xml.sax.SAXParseException)>
<android.graphics.drawable.PaintDrawable: void <init>()>
<android.graphics.drawable.PaintDrawable: void <init>(int)>
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.PaintDrawable: void setCornerRadius(float)>
<android.widget.ArrayAdapter: int getPosition(T)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.widget.ArrayAdapter: void setNotifyOnChange(boolean)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,T[])>
<android.widget.ArrayAdapter: android.content.Context getContext()>
<android.widget.ArrayAdapter: long getItemId(int)>
<android.widget.ArrayAdapter: android.widget.Filter getFilter()>
<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int)>
<android.widget.ArrayAdapter: T getItem(int)>
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.ArrayAdapter: void clear()>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,T[])>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.util.List)>
<android.widget.ArrayAdapter: int getCount()>
<android.widget.ArrayAdapter: void add(T)>
<android.widget.ArrayAdapter: void setDropDownViewResource(int)>
<android.widget.ArrayAdapter: void remove(T)>
<android.widget.ArrayAdapter: void insert(T,int)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int)>
<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>
<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>
<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<android.content.SharedPreferences: int getInt(java.lang.String,int)>
<android.content.SharedPreferences: boolean contains(java.lang.String)>
<android.content.SharedPreferences: long getLong(java.lang.String,long)>
<android.content.SharedPreferences: float getFloat(java.lang.String,float)>
<android.content.SharedPreferences: android.content.SharedPreferences.Editor edit()>
<android.content.SharedPreferences: java.util.Map getAll()>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>
<android.Manifest.permission: void <init>()>
<android.text.style.AlignmentSpan: android.text.Layout.Alignment getAlignment()>
<java.security.interfaces.DSAParams: java.math.BigInteger getG()>
<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>
<java.security.interfaces.DSAParams: java.math.BigInteger getP()>
<android.widget.GridView: int getStretchMode()>
<android.widget.GridView: void setStretchMode(int)>
<android.widget.GridView: void setGravity(int)>
<android.widget.GridView: void setHorizontalSpacing(int)>
<android.widget.GridView: void setSelection(int)>
<android.widget.GridView: android.widget.ListAdapter getAdapter()>
<android.widget.GridView: void setColumnWidth(int)>
<android.widget.GridView: void setVerticalSpacing(int)>
<android.widget.GridView: void setAdapter(android.widget.ListAdapter)>
<android.widget.GridView: void setNumColumns(int)>
<android.widget.GridView: void <init>(android.content.Context)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.net.URISyntaxException: java.lang.String getInput()>
<java.net.URISyntaxException: java.lang.String getReason()>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.net.URISyntaxException: int getIndex()>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<android.text.style.ClickableSpan: void <init>()>
<android.text.style.ClickableSpan: void onClick(android.view.View)>
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)>
<android.widget.BaseExpandableListAdapter: void onGroupExpanded(int)>
<android.widget.BaseExpandableListAdapter: void onGroupCollapsed(int)>
<android.widget.BaseExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseExpandableListAdapter: boolean areAllItemsEnabled()>
<android.widget.BaseExpandableListAdapter: void notifyDataSetInvalidated()>
<android.widget.BaseExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)>
<android.widget.BaseExpandableListAdapter: void notifyDataSetChanged()>
<android.widget.BaseExpandableListAdapter: void <init>()>
<android.widget.BaseExpandableListAdapter: boolean isEmpty()>
<android.provider.MediaStore.Audio.Genres: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Genres: void <init>()>
<java.sql.Array: java.lang.Object getArray(java.util.Map)>
<java.sql.Array: int getBaseType()>
<java.sql.Array: java.sql.ResultSet getResultSet(long,int)>
<java.sql.Array: java.sql.ResultSet getResultSet(java.util.Map)>
<java.sql.Array: java.sql.ResultSet getResultSet(long,int,java.util.Map)>
<java.sql.Array: java.sql.ResultSet getResultSet()>
<java.sql.Array: java.lang.Object getArray()>
<java.sql.Array: java.lang.Object getArray(long,int,java.util.Map)>
<java.sql.Array: java.lang.String getBaseTypeName()>
<java.sql.Array: java.lang.Object getArray(long,int)>
<java.util.EventObject: void <init>(java.lang.Object)>
<java.util.EventObject: java.lang.Object getSource()>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: boolean expectContinue()>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(org.apache.http.RequestLine)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)>
<java.io.LineNumberInputStream: void setLineNumber(int)>
<java.io.LineNumberInputStream: void <init>(java.io.InputStream)>
<java.io.LineNumberInputStream: int getLineNumber()>
<org.apache.http.conn.ConnectionKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.json.JSONObject: void <init>()>
<org.json.JSONObject: boolean optBoolean(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>
<org.json.JSONObject: int getInt(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>
<org.json.JSONObject: java.util.Iterator keys()>
<org.json.JSONObject: double optDouble(java.lang.String)>
<org.json.JSONObject: long optLong(java.lang.String,long)>
<org.json.JSONObject: double getDouble(java.lang.String)>
<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>
<org.json.JSONObject: java.lang.String toString(int)>
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>
<org.json.JSONObject: double optDouble(java.lang.String,double)>
<org.json.JSONObject: java.lang.Object opt(java.lang.String)>
<org.json.JSONObject: void <init>(java.util.Map)>
<org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>
<org.json.JSONObject: java.lang.String quote(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>
<org.json.JSONObject: long optLong(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray names()>
<org.json.JSONObject: int length()>
<org.json.JSONObject: boolean has(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>
<org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)>
<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>
<org.json.JSONObject: void <init>(org.json.JSONTokener)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>
<org.json.JSONObject: java.lang.String getString(java.lang.String)>
<org.json.JSONObject: int optInt(java.lang.String,int)>
<org.json.JSONObject: boolean getBoolean(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
<org.json.JSONObject: java.lang.Object get(java.lang.String)>
<org.json.JSONObject: long getLong(java.lang.String)>
<org.json.JSONObject: java.lang.Object remove(java.lang.String)>
<org.json.JSONObject: void <init>(org.json.JSONObject,java.lang.String[])>
<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>
<org.json.JSONObject: boolean isNull(java.lang.String)>
<org.json.JSONObject: int optInt(java.lang.String)>
<org.json.JSONObject: void <init>(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>
<org.json.JSONObject: java.lang.String optString(java.lang.String)>
<java.nio.IntBuffer: java.nio.IntBuffer slice()>
<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>
<java.nio.IntBuffer: boolean isDirect()>
<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>
<java.nio.IntBuffer: int arrayOffset()>
<java.nio.IntBuffer: int get(int)>
<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>
<java.nio.IntBuffer: int get()>
<java.nio.IntBuffer: java.nio.ByteOrder order()>
<java.nio.IntBuffer: boolean hasArray()>
<java.nio.IntBuffer: java.nio.IntBuffer put(int)>
<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>
<java.nio.IntBuffer: java.nio.IntBuffer compact()>
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer duplicate()>
<java.nio.IntBuffer: int[] array()>
<org.xml.sax.ext.Locator2Impl: void <init>(org.xml.sax.Locator)>
<org.xml.sax.ext.Locator2Impl: void setEncoding(java.lang.String)>
<org.xml.sax.ext.Locator2Impl: java.lang.String getXMLVersion()>
<org.xml.sax.ext.Locator2Impl: void <init>()>
<org.xml.sax.ext.Locator2Impl: void setXMLVersion(java.lang.String)>
<org.xml.sax.ext.Locator2Impl: java.lang.String getEncoding()>
<org.xml.sax.helpers.AttributeListImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: void <init>(org.xml.sax.AttributeList)>
<org.xml.sax.helpers.AttributeListImpl: int getLength()>
<org.xml.sax.helpers.AttributeListImpl: void clear()>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getValue(java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: void removeAttribute(java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: void <init>()>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getType(java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getName(int)>
<org.xml.sax.helpers.AttributeListImpl: void setAttributeList(org.xml.sax.AttributeList)>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getValue(int)>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getType(int)>
<java.lang.reflect.Method: java.lang.String toGenericString()>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object...)>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<java.lang.reflect.Method: int getModifiers()>
<java.lang.reflect.Method: boolean isBridge()>
<java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Method: boolean isVarArgs()>
<java.lang.reflect.Method: boolean isSynthetic()>
<java.lang.reflect.Method: java.lang.String getName()>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.annotation.AnnotationTypeMismatchException: java.lang.String foundType()>
<java.lang.annotation.AnnotationTypeMismatchException: void <init>(java.lang.reflect.Method,java.lang.String)>
<java.lang.annotation.AnnotationTypeMismatchException: java.lang.reflect.Method element()>
<java.lang.Process: int waitFor()>
<java.lang.Process: java.io.OutputStream getOutputStream()>
<java.lang.Process: int exitValue()>
<java.lang.Process: void destroy()>
<java.lang.Process: java.io.InputStream getErrorStream()>
<java.lang.Process: java.io.InputStream getInputStream()>
<java.lang.Process: void <init>()>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(T,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V get(T)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V getAndSet(T,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean weakCompareAndSet(T,V,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(T,V,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void <init>()>
<org.apache.http.conn.BasicEofSensorWatcher: void <init>(org.apache.http.conn.ManagedClientConnection,boolean)>
<org.apache.http.conn.BasicEofSensorWatcher: boolean eofDetected(java.io.InputStream)>
<org.apache.http.conn.BasicEofSensorWatcher: boolean streamClosed(java.io.InputStream)>
<org.apache.http.conn.BasicEofSensorWatcher: boolean streamAbort(java.io.InputStream)>
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.client.methods.HttpRequestBase: void <init>()>
<org.apache.http.client.methods.HttpRequestBase: void setURI(java.net.URI)>
<org.apache.http.client.methods.HttpRequestBase: void abort()>
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>
<org.apache.http.client.methods.HttpRequestBase: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpRequestBase: boolean isAborted()>
<org.apache.http.client.methods.HttpRequestBase: java.lang.Object clone()>
<org.apache.http.client.methods.HttpRequestBase: void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger)>
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.client.methods.HttpRequestBase: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)>
<javax.crypto.interfaces.PBEKey: int getIterationCount()>
<javax.crypto.interfaces.PBEKey: char[] getPassword()>
<javax.crypto.interfaces.PBEKey: byte[] getSalt()>
<android.content.pm.ComponentInfo: void <init>()>
<android.content.pm.ComponentInfo: int getIconResource()>
<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>
<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>
<android.widget.Checkable: boolean isChecked()>
<android.widget.Checkable: void toggle()>
<android.widget.Checkable: void setChecked(boolean)>
<java.util.jar.Attributes: void <init>(java.util.jar.Attributes)>
<java.util.jar.Attributes: java.util.Set entrySet()>
<java.util.jar.Attributes: void <init>()>
<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>
<java.util.jar.Attributes: java.lang.Object clone()>
<java.util.jar.Attributes: int size()>
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>
<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<java.util.jar.Attributes: java.util.Set keySet()>
<java.util.jar.Attributes: boolean containsValue(java.lang.Object)>
<java.util.jar.Attributes: void putAll(java.util.Map)>
<java.util.jar.Attributes: boolean isEmpty()>
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes.Name)>
<java.util.jar.Attributes: void <init>(int)>
<java.util.jar.Attributes: void clear()>
<java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<java.util.jar.Attributes: java.util.Collection values()>
<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>
<org.apache.http.impl.entity.EntityDeserializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification: void <init>(android.os.Parcel)>
<android.app.Notification: void <init>()>
<android.app.Notification: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>
<android.app.Notification: int describeContents()>
<android.widget.Filterable: android.widget.Filter getFilter()>
<android.content.pm.Signature: byte[] toByteArray()>
<android.content.pm.Signature: char[] toChars(char[],int[])>
<android.content.pm.Signature: java.lang.String toCharsString()>
<android.content.pm.Signature: void <init>(java.lang.String)>
<android.content.pm.Signature: void <init>(byte[])>
<android.content.pm.Signature: int describeContents()>
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.Signature: char[] toChars()>
<android.R.array: void <init>()>
<org.apache.http.impl.io.IdentityInputStream: int read()>
<org.apache.http.impl.io.IdentityInputStream: void <init>(org.apache.http.io.SessionInputBuffer)>
<android.webkit.DownloadListener: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>
<org.apache.http.impl.conn.SingleClientConnManager.ConnAdapter: void <init>(org.apache.http.impl.conn.SingleClientConnManager.PoolEntry,org.apache.http.conn.routing.HttpRoute)>
<android.Manifest.permission_group: void <init>()>
<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>
<java.security.cert.CertificateNotYetValidException: void <init>()>
<android.media.MediaPlayer: void prepareAsync()>
<android.media.MediaPlayer: void stop()>
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)>
<android.media.MediaPlayer: void start()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: int getDuration()>
<android.media.MediaPlayer: void setLooping(boolean)>
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener)>
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.media.MediaPlayer: void prepare()>
<android.media.MediaPlayer: void pause()>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener)>
<android.media.MediaPlayer: void reset()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>
<android.media.MediaPlayer: void setVolume(float,float)>
<android.media.MediaPlayer: int getCurrentPosition()>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void <init>()>
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer.OnErrorListener)>
<android.media.MediaPlayer: int getVideoWidth()>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaPlayer: boolean isPlaying()>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)>
<android.media.MediaPlayer: void release()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>
<android.media.MediaPlayer: int getVideoHeight()>
<android.media.MediaPlayer: void setDataSource(java.lang.String)>
<android.media.MediaPlayer: void seekTo(int)>
<java.io.StringBufferInputStream: int read()>
<java.io.StringBufferInputStream: void <init>(java.lang.String)>
<java.text.MessageFormat: void setFormats(java.text.Format[])>
<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String)>
<java.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()>
<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>
<java.text.MessageFormat: void setLocale(java.util.Locale)>
<java.text.MessageFormat: java.util.Locale getLocale()>
<java.text.MessageFormat: void setFormatsByArgumentIndex(java.text.Format[])>
<java.text.MessageFormat: java.lang.String toPattern()>
<java.text.MessageFormat: void <init>(java.lang.String)>
<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object...)>
<java.text.MessageFormat: java.text.Format[] getFormats()>
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String,java.text.ParsePosition)>
<java.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)>
<java.text.MessageFormat: void setFormat(int,java.text.Format)>
<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.MessageFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.MessageFormat: void applyPattern(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)>
<org.xml.sax.helpers.ParserAdapter: void setFeature(java.lang.String,boolean)>
<org.xml.sax.helpers.ParserAdapter: void endDocument()>
<org.xml.sax.helpers.ParserAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.helpers.ParserAdapter: boolean getFeature(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void <init>()>
<org.xml.sax.helpers.ParserAdapter: java.lang.Object getProperty(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void startElement(java.lang.String,org.xml.sax.AttributeList)>
<org.xml.sax.helpers.ParserAdapter: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.EntityResolver getEntityResolver()>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.DTDHandler getDTDHandler()>
<org.xml.sax.helpers.ParserAdapter: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.ParserAdapter: void parse(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.helpers.ParserAdapter: void <init>(org.xml.sax.Parser)>
<org.xml.sax.helpers.ParserAdapter: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.ParserAdapter: void parse(org.xml.sax.InputSource)>
<org.xml.sax.helpers.ParserAdapter: void startDocument()>
<org.xml.sax.helpers.ParserAdapter: void characters(char[],int,int)>
<org.xml.sax.helpers.ParserAdapter: void endElement(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ContentHandler getContentHandler()>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xml.sax.helpers.ParserAdapter: void setEntityResolver(org.xml.sax.EntityResolver)>
<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String getAlgName()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters getAlgParameters()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.lang.String)>
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.security.Provider)>
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncryptedData()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key)>
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(byte[])>
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.lang.String,byte[])>
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.security.AlgorithmParameters,byte[])>
<org.apache.http.impl.auth.AuthSchemeBase: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>
<org.apache.http.impl.auth.AuthSchemeBase: void processChallenge(org.apache.http.Header)>
<org.apache.http.impl.auth.AuthSchemeBase: void <init>()>
<org.apache.http.impl.auth.AuthSchemeBase: boolean isProxy()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider createCredentialsProvider()>
<org.apache.http.impl.client.AbstractHttpClient: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()>
<org.apache.http.impl.client.AbstractHttpClient: void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()>
<org.apache.http.impl.client.AbstractHttpClient: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>
<org.apache.http.impl.client.AbstractHttpClient: void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore createCookieStore()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler createRedirectHandler()>
<org.apache.http.impl.client.AbstractHttpClient: void removeRequestInterceptorByClass(java.lang.Class)>
<org.apache.http.impl.client.AbstractHttpClient: void clearRequestInterceptors()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpContext createHttpContext()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()>
<org.apache.http.impl.client.AbstractHttpClient: void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()>
<org.apache.http.impl.client.AbstractHttpClient: void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry)>
<org.apache.http.impl.client.AbstractHttpClient: T execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>
<org.apache.http.impl.client.AbstractHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.AbstractHttpClient: void setCookieStore(org.apache.http.client.CookieStore)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>
<org.apache.http.impl.client.AbstractHttpClient: int getResponseInterceptorCount()>
<org.apache.http.impl.client.AbstractHttpClient: void clearResponseInterceptors()>
<org.apache.http.impl.client.AbstractHttpClient: void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()>
<org.apache.http.impl.client.AbstractHttpClient: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)>
<org.apache.http.impl.client.AbstractHttpClient: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int)>
<org.apache.http.impl.client.AbstractHttpClient: void setReuseStrategy(org.apache.http.ConnectionReuseStrategy)>
<org.apache.http.impl.client.AbstractHttpClient: void setUserTokenHandler(org.apache.http.client.UserTokenHandler)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()>
<org.apache.http.impl.client.AbstractHttpClient: void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.AbstractHttpClient: void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner)>
<org.apache.http.impl.client.AbstractHttpClient: T execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore getCookieStore()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry()>
<org.apache.http.impl.client.AbstractHttpClient: void removeResponseInterceptorByClass(java.lang.Class)>
<org.apache.http.impl.client.AbstractHttpClient: T execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>
<org.apache.http.impl.client.AbstractHttpClient: T execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>
<org.apache.http.impl.client.AbstractHttpClient: void setParams(org.apache.http.params.HttpParams)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()>
<org.apache.http.impl.client.AbstractHttpClient: void setRedirectHandler(org.apache.http.client.RedirectHandler)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams createHttpParams()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()>
<org.apache.http.impl.client.AbstractHttpClient: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner()>
<org.apache.http.impl.client.AbstractHttpClient: int getRequestInterceptorCount()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler getRedirectHandler()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler createUserTokenHandler()>
<android.text.SpannableStringInternal: char charAt(int)>
<android.text.SpannableStringInternal: T[] getSpans(int,int,java.lang.Class)>
<android.text.SpannableStringInternal: java.lang.String toString()>
<android.text.SpannableStringInternal: int getSpanFlags(java.lang.Object)>
<android.text.SpannableStringInternal: int getSpanStart(java.lang.Object)>
<android.text.SpannableStringInternal: void getChars(int,int,char[],int)>
<android.text.SpannableStringInternal: int getSpanEnd(java.lang.Object)>
<android.text.SpannableStringInternal: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannableStringInternal: int length()>
<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>
<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.auth.MalformedChallengeException: void <init>()>
<android.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.DrawableContainer: void <init>()>
<android.graphics.drawable.DrawableContainer: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.DrawableContainer: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.DrawableContainer: void setAlpha(int)>
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState)>
<android.graphics.drawable.DrawableContainer: int getOpacity()>
<android.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>
<android.graphics.drawable.DrawableContainer: void draw(android.graphics.Canvas)>
<android.widget.Scroller: void abortAnimation()>
<android.widget.Scroller: void <init>(android.content.Context)>
<android.widget.Scroller: boolean isFinished()>
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.Scroller: int getFinalX()>
<android.widget.Scroller: int getFinalY()>
<android.widget.Scroller: void setFinalY(int)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.widget.Scroller: void setFinalX(int)>
<android.widget.Scroller: void startScroll(int,int,int,int,int)>
<android.widget.Scroller: boolean computeScrollOffset()>
<android.widget.Scroller: void forceFinished(boolean)>
<android.widget.Scroller: void extendDuration(int)>
<android.widget.Scroller: int getDuration()>
<android.widget.Scroller: void startScroll(int,int,int,int)>
<android.widget.Scroller: int timePassed()>
<android.widget.Scroller: int getCurrX()>
<android.widget.Scroller: int getCurrY()>
<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String stripAnchor(java.lang.String)>
<android.webkit.URLUtil: boolean isDataUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isJavaScriptUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isFileUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isHttpUrl(java.lang.String)>
<android.webkit.URLUtil: byte[] decode(byte[])>
<android.webkit.URLUtil: boolean isAboutUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isCookielessProxyUrl(java.lang.String)>
<android.webkit.URLUtil: void <init>()>
<android.webkit.URLUtil: boolean isHttpsUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.URLUtil: boolean isAssetUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isContentUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String composeSearchUrl(java.lang.String,java.lang.String,java.lang.String)>
<java.nio.DoubleBuffer: double get(int)>
<java.nio.DoubleBuffer: double[] array()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>
<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>
<java.nio.DoubleBuffer: int arrayOffset()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer duplicate()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>
<java.nio.DoubleBuffer: java.nio.ByteOrder order()>
<java.nio.DoubleBuffer: boolean hasArray()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer slice()>
<java.nio.DoubleBuffer: boolean isDirect()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer compact()>
<java.nio.DoubleBuffer: double get()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>
<java.text.DecimalFormat: void setGroupingSize(int)>
<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>
<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: void setMultiplier(int)>
<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<java.text.DecimalFormat: java.lang.String getNegativePrefix()>
<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: void <init>(java.lang.String)>
<java.text.DecimalFormat: void <init>()>
<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>
<java.text.DecimalFormat: java.lang.String getPositivePrefix()>
<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>
<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>
<java.text.DecimalFormat: void setParseBigDecimal(boolean)>
<java.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>
<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>
<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>
<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>
<java.text.DecimalFormat: void applyPattern(java.lang.String)>
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>
<java.text.DecimalFormat: boolean isParseBigDecimal()>
<java.text.DecimalFormat: int getGroupingSize()>
<java.text.DecimalFormat: java.lang.String toPattern()>
<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>
<java.text.DecimalFormat: int getMultiplier()>
<android.graphics.PixelXorXfermode: void <init>(int)>
<java.security.cert.CertSelector: java.lang.Object clone()>
<java.security.cert.CertSelector: boolean match(java.security.cert.Certificate)>
<android.graphics.Color: int green(int)>
<android.graphics.Color: int HSVToColor(float[])>
<android.graphics.Color: int alpha(int)>
<android.graphics.Color: int argb(int,int,int,int)>
<android.graphics.Color: int blue(int)>
<android.graphics.Color: int parseColor(java.lang.String)>
<android.graphics.Color: int rgb(int,int,int)>
<android.graphics.Color: void <init>()>
<android.graphics.Color: int red(int)>
<android.graphics.Color: int HSVToColor(int,float[])>
<android.graphics.Color: void RGBToHSV(int,int,int,float[])>
<android.graphics.Color: void colorToHSV(int,float[])>
<java.net.ContentHandler: void <init>()>
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>
<org.apache.http.protocol.HttpResponseInterceptorList: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int)>
<org.apache.http.protocol.HttpResponseInterceptorList: void removeResponseInterceptorByClass(java.lang.Class)>
<org.apache.http.protocol.HttpResponseInterceptorList: int getResponseInterceptorCount()>
<org.apache.http.protocol.HttpResponseInterceptorList: void setInterceptors(java.util.List)>
<org.apache.http.protocol.HttpResponseInterceptorList: void clearResponseInterceptors()>
<org.apache.http.protocol.HttpResponseInterceptorList: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>
<org.apache.http.protocol.HttpResponseInterceptorList: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>
<android.provider.Contacts.Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)>
<org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,int)>
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)>
<org.apache.http.impl.io.ChunkedOutputStream: void flushCache()>
<org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)>
<org.apache.http.impl.io.ChunkedOutputStream: void finish()>
<org.apache.http.impl.io.ChunkedOutputStream: void writeClosingChunk()>
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>
<android.webkit.WebSettings.RenderPriority: android.webkit.WebSettings.RenderPriority[] values()>
<android.webkit.WebSettings.RenderPriority: android.webkit.WebSettings.RenderPriority valueOf(java.lang.String)>
<java.util.zip.CheckedOutputStream: java.util.zip.Checksum getChecksum()>
<java.util.zip.CheckedOutputStream: void <init>(java.io.OutputStream,java.util.zip.Checksum)>
<android.preference.Preference: void setTitle(int)>
<android.preference.Preference: boolean hasKey()>
<android.preference.Preference: void onRestoreInstanceState(android.os.Parcelable)>
<android.preference.Preference: void setWidgetLayoutResource(int)>
<android.preference.Preference: java.lang.CharSequence getSummary()>
<android.preference.Preference: android.view.View onCreateView(android.view.ViewGroup)>
<android.preference.Preference: void setShouldDisableView(boolean)>
<android.preference.Preference: void setTitle(java.lang.CharSequence)>
<android.preference.Preference: float getPersistedFloat(float)>
<android.preference.Preference: void onDependencyChanged(android.preference.Preference,boolean)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.Preference: void notifyDependencyChange(boolean)>
<android.preference.Preference: void <init>(android.content.Context)>
<android.preference.Preference: android.preference.Preference findPreferenceInHierarchy(java.lang.String)>
<android.preference.Preference: boolean callChangeListener(java.lang.Object)>
<android.preference.Preference: long getPersistedLong(long)>
<android.preference.Preference: boolean isSelectable()>
<android.preference.Preference: void setDefaultValue(java.lang.Object)>
<android.preference.Preference: android.content.Intent getIntent()>
<android.preference.Preference: boolean shouldDisableDependents()>
<android.preference.Preference: void setOrder(int)>
<android.preference.Preference: void onSetInitialValue(boolean,java.lang.Object)>
<android.preference.Preference: boolean persistFloat(float)>
<android.preference.Preference: void setDependency(java.lang.String)>
<android.preference.Preference: void saveHierarchyState(android.os.Bundle)>
<android.preference.Preference: void setSummary(int)>
<android.preference.Preference: android.preference.Preference.OnPreferenceChangeListener getOnPreferenceChangeListener()>
<android.preference.Preference: boolean isPersistent()>
<android.preference.Preference: void setEnabled(boolean)>
<android.preference.Preference: void onPrepareForRemoval()>
<android.preference.Preference: boolean persistString(java.lang.String)>
<android.preference.Preference: void setSelectable(boolean)>
<android.preference.Preference: java.lang.String getKey()>
<android.preference.Preference: void onBindView(android.view.View)>
<android.preference.Preference: boolean persistInt(int)>
<android.preference.Preference: android.content.Context getContext()>
<android.preference.Preference: boolean getShouldDisableView()>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.Preference: boolean persistBoolean(boolean)>
<android.preference.Preference: void onAttachedToHierarchy(android.preference.PreferenceManager)>
<android.preference.Preference: android.preference.Preference.OnPreferenceClickListener getOnPreferenceClickListener()>
<android.preference.Preference: void notifyHierarchyChanged()>
<android.preference.Preference: void setKey(java.lang.String)>
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.Preference: java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int)>
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()>
<android.preference.Preference: void setPersistent(boolean)>
<android.preference.Preference: android.os.Parcelable onSaveInstanceState()>
<android.preference.Preference: void setIntent(android.content.Intent)>
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)>
<android.preference.Preference: void setSummary(java.lang.CharSequence)>
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference.OnPreferenceChangeListener)>
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)>
<android.preference.Preference: boolean isEnabled()>
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference.OnPreferenceClickListener)>
<android.preference.Preference: android.content.SharedPreferences.Editor getEditor()>
<android.preference.Preference: int getPersistedInt(int)>
<android.preference.Preference: void onClick()>
<android.preference.Preference: java.lang.String getDependency()>
<android.preference.Preference: void onAttachedToActivity()>
<android.preference.Preference: java.lang.CharSequence getTitle()>
<android.preference.Preference: boolean persistLong(long)>
<android.preference.Preference: boolean shouldCommit()>
<android.preference.Preference: void setLayoutResource(int)>
<android.preference.Preference: int getWidgetLayoutResource()>
<android.preference.Preference: int getLayoutResource()>
<android.preference.Preference: boolean getPersistedBoolean(boolean)>
<android.preference.Preference: int compareTo(android.preference.Preference)>
<android.preference.Preference: void restoreHierarchyState(android.os.Bundle)>
<android.preference.Preference: boolean shouldPersist()>
<android.preference.Preference: void notifyChanged()>
<android.preference.Preference: int getOrder()>
<org.apache.http.client.protocol.RequestDefaultHeaders: void <init>()>
<org.apache.http.client.protocol.RequestDefaultHeaders: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<java.security.cert.PKIXCertPathBuilderResult: void <init>(java.security.cert.CertPath,java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)>
<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.CertPath getCertPath()>
<java.lang.Thread.State: java.lang.Thread.State[] values()>
<java.lang.Thread.State: java.lang.Thread.State valueOf(java.lang.String)>
<android.graphics.Rasterizer: void <init>()>
<android.widget.RadioGroup.OnCheckedChangeListener: void onCheckedChanged(android.widget.RadioGroup,int)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
<android.graphics.drawable.Drawable: boolean onStateChange(int[])>
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<android.graphics.drawable.Drawable: int getLevel()>
<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>
<android.graphics.drawable.Drawable: int getMinimumWidth()>
<android.graphics.drawable.Drawable: void invalidateSelf()>
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff.Mode)>
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>
<android.graphics.drawable.Drawable: boolean setLevel(int)>
<android.graphics.drawable.Drawable: void <init>()>
<android.graphics.drawable.Drawable: int getIntrinsicWidth()>
<android.graphics.drawable.Drawable: boolean isVisible()>
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
<android.graphics.drawable.Drawable: boolean setState(int[])>
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: int getMinimumHeight()>
<android.graphics.drawable.Drawable: boolean isStateful()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable.Callback)>
<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
<android.graphics.drawable.Drawable: int getChangingConfigurations()>
<android.graphics.drawable.Drawable: void setDither(boolean)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
<android.graphics.drawable.Drawable: void setAlpha(int)>
<android.graphics.drawable.Drawable: int getIntrinsicHeight()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>
<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>
<android.graphics.drawable.Drawable: boolean onLevelChange(int)>
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: int getOpacity()>
<android.graphics.drawable.Drawable: int[] getState()>
<android.graphics.drawable.Drawable: void clearColorFilter()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.MultiAutoCompleteTextView: void performFiltering(java.lang.CharSequence,int,int,int)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context)>
<org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>
<org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String[])>
<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>
<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>
<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>
<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>
<java.math.BigDecimal: void <init>(java.lang.String)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: float floatValue()>
<java.math.BigDecimal: void <init>(int)>
<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>
<java.math.BigDecimal: int intValue()>
<java.math.BigDecimal: java.math.BigDecimal max(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(long)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>
<java.math.BigDecimal: java.math.BigDecimal pow(int,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal plus(java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(double)>
<java.math.BigDecimal: void <init>(char[],int,int)>
<java.math.BigDecimal: java.math.BigDecimal abs()>
<java.math.BigDecimal: void <init>(double)>
<java.math.BigDecimal: byte byteValueExact()>
<java.math.BigDecimal: java.math.BigDecimal remainder(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal remainder(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal pow(int)>
<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal negate(java.math.MathContext)>
<java.math.BigDecimal: java.lang.String toEngineeringString()>
<java.math.BigDecimal: void <init>(double,java.math.MathContext)>
<java.math.BigDecimal: double doubleValue()>
<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal movePointRight(int)>
<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: void <init>(char[],java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal min(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal movePointLeft(int)>
<java.math.BigDecimal: short shortValueExact()>
<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int)>
<java.math.BigDecimal: int intValueExact()>
<java.math.BigDecimal: java.math.BigDecimal stripTrailingZeros()>
<java.math.BigDecimal: java.math.BigInteger toBigInteger()>
<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: long longValueExact()>
<java.math.BigDecimal: void <init>(int,java.math.MathContext)>
<java.math.BigDecimal: void <init>(long,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal)>
<java.math.BigDecimal: void <init>(char[],int,int,java.math.MathContext)>
<java.math.BigDecimal: void <init>(char[])>
<java.math.BigDecimal: java.math.BigDecimal plus()>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal ulp()>
<java.math.BigDecimal: java.math.BigInteger toBigIntegerExact()>
<java.math.BigDecimal: int scale()>
<java.math.BigDecimal: java.math.BigInteger unscaledValue()>
<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>
<java.math.BigDecimal: int signum()>
<java.math.BigDecimal: java.lang.String toPlainString()>
<java.math.BigDecimal: java.math.BigDecimal negate()>
<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>
<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>
<java.math.BigDecimal: void <init>(java.lang.String,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>
<java.math.BigDecimal: long longValue()>
<java.math.BigDecimal: void <init>(long)>
<java.math.BigDecimal: void <init>(java.math.BigInteger)>
<java.math.BigDecimal: int precision()>
<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal scaleByPowerOfTen(int)>
<org.apache.http.cookie.SetCookie: void setSecure(boolean)>
<org.apache.http.cookie.SetCookie: void setComment(java.lang.String)>
<org.apache.http.cookie.SetCookie: void setVersion(int)>
<org.apache.http.cookie.SetCookie: void setDomain(java.lang.String)>
<org.apache.http.cookie.SetCookie: void setExpiryDate(java.util.Date)>
<org.apache.http.cookie.SetCookie: void setPath(java.lang.String)>
<org.apache.http.cookie.SetCookie: void setValue(java.lang.String)>
<android.content.ContentQueryMap: android.content.ContentValues getValues(java.lang.String)>
<android.content.ContentQueryMap: void setKeepUpdated(boolean)>
<android.content.ContentQueryMap: void requery()>
<android.content.ContentQueryMap: void <init>(android.database.Cursor,java.lang.String,boolean,android.os.Handler)>
<android.content.ContentQueryMap: void close()>
<android.content.ContentQueryMap: java.util.Map getRows()>
<java.lang.Character: int codePointCount(char[],int,int)>
<java.lang.Character: int toLowerCase(int)>
<java.lang.Character: boolean isUpperCase(char)>
<java.lang.Character: boolean isDigit(char)>
<java.lang.Character: boolean isUnicodeIdentifierPart(char)>
<java.lang.Character: boolean isLetterOrDigit(int)>
<java.lang.Character: boolean isUnicodeIdentifierPart(int)>
<java.lang.Character: boolean isUpperCase(int)>
<java.lang.Character: boolean isSupplementaryCodePoint(int)>
<java.lang.Character: int codePointBefore(char[],int,int)>
<java.lang.Character: byte getDirectionality(int)>
<java.lang.Character: boolean isDigit(int)>
<java.lang.Character: boolean isJavaLetter(char)>
<java.lang.Character: boolean isIdentifierIgnorable(int)>
<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>
<java.lang.Character: char toLowerCase(char)>
<java.lang.Character: char forDigit(int,int)>
<java.lang.Character: boolean isLowSurrogate(char)>
<java.lang.Character: boolean isValidCodePoint(int)>
<java.lang.Character: boolean isIdentifierIgnorable(char)>
<java.lang.Character: char charValue()>
<java.lang.Character: boolean isTitleCase(int)>
<java.lang.Character: int getType(char)>
<java.lang.Character: java.lang.String toString(char)>
<java.lang.Character: boolean isHighSurrogate(char)>
<java.lang.Character: boolean isMirrored(char)>
<java.lang.Character: boolean isLetter(int)>
<java.lang.Character: boolean isLowerCase(int)>
<java.lang.Character: char[] toChars(int)>
<java.lang.Character: boolean isJavaIdentifierStart(char)>
<java.lang.Character: boolean isDefined(int)>
<java.lang.Character: java.lang.Character valueOf(char)>
<java.lang.Character: boolean isSurrogatePair(char,char)>
<java.lang.Character: boolean isWhitespace(int)>
<java.lang.Character: int toChars(int,char[],int)>
<java.lang.Character: void <init>(char)>
<java.lang.Character: int getNumericValue(char)>
<java.lang.Character: boolean isJavaIdentifierStart(int)>
<java.lang.Character: boolean isJavaIdentifierPart(int)>
<java.lang.Character: boolean isWhitespace(char)>
<java.lang.Character: boolean isJavaLetterOrDigit(char)>
<java.lang.Character: int toTitleCase(int)>
<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>
<java.lang.Character: boolean isSpaceChar(int)>
<java.lang.Character: char toUpperCase(char)>
<java.lang.Character: boolean isSpaceChar(char)>
<java.lang.Character: boolean isISOControl(char)>
<java.lang.Character: char toTitleCase(char)>
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>
<java.lang.Character: boolean isLowerCase(char)>
<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>
<java.lang.Character: int digit(int,int)>
<java.lang.Character: boolean isDefined(char)>
<java.lang.Character: boolean isMirrored(int)>
<java.lang.Character: int getNumericValue(int)>
<java.lang.Character: int toUpperCase(int)>
<java.lang.Character: byte getDirectionality(char)>
<java.lang.Character: int digit(char,int)>
<java.lang.Character: int getType(int)>
<java.lang.Character: boolean isISOControl(int)>
<java.lang.Character: boolean isSpace(char)>
<java.lang.Character: int compareTo(java.lang.Character)>
<java.lang.Character: int codePointAt(char[],int)>
<java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.lang.Character: boolean isUnicodeIdentifierStart(int)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.lang.Character: boolean isLetter(char)>
<java.lang.Character: int charCount(int)>
<java.lang.Character: int toCodePoint(char,char)>
<java.lang.Character: boolean isLetterOrDigit(char)>
<java.lang.Character: char reverseBytes(char)>
<java.lang.Character: int codePointAt(char[],int,int)>
<java.lang.Character: boolean isUnicodeIdentifierStart(char)>
<java.lang.Character: boolean isTitleCase(char)>
<java.lang.Character: int codePointBefore(char[],int)>
<java.sql.ParameterMetaData: int isNullable(int)>
<java.sql.ParameterMetaData: int getPrecision(int)>
<java.sql.ParameterMetaData: int getScale(int)>
<java.sql.ParameterMetaData: int getParameterMode(int)>
<java.sql.ParameterMetaData: int getParameterType(int)>
<java.sql.ParameterMetaData: java.lang.String getParameterClassName(int)>
<java.sql.ParameterMetaData: java.lang.String getParameterTypeName(int)>
<java.sql.ParameterMetaData: boolean isSigned(int)>
<java.sql.ParameterMetaData: int getParameterCount()>
<org.apache.http.impl.conn.tsccm.RefQueueWorker: void run()>
<org.apache.http.impl.conn.tsccm.RefQueueWorker: void <init>(java.lang.ref.ReferenceQueue,org.apache.http.impl.conn.tsccm.RefQueueHandler)>
<org.apache.http.impl.conn.tsccm.RefQueueWorker: void shutdown()>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,java.lang.String,java.security.KeyStore)>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,java.lang.String)>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>
<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>
<org.apache.http.conn.ssl.SSLSocketFactory: boolean isSecure(java.net.Socket)>
<java.lang.StrictMath: long abs(long)>
<java.lang.StrictMath: double atan2(double,double)>
<java.lang.StrictMath: double acos(double)>
<java.lang.StrictMath: int min(int,int)>
<java.lang.StrictMath: long min(long,long)>
<java.lang.StrictMath: double cos(double)>
<java.lang.StrictMath: double log1p(double)>
<java.lang.StrictMath: double sin(double)>
<java.lang.StrictMath: double cbrt(double)>
<java.lang.StrictMath: double abs(double)>
<java.lang.StrictMath: int round(float)>
<java.lang.StrictMath: double IEEEremainder(double,double)>
<java.lang.StrictMath: double sqrt(double)>
<java.lang.StrictMath: double expm1(double)>
<java.lang.StrictMath: double pow(double,double)>
<java.lang.StrictMath: double tan(double)>
<java.lang.StrictMath: int abs(int)>
<java.lang.StrictMath: int max(int,int)>
<java.lang.StrictMath: double floor(double)>
<java.lang.StrictMath: float signum(float)>
<java.lang.StrictMath: double toRadians(double)>
<java.lang.StrictMath: long max(long,long)>
<java.lang.StrictMath: double max(double,double)>
<java.lang.StrictMath: double asin(double)>
<java.lang.StrictMath: double ulp(double)>
<java.lang.StrictMath: double sinh(double)>
<java.lang.StrictMath: double toDegrees(double)>
<java.lang.StrictMath: double exp(double)>
<java.lang.StrictMath: double hypot(double,double)>
<java.lang.StrictMath: float min(float,float)>
<java.lang.StrictMath: double log(double)>
<java.lang.StrictMath: double log10(double)>
<java.lang.StrictMath: double random()>
<java.lang.StrictMath: double cosh(double)>
<java.lang.StrictMath: float abs(float)>
<java.lang.StrictMath: double ceil(double)>
<java.lang.StrictMath: double rint(double)>
<java.lang.StrictMath: double tanh(double)>
<java.lang.StrictMath: double min(double,double)>
<java.lang.StrictMath: long round(double)>
<java.lang.StrictMath: float max(float,float)>
<java.lang.StrictMath: double atan(double)>
<java.lang.StrictMath: double signum(double)>
<java.lang.StrictMath: float ulp(float)>
<org.apache.http.HttpRequestInterceptor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<android.net.wifi.WifiConfiguration: int describeContents()>
<android.net.wifi.WifiConfiguration: void <init>()>
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>
<java.security.AlgorithmParameterGeneratorSpi: void <init>()>
<java.security.AlgorithmParameterGeneratorSpi: void engineInit(int,java.security.SecureRandom)>
<java.security.AlgorithmParameterGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.security.AlgorithmParameterGeneratorSpi: java.security.AlgorithmParameters engineGenerateParameters()>
<java.lang.ClassCircularityError: void <init>()>
<java.lang.ClassCircularityError: void <init>(java.lang.String)>
<javax.security.auth.DestroyFailedException: void <init>()>
<javax.security.auth.DestroyFailedException: void <init>(java.lang.String)>
<java.util.concurrent.CancellationException: void <init>()>
<java.util.concurrent.CancellationException: void <init>(java.lang.String)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)>
<android.graphics.drawable.NinePatchDrawable: int getOpacity()>
<android.graphics.drawable.NinePatchDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)>
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.NinePatch)>
<android.app.ActivityGroup: void <init>()>
<android.app.ActivityGroup: void <init>(boolean)>
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()>
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.graphics.Region: android.graphics.Rect getBounds()>
<android.graphics.Region: boolean quickReject(int,int,int,int)>
<android.graphics.Region: void translate(int,int,android.graphics.Region)>
<android.graphics.Region: boolean quickContains(int,int,int,int)>
<android.graphics.Region: void <init>(int,int,int,int)>
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>
<android.graphics.Region: boolean set(android.graphics.Region)>
<android.graphics.Region: boolean union(android.graphics.Rect)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region.Op)>
<android.graphics.Region: void <init>(android.graphics.Rect)>
<android.graphics.Region: void translate(int,int)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Region: void <init>()>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.graphics.Region: void setEmpty()>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Region: boolean isRect()>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Region: void <init>(android.graphics.Region)>
<android.graphics.Region: boolean contains(int,int)>
<android.graphics.Region: boolean quickContains(android.graphics.Rect)>
<android.graphics.Region: boolean set(android.graphics.Rect)>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region.Op)>
<android.graphics.Region: int describeContents()>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Region: boolean isEmpty()>
<android.graphics.Region: boolean isComplex()>
<android.graphics.Region: boolean quickReject(android.graphics.Region)>
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>
<android.graphics.Region: boolean quickReject(android.graphics.Rect)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Exception: void <init>(java.lang.Throwable)>
<android.graphics.Interpolator: int getKeyFrameCount()>
<android.graphics.Interpolator: int getValueCount()>
<android.graphics.Interpolator: void <init>(int)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])>
<android.graphics.Interpolator: void reset(int,int)>
<android.graphics.Interpolator: void reset(int)>
<android.graphics.Interpolator: android.graphics.Interpolator.Result timeToValues(int,float[])>
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)>
<android.graphics.Interpolator: android.graphics.Interpolator.Result timeToValues(float[])>
<android.graphics.Interpolator: void <init>(int,int)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])>
<android.graphics.drawable.ShapeDrawable.ShaderFactory: void <init>()>
<android.graphics.drawable.ShapeDrawable.ShaderFactory: android.graphics.Shader resize(int,int)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>
<java.security.NoSuchAlgorithmException: void <init>()>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>()>
<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>
<android.test.InstrumentationTestRunner: junit.framework.TestSuite getAllTests()>
<android.test.InstrumentationTestRunner: java.lang.ClassLoader getLoader()>
<android.test.InstrumentationTestRunner: junit.framework.TestSuite getTestSuite()>
<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>
<android.test.InstrumentationTestRunner: void <init>()>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction)>
<java.security.AccessController: java.security.AccessControlContext getContext()>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction)>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<java.security.AccessController: void checkPermission(java.security.Permission)>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>
<java.util.logging.MemoryHandler: void <init>(java.util.logging.Handler,int,java.util.logging.Level)>
<java.util.logging.MemoryHandler: void push()>
<java.util.logging.MemoryHandler: void setPushLevel(java.util.logging.Level)>
<java.util.logging.MemoryHandler: void close()>
<java.util.logging.MemoryHandler: void <init>()>
<java.util.logging.MemoryHandler: void flush()>
<java.util.logging.MemoryHandler: java.util.logging.Level getPushLevel()>
<java.util.logging.MemoryHandler: void publish(java.util.logging.LogRecord)>
<java.lang.reflect.AnnotatedElement: T getAnnotation(java.lang.Class)>
<java.lang.reflect.AnnotatedElement: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.AnnotatedElement: java.lang.annotation.Annotation[] getAnnotations()>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void <init>()>
<org.apache.http.protocol.HttpRequestHandlerRegistry: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void setHandlers(java.util.Map)>
<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler)>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void unregister(java.lang.String)>
<android.widget.ListView.FixedViewInfo: void <init>()>
<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()>
<java.security.spec.PSSParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,int,int)>
<java.security.spec.PSSParameterSpec: void <init>(int)>
<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>
<java.security.spec.PSSParameterSpec: int getSaltLength()>
<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>
<java.security.spec.PSSParameterSpec: int getTrailerField()>
<java.util.concurrent.Callable: V call()>
<org.apache.http.client.RedirectException: void <init>(java.lang.String)>
<org.apache.http.client.RedirectException: void <init>()>
<org.apache.http.client.RedirectException: void <init>(java.lang.String,java.lang.Throwable)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>
<android.app.Instrumentation: android.content.Context getContext()>
<android.app.Instrumentation: void endPerformanceSnapshot()>
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)>
<android.app.Instrumentation: boolean checkMonitorHit(android.app.Instrumentation.ActivityMonitor,int)>
<android.app.Instrumentation: void sendTrackballEventSync(android.view.MotionEvent)>
<android.app.Instrumentation: void callActivityOnPause(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnDestroy(android.app.Activity)>
<android.app.Instrumentation: void stopProfiling()>
<android.app.Instrumentation: void finish(int,android.os.Bundle)>
<android.app.Instrumentation: void sendStringSync(java.lang.String)>
<android.app.Instrumentation: void setAutomaticPerformanceSnapshots()>
<android.app.Instrumentation: android.content.Context getTargetContext()>
<android.app.Instrumentation: void waitForIdle(java.lang.Runnable)>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object)>
<android.app.Instrumentation: void startAllocCounting()>
<android.app.Instrumentation: boolean isProfiling()>
<android.app.Instrumentation: void sendCharacterSync(int)>
<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>
<android.app.Instrumentation: void setInTouchMode(boolean)>
<android.app.Instrumentation: void addMonitor(android.app.Instrumentation.ActivityMonitor)>
<android.app.Instrumentation: android.app.Activity waitForMonitor(android.app.Instrumentation.ActivityMonitor)>
<android.app.Instrumentation: void onDestroy()>
<android.app.Instrumentation: void onCreate(android.os.Bundle)>
<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>
<android.app.Instrumentation: void start()>
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.Instrumentation: boolean invokeContextMenuAction(android.app.Activity,int,int)>
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnRestart(android.app.Activity)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.Class,android.content.Context)>
<android.app.Instrumentation: void startProfiling()>
<android.app.Instrumentation: void stopAllocCounting()>
<android.app.Instrumentation: void callActivityOnStart(android.app.Activity)>
<android.app.Instrumentation: android.os.Bundle getBinderCounts()>
<android.app.Instrumentation: void startPerformanceSnapshot()>
<android.app.Instrumentation: void sendKeySync(android.view.KeyEvent)>
<android.app.Instrumentation: android.content.ComponentName getComponentName()>
<android.app.Instrumentation: void callActivityOnStop(android.app.Activity)>
<android.app.Instrumentation: android.app.Instrumentation.ActivityMonitor addMonitor(java.lang.String,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation: android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation.ActivityMonitor,long)>
<android.app.Instrumentation: void callApplicationOnCreate(android.app.Application)>
<android.app.Instrumentation: void removeMonitor(android.app.Instrumentation.ActivityMonitor)>
<android.app.Instrumentation: void waitForIdleSync()>
<android.app.Instrumentation: void callActivityOnResume(android.app.Activity)>
<android.app.Instrumentation: android.os.Bundle getAllocCounts()>
<android.app.Instrumentation: void <init>()>
<android.app.Instrumentation: void callActivityOnPostCreate(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>
<android.app.Instrumentation: void sendKeyDownUpSync(int)>
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>
<android.app.Instrumentation: android.app.Instrumentation.ActivityMonitor addMonitor(android.content.IntentFilter,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation: boolean invokeMenuActionSync(android.app.Activity,int,int)>
<android.app.Instrumentation: void onStart()>
<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>()>
<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.ArrayList: void trimToSize()>
<java.util.ArrayList: void <init>(int)>
<java.util.ArrayList: E get(int)>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: java.lang.Object clone()>
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: int size()>
<android.database.CursorWindow: long getLong(int,int)>
<android.database.CursorWindow: void close()>
<android.database.CursorWindow: boolean setNumColumns(int)>
<android.database.CursorWindow: void writeToParcel(android.os.Parcel,int)>
<android.database.CursorWindow: boolean putLong(long,int,int)>
<android.database.CursorWindow: short getShort(int,int)>
<android.database.CursorWindow: void <init>(boolean)>
<android.database.CursorWindow: void freeLastRow()>
<android.database.CursorWindow: byte[] getBlob(int,int)>
<android.database.CursorWindow: boolean putBlob(byte[],int,int)>
<android.database.CursorWindow: void setStartPosition(int)>
<android.database.CursorWindow: void copyStringToBuffer(int,int,android.database.CharArrayBuffer)>
<android.database.CursorWindow: int getStartPosition()>
<android.database.CursorWindow: void clear()>
<android.database.CursorWindow: double getDouble(int,int)>
<android.database.CursorWindow: float getFloat(int,int)>
<android.database.CursorWindow: boolean isNull(int,int)>
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>
<android.database.CursorWindow: int describeContents()>
<android.database.CursorWindow: boolean allocRow()>
<android.database.CursorWindow: void onAllReferencesReleased()>
<android.database.CursorWindow: boolean putNull(int,int)>
<android.database.CursorWindow: boolean putDouble(double,int,int)>
<android.database.CursorWindow: java.lang.String getString(int,int)>
<android.database.CursorWindow: boolean putString(java.lang.String,int,int)>
<android.database.CursorWindow: boolean isBlob(int,int)>
<android.database.CursorWindow: int getNumRows()>
<android.database.CursorWindow: int getInt(int,int)>
<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>
<java.lang.IllegalMonitorStateException: void <init>()>
<java.security.cert.PKIXCertPathChecker: void init(boolean)>
<java.security.cert.PKIXCertPathChecker: boolean isForwardCheckingSupported()>
<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection)>
<java.security.cert.PKIXCertPathChecker: java.util.Set getSupportedExtensions()>
<java.security.cert.PKIXCertPathChecker: java.lang.Object clone()>
<java.security.cert.PKIXCertPathChecker: void <init>()>
<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>
<java.security.spec.ECGenParameterSpec: java.lang.String getName()>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>
<org.apache.http.client.HttpClient: T execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.HttpClient: T execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>
<org.apache.http.client.HttpClient: T execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.HttpClient: T execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>
<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>
<android.graphics.Paint.Style: android.graphics.Paint.Style[] values()>
<android.graphics.Paint.Style: android.graphics.Paint.Style valueOf(java.lang.String)>
<java.util.prefs.PreferenceChangeListener: void preferenceChange(java.util.prefs.PreferenceChangeEvent)>
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)>
<android.view.animation.AccelerateInterpolator: void <init>(float)>
<android.view.animation.AccelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AccelerateInterpolator: void <init>()>
<android.R.string: void <init>()>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TwoLineListItem: android.widget.TextView getText2()>
<android.widget.TwoLineListItem: void <init>(android.content.Context)>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TwoLineListItem: android.widget.TextView getText1()>
<java.util.TooManyListenersException: void <init>(java.lang.String)>
<java.util.TooManyListenersException: void <init>()>
<android.text.style.LeadingMarginSpan.Standard: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.LeadingMarginSpan.Standard: int getLeadingMargin(boolean)>
<android.text.style.LeadingMarginSpan.Standard: void <init>(int,int)>
<android.text.style.LeadingMarginSpan.Standard: void <init>(int)>
<java.io.FileFilter: boolean accept(java.io.File)>
<android.widget.ScrollView: boolean fullScroll(int)>
<android.widget.ScrollView: boolean arrowScroll(int)>
<android.widget.ScrollView: void setSmoothScrollingEnabled(boolean)>
<android.widget.ScrollView: void smoothScrollTo(int,int)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ScrollView: void <init>(android.content.Context)>
<android.widget.ScrollView: int getMaxScrollAmount()>
<android.widget.ScrollView: void smoothScrollBy(int,int)>
<android.widget.ScrollView: boolean isFillViewport()>
<android.widget.ScrollView: boolean pageScroll(int)>
<android.widget.ScrollView: boolean executeKeyEvent(android.view.KeyEvent)>
<android.widget.ScrollView: void fling(int)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ScrollView: void setFillViewport(boolean)>
<android.widget.ScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.widget.ScrollView: boolean isSmoothScrollingEnabled()>
<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>
<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>
<junit.framework.TestListener: void endTest(junit.framework.Test)>
<junit.framework.TestListener: void startTest(junit.framework.Test)>
<android.widget.CheckedTextView: void <init>(android.content.Context)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>
<android.widget.CheckedTextView: void setChecked(boolean)>
<android.widget.CheckedTextView: void toggle()>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(int)>
<android.widget.CheckedTextView: boolean isChecked()>
<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>
<org.apache.http.HttpHost: void <init>(java.lang.String)>
<org.apache.http.HttpHost: java.lang.String toURI()>
<org.apache.http.HttpHost: int getPort()>
<org.apache.http.HttpHost: java.lang.String getSchemeName()>
<org.apache.http.HttpHost: java.lang.String toHostString()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int)>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.http.HttpHost: java.lang.Object clone()>
<org.apache.http.HttpHost: java.lang.String getHostName()>
<org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)>
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>
<java.lang.ExceptionInInitializerError: void <init>()>
<org.apache.http.impl.io.HttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>
<java.net.SocketAddress: void <init>()>
<java.lang.NoSuchMethodException: void <init>()>
<java.lang.NoSuchMethodException: void <init>(java.lang.String)>
<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>
<android.text.Spannable: void removeSpan(java.lang.Object)>
<android.widget.TimePicker.OnTimeChangedListener: void onTimeChanged(android.widget.TimePicker,int,int)>
<org.apache.http.message.BasicHeaderElement: java.lang.String getName()>
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameter(int)>
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)>
<org.apache.http.message.BasicHeaderElement: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderElement: int getParameterCount()>
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair[] getParameters()>
<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>
<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicHeaderElement: java.lang.Object clone()>
<android.text.method.LinkMovementMethod: void <init>()>
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>
<org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler: void <init>()>
<org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>
<javax.crypto.KeyGenerator: void <init>(javax.crypto.KeyGeneratorSpi,java.security.Provider,java.lang.String)>
<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>
<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>
<javax.crypto.KeyGenerator: java.security.Provider getProvider()>
<javax.crypto.KeyGenerator: void init(int)>
<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()>
<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>
<java.util.IllegalFormatPrecisionException: void <init>(int)>
<java.util.IllegalFormatPrecisionException: int getPrecision()>
<junit.runner.BaseTestRunner: void savePreferences()>
<junit.runner.BaseTestRunner: void addError(junit.framework.Test,java.lang.Throwable)>
<junit.runner.BaseTestRunner: void testStarted(java.lang.String)>
<junit.runner.BaseTestRunner: void setPreference(java.lang.String,java.lang.String)>
<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>
<junit.runner.BaseTestRunner: boolean showStackRaw()>
<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>
<junit.runner.BaseTestRunner: void setPreferences(java.util.Properties)>
<junit.runner.BaseTestRunner: void setLoading(boolean)>
<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>
<junit.runner.BaseTestRunner: void startTest(junit.framework.Test)>
<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>
<junit.runner.BaseTestRunner: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>
<junit.runner.BaseTestRunner: junit.runner.TestSuiteLoader getLoader()>
<junit.runner.BaseTestRunner: void clearStatus()>
<junit.runner.BaseTestRunner: void endTest(junit.framework.Test)>
<junit.runner.BaseTestRunner: java.lang.String truncate(java.lang.String)>
<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>
<junit.runner.BaseTestRunner: void testEnded(java.lang.String)>
<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>
<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>
<junit.runner.BaseTestRunner: boolean useReloadingTestSuiteLoader()>
<junit.runner.BaseTestRunner: void <init>()>
<junit.runner.BaseTestRunner: java.lang.String elapsedTimeAsString(long)>
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>
<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>
<junit.runner.BaseTestRunner: boolean inVAJava()>
<junit.runner.BaseTestRunner: java.lang.String processArguments(java.lang.String[])>
<android.os.IBinder.DeathRecipient: void binderDied()>
<android.widget.ImageView.ScaleType: android.widget.ImageView.ScaleType[] values()>
<android.widget.ImageView.ScaleType: android.widget.ImageView.ScaleType valueOf(java.lang.String)>
<android.view.animation.Animation: void scaleCurrentDuration(float)>
<android.view.animation.Animation: void setFillBefore(boolean)>
<android.view.animation.Animation: void ensureInterpolator()>
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.Animation: boolean willChangeBounds()>
<android.view.animation.Animation: void reset()>
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>
<android.view.animation.Animation: boolean getFillBefore()>
<android.view.animation.Animation: long getStartTime()>
<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>
<android.view.animation.Animation: int getRepeatCount()>
<android.view.animation.Animation: boolean getFillAfter()>
<android.view.animation.Animation: long getStartOffset()>
<android.view.animation.Animation: void setZAdjustment(int)>
<android.view.animation.Animation: int getRepeatMode()>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>
<android.view.animation.Animation: void initialize(int,int,int,int)>
<android.view.animation.Animation: void setRepeatCount(int)>
<android.view.animation.Animation: void setFillAfter(boolean)>
<android.view.animation.Animation: boolean isInitialized()>
<android.view.animation.Animation: void restrictDuration(long)>
<android.view.animation.Animation: void setStartOffset(long)>
<android.view.animation.Animation: boolean hasEnded()>
<android.view.animation.Animation: void setStartTime(long)>
<android.view.animation.Animation: void setDuration(long)>
<android.view.animation.Animation: void setRepeatMode(int)>
<android.view.animation.Animation: void start()>
<android.view.animation.Animation: long getDuration()>
<android.view.animation.Animation: int getZAdjustment()>
<android.view.animation.Animation: boolean willChangeTransformationMatrix()>
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation.AnimationListener)>
<android.view.animation.Animation: void startNow()>
<android.view.animation.Animation: boolean hasStarted()>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.Animation: void <init>()>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebView: android.graphics.Bitmap getFavicon()>
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>
<android.webkit.WebView: boolean zoomOut()>
<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>
<android.webkit.WebView: boolean pageDown(boolean)>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: java.lang.String getTitle()>
<android.webkit.WebView: void enablePlatformNotifications()>
<android.webkit.WebView: int getContentHeight()>
<android.webkit.WebView: boolean pageUp(boolean)>
<android.webkit.WebView: void refreshPlugins(boolean)>
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.webkit.WebView: void clearCache(boolean)>
<android.webkit.WebView: android.view.View getZoomControls()>
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebView: void requestImageRef(android.os.Message)>
<android.webkit.WebView: void clearSslPreferences()>
<android.webkit.WebView: void reload()>
<android.webkit.WebView: void loadUrl(java.lang.String)>
<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>
<android.webkit.WebView: void goBack()>
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.webkit.WebView: boolean canGoBackOrForward(int)>
<android.webkit.WebView: boolean canGoForward()>
<android.webkit.WebView: void resumeTimers()>
<android.webkit.WebView: boolean canGoBack()>
<android.webkit.WebView: boolean zoomIn()>
<android.webkit.WebView: android.webkit.PluginList getPluginList()>
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void goForward()>
<android.webkit.WebView: boolean overlayVerticalScrollbar()>
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>
<android.webkit.WebView: boolean overlayHorizontalScrollbar()>
<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>
<android.webkit.WebView: void invokeZoomPicker()>
<android.webkit.WebView: void destroy()>
<android.webkit.WebView: float getScale()>
<android.webkit.WebView: android.graphics.Picture capturePicture()>
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: int getProgress()>
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>
<android.webkit.WebView: void clearFormData()>
<android.webkit.WebView: void clearView()>
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: java.lang.String getUrl()>
<android.webkit.WebView: void pauseTimers()>
<android.webkit.WebView: void setPictureListener(android.webkit.WebView.PictureListener)>
<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>
<android.webkit.WebView: android.webkit.WebView.HitTestResult getHitTestResult()>
<android.webkit.WebView: void debugDump()>
<android.webkit.WebView: void flingScroll(int,int)>
<android.webkit.WebView: void documentHasImages(android.os.Message)>
<android.webkit.WebView: void goBackOrForward(int)>
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>
<android.webkit.WebView: void clearHistory()>
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)>
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>
<android.webkit.WebView: void disablePlatformNotifications()>
<android.webkit.WebView: void stopLoading()>
<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>
<android.webkit.WebView: android.webkit.WebSettings getSettings()>
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>
<android.webkit.WebView: void setInitialScale(int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.View.OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.DateFormat: void <init>()>
<java.text.DateFormat: void setNumberFormat(java.text.NumberFormat)>
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>
<java.text.DateFormat: void setCalendar(java.util.Calendar)>
<java.text.DateFormat: java.util.Locale[] getAvailableLocales()>
<java.text.DateFormat: java.text.DateFormat getInstance()>
<java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.text.DateFormat: boolean isLenient()>
<java.text.DateFormat: java.util.Calendar getCalendar()>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>
<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>
<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DateFormat: void setLenient(boolean)>
<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>
<java.text.DateFormat: java.text.DateFormat getDateInstance()>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()>
<java.text.DateFormat: java.util.TimeZone getTimeZone()>
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int)>
<java.text.DateFormat: java.text.DateFormat getTimeInstance()>
<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DateFormat: java.util.Date parse(java.lang.String)>
<java.text.DateFormat: java.text.NumberFormat getNumberFormat()>
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<android.webkit.UrlInterceptRegistry: boolean urlInterceptDisabled()>
<android.webkit.UrlInterceptRegistry: boolean unregisterHandler(android.webkit.UrlInterceptHandler)>
<android.webkit.UrlInterceptRegistry: void <init>()>
<android.webkit.UrlInterceptRegistry: void setUrlInterceptDisabled(boolean)>
<android.webkit.UrlInterceptRegistry: boolean registerHandler(android.webkit.UrlInterceptHandler)>
<android.webkit.UrlInterceptRegistry: android.webkit.CacheManager.CacheResult getSurrogate(java.lang.String,java.util.Map)>
<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.util.regex.PatternSyntaxException: java.lang.String getPattern()>
<java.util.regex.PatternSyntaxException: int getIndex()>
<java.util.regex.PatternSyntaxException: java.lang.String getDescription()>
<android.text.Html.TagHandler: void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.SimpleOnGestureListener: void <init>()>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onDown(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.SimpleOnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: void onLongPress(android.view.MotionEvent)>
<java.util.concurrent.atomic.AtomicMarkableReference: void <init>(V,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean weakCompareAndSet(V,V,boolean,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: V get(boolean[])>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean attemptMark(V,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: V getReference()>
<java.util.concurrent.atomic.AtomicMarkableReference: void set(V,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean isMarked()>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean compareAndSet(V,V,boolean,boolean)>
<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()>
<org.apache.http.message.BufferedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>
<org.apache.http.message.BufferedHeader: java.lang.String getName()>
<org.apache.http.message.BufferedHeader: java.lang.String getValue()>
<org.apache.http.message.BufferedHeader: int getValuePos()>
<org.apache.http.message.BufferedHeader: java.lang.Object clone()>
<java.net.InetSocketAddress: int hashCode()>
<java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
<java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<java.net.InetSocketAddress: java.lang.String getHostName()>
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<java.net.InetSocketAddress: boolean isUnresolved()>
<java.net.InetSocketAddress: int getPort()>
<java.net.InetSocketAddress: void <init>(int)>
<javax.net.SocketFactory: java.net.Socket createSocket()>
<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>
<javax.net.SocketFactory: void <init>()>
<javax.net.SocketFactory: javax.net.SocketFactory getDefault()>
<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>
<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<android.widget.AdapterView.OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>
<android.widget.AdapterView.OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<android.preference.PreferenceManager.OnActivityDestroyListener: void onActivityDestroy()>
<org.xml.sax.SAXException: void <init>(java.lang.Exception)>
<org.xml.sax.SAXException: java.lang.Exception getException()>
<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>
<org.xml.sax.SAXException: void <init>()>
<org.xml.sax.SAXException: void <init>(java.lang.String)>
<android.net.wifi.WifiManager.WifiLock: void acquire()>
<android.net.wifi.WifiManager.WifiLock: boolean isHeld()>
<android.net.wifi.WifiManager.WifiLock: void setReferenceCounted(boolean)>
<android.net.wifi.WifiManager.WifiLock: void release()>
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<java.util.regex.Pattern: int flags()>
<java.util.regex.Pattern: java.lang.String quote(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<java.util.regex.Pattern: java.lang.String pattern()>
<javax.sql.RowSetReader: void readData(javax.sql.RowSetInternal)>
<java.security.cert.CRLException: void <init>(java.lang.Throwable)>
<java.security.cert.CRLException: void <init>()>
<java.security.cert.CRLException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CRLException: void <init>(java.lang.String)>
<android.app.SearchManager: void onDismiss(android.content.DialogInterface)>
<android.app.SearchManager: void setOnCancelListener(android.app.SearchManager.OnCancelListener)>
<android.app.SearchManager: void stopSearch()>
<android.app.SearchManager: void onCancel(android.content.DialogInterface)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>
<android.app.SearchManager: void setOnDismissListener(android.app.SearchManager.OnDismissListener)>
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<java.io.UnsupportedEncodingException: void <init>()>
<android.text.LoginFilter.UsernameFilterGeneric: void <init>()>
<android.text.LoginFilter.UsernameFilterGeneric: boolean isAllowed(char)>
<android.text.LoginFilter.UsernameFilterGeneric: void <init>(boolean)>
<org.apache.http.client.protocol.RequestAddCookies: void <init>()>
<org.apache.http.client.protocol.RequestAddCookies: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<android.text.StaticLayout: void <init>(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.StaticLayout: int getLineCount()>
<android.text.StaticLayout: int getEllipsisStart(int)>
<android.text.StaticLayout: int getBottomPadding()>
<android.text.StaticLayout: android.text.Layout.Directions getLineDirections(int)>
<android.text.StaticLayout: int getParagraphDirection(int)>
<android.text.StaticLayout: int getLineDescent(int)>
<android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
<android.text.StaticLayout: boolean getLineContainsTab(int)>
<android.text.StaticLayout: int getLineStart(int)>
<android.text.StaticLayout: void <init>(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
<android.text.StaticLayout: int getLineTop(int)>
<android.text.StaticLayout: int getTopPadding()>
<android.text.StaticLayout: int getEllipsisCount(int)>
<android.widget.Adapter: int getViewTypeCount()>
<android.widget.Adapter: int getCount()>
<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.Adapter: java.lang.Object getItem(int)>
<android.widget.Adapter: long getItemId(int)>
<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.Adapter: boolean hasStableIds()>
<android.widget.Adapter: int getItemViewType(int)>
<android.widget.Adapter: boolean isEmpty()>
<org.apache.http.client.RequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<java.util.prefs.NodeChangeListener: void childAdded(java.util.prefs.NodeChangeEvent)>
<java.util.prefs.NodeChangeListener: void childRemoved(java.util.prefs.NodeChangeEvent)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>
<java.io.ObjectStreamClass: java.lang.String getName()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>
<java.io.ObjectStreamClass: long getSerialVersionUID()>
<java.io.ObjectStreamClass: java.lang.Class forClass()>
<java.security.cert.CertPath.CertPathRep: java.lang.Object readResolve()>
<java.security.cert.CertPath.CertPathRep: void <init>(java.lang.String,byte[])>
<android.content.UriMatcher: void <init>(int)>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.content.UriMatcher: int match(android.net.Uri)>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>
<java.util.Formatter.BigDecimalLayoutForm: java.util.Formatter.BigDecimalLayoutForm valueOf(java.lang.String)>
<java.util.Formatter.BigDecimalLayoutForm: java.util.Formatter.BigDecimalLayoutForm[] values()>
<org.apache.http.impl.auth.BasicSchemeFactory: org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams)>
<org.apache.http.impl.auth.BasicSchemeFactory: void <init>()>
<android.app.Instrumentation.ActivityMonitor: android.app.Activity waitForActivity()>
<android.app.Instrumentation.ActivityMonitor: void <init>(android.content.IntentFilter,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation.ActivityMonitor: int getHits()>
<android.app.Instrumentation.ActivityMonitor: android.content.IntentFilter getFilter()>
<android.app.Instrumentation.ActivityMonitor: void <init>(java.lang.String,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation.ActivityMonitor: android.app.Activity waitForActivityWithTimeout(long)>
<android.app.Instrumentation.ActivityMonitor: android.app.Instrumentation.ActivityResult getResult()>
<android.app.Instrumentation.ActivityMonitor: android.app.Activity getLastActivity()>
<android.app.Instrumentation.ActivityMonitor: boolean isBlocking()>
<android.media.MediaPlayer.OnErrorListener: boolean onError(android.media.MediaPlayer,int,int)>
<org.apache.http.client.HttpResponseException: int getStatusCode()>
<org.apache.http.client.HttpResponseException: void <init>(int,java.lang.String)>
<android.text.style.BulletSpan: void <init>()>
<android.text.style.BulletSpan: void <init>(int)>
<android.text.style.BulletSpan: int getLeadingMargin(boolean)>
<android.text.style.BulletSpan: void <init>(int,int)>
<android.text.style.BulletSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.widget.Chronometer: void setFormat(java.lang.String)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Chronometer: void start()>
<android.widget.Chronometer: void setBase(long)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Chronometer: java.lang.String getFormat()>
<android.widget.Chronometer: long getBase()>
<android.widget.Chronometer: void stop()>
<android.widget.Chronometer: void <init>(android.content.Context)>
<java.security.PermissionCollection: void add(java.security.Permission)>
<java.security.PermissionCollection: boolean implies(java.security.Permission)>
<java.security.PermissionCollection: java.util.Enumeration elements()>
<java.security.PermissionCollection: void <init>()>
<java.security.PermissionCollection: void setReadOnly()>
<java.security.PermissionCollection: boolean isReadOnly()>
<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>
<java.lang.SecurityManager: int classLoaderDepth()>
<java.lang.SecurityManager: void checkAwtEventQueueAccess()>
<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>
<java.lang.SecurityManager: void checkListen(int)>
<java.lang.SecurityManager: void checkPrintJobAccess()>
<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>
<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>
<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)>
<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>
<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>
<java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>
<java.lang.SecurityManager: void checkCreateClassLoader()>
<java.lang.SecurityManager: boolean inClassLoader()>
<java.lang.SecurityManager: void checkRead(java.lang.String)>
<java.lang.SecurityManager: void checkSetFactory()>
<java.lang.SecurityManager: void checkLink(java.lang.String)>
<java.lang.SecurityManager: boolean getInCheck()>
<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>
<java.lang.SecurityManager: void checkSystemClipboardAccess()>
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>
<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>
<java.lang.SecurityManager: void <init>()>
<java.lang.SecurityManager: void checkExit(int)>
<java.lang.SecurityManager: java.lang.Object getSecurityContext()>
<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>
<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>
<java.lang.SecurityManager: int classDepth(java.lang.String)>
<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>
<java.lang.SecurityManager: void checkDelete(java.lang.String)>
<java.lang.SecurityManager: void checkRead(java.lang.String,java.lang.Object)>
<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>
<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>
<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>
<java.lang.SecurityManager: void checkPropertiesAccess()>
<java.lang.SecurityManager: java.lang.Class[] getClassContext()>
<java.lang.SecurityManager: boolean inClass(java.lang.String)>
<java.lang.SecurityManager: void checkExec(java.lang.String)>
<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.lang.SecurityManager: void checkWrite(java.lang.String)>
<android.preference.Preference.OnPreferenceChangeListener: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
<android.view.animation.RotateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.RotateAnimation: void <init>(float,float,int,float,int,float)>
<android.view.animation.RotateAnimation: void <init>(float,float)>
<android.view.animation.RotateAnimation: void <init>(float,float,float,float)>
<android.widget.Spinner: void setPrompt(java.lang.CharSequence)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Spinner: java.lang.CharSequence getPrompt()>
<android.widget.Spinner: void setPromptId(int)>
<android.widget.Spinner: void <init>(android.content.Context)>
<android.widget.Spinner: void onClick(android.content.DialogInterface,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.lang.InstantiationError: void <init>()>
<java.lang.InstantiationError: void <init>(java.lang.String)>
<javax.xml.parsers.ParserConfigurationException: void <init>()>
<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>
<java.util.logging.LoggingMXBean: java.lang.String getLoggerLevel(java.lang.String)>
<java.util.logging.LoggingMXBean: void setLoggerLevel(java.lang.String,java.lang.String)>
<java.util.logging.LoggingMXBean: java.lang.String getParentLoggerName(java.lang.String)>
<java.util.logging.LoggingMXBean: java.util.List getLoggerNames()>
<android.os.ParcelFileDescriptor.AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
<java.io.InputStream: int read(byte[])>
<java.io.InputStream: long skip(long)>
<java.io.InputStream: int read()>
<java.io.InputStream: int read(byte[],int,int)>
<java.io.InputStream: void close()>
<java.io.InputStream: void <init>()>
<java.io.InputStream: void reset()>
<java.io.InputStream: int available()>
<java.io.InputStream: boolean markSupported()>
<java.io.InputStream: void mark(int)>
<android.os.Bundle: double[] getDoubleArray(java.lang.String)>
<android.os.Bundle: int[] getIntArray(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
<android.os.Bundle: void putShortArray(java.lang.String,short[])>
<android.os.Bundle: void <init>(java.lang.ClassLoader)>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: void <init>(int)>
<android.os.Bundle: void putCharArray(java.lang.String,char[])>
<android.os.Bundle: short getShort(java.lang.String)>
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<android.os.Bundle: void putLongArray(java.lang.String,long[])>
<android.os.Bundle: void putDouble(java.lang.String,double)>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<android.os.Bundle: boolean containsKey(java.lang.String)>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.os.Bundle: java.util.Set keySet()>
<android.os.Bundle: void clear()>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.os.Bundle: int size()>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.os.Bundle: java.lang.String getString(java.lang.String)>
<android.os.Bundle: void putChar(java.lang.String,char)>
<android.os.Bundle: long getLong(java.lang.String,long)>
<android.os.Bundle: boolean isEmpty()>
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Bundle: void putBoolean(java.lang.String,boolean)>
<android.os.Bundle: short getShort(java.lang.String,short)>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: void putString(java.lang.String,java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String)>
<android.os.Bundle: char[] getCharArray(java.lang.String)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<android.os.Bundle: byte getByte(java.lang.String)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.os.Bundle: void putByte(java.lang.String,byte)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String,char)>
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
<android.os.Bundle: void putShort(java.lang.String,short)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.os.Bundle: T getParcelable(java.lang.String)>
<android.os.Bundle: double getDouble(java.lang.String,double)>
<android.os.Bundle: long getLong(java.lang.String)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.os.Bundle: void putInt(java.lang.String,int)>
<android.os.Bundle: void <init>()>
<android.os.Bundle: void putIntArray(java.lang.String,int[])>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.os.Bundle: boolean getBoolean(java.lang.String)>
<android.os.Bundle: double getDouble(java.lang.String)>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>
<android.os.Bundle: void putFloat(java.lang.String,float)>
<android.os.Bundle: int getInt(java.lang.String)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: boolean hasFileDescriptors()>
<android.os.Bundle: void putLong(java.lang.String,long)>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
<android.os.Bundle: int describeContents()>
<android.os.Bundle: int getInt(java.lang.String,int)>
<android.os.Bundle: long[] getLongArray(java.lang.String)>
<android.os.Bundle: java.lang.Object get(java.lang.String)>
<android.os.Bundle: java.lang.Object clone()>
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List)>
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<java.lang.ThreadGroup: boolean isDaemon()>
<java.lang.ThreadGroup: int getMaxPriority()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadGroup: int activeGroupCount()>
<java.lang.ThreadGroup: int activeCount()>
<java.lang.ThreadGroup: void list()>
<java.lang.ThreadGroup: void setDaemon(boolean)>
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>
<java.lang.ThreadGroup: void checkAccess()>
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>
<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>
<java.lang.ThreadGroup: void stop()>
<java.lang.ThreadGroup: void suspend()>
<java.lang.ThreadGroup: void interrupt()>
<java.lang.ThreadGroup: void <init>(java.lang.String)>
<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>
<java.lang.ThreadGroup: void setMaxPriority(int)>
<java.lang.ThreadGroup: void destroy()>
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>
<java.lang.ThreadGroup: java.lang.String getName()>
<java.lang.ThreadGroup: boolean isDestroyed()>
<java.lang.ThreadGroup: void resume()>
<org.apache.http.protocol.HttpRequestHandlerResolver: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>
<java.security.AuthProvider: void <init>(java.lang.String,double,java.lang.String)>
<java.security.AuthProvider: void login(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler)>
<java.security.AuthProvider: void logout()>
<java.security.AuthProvider: void setCallbackHandler(javax.security.auth.callback.CallbackHandler)>
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int)>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase: long getPageSize()>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
<android.database.sqlite.SQLiteDatabase: void close()>
<android.database.sqlite.SQLiteDatabase: int releaseMemory()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<java.security.GeneralSecurityException: void <init>()>
<java.security.GeneralSecurityException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>
<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Map: boolean isEmpty()>
<java.util.Map: void clear()>
<java.util.Map: boolean containsValue(java.lang.Object)>
<java.util.Map: int hashCode()>
<java.util.Map: java.util.Set entrySet()>
<java.util.Map: boolean containsKey(java.lang.Object)>
<java.util.Map: V get(java.lang.Object)>
<java.util.Map: java.util.Set keySet()>
<java.util.Map: boolean equals(java.lang.Object)>
<java.util.Map: int size()>
<java.util.Map: V put(K,V)>
<java.util.Map: void putAll(java.util.Map)>
<java.util.Map: java.util.Collection values()>
<java.util.Map: V remove(java.lang.Object)>
<android.provider.MediaStore.Audio.Albums: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Albums: void <init>()>
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: org.xml.sax.Parser getParser()>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)>
<javax.xml.parsers.SAXParser: void setProperty(java.lang.String,java.lang.Object)>
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: void reset()>
<javax.xml.parsers.SAXParser: boolean isXIncludeAware()>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: boolean isNamespaceAware()>
<javax.xml.parsers.SAXParser: boolean isValidating()>
<javax.xml.parsers.SAXParser: java.lang.Object getProperty(java.lang.String)>
<javax.xml.parsers.SAXParser: void <init>()>
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)>
<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>
<android.telephony.gsm.SmsMessage.MessageClass: android.telephony.gsm.SmsMessage.MessageClass[] values()>
<android.telephony.gsm.SmsMessage.MessageClass: android.telephony.gsm.SmsMessage.MessageClass valueOf(java.lang.String)>
<org.apache.http.impl.client.DefaultUserTokenHandler: void <init>()>
<org.apache.http.impl.client.DefaultUserTokenHandler: java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.cookie.BasicDomainHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.BasicDomainHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.BasicDomainHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.BasicDomainHandler: void <init>()>
<android.database.CharArrayBuffer: void <init>(char[])>
<android.database.CharArrayBuffer: void <init>(int)>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.app.TabActivity: void setDefaultTab(java.lang.String)>
<android.app.TabActivity: void setDefaultTab(int)>
<android.app.TabActivity: void <init>()>
<android.app.TabActivity: android.widget.TabWidget getTabWidget()>
<android.app.TabActivity: android.widget.TabHost getTabHost()>
<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>
<android.content.pm.ResolveInfo.DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
<android.content.pm.ResolveInfo.DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.os.MessageQueue.IdleHandler: boolean queueIdle()>
<org.apache.http.impl.cookie.RFC2965SpecFactory: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>
<org.apache.http.impl.cookie.RFC2965SpecFactory: void <init>()>
<android.text.Layout: boolean getLineContainsTab(int)>
<android.text.Layout: int getParagraphDirection(int)>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>
<android.text.Layout: int getLineCount()>
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>
<android.text.Layout: int getParagraphRight(int)>
<android.text.Layout: android.text.TextPaint getPaint()>
<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>
<android.text.Layout: int getEllipsisStart(int)>
<android.text.Layout: android.text.Layout.Alignment getParagraphAlignment(int)>
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float)>
<android.text.Layout: int getOffsetForHorizontal(int,float)>
<android.text.Layout: android.text.Layout.Alignment getAlignment()>
<android.text.Layout: int getOffsetToLeftOf(int)>
<android.text.Layout: int getEllipsizedWidth()>
<android.text.Layout: float getLineLeft(int)>
<android.text.Layout: int getBottomPadding()>
<android.text.Layout: int getLineBottom(int)>
<android.text.Layout: int getLineBaseline(int)>
<android.text.Layout: int getLineForVertical(int)>
<android.text.Layout: float getSpacingMultiplier()>
<android.text.Layout: float getLineMax(int)>
<android.text.Layout: int getLineForOffset(int)>
<android.text.Layout: float getLineRight(int)>
<android.text.Layout: int getEllipsisCount(int)>
<android.text.Layout: float getLineWidth(int)>
<android.text.Layout: boolean isSpanned()>
<android.text.Layout: int getLineTop(int)>
<android.text.Layout: float getSecondaryHorizontal(int)>
<android.text.Layout: float getPrimaryHorizontal(int)>
<android.text.Layout: java.lang.CharSequence getText()>
<android.text.Layout: int getLineEnd(int)>
<android.text.Layout: int getWidth()>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>
<android.text.Layout: int getLineStart(int)>
<android.text.Layout: int getTopPadding()>
<android.text.Layout: android.text.Layout.Directions getLineDirections(int)>
<android.text.Layout: int getOffsetToRightOf(int)>
<android.text.Layout: int getHeight()>
<android.text.Layout: void draw(android.graphics.Canvas)>
<android.text.Layout: float getSpacingAdd()>
<android.text.Layout: int getLineDescent(int)>
<android.text.Layout: int getLineVisibleEnd(int)>
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>
<android.text.Layout: void increaseWidthTo(int)>
<android.text.Layout: int getParagraphLeft(int)>
<android.text.Layout: int getLineAscent(int)>
<android.graphics.CornerPathEffect: void <init>(float)>
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>
<java.lang.ClassLoader: void <init>()>
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: void resolveClass(java.lang.Class)>
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>
<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
<java.lang.ClassLoader: void clearAssertionStatus()>
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Package[] getPackages()>
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>
<java.sql.Ref: void setObject(java.lang.Object)>
<java.sql.Ref: java.lang.Object getObject()>
<java.sql.Ref: java.lang.Object getObject(java.util.Map)>
<java.sql.Ref: java.lang.String getBaseTypeName()>
<java.util.ConcurrentModificationException: void <init>()>
<java.util.ConcurrentModificationException: void <init>(java.lang.String)>
<android.text.method.DialerKeyListener: char[] getAcceptedChars()>
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()>
<android.text.method.DialerKeyListener: void <init>()>
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>
<java.util.zip.ZipOutputStream: void setLevel(int)>
<java.util.zip.ZipOutputStream: void closeEntry()>
<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.ZipOutputStream: void setComment(java.lang.String)>
<java.util.zip.ZipOutputStream: void setMethod(int)>
<java.io.PipedReader: void <init>(java.io.PipedWriter)>
<java.io.PipedReader: void close()>
<java.io.PipedReader: void connect(java.io.PipedWriter)>
<java.io.PipedReader: int read(char[],int,int)>
<java.io.PipedReader: void <init>()>
<android.widget.TableRow.LayoutParams: void <init>(int,int)>
<android.widget.TableRow.LayoutParams: void <init>(int,int,float)>
<android.widget.TableRow.LayoutParams: void <init>()>
<android.widget.TableRow.LayoutParams: void <init>(int)>
<android.widget.TableRow.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.TableRow.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableRow.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.content.SharedPreferences.OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()>
<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<android.preference.CheckBoxPreference: void setSummaryOff(int)>
<android.preference.CheckBoxPreference: void setDisableDependentsState(boolean)>
<android.preference.CheckBoxPreference: void setChecked(boolean)>
<android.preference.CheckBoxPreference: void setSummaryOn(int)>
<android.preference.CheckBoxPreference: boolean isChecked()>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.CheckBoxPreference: void setSummaryOn(java.lang.CharSequence)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.CheckBoxPreference: void setSummaryOff(java.lang.CharSequence)>
<android.preference.CheckBoxPreference: java.lang.CharSequence getSummaryOff()>
<android.preference.CheckBoxPreference: void <init>(android.content.Context)>
<android.preference.CheckBoxPreference: boolean getDisableDependentsState()>
<android.preference.CheckBoxPreference: java.lang.CharSequence getSummaryOn()>
<org.apache.http.cookie.CookieSpecRegistry: void <init>()>
<org.apache.http.cookie.CookieSpecRegistry: void unregister(java.lang.String)>
<org.apache.http.cookie.CookieSpecRegistry: void setItems(java.util.Map)>
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams)>
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String)>
<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>
<org.apache.http.cookie.CookieSpecRegistry: java.util.List getSpecNames()>
<java.net.DatagramSocket: int getLocalPort()>
<java.net.DatagramSocket: boolean getReuseAddress()>
<java.net.DatagramSocket: void send(java.net.DatagramPacket)>
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>
<java.net.DatagramSocket: void <init>(int)>
<java.net.DatagramSocket: void setSoTimeout(int)>
<java.net.DatagramSocket: void setTrafficClass(int)>
<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>
<java.net.DatagramSocket: void bind(java.net.SocketAddress)>
<java.net.DatagramSocket: void close()>
<java.net.DatagramSocket: boolean isClosed()>
<java.net.DatagramSocket: int getPort()>
<java.net.DatagramSocket: int getSoTimeout()>
<java.net.DatagramSocket: void setReuseAddress(boolean)>
<java.net.DatagramSocket: int getSendBufferSize()>
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>
<java.net.DatagramSocket: void connect(java.net.SocketAddress)>
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>
<java.net.DatagramSocket: void setBroadcast(boolean)>
<java.net.DatagramSocket: void setReceiveBufferSize(int)>
<java.net.DatagramSocket: void disconnect()>
<java.net.DatagramSocket: int getTrafficClass()>
<java.net.DatagramSocket: boolean isBound()>
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>
<java.net.DatagramSocket: void <init>()>
<java.net.DatagramSocket: boolean isConnected()>
<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>
<java.net.DatagramSocket: int getReceiveBufferSize()>
<java.net.DatagramSocket: void setSendBufferSize(int)>
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>
<java.net.DatagramSocket: boolean getBroadcast()>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey translateKey(javax.crypto.SecretKey)>
<javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.SecretKeyFactory: java.security.Provider getProvider()>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
<javax.crypto.SecretKeyFactory: void <init>(javax.crypto.SecretKeyFactorySpi,java.security.Provider,java.lang.String)>
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>
<javax.crypto.spec.IvParameterSpec: byte[] getIV()>
<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>
<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>
<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>
<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)>
<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)>
<android.view.Menu: void setGroupVisible(int,boolean)>
<android.view.Menu: int size()>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.view.Menu: android.view.SubMenu addSubMenu(int)>
<android.view.Menu: void setGroupEnabled(int,boolean)>
<android.view.Menu: void setQwertyMode(boolean)>
<android.view.Menu: android.view.MenuItem add(int,int,int,int)>
<android.view.Menu: boolean hasVisibleItems()>
<android.view.Menu: android.view.MenuItem add(int)>
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)>
<android.view.Menu: android.view.MenuItem findItem(int)>
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<android.view.Menu: void clear()>
<android.view.Menu: void removeItem(int)>
<android.view.Menu: void removeGroup(int)>
<android.view.Menu: boolean performIdentifierAction(int,int)>
<javax.sql.RowSet: void execute()>
<javax.sql.RowSet: void setTime(int,java.sql.Time)>
<javax.sql.RowSet: int getTransactionIsolation()>
<javax.sql.RowSet: int getMaxFieldSize()>
<javax.sql.RowSet: void removeRowSetListener(javax.sql.RowSetListener)>
<javax.sql.RowSet: void setDouble(int,double)>
<javax.sql.RowSet: void setBlob(int,java.sql.Blob)>
<javax.sql.RowSet: java.util.Map getTypeMap()>
<javax.sql.RowSet: java.lang.String getUrl()>
<javax.sql.RowSet: void setCharacterStream(int,java.io.Reader,int)>
<javax.sql.RowSet: void setDataSourceName(java.lang.String)>
<javax.sql.RowSet: void setByte(int,byte)>
<javax.sql.RowSet: void setString(int,java.lang.String)>
<javax.sql.RowSet: void setTransactionIsolation(int)>
<javax.sql.RowSet: void setBinaryStream(int,java.io.InputStream,int)>
<javax.sql.RowSet: void setDate(int,java.sql.Date,java.util.Calendar)>
<javax.sql.RowSet: java.lang.String getDataSourceName()>
<javax.sql.RowSet: java.lang.String getUsername()>
<javax.sql.RowSet: boolean isReadOnly()>
<javax.sql.RowSet: void setPassword(java.lang.String)>
<javax.sql.RowSet: void setBytes(int,byte[])>
<javax.sql.RowSet: void setType(int)>
<javax.sql.RowSet: void setShort(int,short)>
<javax.sql.RowSet: void setMaxFieldSize(int)>
<javax.sql.RowSet: void setDate(int,java.sql.Date)>
<javax.sql.RowSet: void setReadOnly(boolean)>
<javax.sql.RowSet: void setClob(int,java.sql.Clob)>
<javax.sql.RowSet: void setObject(int,java.lang.Object,int)>
<javax.sql.RowSet: void setRef(int,java.sql.Ref)>
<javax.sql.RowSet: void setTime(int,java.sql.Time,java.util.Calendar)>
<javax.sql.RowSet: void setTypeMap(java.util.Map)>
<javax.sql.RowSet: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<javax.sql.RowSet: void clearParameters()>
<javax.sql.RowSet: void setNull(int,int,java.lang.String)>
<javax.sql.RowSet: void setBigDecimal(int,java.math.BigDecimal)>
<javax.sql.RowSet: void setBoolean(int,boolean)>
<javax.sql.RowSet: void setLong(int,long)>
<javax.sql.RowSet: void setNull(int,int)>
<javax.sql.RowSet: void setArray(int,java.sql.Array)>
<javax.sql.RowSet: void setAsciiStream(int,java.io.InputStream,int)>
<javax.sql.RowSet: java.lang.String getPassword()>
<javax.sql.RowSet: int getMaxRows()>
<javax.sql.RowSet: void setCommand(java.lang.String)>
<javax.sql.RowSet: void setFloat(int,float)>
<javax.sql.RowSet: void setInt(int,int)>
<javax.sql.RowSet: void setObject(int,java.lang.Object)>
<javax.sql.RowSet: void setObject(int,java.lang.Object,int,int)>
<javax.sql.RowSet: void setTimestamp(int,java.sql.Timestamp)>
<javax.sql.RowSet: java.lang.String getCommand()>
<javax.sql.RowSet: void addRowSetListener(javax.sql.RowSetListener)>
<javax.sql.RowSet: void setMaxRows(int)>
<javax.sql.RowSet: void setUsername(java.lang.String)>
<javax.sql.RowSet: int getQueryTimeout()>
<javax.sql.RowSet: void setConcurrency(int)>
<javax.sql.RowSet: void setQueryTimeout(int)>
<javax.sql.RowSet: void setUrl(java.lang.String)>
<javax.sql.RowSet: void setEscapeProcessing(boolean)>
<javax.sql.RowSet: boolean getEscapeProcessing()>
<android.R.raw: void <init>()>
<java.nio.channels.ConnectionPendingException: void <init>()>
<android.graphics.drawable.shapes.Shape: float getHeight()>
<android.graphics.drawable.shapes.Shape: void onResize(float,float)>
<android.graphics.drawable.shapes.Shape: void resize(float,float)>
<android.graphics.drawable.shapes.Shape: float getWidth()>
<android.graphics.drawable.shapes.Shape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.shapes.Shape: boolean hasAlpha()>
<android.graphics.drawable.shapes.Shape: void <init>()>
<android.provider.Settings: void <init>()>
<android.widget.AdapterView.OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader.TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int,int,android.graphics.Shader.TileMode)>
<android.text.style.URLSpan: java.lang.String getURL()>
<android.text.style.URLSpan: void onClick(android.view.View)>
<android.text.style.URLSpan: void <init>(java.lang.String)>
<android.text.InputFilter.LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.InputFilter.LengthFilter: void <init>(int)>
<android.graphics.drawable.PictureDrawable: android.graphics.Picture getPicture()>
<android.graphics.drawable.PictureDrawable: void <init>(android.graphics.Picture)>
<android.graphics.drawable.PictureDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.PictureDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.PictureDrawable: int getOpacity()>
<android.graphics.drawable.PictureDrawable: void setPicture(android.graphics.Picture)>
<android.graphics.drawable.PictureDrawable: void setAlpha(int)>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()>
<android.text.method.TimeKeyListener: char[] getAcceptedChars()>
<android.text.method.TimeKeyListener: void <init>()>
<org.apache.http.impl.cookie.BrowserCompatSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.BrowserCompatSpec: java.util.List formatCookies(java.util.List)>
<org.apache.http.impl.cookie.BrowserCompatSpec: void <init>()>
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()>
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()>
<org.apache.http.impl.cookie.BrowserCompatSpec: void <init>(java.lang.String[])>
<android.webkit.WebHistoryItem: java.lang.String getTitle()>
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>
<android.webkit.WebHistoryItem: int getId()>
<android.webkit.WebHistoryItem: java.lang.String getUrl()>
<android.provider.MediaStore.Images: void <init>()>
<org.apache.http.impl.io.ChunkedInputStream: int read()>
<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] getFooters()>
<org.apache.http.impl.io.ChunkedInputStream: void <init>(org.apache.http.io.SessionInputBuffer)>
<android.net.wifi.SupplicantState: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.SupplicantState: boolean isValidState(android.net.wifi.SupplicantState)>
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState[] values()>
<android.net.wifi.SupplicantState: int describeContents()>
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState valueOf(java.lang.String)>
<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.security.ProtectionDomain: boolean implies(java.security.Permission)>
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>
<android.test.ProviderTestCase: void <init>(java.lang.Class,java.lang.String)>
<android.test.ProviderTestCase: android.test.mock.MockContentResolver getMockContentResolver()>
<android.test.ProviderTestCase: android.content.ContentResolver newResolverWithContentProviderFromSql(android.content.Context,java.lang.Class,java.lang.String,java.lang.String,int,java.lang.String)>
<android.test.ProviderTestCase: T getProvider()>
<android.test.ProviderTestCase: android.test.IsolatedContext getMockContext()>
<android.telephony.gsm.GsmCellLocation: void setStateInvalid()>
<android.telephony.gsm.GsmCellLocation: void <init>()>
<android.telephony.gsm.GsmCellLocation: void <init>(android.os.Bundle)>
<android.telephony.gsm.GsmCellLocation: int getCid()>
<android.telephony.gsm.GsmCellLocation: int getLac()>
<android.telephony.gsm.GsmCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)>
<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>
<java.util.zip.CheckedInputStream: java.util.zip.Checksum getChecksum()>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.lang.String)>
<java.security.AlgorithmParameterGenerator: void init(int)>
<java.security.AlgorithmParameterGenerator: void init(int,java.security.SecureRandom)>
<java.security.AlgorithmParameterGenerator: void <init>(java.security.AlgorithmParameterGeneratorSpi,java.security.Provider,java.lang.String)>
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)>
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec)>
<java.security.AlgorithmParameterGenerator: java.lang.String getAlgorithm()>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameters generateParameters()>
<java.security.AlgorithmParameterGenerator: java.security.Provider getProvider()>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.security.Provider)>
<android.provider.Browser.BookmarkColumns: void <init>()>
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
<java.net.URLDecoder: void <init>()>
<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler: void <init>()>
<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<java.nio.FloatBuffer: float[] array()>
<java.nio.FloatBuffer: java.nio.FloatBuffer duplicate()>
<java.nio.FloatBuffer: java.nio.FloatBuffer slice()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>
<java.nio.FloatBuffer: boolean hasArray()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>
<java.nio.FloatBuffer: java.nio.ByteOrder order()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>
<java.nio.FloatBuffer: float get()>
<java.nio.FloatBuffer: float get(int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer compact()>
<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>
<java.nio.FloatBuffer: int arrayOffset()>
<java.nio.FloatBuffer: boolean isDirect()>
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>
<java.util.logging.LogManager: void <init>()>
<java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
<java.util.logging.LogManager: void reset()>
<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()>
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>
<java.util.logging.LogManager: void readConfiguration()>
<java.util.logging.LogManager: void checkAccess()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPublicExponent()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeP()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeExponentP()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getCrtCoefficient()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeQ()>
<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>
<org.apache.http.impl.auth.NTLMEngineException: void <init>()>
<android.location.LocationListener: void onProviderEnabled(java.lang.String)>
<android.location.LocationListener: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.location.LocationListener: void onProviderDisabled(java.lang.String)>
<android.location.LocationListener: void onLocationChanged(android.location.Location)>
<android.provider.MediaStore.Images.Thumbnails: void <init>()>
<android.provider.MediaStore.Images.Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>
<android.provider.MediaStore.Images.Thumbnails: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.provider.MediaStore.Images.Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Images.Thumbnails: android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])>
<java.util.concurrent.CompletionService: java.util.concurrent.Future poll()>
<java.util.concurrent.CompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.CompletionService: java.util.concurrent.Future take()>
<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.lang.Runnable,V)>
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)>
<org.xml.sax.ext.LexicalHandler: void endCDATA()>
<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>
<org.xml.sax.ext.LexicalHandler: void startCDATA()>
<org.xml.sax.ext.LexicalHandler: void endDTD()>
<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>
<org.xml.sax.ext.LexicalHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>
<org.apache.http.impl.NoConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.NoConnectionReuseStrategy: void <init>()>
<dalvik.system.VMRuntime: long getMinimumHeapSize()>
<dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>
<dalvik.system.VMRuntime: float getTargetHeapUtilization()>
<dalvik.system.VMRuntime: void gcSoftReferences()>
<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>
<dalvik.system.VMRuntime: long setMinimumHeapSize(long)>
<dalvik.system.VMRuntime: void runFinalizationSync()>
<dalvik.system.VMRuntime: long getExternalBytesAllocated()>
<java.security.KeyStore.PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[])>
<java.security.KeyStore.PrivateKeyEntry: java.security.cert.Certificate getCertificate()>
<java.security.KeyStore.PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>
<java.security.KeyStore.PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>
<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
<org.apache.http.impl.conn.DefaultHttpRoutePlanner: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>
<org.apache.http.impl.conn.DefaultHttpRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: void <init>()>
<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)>
<java.security.DigestException: void <init>()>
<java.security.DigestException: void <init>(java.lang.String)>
<java.security.DigestException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.DigestException: void <init>(java.lang.Throwable)>
<android.text.style.DynamicDrawableSpan: android.graphics.drawable.Drawable getDrawable()>
<android.text.style.DynamicDrawableSpan: void <init>()>
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.DynamicDrawableSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>
<java.util.zip.ZipException: void <init>(java.lang.String)>
<java.util.zip.ZipException: void <init>()>
<java.util.TimeZone: void setRawOffset(int)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>
<java.util.TimeZone: java.lang.Object clone()>
<java.util.TimeZone: boolean useDaylightTime()>
<java.util.TimeZone: java.util.TimeZone getDefault()>
<java.util.TimeZone: int getOffset(int,int,int,int,int,int)>
<java.util.TimeZone: int getRawOffset()>
<java.util.TimeZone: void setID(java.lang.String)>
<java.util.TimeZone: int getOffset(long)>
<java.util.TimeZone: boolean hasSameRules(java.util.TimeZone)>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.util.TimeZone: java.lang.String[] getAvailableIDs()>
<java.util.TimeZone: java.lang.String getDisplayName()>
<java.util.TimeZone: java.lang.String getID()>
<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>
<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)>
<java.util.TimeZone: int getDSTSavings()>
<java.util.TimeZone: void <init>()>
<java.util.TimeZone: void setDefault(java.util.TimeZone)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>
<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>
<android.test.mock.MockPackageManager: void addPackageToPreferred(java.lang.String)>
<android.test.mock.MockPackageManager: java.lang.String getNameForUid(int)>
<android.test.mock.MockPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.test.mock.MockPackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<android.test.mock.MockPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.test.mock.MockPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.test.mock.MockPackageManager: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int)>
<android.test.mock.MockPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<android.test.mock.MockPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.test.mock.MockPackageManager: java.util.List getPreferredPackages(int)>
<android.test.mock.MockPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
<android.test.mock.MockPackageManager: java.lang.String[] getPackagesForUid(int)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.test.mock.MockPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.test.mock.MockPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<android.test.mock.MockPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.test.mock.MockPackageManager: void removePermission(java.lang.String)>
<android.test.mock.MockPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<android.test.mock.MockPackageManager: void removePackageFromPreferred(java.lang.String)>
<android.test.mock.MockPackageManager: java.util.List getInstalledPackages(int)>
<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
<android.test.mock.MockPackageManager: void <init>()>
<android.test.mock.MockPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.test.mock.MockPackageManager: java.util.List getInstalledApplications(int)>
<android.test.mock.MockPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<android.test.mock.MockPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.test.mock.MockPackageManager: boolean addPermission(android.content.pm.PermissionInfo)>
<android.test.mock.MockPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>
<android.test.mock.MockPackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.test.mock.MockPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.test.mock.MockPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.test.mock.MockPackageManager: java.util.List getAllPermissionGroups(int)>
<android.test.mock.MockPackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.test.mock.MockPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
<android.test.mock.MockPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
<android.test.mock.MockPackageManager: int[] getPackageGids(java.lang.String)>
<android.test.mock.MockPackageManager: int checkPermission(java.lang.String,java.lang.String)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
<android.test.mock.MockPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.test.mock.MockPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
<android.test.mock.MockPackageManager: void clearPackagePreferredActivities(java.lang.String)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
<android.test.mock.MockPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.test.mock.MockPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.test.mock.MockPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<android.test.mock.MockPackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
<android.test.mock.MockPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>
<java.util.Collection: boolean add(E)>
<java.util.Collection: boolean remove(java.lang.Object)>
<java.util.Collection: boolean retainAll(java.util.Collection)>
<java.util.Collection: java.lang.Object[] toArray()>
<java.util.Collection: void clear()>
<java.util.Collection: boolean equals(java.lang.Object)>
<java.util.Collection: boolean removeAll(java.util.Collection)>
<java.util.Collection: T[] toArray(T[])>
<java.util.Collection: boolean isEmpty()>
<java.util.Collection: boolean addAll(java.util.Collection)>
<java.util.Collection: boolean containsAll(java.util.Collection)>
<java.util.Collection: java.util.Iterator iterator()>
<java.util.Collection: boolean contains(java.lang.Object)>
<java.util.Collection: int size()>
<java.util.Collection: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean replace(K,V,V)>
<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: V putIfAbsent(K,V)>
<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration keys()>
<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration elements()>
<java.util.concurrent.ConcurrentHashMap: V replace(K,V)>
<java.util.concurrent.ConcurrentHashMap: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>
<java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.apache.http.conn.EofSensorWatcher: boolean streamAbort(java.io.InputStream)>
<org.apache.http.conn.EofSensorWatcher: boolean streamClosed(java.io.InputStream)>
<org.apache.http.conn.EofSensorWatcher: boolean eofDetected(java.io.InputStream)>
<junit.framework.TestFailure: java.lang.String exceptionMessage()>
<junit.framework.TestFailure: junit.framework.Test failedTest()>
<junit.framework.TestFailure: boolean isFailure()>
<junit.framework.TestFailure: java.lang.String trace()>
<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>
<junit.framework.TestFailure: java.lang.Throwable thrownException()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: void <init>()>
<android.media.MediaPlayer.OnSeekCompleteListener: void onSeekComplete(android.media.MediaPlayer)>
<java.util.zip.Deflater: void <init>(int,boolean)>
<java.util.zip.Deflater: boolean needsInput()>
<java.util.zip.Deflater: int getAdler()>
<java.util.zip.Deflater: void setInput(byte[],int,int)>
<java.util.zip.Deflater: int getTotalOut()>
<java.util.zip.Deflater: int deflate(byte[],int,int)>
<java.util.zip.Deflater: int getTotalIn()>
<java.util.zip.Deflater: void setDictionary(byte[])>
<java.util.zip.Deflater: long getBytesRead()>
<java.util.zip.Deflater: void setDictionary(byte[],int,int)>
<java.util.zip.Deflater: void setInput(byte[])>
<java.util.zip.Deflater: int deflate(byte[])>
<java.util.zip.Deflater: void <init>()>
<java.util.zip.Deflater: void end()>
<java.util.zip.Deflater: void reset()>
<java.util.zip.Deflater: boolean finished()>
<java.util.zip.Deflater: long getBytesWritten()>
<java.util.zip.Deflater: void <init>(int)>
<java.util.zip.Deflater: void setLevel(int)>
<java.util.zip.Deflater: void finish()>
<java.util.zip.Deflater: void setStrategy(int)>
<org.apache.http.conn.BasicManagedEntity: void releaseConnection()>
<org.apache.http.conn.BasicManagedEntity: void <init>(org.apache.http.HttpEntity,org.apache.http.conn.ManagedClientConnection,boolean)>
<org.apache.http.conn.BasicManagedEntity: boolean streamClosed(java.io.InputStream)>
<org.apache.http.conn.BasicManagedEntity: boolean streamAbort(java.io.InputStream)>
<org.apache.http.conn.BasicManagedEntity: void abortConnection()>
<org.apache.http.conn.BasicManagedEntity: void releaseManagedConnection()>
<org.apache.http.conn.BasicManagedEntity: boolean eofDetected(java.io.InputStream)>
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>
<javax.security.cert.CertificateEncodingException: void <init>(java.lang.String)>
<javax.security.cert.CertificateEncodingException: void <init>()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int)>
<android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.database.sqlite.SQLiteOpenHelper: void close()>
<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)>
<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<org.apache.http.client.methods.HttpGet: void <init>()>
<org.apache.http.client.methods.HttpGet: java.lang.String getMethod()>
<android.app.SearchManager.OnDismissListener: void onDismiss()>
<java.text.DateFormat.Field: java.text.DateFormat.Field ofCalendarField(int)>
<java.text.DateFormat.Field: void <init>(java.lang.String,int)>
<java.text.DateFormat.Field: int getCalendarField()>
<android.content.ContentValues: void <init>(android.content.ContentValues)>
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.ContentValues: void <init>(int)>
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.content.ContentValues: int describeContents()>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.content.ContentValues: void remove(java.lang.String)>
<android.content.ContentValues: java.util.Set valueSet()>
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.content.ContentValues: void <init>()>
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<android.content.ContentValues: void clear()>
<android.content.ContentValues: int size()>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<java.util.Queue: E poll()>
<java.util.Queue: E peek()>
<java.util.Queue: E remove()>
<java.util.Queue: boolean offer(E)>
<java.util.Queue: E element()>
<java.sql.ResultSetMetaData: boolean isDefinitelyWritable(int)>
<java.sql.ResultSetMetaData: int getColumnDisplaySize(int)>
<java.sql.ResultSetMetaData: java.lang.String getColumnName(int)>
<java.sql.ResultSetMetaData: int getColumnCount()>
<java.sql.ResultSetMetaData: boolean isCurrency(int)>
<java.sql.ResultSetMetaData: boolean isSearchable(int)>
<java.sql.ResultSetMetaData: java.lang.String getTableName(int)>
<java.sql.ResultSetMetaData: boolean isSigned(int)>
<java.sql.ResultSetMetaData: boolean isCaseSensitive(int)>
<java.sql.ResultSetMetaData: java.lang.String getColumnClassName(int)>
<java.sql.ResultSetMetaData: int getScale(int)>
<java.sql.ResultSetMetaData: int isNullable(int)>
<java.sql.ResultSetMetaData: int getPrecision(int)>
<java.sql.ResultSetMetaData: boolean isAutoIncrement(int)>
<java.sql.ResultSetMetaData: java.lang.String getCatalogName(int)>
<java.sql.ResultSetMetaData: java.lang.String getSchemaName(int)>
<java.sql.ResultSetMetaData: boolean isWritable(int)>
<java.sql.ResultSetMetaData: boolean isReadOnly(int)>
<java.sql.ResultSetMetaData: java.lang.String getColumnTypeName(int)>
<java.sql.ResultSetMetaData: int getColumnType(int)>
<java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)>
<java.util.concurrent.AbstractExecutorService: void <init>()>
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
<java.util.concurrent.AbstractExecutorService: T invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,T)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.AbstractExecutorService: T invokeAny(java.util.Collection)>
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<android.text.Spanned: int getSpanEnd(java.lang.Object)>
<android.text.Spanned: T[] getSpans(int,int,java.lang.Class)>
<android.text.Spanned: int getSpanStart(java.lang.Object)>
<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.Spanned: int getSpanFlags(java.lang.Object)>
<org.apache.http.protocol.HttpService: void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)>
<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>
<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>
<org.apache.http.protocol.HttpService: void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory)>
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>
<org.apache.http.protocol.HttpService: void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>
<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams getParams()>
<org.apache.http.protocol.HttpService: void setParams(org.apache.http.params.HttpParams)>
<android.database.sqlite.SQLiteDiskIOException: void <init>(java.lang.String)>
<android.database.sqlite.SQLiteDiskIOException: void <init>()>
<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>
<javax.net.ssl.CertPathTrustManagerParameters: void <init>(java.security.cert.CertPathParameters)>
<javax.net.ssl.CertPathTrustManagerParameters: java.security.cert.CertPathParameters getParameters()>
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
<android.content.pm.PackageItemInfo.DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo.DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<java.net.Authenticator.RequestorType: java.net.Authenticator.RequestorType[] values()>
<java.net.Authenticator.RequestorType: java.net.Authenticator.RequestorType valueOf(java.lang.String)>
<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>
<org.w3c.dom.Attr: java.lang.String getValue()>
<org.w3c.dom.Attr: void setValue(java.lang.String)>
<org.w3c.dom.Attr: java.lang.String getName()>
<org.w3c.dom.Attr: boolean getSpecified()>
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInfo: void <init>()>
<android.content.pm.PackageInfo: int describeContents()>
<java.util.MissingFormatArgumentException: java.lang.String getFormatSpecifier()>
<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[])>
<javax.crypto.Cipher: byte[] doFinal(byte[])>
<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>
<javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom)>
<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider,java.lang.String)>
<javax.crypto.Cipher: java.lang.String getAlgorithm()>
<javax.crypto.Cipher: void init(int,java.security.cert.Certificate)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>
<javax.crypto.Cipher: int getOutputSize(int)>
<javax.crypto.Cipher: void init(int,java.security.Key)>
<javax.crypto.Cipher: byte[] update(byte[],int,int)>
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>
<javax.crypto.Cipher: int doFinal(byte[],int)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<javax.crypto.Cipher: int getBlockSize()>
<javax.crypto.Cipher: java.security.Provider getProvider()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>
<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<javax.crypto.Cipher: int update(byte[],int,int,byte[])>
<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)>
<javax.crypto.Cipher: byte[] getIV()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.Cipher: byte[] wrap(java.security.Key)>
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>
<javax.crypto.Cipher: byte[] update(byte[])>
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)>
<javax.crypto.Cipher: byte[] doFinal()>
<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()>
<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>
<javax.crypto.CipherInputStream: void <init>(java.io.InputStream)>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeP()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeQ()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPublicExponent()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.security.spec.RSAOtherPrimeInfo[])>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: int getCallState()>
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
<android.telephony.TelephonyManager: int getDataActivity()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: boolean isNetworkRoaming()>
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
<android.telephony.TelephonyManager: int getPhoneType()>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: int getSimState()>
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
<android.telephony.TelephonyManager: int getDataState()>
<java.util.zip.DataFormatException: void <init>(java.lang.String)>
<java.util.zip.DataFormatException: void <init>()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String,int)>
<javax.net.ssl.SSLContextSpi: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSessionContext engineGetServerSessionContext()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory()>
<javax.net.ssl.SSLContextSpi: void <init>()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLEngine engineCreateSSLEngine()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSessionContext engineGetClientSessionContext()>
<org.apache.http.impl.conn.tsccm.RefQueueHandler: void handleReference(java.lang.ref.Reference)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.HeaderIterator headerIterator(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void addHeader(org.apache.http.Header)>
<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()>
<org.apache.http.message.AbstractHttpMessage: void setHeader(org.apache.http.Header)>
<org.apache.http.message.AbstractHttpMessage: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getLastHeader(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void removeHeaders(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: boolean containsHeader(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.HeaderIterator headerIterator()>
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)>
<org.apache.http.message.AbstractHttpMessage: void removeHeader(org.apache.http.Header)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getAllHeaders()>
<org.apache.http.message.AbstractHttpMessage: void <init>()>
<java.util.LinkedList: void addLast(E)>
<java.util.LinkedList: int size()>
<java.util.LinkedList: E element()>
<java.util.LinkedList: E getLast()>
<java.util.LinkedList: void addFirst(E)>
<java.util.LinkedList: java.util.ListIterator listIterator(int)>
<java.util.LinkedList: E remove()>
<java.util.LinkedList: E removeFirst()>
<java.util.LinkedList: E removeLast()>
<java.util.LinkedList: void <init>()>
<java.util.LinkedList: E peek()>
<java.util.LinkedList: java.lang.Object clone()>
<java.util.LinkedList: E getFirst()>
<java.util.LinkedList: boolean offer(E)>
<java.util.LinkedList: E poll()>
<java.util.LinkedList: void <init>(java.util.Collection)>
<android.widget.MediaController.MediaPlayerControl: boolean isPlaying()>
<android.widget.MediaController.MediaPlayerControl: void pause()>
<android.widget.MediaController.MediaPlayerControl: int getCurrentPosition()>
<android.widget.MediaController.MediaPlayerControl: void seekTo(int)>
<android.widget.MediaController.MediaPlayerControl: int getBufferPercentage()>
<android.widget.MediaController.MediaPlayerControl: int getDuration()>
<android.widget.MediaController.MediaPlayerControl: void start()>
<android.widget.Gallery: void setCallbackDuringFling(boolean)>
<android.widget.Gallery: void setGravity(int)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery: void onLongPress(android.view.MotionEvent)>
<android.widget.Gallery: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.widget.Gallery: boolean onSingleTapUp(android.view.MotionEvent)>
<android.widget.Gallery: void setAnimationDuration(int)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Gallery: void setUnselectedAlpha(float)>
<android.widget.Gallery: boolean onDown(android.view.MotionEvent)>
<android.widget.Gallery: void onShowPress(android.view.MotionEvent)>
<android.widget.Gallery: void setSpacing(int)>
<android.widget.Gallery: void <init>(android.content.Context)>
<android.widget.Gallery: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.widget.FrameLayout.LayoutParams: void <init>(int,int,int)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout.LayoutParams: void <init>(int,int)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>
<android.test.TouchUtils: void dragViewToBottom(android.test.ActivityInstrumentationTestCase,android.view.View)>
<android.test.TouchUtils: void scrollToBottom(android.test.ActivityInstrumentationTestCase,android.view.ViewGroup)>
<android.test.TouchUtils: void dragViewToTop(android.test.ActivityInstrumentationTestCase,android.view.View)>
<android.test.TouchUtils: void dragQuarterScreenUp(android.test.ActivityInstrumentationTestCase)>
<android.test.TouchUtils: void clickView(android.test.InstrumentationTestCase,android.view.View)>
<android.test.TouchUtils: void scrollToTop(android.test.ActivityInstrumentationTestCase,android.view.ViewGroup)>
<android.test.TouchUtils: int dragViewTo(android.test.ActivityInstrumentationTestCase,android.view.View,int,int,int)>
<android.test.TouchUtils: void longClickView(android.test.ActivityInstrumentationTestCase,android.view.View)>
<android.test.TouchUtils: void touchAndCancelView(android.test.InstrumentationTestCase,android.view.View)>
<android.test.TouchUtils: void <init>()>
<android.test.TouchUtils: void dragViewToTop(android.test.ActivityInstrumentationTestCase,android.view.View,int)>
<android.test.TouchUtils: int dragViewToX(android.test.ActivityInstrumentationTestCase,android.view.View,int,int)>
<android.test.TouchUtils: void drag(android.test.ActivityInstrumentationTestCase,float,float,float,float,int)>
<android.test.TouchUtils: void dragQuarterScreenDown(android.test.ActivityInstrumentationTestCase)>
<android.test.TouchUtils: void dragViewToBottom(android.test.ActivityInstrumentationTestCase,android.view.View,int)>
<android.test.TouchUtils: void tapView(android.test.InstrumentationTestCase,android.view.View)>
<android.test.TouchUtils: int dragViewToY(android.test.ActivityInstrumentationTestCase,android.view.View,int,int)>
<android.test.TouchUtils: int dragViewBy(android.test.ActivityInstrumentationTestCase,android.view.View,int,int,int)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.LayoutInflater.Factory getFactory()>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater.Filter)>
<android.view.LayoutInflater: android.view.LayoutInflater.Filter getFilter()>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: void <init>(android.content.Context)>
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater.Factory)>
<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<android.view.LayoutInflater: android.content.Context getContext()>
<android.view.LayoutInflater: android.view.LayoutInflater from(android.content.Context)>
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>
<java.util.jar.Attributes.Name: void <init>(java.lang.String)>
<org.apache.http.ReasonPhraseCatalog: java.lang.String getReason(int,java.util.Locale)>
<org.apache.http.conn.params.ConnRouteParamBean: void setForcedRoute(org.apache.http.conn.routing.HttpRoute)>
<org.apache.http.conn.params.ConnRouteParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.conn.params.ConnRouteParamBean: void setLocalAddress(java.net.InetAddress)>
<org.apache.http.conn.params.ConnRouteParamBean: void setDefaultProxy(org.apache.http.HttpHost)>
<android.text.style.BackgroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.BackgroundColorSpan: void <init>(int)>
<android.text.style.BackgroundColorSpan: int getBackgroundColor()>
<java.io.FileInputStream: void <init>(java.lang.String)>
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>
<java.io.FileInputStream: int read()>
<java.io.FileInputStream: java.io.FileDescriptor getFD()>
<java.io.FileInputStream: void <init>(java.io.File)>
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>
<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>
<android.database.ContentObservable: void notifyChange(boolean)>
<android.database.ContentObservable: void dispatchChange(boolean)>
<android.database.ContentObservable: void <init>()>
<java.sql.Date: java.sql.Date valueOf(java.lang.String)>
<java.sql.Date: void <init>(int,int,int)>
<java.sql.Date: void <init>(long)>
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentEncoding()>
<org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)>
<org.apache.http.entity.HttpEntityWrapper: void consumeContent()>
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()>
<org.apache.http.entity.HttpEntityWrapper: long getContentLength()>
<org.apache.http.entity.HttpEntityWrapper: boolean isRepeatable()>
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentType()>
<org.apache.http.entity.HttpEntityWrapper: boolean isChunked()>
<org.apache.http.entity.HttpEntityWrapper: boolean isStreaming()>
<java.security.KeyRep.Type: java.security.KeyRep.Type valueOf(java.lang.String)>
<java.security.KeyRep.Type: java.security.KeyRep.Type[] values()>
<java.util.AbstractMap: void putAll(java.util.Map)>
<java.util.AbstractMap: V put(K,V)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>
<java.util.AbstractMap: void <init>()>
<java.util.AbstractMap: V get(java.lang.Object)>
<java.util.AbstractMap: void clear()>
<java.util.AbstractMap: java.util.Set entrySet()>
<java.util.AbstractMap: V remove(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.AbstractMap: int size()>
<java.util.AbstractMap: java.util.Set keySet()>
<java.util.AbstractMap: boolean isEmpty()>
<javax.crypto.interfaces.DHKey: javax.crypto.spec.DHParameterSpec getParams()>
<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element: java.lang.String getTagName()>
<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>
<org.w3c.dom.Element: void removeAttribute(java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>
<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>
<org.w3c.dom.Element: void removeAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>
<org.w3c.dom.Element: boolean hasAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>
<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>
<android.database.sqlite.SQLiteMisuseException: void <init>()>
<android.database.sqlite.SQLiteMisuseException: void <init>(java.lang.String)>
<android.opengl.Matrix: void <init>()>
<android.opengl.Matrix: void scaleM(float[],int,float[],int,float,float,float)>
<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)>
<android.opengl.Matrix: boolean invertM(float[],int,float[],int)>
<android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>
<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: void setIdentityM(float[],int)>
<android.opengl.Matrix: void transposeM(float[],int,float[],int)>
<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)>
<android.opengl.Matrix: void scaleM(float[],int,float,float,float)>
<android.opengl.Matrix: void translateM(float[],int,float,float,float)>
<android.opengl.Matrix: float length(float,float,float)>
<javax.microedition.khronos.egl.EGLDisplay: void <init>()>
<java.sql.Blob: java.io.InputStream getBinaryStream()>
<java.sql.Blob: long length()>
<java.sql.Blob: long position(java.sql.Blob,long)>
<java.sql.Blob: java.io.OutputStream setBinaryStream(long)>
<java.sql.Blob: int setBytes(long,byte[])>
<java.sql.Blob: int setBytes(long,byte[],int,int)>
<java.sql.Blob: long position(byte[],long)>
<java.sql.Blob: byte[] getBytes(long,int)>
<java.sql.Blob: void truncate(long)>
<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
<android.app.Activity: void unregisterForContextMenu(android.view.View)>
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>
<android.app.Activity: void setProgressBarVisibility(boolean)>
<android.app.Activity: void onStart()>
<android.app.Activity: void onDestroy()>
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Activity: int getRequestedOrientation()>
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>
<android.app.Activity: android.view.View findViewById(int)>
<android.app.Activity: void setPersistent(boolean)>
<android.app.Activity: void finishActivity(int)>
<android.app.Activity: void onPostResume()>
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
<android.app.Activity: void setFeatureDrawableResource(int,int)>
<android.app.Activity: boolean onSearchRequested()>
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>
<android.app.Activity: void takeKeyEvents(boolean)>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.app.Activity: void onCreate(android.os.Bundle)>
<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>
<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>
<android.app.Activity: void setTitle(int)>
<android.app.Activity: boolean moveTaskToBack(boolean)>
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: void removeDialog(int)>
<android.app.Activity: android.view.View onCreatePanelView(int)>
<android.app.Activity: void runOnUiThread(java.lang.Runnable)>
<android.app.Activity: int getTaskId()>
<android.app.Activity: void <init>()>
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.app.Activity: void showDialog(int)>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Activity: void registerForContextMenu(android.view.View)>
<android.app.Activity: void stopManagingCursor(android.database.Cursor)>
<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Activity: long getInstanceCount()>
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Activity: android.view.MenuInflater getMenuInflater()>
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Activity: void setTitleColor(int)>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.app.Activity: int getChangingConfigurations()>
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Activity: void openContextMenu(android.view.View)>
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Activity: android.content.ComponentName getCallingActivity()>
<android.app.Activity: void onLowMemory()>
<android.app.Activity: void onPanelClosed(int,android.view.Menu)>
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: int getTitleColor()>
<android.app.Activity: void onStop()>
<android.app.Activity: void onPause()>
<android.app.Activity: android.view.View getCurrentFocus()>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.app.Activity: android.app.Dialog onCreateDialog(int)>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Activity: void setRequestedOrientation(int)>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Activity: boolean isChild()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: void onResume()>
<android.app.Activity: void onRestart()>
<android.app.Activity: void onWindowFocusChanged(boolean)>
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Activity: void closeOptionsMenu()>
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Activity: void setProgress(int)>
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: android.app.Activity getParent()>
<android.app.Activity: void setSecondaryProgress(int)>
<android.app.Activity: void setDefaultKeyMode(int)>
<android.app.Activity: void setContentView(int)>
<android.app.Activity: void onContentChanged()>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: void onNewIntent(android.content.Intent)>
<android.app.Activity: void openOptionsMenu()>
<android.app.Activity: void finish()>
<android.app.Activity: int getVolumeControlStream()>
<android.app.Activity: void onContextMenuClosed(android.view.Menu)>
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Activity: java.lang.String getLocalClassName()>
<android.app.Activity: void dismissDialog(int)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<android.app.Activity: void setTitle(java.lang.CharSequence)>
<android.app.Activity: void setContentView(android.view.View)>
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Activity: void setResult(int)>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
<android.app.Activity: void setVolumeControlStream(int)>
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<android.app.Activity: void finishFromChild(android.app.Activity)>
<android.app.Activity: java.lang.String getCallingPackage()>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.opengles.GL getGL()>
<javax.microedition.khronos.egl.EGLContext: void <init>()>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>
<java.nio.channels.OverlappingFileLockException: void <init>()>
<android.database.sqlite.SQLiteAbortException: void <init>(java.lang.String)>
<android.database.sqlite.SQLiteAbortException: void <init>()>
<android.webkit.JsResult: void confirm()>
<android.webkit.JsResult: void cancel()>
<android.webkit.JsResult: void wakeUp()>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.lang.System: java.util.Map getenv()>
<java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.lang.System: void loadLibrary(java.lang.String)>
<java.lang.System: java.lang.String getenv(java.lang.String)>
<java.lang.System: void setOut(java.io.PrintStream)>
<java.lang.System: void runFinalizersOnExit(boolean)>
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<java.lang.System: void load(java.lang.String)>
<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.lang.System: long currentTimeMillis()>
<java.lang.System: void exit(int)>
<java.lang.System: void gc()>
<java.lang.System: void setProperties(java.util.Properties)>
<java.lang.System: long nanoTime()>
<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>
<java.lang.System: void setErr(java.io.PrintStream)>
<java.lang.System: java.nio.channels.Channel inheritedChannel()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.System: java.lang.String clearProperty(java.lang.String)>
<java.lang.System: void runFinalization()>
<java.lang.System: int identityHashCode(java.lang.Object)>
<java.lang.System: java.util.Properties getProperties()>
<java.lang.System: void setIn(java.io.InputStream)>
<android.test.mock.MockResources: void <init>()>
<android.text.style.LineHeightSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.widget.FrameLayout: void <init>(android.content.Context)>
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>
<android.widget.FrameLayout: void setForegroundGravity(int)>
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)>
<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<java.security.cert.X509CRL: byte[] getSignature()>
<java.security.cert.X509CRL: byte[] getTBSCertList()>
<java.security.cert.X509CRL: int getVersion()>
<java.security.cert.X509CRL: void verify(java.security.PublicKey)>
<java.security.cert.X509CRL: byte[] getEncoded()>
<java.security.cert.X509CRL: java.util.Set getRevokedCertificates()>
<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<java.security.cert.X509CRL: java.util.Date getNextUpdate()>
<java.security.cert.X509CRL: byte[] getSigAlgParams()>
<java.security.cert.X509CRL: java.lang.String getSigAlgOID()>
<java.security.cert.X509CRL: java.security.Principal getIssuerDN()>
<java.security.cert.X509CRL: void verify(java.security.PublicKey,java.lang.String)>
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)>
<java.security.cert.X509CRL: java.lang.String getSigAlgName()>
<java.security.cert.X509CRL: void <init>()>
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>
<java.security.cert.X509CRL: java.util.Date getThisUpdate()>
<javax.security.auth.callback.UnsupportedCallbackException: void <init>(javax.security.auth.callback.Callback)>
<javax.security.auth.callback.UnsupportedCallbackException: javax.security.auth.callback.Callback getCallback()>
<javax.security.auth.callback.UnsupportedCallbackException: void <init>(javax.security.auth.callback.Callback,java.lang.String)>
<org.apache.http.impl.cookie.BestMatchSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.BestMatchSpec: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.BestMatchSpec: void <init>()>
<org.apache.http.impl.cookie.BestMatchSpec: int getVersion()>
<org.apache.http.impl.cookie.BestMatchSpec: org.apache.http.Header getVersionHeader()>
<org.apache.http.impl.cookie.BestMatchSpec: void <init>(java.lang.String[],boolean)>
<org.apache.http.impl.cookie.BestMatchSpec: java.util.List formatCookies(java.util.List)>
<org.apache.http.impl.cookie.BestMatchSpec: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
<java.net.InetAddress: java.net.InetAddress getLocalHost()>
<java.net.InetAddress: boolean isMCGlobal()>
<java.net.InetAddress: byte[] getAddress()>
<java.net.InetAddress: boolean isMCOrgLocal()>
<java.net.InetAddress: boolean isSiteLocalAddress()>
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.net.InetAddress: boolean isMCNodeLocal()>
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
<java.net.InetAddress: java.lang.String getHostName()>
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>
<java.net.InetAddress: boolean isMulticastAddress()>
<java.net.InetAddress: boolean isMCSiteLocal()>
<java.net.InetAddress: boolean isLinkLocalAddress()>
<java.net.InetAddress: boolean isLoopbackAddress()>
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>
<java.net.InetAddress: boolean isAnyLocalAddress()>
<java.net.InetAddress: java.lang.String getHostAddress()>
<java.net.InetAddress: boolean isMCLinkLocal()>
<java.net.InetAddress: boolean isReachable(int)>
<java.net.InetAddress: java.lang.String getCanonicalHostName()>
<org.apache.http.impl.cookie.CookieSpecBase: void <init>()>
<org.apache.http.impl.cookie.CookieSpecBase: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.CookieSpecBase: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.CookieSpecBase: java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.DateParseException: void <init>(java.lang.String)>
<org.apache.http.impl.cookie.DateParseException: void <init>()>
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<java.util.regex.Matcher: int regionEnd()>
<java.util.regex.Matcher: int groupCount()>
<java.util.regex.Matcher: boolean hasAnchoringBounds()>
<java.util.regex.Matcher: boolean hitEnd()>
<java.util.regex.Matcher: int regionStart()>
<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<java.util.regex.Matcher: int start()>
<java.util.regex.Matcher: int start(int)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<java.util.regex.Matcher: java.lang.String group()>
<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>
<java.util.regex.Matcher: boolean requireEnd()>
<java.util.regex.Matcher: boolean find()>
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>
<java.util.regex.Matcher: boolean hasTransparentBounds()>
<java.util.regex.Matcher: boolean matches()>
<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>
<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>
<java.util.regex.Matcher: int end(int)>
<java.util.regex.Matcher: int end()>
<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>
<java.util.regex.Matcher: boolean lookingAt()>
<java.util.regex.Matcher: boolean find(int)>
<java.util.regex.Matcher: java.lang.String group(int)>
<java.util.regex.Matcher: java.util.regex.Pattern pattern()>
<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<java.text.FieldPosition: void setBeginIndex(int)>
<java.text.FieldPosition: void <init>(java.text.Format.Field)>
<java.text.FieldPosition: void <init>(java.text.Format.Field,int)>
<java.text.FieldPosition: int getField()>
<java.text.FieldPosition: java.text.Format.Field getFieldAttribute()>
<java.text.FieldPosition: int getBeginIndex()>
<java.text.FieldPosition: void setEndIndex(int)>
<java.text.FieldPosition: void <init>(int)>
<java.text.FieldPosition: int getEndIndex()>
<java.net.PortUnreachableException: void <init>(java.lang.String)>
<java.net.PortUnreachableException: void <init>()>
<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)>
<android.util.TimeUtils: void <init>()>
<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>
<java.util.DuplicateFormatFlagsException: java.lang.String getFlags()>
<javax.microedition.khronos.egl.EGLSurface: void <init>()>
<android.media.MediaScannerConnection: void scanFile(java.lang.String,java.lang.String)>
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection.MediaScannerConnectionClient)>
<android.media.MediaScannerConnection: boolean isConnected()>
<android.media.MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.media.MediaScannerConnection: void disconnect()>
<android.media.MediaScannerConnection: void connect()>
<android.media.MediaScannerConnection: void onServiceDisconnected(android.content.ComponentName)>
<java.util.MissingFormatWidthException: java.lang.String getFormatSpecifier()>
<java.util.MissingFormatWidthException: void <init>(java.lang.String)>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)>
<java.security.cert.CertPathValidator: java.security.Provider getProvider()>
<java.security.cert.CertPathValidator: void <init>(java.security.cert.CertPathValidatorSpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertPathValidator: java.lang.String getDefaultType()>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)>
<java.security.cert.CertPathValidator: java.lang.String getAlgorithm()>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>
<java.io.FilterOutputStream: void write(int)>
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<android.graphics.ColorMatrixColorFilter: void <init>(float[])>
<android.graphics.ColorMatrixColorFilter: void <init>(android.graphics.ColorMatrix)>
<java.io.Reader: void mark(int)>
<java.io.Reader: void <init>(java.lang.Object)>
<java.io.Reader: boolean ready()>
<java.io.Reader: int read()>
<java.io.Reader: void close()>
<java.io.Reader: int read(char[])>
<java.io.Reader: void reset()>
<java.io.Reader: long skip(long)>
<java.io.Reader: void <init>()>
<java.io.Reader: int read(java.nio.CharBuffer)>
<java.io.Reader: boolean markSupported()>
<java.io.Reader: int read(char[],int,int)>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)>
<java.lang.reflect.InvocationTargetException: void <init>()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>
<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLSocketFactory: void <init>()>
<javax.net.ssl.SSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<java.nio.channels.NonReadableChannelException: void <init>()>
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>
<android.telephony.CellLocation: void <init>()>
<android.telephony.CellLocation: void requestLocationUpdate()>
<javax.net.ssl.SSLServerSocket: void <init>(int,int,java.net.InetAddress)>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledCipherSuites()>
<javax.net.ssl.SSLServerSocket: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLServerSocket: boolean getEnableSessionCreation()>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getSupportedProtocols()>
<javax.net.ssl.SSLServerSocket: void <init>(int)>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledProtocols()>
<javax.net.ssl.SSLServerSocket: void setEnabledCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLServerSocket: boolean getWantClientAuth()>
<javax.net.ssl.SSLServerSocket: void <init>()>
<javax.net.ssl.SSLServerSocket: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLServerSocket: void setEnableSessionCreation(boolean)>
<javax.net.ssl.SSLServerSocket: void <init>(int,int)>
<javax.net.ssl.SSLServerSocket: boolean getUseClientMode()>
<javax.net.ssl.SSLServerSocket: boolean getNeedClientAuth()>
<javax.net.ssl.SSLServerSocket: void setUseClientMode(boolean)>
<javax.net.ssl.SSLServerSocket: void setEnabledProtocols(java.lang.String[])>
<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewParent: android.view.ViewParent getParent()>
<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>
<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewParent: void focusableViewAvailable(android.view.View)>
<android.view.ViewParent: void bringChildToFront(android.view.View)>
<android.view.ViewParent: void requestTransparentRegion(android.view.View)>
<android.view.ViewParent: void requestLayout()>
<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>
<android.view.ViewParent: boolean isLayoutRequested()>
<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>
<android.view.ViewParent: void clearChildFocus(android.view.View)>
<android.widget.FilterQueryProvider: android.database.Cursor runQuery(java.lang.CharSequence)>
<android.test.TestSuiteProvider: junit.framework.TestSuite getTestSuite()>
<java.nio.charset.CharacterCodingException: void <init>()>
<javax.microedition.khronos.egl.EGL10: java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)>
<javax.microedition.khronos.egl.EGL10: boolean eglWaitNative(int,java.lang.Object)>
<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()>
<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>
<javax.microedition.khronos.egl.EGL10: boolean eglWaitGL()>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.microedition.khronos.egl.EGL10: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)>
<javax.microedition.khronos.egl.EGL10: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()>
<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<javax.microedition.khronos.egl.EGL10: int eglGetError()>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<java.lang.Double: long doubleToLongBits(double)>
<java.lang.Double: boolean isInfinite()>
<java.lang.Double: boolean isNaN()>
<java.lang.Double: long longValue()>
<java.lang.Double: void <init>(java.lang.String)>
<java.lang.Double: void <init>(double)>
<java.lang.Double: double parseDouble(java.lang.String)>
<java.lang.Double: int compareTo(java.lang.Double)>
<java.lang.Double: long doubleToRawLongBits(double)>
<java.lang.Double: float floatValue()>
<java.lang.Double: int compare(double,double)>
<java.lang.Double: double longBitsToDouble(long)>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.lang.Double: boolean isInfinite(double)>
<java.lang.Double: int intValue()>
<java.lang.Double: boolean isNaN(double)>
<java.lang.Double: double doubleValue()>
<java.lang.Double: java.lang.String toHexString(double)>
<java.lang.Double: java.lang.String toString(double)>
<java.lang.Double: java.lang.Double valueOf(double)>
<android.content.DialogInterface.OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>
<org.apache.http.impl.entity.EntitySerializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>
<org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)>
<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>
<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.TypeNotPresentException: java.lang.String typeName()>
<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>
<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>
<java.util.concurrent.FutureTask: V get()>
<java.util.concurrent.FutureTask: boolean runAndReset()>
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,V)>
<java.util.concurrent.FutureTask: boolean cancel(boolean)>
<java.util.concurrent.FutureTask: void run()>
<java.util.concurrent.FutureTask: void done()>
<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>
<java.util.concurrent.FutureTask: boolean isDone()>
<java.util.concurrent.FutureTask: void set(V)>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<java.util.concurrent.FutureTask: boolean isCancelled()>
<java.util.concurrent.FutureTask: V get(long,java.util.concurrent.TimeUnit)>
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.app.Dialog: void setContentView(int)>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.Dialog: void setDismissMessage(android.os.Message)>
<android.app.Dialog: void dismiss()>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<android.app.Dialog: void setTitle(int)>
<android.app.Dialog: void onStop()>
<android.app.Dialog: void setVolumeControlStream(int)>
<android.app.Dialog: boolean isShowing()>
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Dialog: void show()>
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: void unregisterForContextMenu(android.view.View)>
<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface.OnKeyListener)>
<android.app.Dialog: void onContentChanged()>
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface.OnDismissListener)>
<android.app.Dialog: void onCreate(android.os.Bundle)>
<android.app.Dialog: void registerForContextMenu(android.view.View)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.app.Dialog: void setTitle(java.lang.CharSequence)>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface.OnCancelListener)>
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Dialog: void onWindowFocusChanged(boolean)>
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Dialog: void closeOptionsMenu()>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Dialog: void onStart()>
<android.app.Dialog: void openOptionsMenu()>
<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Dialog: android.view.View findViewById(int)>
<android.app.Dialog: android.view.View onCreatePanelView(int)>
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: void <init>(android.content.Context,int)>
<android.app.Dialog: void setContentView(android.view.View)>
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Dialog: void openContextMenu(android.view.View)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.app.Dialog: void setFeatureDrawableResource(int,int)>
<android.app.Dialog: void <init>(android.content.Context)>
<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface.OnCancelListener)>
<android.app.Dialog: void setCancelable(boolean)>
<android.app.Dialog: boolean onSearchRequested()>
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Dialog: android.content.Context getContext()>
<android.app.Dialog: void hide()>
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>
<android.app.Dialog: void takeKeyEvents(boolean)>
<android.app.Dialog: int getVolumeControlStream()>
<android.app.Dialog: android.view.Window getWindow()>
<android.app.Dialog: android.view.View getCurrentFocus()>
<android.app.Dialog: void cancel()>
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>
<android.app.Dialog: void setCancelMessage(android.os.Message)>
<java.util.prefs.BackingStoreException: void <init>(java.lang.Throwable)>
<java.util.prefs.BackingStoreException: void <init>(java.lang.String)>
<java.security.cert.CertStoreSpi: java.util.Collection engineGetCertificates(java.security.cert.CertSelector)>
<java.security.cert.CertStoreSpi: void <init>(java.security.cert.CertStoreParameters)>
<java.security.cert.CertStoreSpi: java.util.Collection engineGetCRLs(java.security.cert.CRLSelector)>
<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence)>
<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence,int,int)>
<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>
<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>
<android.text.Editable: void setFilters(android.text.InputFilter[])>
<android.text.Editable: android.text.Editable append(char)>
<android.text.Editable: void clearSpans()>
<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>
<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>
<android.text.Editable: android.text.Editable delete(int,int)>
<android.text.Editable: void clear()>
<android.text.Editable: android.text.InputFilter[] getFilters()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>
<java.lang.ref.ReferenceQueue: void <init>()>
<android.graphics.Paint.FontMetrics: void <init>()>
<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>
<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>
<org.xml.sax.XMLReader: org.xml.sax.EntityResolver getEntityResolver()>
<org.xml.sax.XMLReader: boolean getFeature(java.lang.String)>
<org.xml.sax.XMLReader: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.XMLReader: org.xml.sax.DTDHandler getDTDHandler()>
<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xml.sax.XMLReader: org.xml.sax.ContentHandler getContentHandler()>
<org.xml.sax.XMLReader: void parse(java.lang.String)>
<org.xml.sax.XMLReader: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xml.sax.XMLReader: java.lang.Object getProperty(java.lang.String)>
<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: void <init>()>
<org.apache.http.client.methods.AbortableHttpRequest: void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger)>
<org.apache.http.client.methods.AbortableHttpRequest: void abort()>
<org.apache.http.client.methods.AbortableHttpRequest: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: int read()>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: int read(byte[])>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: int read(byte[],int,int)>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: java.lang.String readLine()>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.conn.LoggingSessionInputBuffer: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.impl.conn.Wire)>
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute,java.lang.ref.ReferenceQueue)>
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()>
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef()>
<android.os.ParcelFormatException: void <init>()>
<android.os.ParcelFormatException: void <init>(java.lang.String)>
<dalvik.system.Zygote: int forkSystemServer(int,int,int[],boolean,int[][])>
<dalvik.system.Zygote: int forkAndSpecialize(int,int,int[],boolean,int[][])>
<dalvik.system.Zygote: int fork()>
<java.util.logging.StreamHandler: void close()>
<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)>
<java.util.logging.StreamHandler: void <init>()>
<java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>
<java.util.logging.StreamHandler: void flush()>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>
<java.lang.Number: long longValue()>
<java.lang.Number: short shortValue()>
<java.lang.Number: int intValue()>
<java.lang.Number: float floatValue()>
<java.lang.Number: void <init>()>
<java.lang.Number: byte byteValue()>
<java.lang.Number: double doubleValue()>
<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>
<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>
<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>
<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>
<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>
<android.webkit.WebChromeClient: void <init>()>
<java.io.DataOutput: void writeInt(int)>
<java.io.DataOutput: void writeBoolean(boolean)>
<java.io.DataOutput: void writeChar(int)>
<java.io.DataOutput: void write(int)>
<java.io.DataOutput: void writeLong(long)>
<java.io.DataOutput: void writeShort(int)>
<java.io.DataOutput: void writeDouble(double)>
<java.io.DataOutput: void write(byte[])>
<java.io.DataOutput: void writeByte(int)>
<java.io.DataOutput: void writeFloat(float)>
<java.io.DataOutput: void writeBytes(java.lang.String)>
<java.io.DataOutput: void writeChars(java.lang.String)>
<java.io.DataOutput: void writeUTF(java.lang.String)>
<java.io.DataOutput: void write(byte[],int,int)>
<java.io.PipedOutputStream: void write(int)>
<java.io.PipedOutputStream: void <init>()>
<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>
<java.io.PipedOutputStream: void connect(java.io.PipedInputStream)>
<android.test.PerformanceTestCase: boolean isPerformanceOnly()>
<android.test.PerformanceTestCase: int startPerformance(android.test.PerformanceTestCase.Intermediates)>
<java.sql.SQLData: void readSQL(java.sql.SQLInput,java.lang.String)>
<java.sql.SQLData: void writeSQL(java.sql.SQLOutput)>
<java.sql.SQLData: java.lang.String getSQLTypeName()>
<org.apache.http.auth.NTUserPrincipal: java.lang.String getUsername()>
<org.apache.http.auth.NTUserPrincipal: java.lang.String getDomain()>
<org.apache.http.auth.NTUserPrincipal: java.lang.String getName()>
<org.apache.http.auth.NTUserPrincipal: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.entity.InputStreamEntity: boolean isStreaming()>
<org.apache.http.entity.InputStreamEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.InputStreamEntity: boolean isRepeatable()>
<org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long)>
<org.apache.http.entity.InputStreamEntity: java.io.InputStream getContent()>
<org.apache.http.entity.InputStreamEntity: long getContentLength()>
<android.content.AsyncQueryHandler: void onDeleteComplete(int,java.lang.Object,int)>
<android.content.AsyncQueryHandler: void cancelOperation(int)>
<android.content.AsyncQueryHandler: void onInsertComplete(int,java.lang.Object,android.net.Uri)>
<android.content.AsyncQueryHandler: void onUpdateComplete(int,java.lang.Object,int)>
<android.content.AsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<android.content.AsyncQueryHandler: void startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)>
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.AsyncQueryHandler: void startInsert(int,java.lang.Object,android.net.Uri,android.content.ContentValues)>
<android.content.AsyncQueryHandler: void startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.AsyncQueryHandler: void <init>(android.content.ContentResolver)>
<junit.framework.Protectable: void protect()>
<java.security.spec.ECField: int getFieldSize()>
<org.apache.http.impl.cookie.BrowserCompatSpecFactory: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>
<org.apache.http.impl.cookie.BrowserCompatSpecFactory: void <init>()>
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void <init>()>
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: boolean expectContinue()>
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: org.apache.http.HttpEntity getEntity()>
<org.apache.http.conn.ClientConnectionManagerFactory: org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>
<java.security.acl.Permission: java.lang.String toString()>
<java.security.acl.Permission: boolean equals(java.lang.Object)>
<java.util.Timer: int purge()>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.util.Timer: void <init>(boolean)>
<java.util.Timer: void <init>()>
<java.util.Timer: void <init>(java.lang.String,boolean)>
<java.util.Timer: void cancel()>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>
<java.util.Timer: void <init>(java.lang.String)>
<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>
<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date)>
<java.util.jar.JarFile: void <init>(java.lang.String)>
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>
<java.util.jar.JarFile: void <init>(java.io.File,boolean,int)>
<java.util.jar.JarFile: void <init>(java.lang.String,boolean)>
<java.util.jar.JarFile: void <init>(java.io.File,boolean)>
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>
<java.util.jar.JarFile: void <init>(java.io.File)>
<android.app.PendingIntent: void send()>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: void send(int,android.app.PendingIntent.OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler)>
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>
<android.app.PendingIntent: int describeContents()>
<android.app.PendingIntent: void cancel()>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<android.app.PendingIntent: void send(int)>
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>
<org.apache.http.protocol.RequestConnControl: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.RequestConnControl: void <init>()>
<java.util.concurrent.ThreadPoolExecutor.AbortPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.concurrent.ThreadPoolExecutor.AbortPolicy: void <init>()>
<android.os.PowerManager: void goToSleep(long)>
<android.os.PowerManager: void userActivity(long,boolean)>
<android.os.PowerManager: android.os.PowerManager.WakeLock newWakeLock(int,java.lang.String)>
<android.text.AlteredCharSequence: void getChars(int,int,char[],int)>
<android.text.AlteredCharSequence: android.text.AlteredCharSequence make(java.lang.CharSequence,char[],int,int)>
<android.text.AlteredCharSequence: java.lang.CharSequence subSequence(int,int)>
<android.text.AlteredCharSequence: int length()>
<android.text.AlteredCharSequence: char charAt(int)>
<android.view.ViewTreeObserver.OnGlobalLayoutListener: void onGlobalLayout()>
<android.test.ApplicationTestCase: void testApplicationTestCaseSetUpProperly()>
<android.test.ApplicationTestCase: void createApplication()>
<android.test.ApplicationTestCase: void <init>(java.lang.Class)>
<android.test.ApplicationTestCase: void terminateApplication()>
<android.test.ApplicationTestCase: android.content.Context getSystemContext()>
<android.test.ApplicationTestCase: T getApplication()>
<android.view.animation.AnimationSet: void <init>(boolean)>
<android.view.animation.AnimationSet: java.util.List getAnimations()>
<android.view.animation.AnimationSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<java.io.StreamTokenizer: void lowerCaseMode(boolean)>
<java.io.StreamTokenizer: void slashSlashComments(boolean)>
<java.io.StreamTokenizer: void commentChar(int)>
<java.io.StreamTokenizer: void ordinaryChar(int)>
<java.io.StreamTokenizer: void resetSyntax()>
<java.io.StreamTokenizer: void wordChars(int,int)>
<java.io.StreamTokenizer: void <init>(java.io.Reader)>
<java.io.StreamTokenizer: int nextToken()>
<java.io.StreamTokenizer: void slashStarComments(boolean)>
<java.io.StreamTokenizer: void parseNumbers()>
<java.io.StreamTokenizer: void <init>(java.io.InputStream)>
<java.io.StreamTokenizer: int lineno()>
<java.io.StreamTokenizer: void ordinaryChars(int,int)>
<java.io.StreamTokenizer: void whitespaceChars(int,int)>
<java.io.StreamTokenizer: void quoteChar(int)>
<java.io.StreamTokenizer: void pushBack()>
<java.io.StreamTokenizer: void eolIsSignificant(boolean)>
<android.graphics.drawable.GradientDrawable.Orientation: android.graphics.drawable.GradientDrawable.Orientation valueOf(java.lang.String)>
<android.graphics.drawable.GradientDrawable.Orientation: android.graphics.drawable.GradientDrawable.Orientation[] values()>
<java.math.RoundingMode: java.math.RoundingMode valueOf(java.lang.String)>
<java.math.RoundingMode: java.math.RoundingMode valueOf(int)>
<java.math.RoundingMode: java.math.RoundingMode[] values()>
<java.lang.IllegalAccessException: void <init>()>
<java.lang.IllegalAccessException: void <init>(java.lang.String)>
<javax.crypto.spec.PSource: java.lang.String getAlgorithm()>
<javax.crypto.spec.PSource: void <init>(java.lang.String)>
<android.os.MemoryFile: java.io.OutputStream getOutputStream()>
<android.os.MemoryFile: boolean isPurgingAllowed()>
<android.os.MemoryFile: void close()>
<android.os.MemoryFile: int readBytes(byte[],int,int,int)>
<android.os.MemoryFile: void <init>(java.lang.String,int)>
<android.os.MemoryFile: boolean allowPurging(boolean)>
<android.os.MemoryFile: java.io.InputStream getInputStream()>
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>
<android.os.MemoryFile: int length()>
<org.apache.http.impl.auth.NTLMEngine: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.http.impl.auth.NTLMEngine: java.lang.String generateType1Msg(java.lang.String,java.lang.String)>
<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>
<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>
<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>
<javax.sql.ConnectionPoolDataSource: int getLoginTimeout()>
<javax.sql.ConnectionPoolDataSource: void setLoginTimeout(int)>
<javax.sql.ConnectionPoolDataSource: void setLogWriter(java.io.PrintWriter)>
<javax.sql.ConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection()>
<javax.sql.ConnectionPoolDataSource: java.io.PrintWriter getLogWriter()>
<javax.sql.ConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>
<android.graphics.NinePatch: boolean hasAlpha()>
<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>
<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>
<android.graphics.NinePatch: int getWidth()>
<android.graphics.NinePatch: int getHeight()>
<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)>
<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>
<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.LinkedBlockingQueue: E take()>
<java.util.concurrent.LinkedBlockingQueue: int size()>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: void put(E)>
<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(E)>
<java.util.concurrent.LinkedBlockingQueue: E peek()>
<java.util.concurrent.LinkedBlockingQueue: E poll()>
<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.LinkedBlockingQueue: void <init>()>
<android.database.AbstractCursor.SelfContentObserver: void <init>(android.database.AbstractCursor)>
<org.apache.http.conn.params.ConnManagerParamBean: void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean)>
<org.apache.http.conn.params.ConnManagerParamBean: void setMaxTotalConnections(int)>
<org.apache.http.conn.params.ConnManagerParamBean: void setTimeout(long)>
<org.apache.http.conn.params.ConnManagerParamBean: void <init>(org.apache.http.params.HttpParams)>
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface.OnCancelListener)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void setIcon(int)>
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>
<android.app.AlertDialog: void setView(android.view.View)>
<android.app.AlertDialog: void setCustomTitle(android.view.View)>
<android.app.AlertDialog: void <init>(android.content.Context)>
<android.app.AlertDialog: void <init>(android.content.Context,int)>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>
<android.view.ViewGroup.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup.LayoutParams: void <init>(int,int)>
<android.view.ViewGroup.LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<android.widget.TextView: void setMaxHeight(int)>
<android.widget.TextView: void setWidth(int)>
<android.widget.TextView: int getPaintFlags()>
<android.widget.TextView: void setLinkTextColor(int)>
<android.widget.TextView: void debug(int)>
<android.widget.TextView: void setMinWidth(int)>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.TextView: void setMaxEms(int)>
<android.widget.TextView: void setText(char[],int,int)>
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: int getAutoLinkMask()>
<android.widget.TextView: boolean setFrame(int,int,int,int)>
<android.widget.TextView: void setHeight(int)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextView: void setMinLines(int)>
<android.widget.TextView: int getTotalPaddingLeft()>
<android.widget.TextView: int getGravity()>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.widget.TextView: void setMaxWidth(int)>
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>
<android.widget.TextView: int getLineCount()>
<android.widget.TextView: void setTextSize(int,float)>
<android.widget.TextView: int getTotalPaddingTop()>
<android.widget.TextView: int getTextColor(android.content.Context,android.content.res.TypedArray,int)>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<android.widget.TextView: void setLinksClickable(boolean)>
<android.widget.TextView: int getLineHeight()>
<android.widget.TextView: boolean getLinksClickable()>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.widget.TextView: int getSelectionEnd()>
<android.widget.TextView: boolean getFreezesText()>
<android.widget.TextView: int length()>
<android.widget.TextView: java.lang.CharSequence getError()>
<android.widget.TextView: void setPaintFlags(int)>
<android.widget.TextView: int getSelectionStart()>
<android.widget.TextView: void setError(java.lang.CharSequence)>
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>
<android.widget.TextView: void setFreezesText(boolean)>
<android.widget.TextView: android.text.Layout getLayout()>
<android.widget.TextView: int getCompoundPaddingBottom()>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.widget.TextView: int getCurrentHintTextColor()>
<android.widget.TextView: float getTextScaleX()>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setHint(int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setMinHeight(int)>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<android.widget.TextView: void setIncludeFontPadding(boolean)>
<android.widget.TextView: int getTotalPaddingRight()>
<android.widget.TextView: void setHorizontallyScrolling(boolean)>
<android.widget.TextView: void setLines(int)>
<android.widget.TextView: void setTextAppearance(android.content.Context,int)>
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setScroller(android.widget.Scroller)>
<android.widget.TextView: void append(java.lang.CharSequence,int,int)>
<android.widget.TextView: void setText(int,android.widget.TextView.BufferType)>
<android.widget.TextView: void setLineSpacing(float,float)>
<android.widget.TextView: void setMinEms(int)>
<android.widget.TextView: int getTotalPaddingBottom()>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView.BufferType)>
<android.widget.TextView: void setCompoundDrawablePadding(int)>
<android.widget.TextView: void setTextScaleX(float)>
<android.widget.TextView: void setAutoLinkMask(int)>
<android.widget.TextView: android.text.style.URLSpan[] getUrls()>
<android.widget.TextView: void setCursorVisible(boolean)>
<android.widget.TextView: int getCompoundPaddingLeft()>
<android.widget.TextView: void setEllipsize(android.text.TextUtils.TruncateAt)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface)>
<android.widget.TextView: java.lang.CharSequence getText()>
<android.widget.TextView: android.text.TextUtils.TruncateAt getEllipsize()>
<android.widget.TextView: void setSingleLine(boolean)>
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>
<android.widget.TextView: void setText(int)>
<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: void setEditableFactory(android.text.Editable.Factory)>
<android.widget.TextView: int getCompoundPaddingTop()>
<android.widget.TextView: int getCurrentTextColor()>
<android.widget.TextView: boolean getDefaultEditable()>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<android.widget.TextView: void setTextColor(int)>
<android.widget.TextView: int getCompoundPaddingRight()>
<android.widget.TextView: android.text.TextPaint getPaint()>
<android.widget.TextView: int getCompoundDrawablePadding()>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextView: void setGravity(int)>
<android.widget.TextView: java.lang.CharSequence getHint()>
<android.widget.TextView: void setSingleLine()>
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>
<android.widget.TextView: void setEms(int)>
<android.widget.TextView: void setTextSize(float)>
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>
<android.widget.TextView: boolean onPreDraw()>
<android.widget.TextView: boolean hasSelection()>
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.widget.TextView: float getTextSize()>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.widget.TextView: void setMaxLines(int)>
<android.widget.TextView: void setHint(java.lang.CharSequence)>
<android.widget.TextView: void setSelectAllOnFocus(boolean)>
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>
<android.widget.TextView: void append(java.lang.CharSequence)>
<android.widget.TextView: void setHintTextColor(int)>
<android.widget.TextView: void setHighlightColor(int)>
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<android.widget.TextView: void setSpannableFactory(android.text.Spannable.Factory)>
<android.widget.TextView: void <init>(android.content.Context)>
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView.BufferType)>
<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>
<android.widget.SimpleAdapter: long getItemId(int)>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)>
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])>
<android.widget.SimpleAdapter: android.widget.SimpleAdapter.ViewBinder getViewBinder()>
<android.widget.SimpleAdapter: android.widget.Filter getFilter()>
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleAdapter: void setViewBinder(android.widget.SimpleAdapter.ViewBinder)>
<android.widget.SimpleAdapter: int getCount()>
<android.widget.SimpleAdapter: void setDropDownViewResource(int)>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)>
<java.io.PushbackReader: void unread(int)>
<java.io.PushbackReader: void <init>(java.io.Reader)>
<java.io.PushbackReader: void unread(char[],int,int)>
<java.io.PushbackReader: void <init>(java.io.Reader,int)>
<java.io.PushbackReader: void unread(char[])>
<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>
<javax.sql.ConnectionEvent: void <init>(javax.sql.PooledConnection)>
<javax.sql.ConnectionEvent: java.sql.SQLException getSQLException()>
<javax.sql.ConnectionEvent: void <init>(javax.sql.PooledConnection,java.sql.SQLException)>
<java.net.NoRouteToHostException: void <init>()>
<java.net.NoRouteToHostException: void <init>(java.lang.String)>
<android.graphics.Typeface: boolean isItalic()>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>
<android.graphics.Typeface: int getStyle()>
<android.graphics.Typeface: boolean isBold()>
<dalvik.system.PotentialDeadlockError: void <init>(java.lang.String)>
<dalvik.system.PotentialDeadlockError: void <init>()>
<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
<org.apache.http.message.BasicNameValuePair: java.lang.String getName()>
<org.apache.http.message.BasicNameValuePair: java.lang.String getValue()>
<android.app.KeyguardManager.KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager.KeyguardLock: void reenableKeyguard()>
<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.DynamicLayout: int getParagraphDirection(int)>
<android.text.DynamicLayout: int getLineStart(int)>
<android.text.DynamicLayout: android.text.Layout.Directions getLineDirections(int)>
<android.text.DynamicLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
<android.text.DynamicLayout: int getBottomPadding()>
<android.text.DynamicLayout: int getTopPadding()>
<android.text.DynamicLayout: int getLineCount()>
<android.text.DynamicLayout: int getLineDescent(int)>
<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
<android.text.DynamicLayout: int getLineTop(int)>
<android.text.DynamicLayout: boolean getLineContainsTab(int)>
<android.text.DynamicLayout: int getEllipsisCount(int)>
<android.text.DynamicLayout: int getEllipsisStart(int)>
<android.view.View.MeasureSpec: int getMode(int)>
<android.view.View.MeasureSpec: void <init>()>
<android.view.View.MeasureSpec: int getSize(int)>
<android.view.View.MeasureSpec: int makeMeasureSpec(int,int)>
<android.view.View.MeasureSpec: java.lang.String toString(int)>
<java.text.MessageFormat.Field: void <init>(java.lang.String)>
<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>
<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>
<java.security.cert.CertificateParsingException: void <init>()>
<java.security.cert.CertificateParsingException: void <init>(java.lang.String,java.lang.Throwable)>
<android.preference.DialogPreference: void setNegativeButtonText(java.lang.CharSequence)>
<android.preference.DialogPreference: void onPrepareDialogBuilder(android.app.AlertDialog.Builder)>
<android.preference.DialogPreference: void setDialogMessage(java.lang.CharSequence)>
<android.preference.DialogPreference: android.view.View onCreateDialogView()>
<android.preference.DialogPreference: void showDialog(android.os.Bundle)>
<android.preference.DialogPreference: void onClick(android.content.DialogInterface,int)>
<android.preference.DialogPreference: java.lang.CharSequence getNegativeButtonText()>
<android.preference.DialogPreference: void setDialogLayoutResource(int)>
<android.preference.DialogPreference: void setPositiveButtonText(int)>
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()>
<android.preference.DialogPreference: int getDialogLayoutResource()>
<android.preference.DialogPreference: void onActivityDestroy()>
<android.preference.DialogPreference: void setDialogTitle(int)>
<android.preference.DialogPreference: void setDialogIcon(android.graphics.drawable.Drawable)>
<android.preference.DialogPreference: void onDismiss(android.content.DialogInterface)>
<android.preference.DialogPreference: void onBindDialogView(android.view.View)>
<android.preference.DialogPreference: void setDialogIcon(int)>
<android.preference.DialogPreference: void setNegativeButtonText(int)>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.DialogPreference: void setPositiveButtonText(java.lang.CharSequence)>
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.DialogPreference: void onDialogClosed(boolean)>
<android.preference.DialogPreference: void setDialogTitle(java.lang.CharSequence)>
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()>
<android.preference.DialogPreference: void setDialogMessage(int)>
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()>
<javax.net.ssl.KeyManagerFactorySpi: void engineInit(java.security.KeyStore,char[])>
<javax.net.ssl.KeyManagerFactorySpi: void <init>()>
<javax.net.ssl.KeyManagerFactorySpi: javax.net.ssl.KeyManager[] engineGetKeyManagers()>
<javax.net.ssl.KeyManagerFactorySpi: void engineInit(javax.net.ssl.ManagerFactoryParameters)>
<java.io.SerializablePermission: void <init>(java.lang.String)>
<java.io.SerializablePermission: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.client.methods.HttpDelete: java.lang.String getMethod()>
<org.apache.http.client.methods.HttpDelete: void <init>(java.net.URI)>
<org.apache.http.client.methods.HttpDelete: void <init>(java.lang.String)>
<org.apache.http.client.methods.HttpDelete: void <init>()>
<android.view.MotionEvent: long getEventTime()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.MotionEvent: void recycle()>
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.MotionEvent: int getHistorySize()>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: int getAction()>
<android.view.MotionEvent: int getDeviceId()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: float getXPrecision()>
<android.view.MotionEvent: long getDownTime()>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.view.MotionEvent: float getY()>
<android.view.MotionEvent: float getYPrecision()>
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.view.MotionEvent: float getSize()>
<android.view.MotionEvent: int getEdgeFlags()>
<android.view.MotionEvent: float getPressure()>
<android.view.MotionEvent: void setLocation(float,float)>
<android.view.MotionEvent: float getRawX()>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<android.view.MotionEvent: void setEdgeFlags(int)>
<android.view.MotionEvent: int describeContents()>
<android.view.MotionEvent: float getX()>
<android.view.MotionEvent: int getMetaState()>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.view.MotionEvent: void setAction(int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<javax.sql.DataSource: int getLoginTimeout()>
<javax.sql.DataSource: void setLoginTimeout(int)>
<javax.sql.DataSource: java.io.PrintWriter getLogWriter()>
<javax.sql.DataSource: java.sql.Connection getConnection()>
<javax.sql.DataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)>
<javax.sql.DataSource: void setLogWriter(java.io.PrintWriter)>
<android.view.animation.Animation.Description: void <init>()>
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRedirectHandler: boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultRedirectHandler: void <init>()>
<android.text.method.PasswordTransformationMethod: void afterTextChanged(android.text.Editable)>
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>
<android.text.method.PasswordTransformationMethod: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.text.method.PasswordTransformationMethod: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.text.method.PasswordTransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
<android.text.method.PasswordTransformationMethod: void <init>()>
<android.text.method.PasswordTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<java.util.WeakHashMap: void <init>(int)>
<java.util.WeakHashMap: void <init>(int,float)>
<java.util.WeakHashMap: void <init>(java.util.Map)>
<java.util.WeakHashMap: java.util.Set entrySet()>
<java.util.WeakHashMap: void <init>()>
<android.content.DialogInterface: void cancel()>
<android.content.DialogInterface: void dismiss()>
<android.widget.ZoomButton: void <init>(android.content.Context)>
<android.widget.ZoomButton: void setZoomSpeed(long)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ZoomButton: boolean onLongClick(android.view.View)>
<java.security.AlgorithmParametersSpi: T engineGetParameterSpec(java.lang.Class)>
<java.security.AlgorithmParametersSpi: void <init>()>
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded()>
<java.security.AlgorithmParametersSpi: void engineInit(java.security.spec.AlgorithmParameterSpec)>
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded(java.lang.String)>
<java.security.AlgorithmParametersSpi: java.lang.String engineToString()>
<java.security.AlgorithmParametersSpi: void engineInit(byte[],java.lang.String)>
<java.security.AlgorithmParametersSpi: void engineInit(byte[])>
<org.apache.http.impl.cookie.NetscapeDraftSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>
<org.apache.http.impl.cookie.NetscapeDraftSpec: void <init>()>
<org.apache.http.impl.cookie.NetscapeDraftSpec: void <init>(java.lang.String[])>
<org.apache.http.impl.cookie.NetscapeDraftSpec: int getVersion()>
<org.apache.http.impl.cookie.NetscapeDraftSpec: java.util.List formatCookies(java.util.List)>
<org.apache.http.impl.cookie.NetscapeDraftSpec: org.apache.http.Header getVersionHeader()>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.InsetDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)>
<android.graphics.drawable.InsetDrawable: int getOpacity()>
<android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.InsetDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.InsetDrawable: void setAlpha(int)>
<android.graphics.drawable.InsetDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
<java.util.Iterator: E next()>
<java.util.Iterator: void remove()>
<java.util.Iterator: boolean hasNext()>
<javax.security.auth.PrivateCredentialPermission: boolean equals(java.lang.Object)>
<javax.security.auth.PrivateCredentialPermission: java.lang.String[][] getPrincipals()>
<javax.security.auth.PrivateCredentialPermission: int hashCode()>
<javax.security.auth.PrivateCredentialPermission: boolean implies(java.security.Permission)>
<javax.security.auth.PrivateCredentialPermission: java.lang.String getActions()>
<javax.security.auth.PrivateCredentialPermission: java.lang.String getCredentialClass()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.lang.String)>
<android.R: void <init>()>
<org.xml.sax.HandlerBase: void startDocument()>
<org.xml.sax.HandlerBase: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void <init>()>
<org.xml.sax.HandlerBase: void endDocument()>
<org.xml.sax.HandlerBase: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.HandlerBase: void fatalError(org.xml.sax.SAXParseException)>
<org.xml.sax.HandlerBase: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.HandlerBase: void startElement(java.lang.String,org.xml.sax.AttributeList)>
<org.xml.sax.HandlerBase: void endElement(java.lang.String)>
<org.xml.sax.HandlerBase: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.HandlerBase: void error(org.xml.sax.SAXParseException)>
<org.xml.sax.HandlerBase: void characters(char[],int,int)>
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ContentProvider: void setReadPermission(java.lang.String)>
<android.content.ContentProvider: void setWritePermission(java.lang.String)>
<android.content.ContentProvider: boolean onCreate()>
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.content.ContentProvider: void onLowMemory()>
<android.content.ContentProvider: java.lang.String getReadPermission()>
<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProvider: java.lang.String getWritePermission()>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProvider: android.content.Context getContext()>
<android.content.ContentProvider: void <init>()>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: boolean isTemporary()>
<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()>
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()>
<org.apache.http.auth.UsernamePasswordCredentials: java.lang.String getPassword()>
<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.auth.UsernamePasswordCredentials: java.lang.String getUserName()>
<org.apache.http.auth.UsernamePasswordCredentials: java.security.Principal getUserPrincipal()>
<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String)>
<javax.crypto.BadPaddingException: void <init>(java.lang.String)>
<javax.crypto.BadPaddingException: void <init>()>
<android.view.View.BaseSavedState: void <init>(android.os.Parcel)>
<android.view.View.BaseSavedState: void <init>(android.os.Parcelable)>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteClosable: void <init>()>
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>
<android.database.sqlite.SQLiteClosable: void acquireReference()>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
<android.database.sqlite.SQLiteClosable: void releaseReference()>
<android.widget.ExpandableListView: void setAdapter(android.widget.ExpandableListAdapter)>
<android.widget.ExpandableListView: long getSelectedPosition()>
<android.widget.ExpandableListView: void <init>(android.content.Context)>
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener)>
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)>
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void setSelectedGroup(int)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ExpandableListView: int getPackedPositionChild(long)>
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)>
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener)>
<android.widget.ExpandableListView: boolean expandGroup(int)>
<android.widget.ExpandableListView: boolean collapseGroup(int)>
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)>
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.widget.ExpandableListView: boolean isGroupExpanded(int)>
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)>
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)>
<android.widget.ExpandableListView: long getSelectedId()>
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener)>
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: int getFlatListPosition(long)>
<android.widget.ExpandableListView: long getExpandableListPosition(int)>
<android.widget.ExpandableListView: int getPackedPositionGroup(long)>
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener)>
<android.widget.ExpandableListView: int getPackedPositionType(long)>
<org.apache.http.cookie.params.CookieSpecParamBean: void setDatePatterns(java.util.Collection)>
<org.apache.http.cookie.params.CookieSpecParamBean: void setSingleHeader(boolean)>
<org.apache.http.cookie.params.CookieSpecParamBean: void <init>(org.apache.http.params.HttpParams)>
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>
<android.webkit.MimeTypeMap: boolean hasMimeType(java.lang.String)>
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)>
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>
<android.webkit.MimeTypeMap: boolean hasExtension(java.lang.String)>
