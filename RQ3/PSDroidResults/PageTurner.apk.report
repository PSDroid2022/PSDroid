/home/ys/桌面/CompactDroid（复件）/dataset2/PageTurner.apk
Entry Points[net.nightwhistler.pageturner.activity.ManageSitesActivity, net.nightwhistler.pageturner.activity.CatalogBookDetailsActivity, net.nightwhistler.pageturner.activity.FileBrowseActivity, net.nightwhistler.pageturner.activity.ReadingActivity, net.nightwhistler.pageturner.PageTurner, net.nightwhistler.pageturner.activity.PageTurnerPrefsActivity, org.acra.CrashReportDialog, net.nightwhistler.pageturner.activity.MediaButtonReceiver, net.nightwhistler.pageturner.activity.CatalogActivity, net.nightwhistler.pageturner.activity.LibraryActivity]
FllowDroidcallgraph size:3713
Soot started on Mon Jul 11 10:24:52 CST 2022
StaticCheck:<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean reserveOverflow(android.content.Context)>$yysi0 >= 14
StaticCheck:<com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>$yysi1 < 14
StaticCheck:$ys0 < 
StaticCheck:<net.nightwhistler.pageturner.PlatformUtil: boolean isAtLeast(int)>< 
Soot finished on Mon Jul 11 10:25:36 CST 2022
Soot has run for 0 min. 43 sec.
Found 0 additional DEX files. Now visiting them one by one.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 7
Declared Target Sdk version is: 19
Declared Max Sdk version is: -1
Collected 1476 Android APIs in the primary DEX file
Collected 0 Android APIs in the secondary DEX files
#################################################
N 0 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
123call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><net.nightwhistler.pageturner.PageTurner: void onCreate()>[]--><org.acra.ACRA: void init(android.app.Application)>[[try]]--><org.acra.ErrorReporter: void <init>(android.content.Context,android.content.SharedPreferences,boolean)>[]--><org.acra.ErrorReporter: void checkReportsOnApplicationStart()>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.acra.CrashReportDialog dummyMainMethod_org_acra_CrashReportDialog(android.content.Intent)>[]--><org.acra.CrashReportDialog$1: void onClick(android.view.View)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
122 Packageshead roads:
try
Good road with try: <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[[try]]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
containsStatic:false
containsTry:true
123call by main package
-----------------------------------------
#################################################
N 1 Potential Issue API: SDKCheck of <android.widget.FrameLayout: void setVisibility(int)> is checking!!!
The life time of api is [21,22]
1944call roads:
1 Mainhead roads:
1943 Packageshead roads:
Roads number exceed, exit!1943
#################################################
N 2 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> is checking!!!
The life time of api is [23,31]
123call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><net.nightwhistler.pageturner.PageTurner: void onCreate()>[]--><org.acra.ACRA: void init(android.app.Application)>[[try]]--><org.acra.ErrorReporter: void <init>(android.content.Context,android.content.SharedPreferences,boolean)>[]--><org.acra.ErrorReporter: void checkReportsOnApplicationStart()>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.acra.CrashReportDialog dummyMainMethod_org_acra_CrashReportDialog(android.content.Intent)>[]--><org.acra.CrashReportDialog$1: void onClick(android.view.View)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
122 Packageshead roads:
try
Good road with try: <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[[try]]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
containsStatic:false
containsTry:true
123call by main package
-----------------------------------------
#################################################
N 3 Potential Issue API: SDKCheck of <android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 23 24 25 26 27 
Error road: <net.nightwhistler.pageturner.fragment.ReadingFragment: void lambda$performSearch$28(android.app.ProgressDialog)>[]--><android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>
#1.the call statck between class <net.nightwhistler.pageturner.fragment.ReadingFragment: void lambda$performSearch$28(android.app.ProgressDialog)> to <android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:1
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 4 Potential Issue API: SDKCheck of <android.widget.AdapterView: void setFocusable(boolean)> is checking!!!
The life time of api is [1,25]
129call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: net.nightwhistler.pageturner.activity.ManageSitesActivity dummyMainMethod_net_nightwhistler_pageturner_activity_ManageSitesActivity(android.content.Intent)>[]--><com.github.rtyley.android.sherlock.roboguice.activity.RoboSherlockListActivity: void onDestroy()>[[try]]--><roboguice.RoboGuice: void destroyInjector(android.content.Context)>[]--><roboguice.RoboGuice: roboguice.inject.RoboInjector getInjector(android.content.Context)>[]--><roboguice.RoboGuice: com.google.inject.Injector getBaseApplicationInjector(android.app.Application)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[])>[[try]]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[])>[]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>[]--><com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>[[try]]--><com.google.inject.internal.InternalInjectorCreator: void initializeStatically()>[]--><com.google.inject.internal.ProcessedBindingData: void initializeBindings()>[]--><com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>[]--><com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
One road protect good!
128 Packageshead roads:
try
Good road with try: <roboguice.activity.RoboFragmentActivity: void onCreate(android.os.Bundle)>[]--><roboguice.RoboGuice: roboguice.inject.RoboInjector getInjector(android.content.Context)>[]--><roboguice.RoboGuice: com.google.inject.Injector getBaseApplicationInjector(android.app.Application)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[])>[[try]]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[])>[]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>[]--><com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>[[try]]--><com.google.inject.internal.InternalInjectorCreator: void initializeStatically()>[]--><com.google.inject.internal.ProcessedBindingData: void initializeBindings()>[]--><com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>[]--><com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
One road protect good!
try
Good road with try: <roboguice.activity.RoboListActivity: void onDestroy()>[[try]]--><roboguice.RoboGuice: void destroyInjector(android.content.Context)>[]--><roboguice.RoboGuice: roboguice.inject.RoboInjector getInjector(android.content.Context)>[]--><roboguice.RoboGuice: com.google.inject.Injector getBaseApplicationInjector(android.app.Application)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[])>[[try]]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[])>[]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>[]--><com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>[[try]]--><com.google.inject.internal.InternalInjectorCreator: void initializeStatically()>[]--><com.google.inject.internal.ProcessedBindingData: void initializeBindings()>[]--><com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>[]--><com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
One road protect good!
try
Good road with try: <com.github.rtyley.android.sherlock.roboguice.activity.RoboSherlockActivity: void onDestroy()>[[try]]--><roboguice.RoboGuice: void destroyInjector(android.content.Context)>[]--><roboguice.RoboGuice: roboguice.inject.RoboInjector getInjector(android.content.Context)>[]--><roboguice.RoboGuice: com.google.inject.Injector getBaseApplicationInjector(android.app.Application)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[])>[[try]]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[])>[]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>[]--><com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>[[try]]--><com.google.inject.internal.InternalInjectorCreator: void initializeStatically()>[]--><com.google.inject.internal.ProcessedBindingData: void initializeBindings()>[]--><com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>[]--><com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
One road protect good!
try
Good road with try: <roboguice.content.RoboAsyncTaskLoader: void <init>(android.content.Context)>[]--><roboguice.RoboGuice: java.lang.Object injectMembers(android.content.Context,java.lang.Object)>[]--><roboguice.RoboGuice: roboguice.inject.RoboInjector getInjector(android.content.Context)>[]--><roboguice.RoboGuice: com.google.inject.Injector getBaseApplicationInjector(android.app.Application)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[])>[[try]]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[])>[]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>[]--><com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>[[try]]--><com.google.inject.internal.InternalInjectorCreator: void initializeStatically()>[]--><com.google.inject.internal.ProcessedBindingData: void initializeBindings()>[]--><com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>[]--><com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
One road protect good!
!!!this api will crash on sdk 26 27 28 29 30 31 
Error road: <net.nightwhistler.pageturner.view.BookCaseView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><android.widget.AdapterView: void setFocusable(boolean)>
try
Good road with try: <net.nightwhistler.pageturner.view.BookCaseView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><roboguice.RoboGuice: roboguice.inject.RoboInjector getInjector(android.content.Context)>[]--><roboguice.RoboGuice: com.google.inject.Injector getBaseApplicationInjector(android.app.Application)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage)>[[try]]--><roboguice.RoboGuice: com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[])>[[try]]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[])>[]--><com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>[]--><com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>[[try]]--><com.google.inject.internal.InternalInjectorCreator: void initializeStatically()>[]--><com.google.inject.internal.ProcessedBindingData: void initializeBindings()>[]--><com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>[]--><com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
One road protect good!
#8.the call statck between class <net.nightwhistler.pageturner.view.BookCaseView: void <init>(android.content.Context,android.util.AttributeSet)> to <android.widget.AdapterView: void setFocusable(boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 26 27 28 29 30 31 
Error road: <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void onChanged()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>[]--><com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>[]--><android.widget.AdapterView: void setFocusable(boolean)>
#9.the call statck between class <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void onChanged()> to <android.widget.AdapterView: void setFocusable(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:2
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 5 Potential Issue API: SDKCheck of <java.beans.PropertyDescriptor: java.lang.Class getPropertyType()> is checking!!!
The life time of api is [1,8]
29call roads:
0 Mainhead roads:
29 Packageshead roads:
try
Good road with try: <net.sf.cglib.reflect.MethodDelegate$Generator: net.sf.cglib.reflect.MethodDelegate create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.BeanMap$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.beans.BeanMapEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>[]--><net.sf.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.util.ParallelSorter$Generator: net.sf.cglib.util.ParallelSorter create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.BeanMap$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.beans.BeanMapEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>[]--><net.sf.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanCopier$Generator: net.sf.cglib.beans.BeanCopier create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.BeanMap$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.beans.BeanMapEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>[]--><net.sf.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Enhancer: java.lang.Object create(java.lang.Class,java.lang.Class[],net.sf.cglib.proxy.Callback)>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object create()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.BeanMap$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.beans.BeanMapEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>[]--><net.sf.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.InterfaceMaker: java.lang.Class create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.BeanMap$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.beans.BeanMapEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>[]--><net.sf.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.MethodInterceptorGenerator: void generate(net.sf.cglib.core.ClassEmitter,net.sf.cglib.proxy.CallbackGenerator$Context,java.util.List)>[]--><net.sf.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(net.sf.cglib.core.ClassEmitter,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.EmitUtils: void access$000(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>[]--><net.sf.cglib.core.EmitUtils: void stringSwitchHelper(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanMap$Generator: net.sf.cglib.beans.BeanMap create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.BeanMap$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.beans.BeanMapEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>[]--><net.sf.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.impl.FieldProviderTransformer: void end_class()>[[try]]--><net.sf.cglib.transform.impl.FieldProviderTransformer: void generate()>[]--><net.sf.cglib.transform.impl.FieldProviderTransformer: void setField(java.lang.String[])>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.AbstractTransformTask: void processFile(java.io.File)>[]--><net.sf.cglib.transform.AbstractTransformTask: void processJarFile(java.io.File)>[[try]]--><net.sf.cglib.transform.AbstractTransformTask: byte[] process(byte[])>[]--><net.sf.cglib.transform.TransformingClassGenerator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.AbstractTransformTask: void processFile(java.io.File)>[]--><net.sf.cglib.transform.AbstractTransformTask: void processClassFile(java.io.File)>[]--><net.sf.cglib.transform.TransformingClassGenerator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$3: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
Error road: <net.sf.cglib.beans.BeanCopier$Generator: boolean compatible(java.beans.PropertyDescriptor,java.beans.PropertyDescriptor)>[]--><java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>
#11.the call statck between class <net.sf.cglib.beans.BeanCopier$Generator: boolean compatible(java.beans.PropertyDescriptor,java.beans.PropertyDescriptor)> to <java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>has compatibility isssues！
-----------------------------------------
crashApis:3
containsStatic:false
containsTry:true
12call by main package
-----------------------------------------
#################################################
N 6 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
123call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><net.nightwhistler.pageturner.PageTurner: void onCreate()>[]--><org.acra.ACRA: void init(android.app.Application)>[[try]]--><org.acra.ErrorReporter: void <init>(android.content.Context,android.content.SharedPreferences,boolean)>[]--><org.acra.ErrorReporter: void checkReportsOnApplicationStart()>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.acra.CrashReportDialog dummyMainMethod_org_acra_CrashReportDialog(android.content.Intent)>[]--><org.acra.CrashReportDialog$1: void onClick(android.view.View)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
122 Packageshead roads:
try
Good road with try: <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[[try]]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
One road protect good!
containsStatic:false
containsTry:true
123call by main package
-----------------------------------------
#################################################
N 7 Potential Issue API: SDKCheck of <android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)> is checking!!!
The life time of api is [1,30]
125call roads:
1 Mainhead roads:
124 Packageshead roads:
try
Good road with try: <net.nightwhistler.pageturner.view.bookview.BookView$LoadTextTask: jedi.option.Option doInBackground(nl.siegmann.epublib.domain.Resource[])>[[try]]--><net.nightwhistler.pageturner.view.bookview.FixedPagesStrategy: void loadText(android.text.Spanned)>[]--><net.nightwhistler.pageturner.view.bookview.FixedPagesStrategy: java.util.List getPageOffsets(java.lang.CharSequence,boolean)>[]--><net.nightwhistler.pageturner.view.bookview.StaticLayoutFactory: android.text.StaticLayout create(java.lang.CharSequence,android.text.TextPaint,int,float)>[[try]]--><net.nightwhistler.pageturner.view.bookview.StaticLayoutFactory: android.text.StaticLayout doCreateLayout(java.lang.CharSequence,android.text.TextPaint,int,float)>[]--><android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: void draw(android.graphics.Canvas)>[]--><android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
#31.the call statck between class <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: void draw(android.graphics.Canvas)> to <android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:4
containsStatic:false
containsTry:true
32call by main package
-----------------------------------------
#################################################
N 8 Potential Issue API: SDKCheck of <android.widget.LinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.actionbarsherlock.widget.SearchView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>[]--><android.widget.LinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
#1.the call statck between class <com.actionbarsherlock.widget.SearchView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> to <android.widget.LinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>has compatibility isssues！
-----------------------------------------
crashApis:5
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 9 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
124call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><net.nightwhistler.pageturner.PageTurner: void onCreate()>[]--><org.acra.ACRA: void init(android.app.Application)>[[try]]--><org.acra.ErrorReporter: void <init>(android.content.Context,android.content.SharedPreferences,boolean)>[]--><org.acra.ErrorReporter: void checkReportsOnApplicationStart()>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.acra.CrashReportDialog dummyMainMethod_org_acra_CrashReportDialog(android.content.Intent)>[]--><org.acra.CrashReportDialog$1: void onClick(android.view.View)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
123 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
#2.the call statck between class <org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:6
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 10 Potential Issue API: SDKCheck of <java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()> is checking!!!
The life time of api is [1,8]
29call roads:
0 Mainhead roads:
29 Packageshead roads:
try
Good road with try: <net.sf.cglib.reflect.MethodDelegate$Generator: net.sf.cglib.reflect.MethodDelegate create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.util.ParallelSorter$Generator: net.sf.cglib.util.ParallelSorter create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanCopier$Generator: net.sf.cglib.beans.BeanCopier create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Enhancer: java.lang.Object create(java.lang.Class,java.lang.Class[],net.sf.cglib.proxy.Callback)>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object create()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.InterfaceMaker: java.lang.Class create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.MethodInterceptorGenerator: void generate(net.sf.cglib.core.ClassEmitter,net.sf.cglib.proxy.CallbackGenerator$Context,java.util.List)>[]--><net.sf.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(net.sf.cglib.core.ClassEmitter,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$2: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.EmitUtils: void access$000(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>[]--><net.sf.cglib.core.EmitUtils: void stringSwitchHelper(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$2: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanMap$Generator: net.sf.cglib.beans.BeanMap create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.impl.FieldProviderTransformer: void end_class()>[[try]]--><net.sf.cglib.transform.impl.FieldProviderTransformer: void generate()>[]--><net.sf.cglib.transform.impl.FieldProviderTransformer: void setField(java.lang.String[])>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$2: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.AbstractTransformTask: void processFile(java.io.File)>[]--><net.sf.cglib.transform.AbstractTransformTask: void processJarFile(java.io.File)>[[try]]--><net.sf.cglib.transform.AbstractTransformTask: byte[] process(byte[])>[]--><net.sf.cglib.transform.TransformingClassGenerator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$2: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.AbstractTransformTask: void processFile(java.io.File)>[]--><net.sf.cglib.transform.AbstractTransformTask: void processClassFile(java.io.File)>[]--><net.sf.cglib.transform.TransformingClassGenerator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$2: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.reflect.ConstructorDelegate$Generator: net.sf.cglib.reflect.ConstructorDelegate create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Enhancer: java.lang.Object create(java.lang.Class,net.sf.cglib.proxy.Callback)>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object create()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanGenerator: java.lang.Object create()>[]--><net.sf.cglib.beans.BeanGenerator: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.EmitUtils: void member_helper_size(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,net.sf.cglib.core.EmitUtils$ParameterTyper,org.objectweb.asm.Label,org.objectweb.asm.Label)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$2: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanGenerator: java.lang.Object createClass()>[]--><net.sf.cglib.beans.BeanGenerator: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BulkBean$Generator: net.sf.cglib.beans.BulkBean create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.KeyFactory$Generator: net.sf.cglib.core.KeyFactory create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.reflect.FastClass$Generator: net.sf.cglib.reflect.FastClass create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],net.sf.cglib.proxy.InvocationHandler)>[[try]]--><net.sf.cglib.proxy.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Class createClass()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.MixinBeanEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
Error road: <net.sf.cglib.proxy.MixinBeanEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
#20.the call statck between class <net.sf.cglib.proxy.MixinBeanEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)> to <java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>has compatibility isssues！
-----------------------------------------
crashApis:7
containsStatic:false
containsTry:true
21call by main package
-----------------------------------------
#################################################
N 11 Potential Issue API: SDKCheck of <android.widget.LinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.actionbarsherlock.widget.SearchView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>[]--><android.widget.LinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
#1.the call statck between class <com.actionbarsherlock.widget.SearchView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> to <android.widget.LinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>has compatibility isssues！
-----------------------------------------
crashApis:8
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 12 Potential Issue API: SDKCheck of <java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()> is checking!!!
The life time of api is [1,8]
29call roads:
0 Mainhead roads:
29 Packageshead roads:
try
Good road with try: <net.sf.cglib.reflect.MethodDelegate$Generator: net.sf.cglib.reflect.MethodDelegate create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.util.ParallelSorter$Generator: net.sf.cglib.util.ParallelSorter create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanCopier$Generator: net.sf.cglib.beans.BeanCopier create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Enhancer: java.lang.Object create(java.lang.Class,java.lang.Class[],net.sf.cglib.proxy.Callback)>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object create()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.InterfaceMaker: java.lang.Class create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.MethodInterceptorGenerator: void generate(net.sf.cglib.core.ClassEmitter,net.sf.cglib.proxy.CallbackGenerator$Context,java.util.List)>[]--><net.sf.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(net.sf.cglib.core.ClassEmitter,java.util.Map)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$1: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.EmitUtils: void access$000(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>[]--><net.sf.cglib.core.EmitUtils: void stringSwitchHelper(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$1: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanMap$Generator: net.sf.cglib.beans.BeanMap create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.impl.FieldProviderTransformer: void end_class()>[[try]]--><net.sf.cglib.transform.impl.FieldProviderTransformer: void generate()>[]--><net.sf.cglib.transform.impl.FieldProviderTransformer: void setField(java.lang.String[])>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$1: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.AbstractTransformTask: void processFile(java.io.File)>[]--><net.sf.cglib.transform.AbstractTransformTask: void processJarFile(java.io.File)>[[try]]--><net.sf.cglib.transform.AbstractTransformTask: byte[] process(byte[])>[]--><net.sf.cglib.transform.TransformingClassGenerator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$1: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.transform.AbstractTransformTask: void processFile(java.io.File)>[]--><net.sf.cglib.transform.AbstractTransformTask: void processClassFile(java.io.File)>[]--><net.sf.cglib.transform.TransformingClassGenerator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)>[[try]]--><net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$1: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.reflect.ConstructorDelegate$Generator: net.sf.cglib.reflect.ConstructorDelegate create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Enhancer: java.lang.Object create(java.lang.Class,net.sf.cglib.proxy.Callback)>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object create()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanGenerator: java.lang.Object create()>[]--><net.sf.cglib.beans.BeanGenerator: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.EmitUtils: void member_helper_size(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,net.sf.cglib.core.EmitUtils$ParameterTyper,org.objectweb.asm.Label,org.objectweb.asm.Label)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback)>[]--><net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)>[[try]]--><net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)>[]--><net.sf.cglib.beans.BeanMapEmitter$1: void processCase(java.lang.Object,org.objectweb.asm.Label)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BeanGenerator: java.lang.Object createClass()>[]--><net.sf.cglib.beans.BeanGenerator: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.beans.BulkBean$Generator: net.sf.cglib.beans.BulkBean create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.core.KeyFactory$Generator: net.sf.cglib.core.KeyFactory create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.reflect.FastClass$Generator: net.sf.cglib.reflect.FastClass create()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],net.sf.cglib.proxy.InvocationHandler)>[[try]]--><net.sf.cglib.proxy.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Class createClass()>[]--><net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()>[]--><net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>[[try]]--><net.sf.cglib.core.DefaultGeneratorStrategy: byte[] generate(net.sf.cglib.core.ClassGenerator)>[]--><net.sf.cglib.beans.ImmutableBean$Generator: void generateClass(org.objectweb.asm.ClassVisitor)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
try
Good road with try: <net.sf.cglib.proxy.MixinBeanEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>[[try]]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
Error road: <net.sf.cglib.proxy.MixinBeanEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)>[]--><net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)>[]--><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
#20.the call statck between class <net.sf.cglib.proxy.MixinBeanEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)> to <java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>has compatibility isssues！
-----------------------------------------
crashApis:9
containsStatic:false
containsTry:true
21call by main package
-----------------------------------------
#################################################
N 13 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> is checking!!!
The life time of api is [23,31]
123call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><net.nightwhistler.pageturner.PageTurner: void onCreate()>[]--><org.acra.ACRA: void init(android.app.Application)>[[try]]--><org.acra.ErrorReporter: void <init>(android.content.Context,android.content.SharedPreferences,boolean)>[]--><org.acra.ErrorReporter: void checkReportsOnApplicationStart()>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.acra.CrashReportDialog dummyMainMethod_org_acra_CrashReportDialog(android.content.Intent)>[]--><org.acra.CrashReportDialog$1: void onClick(android.view.View)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
122 Packageshead roads:
try
Good road with try: <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[[try]]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>[]--><com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>[]--><com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>[]--><roboguice.util.SafeAsyncTask$Task$6: void run()>[[try]]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Object call()>[]--><roboguice.event.eventListener.RunnableAsyncTaskAdaptor: java.lang.Void call()>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)>[]--><org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)>[]--><org.acra.ErrorReporter: org.acra.SendWorker startSendingReports(boolean,boolean)>[]--><org.acra.SendWorker: void run()>[]--><org.acra.SendWorker: void checkAndSendReports(android.content.Context,boolean)>[[try]]--><org.acra.SendWorker: void sendCrashReport(org.acra.collector.CrashReportData)>[[try]]--><org.acra.sender.GoogleFormSender: void send(org.acra.collector.CrashReportData)>[[try]]--><org.acra.util.HttpRequest: void sendPost(java.net.URL,java.util.Map)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
containsStatic:false
containsTry:true
123call by main package
-----------------------------------------
#################################################
N 14 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.FakeSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
#1.the call statck between class <org.acra.util.FakeSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
#2.the call statck between class <org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <net.nightwhistler.pageturner.ssl.EasySSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
#3.the call statck between class <net.nightwhistler.pageturner.ssl.EasySSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
crashApis:10
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 15 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.FakeSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>
#1.the call statck between class <org.acra.util.FakeSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <net.nightwhistler.pageturner.ssl.EasySSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>
#2.the call statck between class <net.nightwhistler.pageturner.ssl.EasySSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
crashApis:11
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
crashApis numbers:11
crashApis numbers in main road:0
On Android Version 16 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 17 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 18 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 19 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 20 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 21 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 22 this app may have error api use(at least): 7 and error api roads: 10
On Android Version 23 this app may have error api use(at least): 6 and error api roads: 6
On Android Version 24 this app may have error api use(at least): 6 and error api roads: 6
On Android Version 25 this app may have error api use(at least): 6 and error api roads: 6
On Android Version 26 this app may have error api use(at least): 7 and error api roads: 8
On Android Version 27 this app may have error api use(at least): 7 and error api roads: 8
On Android Version 28 this app may have error api use(at least): 6 and error api roads: 7
On Android Version 29 this app may have error api use(at least): 6 and error api roads: 7
On Android Version 30 this app may have error api use(at least): 6 and error api roads: 7
On Android Version 31 this app may have error api use(at least): 7 and error api roads: 8
