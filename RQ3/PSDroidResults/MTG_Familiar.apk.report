/home/ys/桌面/CompactDroid（复件）/dataset2/MTG_Familiar.apk
Entry Points[com.gelakinetic.mtgfam.helpers.MTGFamiliarAppWidgetProviderLight, com.gelakinetic.mtgfam.helpers.RoundTimerBroadcastReceiver, com.gelakinetic.mtgfam.helpers.updaters.DbUpdaterService, com.gelakinetic.mtgfam.helpers.database.CardSearchProvider, com.gelakinetic.mtgfam.MtgAppWidgetConfigure, com.gelakinetic.mtgfam.helpers.RoundTimerBroadcastReceiver$TtsService, com.gelakinetic.mtgfam.helpers.MTGFamiliarAppWidgetProviderDark, com.gelakinetic.mtgfam.helpers.PriceFetchService, com.gelakinetic.mtgfam.FamiliarActivity]
FllowDroidcallgraph size:3297
Soot started on Mon Jul 11 07:38:01 CST 2022
StaticCheck:<com.gelakinetic.mtgfam.helpers.lruCache.Utils: boolean hasFroyo()>$yysi0 < 8
StaticCheck:<com.gelakinetic.mtgfam.helpers.lruCache.Utils: boolean hasGingerbread()>$yysi0 < 9
StaticCheck:<com.gelakinetic.mtgfam.helpers.lruCache.Utils: boolean hasHoneycomb()>$yysi0 < 11
StaticCheck:<com.gelakinetic.mtgfam.helpers.lruCache.Utils: boolean hasHoneycombMR1()>$yysi0 < 12
StaticCheck:<com.gelakinetic.mtgfam.helpers.lruCache.Utils: boolean hasJellyBean()>$yysi0 < 16
StaticCheck:<com.gelakinetic.mtgfam.helpers.lruCache.Utils: boolean hasKitKat()>$yysi0 < 19
StaticCheck:<com.doomonafireball.betterpickers.Utils: boolean isJellybeanOrLater()>$yysi0 < 16
StaticCheck:$ys0 < 
StaticCheck:<com.google.android.gms.internal.zzme: boolean zzbf(int)>< 
Soot finished on Mon Jul 11 07:38:48 CST 2022
Soot has run for 0 min. 47 sec.
Found 0 additional DEX files. Now visiting them one by one.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 14
Declared Target Sdk version is: 22
Declared Max Sdk version is: -1
Collected 1457 Android APIs in the primary DEX file
Collected 0 Android APIs in the secondary DEX files
#################################################
N 0 Potential Issue API: SDKCheck of <android.content.pm.PackageInstaller: java.util.List getAllSessions()> is checking!!!
The life time of api is [21,31]
48call roads:
0 Mainhead roads:
48 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: void showErrorNotification(int,android.content.Context)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzi(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
#4.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)> to <android.content.pm.PackageInstaller: java.util.List getAllSessions()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ManaPoolFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller: java.util.List getAllSessions()>
One road protect good!
crashApis:1
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 1 Potential Issue API: SDKCheck of <android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()> is checking!!!
The life time of api is [21,31]
48call roads:
0 Mainhead roads:
48 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: void showErrorNotification(int,android.content.Context)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzi(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
#4.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)> to <android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ManaPoolFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
One road protect good!
crashApis:2
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 2 Potential Issue API: SDKCheck of <android.graphics.Bitmap: int getAllocationByteCount()> is checking!!!
The life time of api is [19,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$yysi0 < 19
Good road: <com.gelakinetic.mtgfam.helpers.lruCache.ImageCache: int access$100(android.graphics.drawable.BitmapDrawable)>[]--><com.gelakinetic.mtgfam.helpers.lruCache.ImageCache: int getBitmapSize(android.graphics.drawable.BitmapDrawable)>[[-$yysi0 < 19]]--><android.graphics.Bitmap: int getAllocationByteCount()>
One road protect good!
-$yysi0 < 19
Good road: <com.gelakinetic.mtgfam.helpers.lruCache.ImageCache: boolean canUseForInBitmap(android.graphics.Bitmap,android.graphics.BitmapFactory$Options)>[[-$yysi0 < 19]]--><android.graphics.Bitmap: int getAllocationByteCount()>
One road protect good!
containsStatic:true
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 3 Potential Issue API: SDKCheck of <android.os.BaseBundle: int getInt(java.lang.String)> is checking!!!
The life time of api is [21,31]
1399call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.helpers.RoundTimerBroadcastReceiver dummyMainMethod_com_gelakinetic_mtgfam_helpers_RoundTimerBroadcastReceiver(android.content.Intent)>[]--><com.gelakinetic.mtgfam.helpers.RoundTimerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
1398 Packageshead roads:
Roads number exceed, exit!1398
#################################################
N 4 Potential Issue API: SDKCheck of <android.widget.TextView: void onRtlPropertiesChanged(int)> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <com.alertdialogpro.material.CheckedTextViewCompat: void onRtlPropertiesChanged(int)>[]--><android.widget.TextView: void onRtlPropertiesChanged(int)>
#1.the call statck between class <com.alertdialogpro.material.CheckedTextViewCompat: void onRtlPropertiesChanged(int)> to <android.widget.TextView: void onRtlPropertiesChanged(int)>has compatibility isssues！
-----------------------------------------
crashApis:4
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 5 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> is checking!!!
The life time of api is [1,30]
44call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity$4: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: int getNetworkState(boolean)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
43 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ManaPoolFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.helpers.LcPlayer: void onPause()>[]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.Service$State startAndWait()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(com.google.android.gms.common.images.ImageManager$OnImageLoadedListener,android.net.Uri,int)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: int getNetworkState(boolean)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void execute()>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void execute()>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void execute()>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStart()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractIdleService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.Futures$4: void run()>[]--><com.google.common.util.concurrent.Futures$FallbackFuture$1: void onFailure(java.lang.Throwable)>[[try]]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService$1$1: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$3: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStopped()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.Futures$ChainingListenableFuture: void run()>[[try]]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(com.google.android.gms.common.images.ImageManager$OnImageLoadedListener,android.net.Uri)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStop()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>[]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)>[]--><com.google.common.util.concurrent.ForwardingListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStart()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(android.widget.ImageView,android.net.Uri,int)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager$ImageReceiver: void onReceiveResult(int,android.os.Bundle)>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager$ImageReceiver: void onReceiveResult(int,android.os.Bundle)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager$ImageReceiver: void onReceiveResult(int,android.os.Bundle)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(android.widget.ImageView,android.net.Uri)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: void runUnlockedCleanup()>[]--><com.google.common.cache.LocalCache: void processPendingNotifications()>[[try]]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyRequestListenersForRequest(com.octo.android.robospice.request.SpiceRequest)>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyRequestListenersForRequest(com.octo.android.robospice.request.SpiceRequest)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyRequestListenersForRequest(com.octo.android.robospice.request.SpiceRequest)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(android.widget.ImageView,int)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.TradeFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractExecutionThreadService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractExecutionThreadService$1: void doStart()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractExecutionThreadService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStop()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ResultListFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$FallbackFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureFallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.eventbus.AsyncEventBus: void dispatchQueuedEvents()>[]--><com.google.common.eventbus.AsyncEventBus: void dispatch(java.lang.Object,com.google.common.eventbus.EventHandler)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractScheduledService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractExecutionThreadService$1$1: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.Futures$ChainingListenableFuture: void run()>[[try]]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.Futures$4: void run()>[]--><com.google.common.util.concurrent.Futures$FallbackFuture$1: void onFailure(java.lang.Throwable)>[[try]]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractScheduledService$1$3: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStopped()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.Futures$ChainingListenableFuture: void run()>[[try]]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.Futures$4: void run()>[]--><com.google.common.util.concurrent.Futures$FallbackFuture$1: void onFailure(java.lang.Throwable)>[[try]]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractIdleService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$3: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStopped()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService$1$1: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dumpState()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dumpState()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dumpState()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>[]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$CombinedFuture: void init(java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$CombinedFuture: void init(java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$CombinedFuture: void init(java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service$State standardStartAndWait()>[]--><com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.Service$State stopAndWait()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
One road protect good!
containsStatic:false
containsTry:true
44call by main package
-----------------------------------------
#################################################
N 6 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean containsKey(java.lang.String)> is checking!!!
The life time of api is [21,31]
1391call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onNewIntent(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: boolean processIntent(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void selectItem(int,android.os.Bundle,boolean,boolean)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
1390 Packageshead roads:
Roads number exceed, exit!1390
#################################################
N 7 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)> is checking!!!
The life time of api is [21,31]
18call roads:
0 Mainhead roads:
18 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.GatheringsFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.GatheringsFragment: void onSaveInstanceState(android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.GatheringsFragment: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[[try]]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.Boolean)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: void onSaveInstanceState(android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#3.the call statck between class <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()>[]--><com.google.android.gms.internal.zzvc: android.os.Bundle zza(com.google.android.gms.internal.zzus,java.lang.Integer,java.util.concurrent.ExecutorService)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#4.the call statck between class <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.numberpicker.NumberPickerBuilder: void show()>[]--><com.doomonafireball.betterpickers.numberpicker.NumberPickerDialogFragment: com.doomonafireball.betterpickers.numberpicker.NumberPickerDialogFragment newInstance(int,int,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#5.the call statck between class <com.doomonafireball.betterpickers.numberpicker.NumberPickerBuilder: void show()> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[[try]]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.Boolean)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.RulesFragment$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#7.the call statck between class <com.gelakinetic.mtgfam.fragments.RulesFragment$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.JudgesCornerFragment$PagerItem: android.support.v4.app.Fragment createFragment()>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#8.the call statck between class <com.gelakinetic.mtgfam.fragments.JudgesCornerFragment$PagerItem: android.support.v4.app.Fragment createFragment()> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onSaveInstanceState(android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#9.the call statck between class <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.appindexing.Thing$Builder: com.google.android.gms.appindexing.Thing$Builder put(java.lang.String,java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#10.the call statck between class <com.google.android.gms.appindexing.Thing$Builder: com.google.android.gms.appindexing.Thing$Builder put(java.lang.String,java.lang.String)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:6
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 8 Potential Issue API: SDKCheck of <android.widget.FrameLayout: void setVisibility(int)> is checking!!!
The life time of api is [21,22]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment$FetchPictureTask: void onPostExecute(java.lang.Void)>[]--><android.widget.FrameLayout: void setVisibility(int)>
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment$FetchPictureTask: void onPostExecute(java.lang.Void)>[]--><android.widget.FrameLayout: void setVisibility(int)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment$FetchPictureTask: void onPostExecute(java.lang.Void)> to <android.widget.FrameLayout: void setVisibility(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><android.widget.FrameLayout: void setVisibility(int)>
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><android.widget.FrameLayout: void setVisibility(int)>
#2.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)> to <android.widget.FrameLayout: void setVisibility(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.alertdialogpro.ProgressDialogPro: void onCreate(android.os.Bundle)>[]--><com.alertdialogpro.AlertDialogPro: void onCreate(android.os.Bundle)>[]--><com.alertdialogpro.internal.AlertController: void installContent()>[]--><com.alertdialogpro.internal.AlertController: void setupView()>[]--><android.widget.FrameLayout: void setVisibility(int)>
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.alertdialogpro.ProgressDialogPro: void onCreate(android.os.Bundle)>[]--><com.alertdialogpro.AlertDialogPro: void onCreate(android.os.Bundle)>[]--><com.alertdialogpro.internal.AlertController: void installContent()>[]--><com.alertdialogpro.internal.AlertController: void setupView()>[]--><android.widget.FrameLayout: void setVisibility(int)>
#3.the call statck between class <com.alertdialogpro.ProgressDialogPro: void onCreate(android.os.Bundle)> to <android.widget.FrameLayout: void setVisibility(int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromBundle(android.os.Bundle)>[[try]]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><android.widget.FrameLayout: void setVisibility(int)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment$FetchPictureTask: void onCancelled()>[]--><android.widget.FrameLayout: void setVisibility(int)>
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment$FetchPictureTask: void onCancelled()>[]--><android.widget.FrameLayout: void setVisibility(int)>
#5.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment$FetchPictureTask: void onCancelled()> to <android.widget.FrameLayout: void setVisibility(int)>has compatibility isssues！
-----------------------------------------
crashApis:7
containsStatic:false
containsTry:true
6call by main package
-----------------------------------------
#################################################
N 9 Potential Issue API: SDKCheck of <android.os.BaseBundle: long getLong(java.lang.String)> is checking!!!
The life time of api is [21,31]
4call roads:
0 Mainhead roads:
4 Packageshead roads:
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ResultListFragment: void onCreate(android.os.Bundle)>[[try]]--><android.os.BaseBundle: long getLong(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#2.the call statck between class <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#3.the call statck between class <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromBundle(android.os.Bundle)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#4.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:8
containsStatic:false
containsTry:true
5call by main package
-----------------------------------------
#################################################
N 10 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)> is checking!!!
The life time of api is [22,31]
13call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
12 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#1.the call statck between class <com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.common.api.zzh: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#2.the call statck between class <com.google.android.gms.common.api.zzh: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#3.the call statck between class <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getAccountId(android.content.Context,java.lang.String)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.Boolean)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#4.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getAccountId(android.content.Context,java.lang.String)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String,android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#5.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#6.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,java.lang.String,java.lang.String)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.Boolean)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#7.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,java.lang.String,java.lang.String)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#8.the call statck between class <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()>[]--><com.google.android.gms.internal.zzvc: android.os.Bundle zza(com.google.android.gms.internal.zzus,java.lang.Integer,java.util.concurrent.ExecutorService)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#9.the call statck between class <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
###Multi invoking in one method, need manual check!!!--><com.google.android.gms.common.GooglePlayServicesUtil: void zza(int,android.content.Context,java.lang.String)>[[-$i1 < 19], [$i1 < 21]]
###Multi invoking in one method, need manual check!!!--><com.google.android.gms.common.GooglePlayServicesUtil: void zza(int,android.content.Context,java.lang.String)>[[-$i1 < 19]][[$i1 < 21]]
-$i1 < 19
$i1 < 21
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.common.GooglePlayServicesUtil$zza: void handleMessage(android.os.Message)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: void zzb(int,android.content.Context)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: void zza(int,android.content.Context)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: void zza(int,android.content.Context,java.lang.String)>[[-$i1 < 19], [$i1 < 21]]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#10.the call statck between class <com.google.android.gms.common.GooglePlayServicesUtil$zza: void handleMessage(android.os.Message)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:9
crashApisInMain:3
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 11 Potential Issue API: SDKCheck of <android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> is checking!!!
The life time of api is [16,22]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.calendardatepicker.DayPickerView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>[]--><android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
#1.the call statck between class <com.doomonafireball.betterpickers.calendardatepicker.DayPickerView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> to <android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.calendardatepicker.YearPickerView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>[]--><android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
#2.the call statck between class <com.doomonafireball.betterpickers.calendardatepicker.YearPickerView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> to <android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>has compatibility isssues！
-----------------------------------------
crashApis:10
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 12 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.lang.Object get(java.lang.String)> is checking!!!
The life time of api is [21,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.appindexing.Action$Builder: com.google.android.gms.appindexing.Action build()>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#1.the call statck between class <com.google.android.gms.appindexing.Action$Builder: com.google.android.gms.appindexing.Action build()> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#2.the call statck between class <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzop$zzc zzh(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#3.the call statck between class <com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzop$zzc zzh(android.os.Bundle)> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:11
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 13 Potential Issue API: SDKCheck of <android.widget.ListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.calendardatepicker.DayPickerView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>[]--><android.widget.ListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
#1.the call statck between class <com.doomonafireball.betterpickers.calendardatepicker.DayPickerView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> to <android.widget.ListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>has compatibility isssues！
-----------------------------------------
crashApis:12
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 14 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean getBoolean(java.lang.String)> is checking!!!
The life time of api is [22,31]
11call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onRestoreInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
10 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog: void onCreate(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#1.the call statck between class <com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog: void onCreate(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#2.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#3.the call statck between class <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#4.the call statck between class <com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexEndIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#5.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onStop()>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexEndIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#6.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onStop()> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromBundle(android.os.Bundle)>[[try]]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
One road protect good!
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: void clearToken(android.content.Context,java.lang.String)>[[try]]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.internal.zzjj$zza: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#9.the call statck between class <com.google.android.gms.internal.zzjj$zza: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.internal.zzjj: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#10.the call statck between class <com.google.android.gms.internal.zzjj: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:13
crashApisInMain:4
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 15 Potential Issue API: SDKCheck of <android.view.View: int getLayoutDirection()> is checking!!!
The life time of api is [17,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void onDraw(android.graphics.Canvas)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void <init>(android.content.Context)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void updatePadding()>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void setCheckMarkDrawable(int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void updatePadding()>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void setPaddingRelative(int,int,int,int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void setPaddingRelative(int,int,int,int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void updatePadding()>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void onRtlPropertiesChanged(int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void onRtlPropertiesChanged(int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void updatePadding()>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void setPadding(int,int,int,int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
-$i0 < 17
Good road: <com.alertdialogpro.material.CheckedTextViewCompat: void setPadding(int,int,int,int)>[]--><com.alertdialogpro.material.CheckedTextViewCompat: void updatePadding()>[]--><com.alertdialogpro.material.CheckedTextViewCompat: boolean isCheckMarkAtStart()>[[-$i0 < 17]]--><android.view.View: int getLayoutDirection()>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 16 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.lang.String getString(java.lang.String)> is checking!!!
The life time of api is [21,31]
26call roads:
0 Mainhead roads:
26 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzjb: com.google.android.gms.internal.zzin$zza zza(android.content.Intent,java.lang.String,android.net.Uri,java.lang.String,java.util.List)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#1.the call statck between class <com.google.android.gms.internal.zzjb: com.google.android.gms.internal.zzin$zza zza(android.content.Intent,java.lang.String,android.net.Uri,java.lang.String,java.util.List)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zztf: java.lang.String toString()>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#2.the call statck between class <com.google.android.gms.internal.zztf: java.lang.String toString()> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#3.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#4.the call statck between class <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[[try]]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.Boolean)>[[try]]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.common.data.DataBufferUtils: boolean hasNextPage(com.google.android.gms.common.data.DataBuffer)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#6.the call statck between class <com.google.android.gms.common.data.DataBufferUtils: boolean hasNextPage(com.google.android.gms.common.data.DataBuffer)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromBundle(android.os.Bundle)>[[try]]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzop$zzc zzh(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#8.the call statck between class <com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzop$zzc zzh(android.os.Bundle)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzlk: void zzb(java.lang.StringBuilder,com.google.android.gms.internal.zzld$zza,android.os.Parcel,int)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#9.the call statck between class <com.google.android.gms.internal.zzlk: void zzb(java.lang.StringBuilder,com.google.android.gms.internal.zzld$zza,android.os.Parcel,int)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[[try]]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.Boolean)>[[try]]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
crashApis:14
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 17 Potential Issue API: SDKCheck of <android.widget.AbsListView: boolean performAccessibilityAction(int,android.os.Bundle)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.calendardatepicker.DayPickerView: boolean performAccessibilityAction(int,android.os.Bundle)>[]--><android.widget.AbsListView: boolean performAccessibilityAction(int,android.os.Bundle)>
#1.the call statck between class <com.doomonafireball.betterpickers.calendardatepicker.DayPickerView: boolean performAccessibilityAction(int,android.os.Bundle)> to <android.widget.AbsListView: boolean performAccessibilityAction(int,android.os.Bundle)>has compatibility isssues！
-----------------------------------------
crashApis:15
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 18 Potential Issue API: SDKCheck of <android.widget.HorizontalScrollView: android.os.Parcelable onSaveInstanceState()> is checking!!!
The life time of api is [19,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 
Error road: <com.astuetz.PagerSlidingTabStrip: android.os.Parcelable onSaveInstanceState()>[]--><android.widget.HorizontalScrollView: android.os.Parcelable onSaveInstanceState()>
#1.the call statck between class <com.astuetz.PagerSlidingTabStrip: android.os.Parcelable onSaveInstanceState()> to <android.widget.HorizontalScrollView: android.os.Parcelable onSaveInstanceState()>has compatibility isssues！
-----------------------------------------
crashApis:16
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 19 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putInt(java.lang.String,int)> is checking!!!
The life time of api is [21,31]
31call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onNewIntent(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: boolean processIntent(android.content.Intent)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
30 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.ResultListFragment: boolean onOptionsItemSelected(android.view.MenuItem)>[]--><com.gelakinetic.mtgfam.fragments.ResultListFragment: void startCardViewFrag(long)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.ResultListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#2.the call statck between class <com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment$7: android.app.Dialog onCreateDialog(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#3.the call statck between class <com.gelakinetic.mtgfam.fragments.LifeCounterFragment$7: android.app.Dialog onCreateDialog(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.helpers.LcPlayer$10: android.app.Dialog onCreateDialog(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#4.the call statck between class <com.gelakinetic.mtgfam.helpers.LcPlayer$10: android.app.Dialog onCreateDialog(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.GatheringsFragment$1: android.app.Dialog onCreateDialog(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#5.the call statck between class <com.gelakinetic.mtgfam.fragments.GatheringsFragment$1: android.app.Dialog onCreateDialog(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#6.the call statck between class <com.gelakinetic.mtgfam.fragments.DeckCounterFragment: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()>[]--><com.google.android.gms.internal.zzvc: android.os.Bundle zza(com.google.android.gms.internal.zzus,java.lang.Integer,java.util.concurrent.ExecutorService)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#7.the call statck between class <com.google.android.gms.internal.zzvc: android.os.Bundle zzhq()> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.MoJhoStoFragment$8: android.app.Dialog onCreateDialog(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#8.the call statck between class <com.gelakinetic.mtgfam.fragments.MoJhoStoFragment$8: android.app.Dialog onCreateDialog(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.RulesFragment$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#9.the call statck between class <com.gelakinetic.mtgfam.fragments.RulesFragment$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.expirationpicker.ExpirationPickerBuilder: void show()>[]--><com.doomonafireball.betterpickers.expirationpicker.ExpirationPickerDialogFragment: com.doomonafireball.betterpickers.expirationpicker.ExpirationPickerDialogFragment newInstance(int,int,java.lang.Integer,java.lang.Integer)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#10.the call statck between class <com.doomonafireball.betterpickers.expirationpicker.ExpirationPickerBuilder: void show()> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:17
crashApisInMain:5
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 20 Potential Issue API: SDKCheck of <android.widget.FrameLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.radialtimepicker.RadialPickerLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>[]--><android.widget.FrameLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
#1.the call statck between class <com.doomonafireball.betterpickers.radialtimepicker.RadialPickerLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> to <android.widget.FrameLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>has compatibility isssues！
-----------------------------------------
crashApis:18
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 21 Potential Issue API: SDKCheck of <android.os.BaseBundle: int getInt(java.lang.String,int)> is checking!!!
The life time of api is [21,31]
5call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.MtgAppWidgetConfigure dummyMainMethod_com_gelakinetic_mtgfam_MtgAppWidgetConfigure(android.content.Intent)>[]--><com.gelakinetic.mtgfam.MtgAppWidgetConfigure$3: void onDismiss(android.content.DialogInterface)>[]--><com.gelakinetic.mtgfam.MtgAppWidgetConfigure: void finishAndUpdateWidget()>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: int getInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
4 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.MtgAppWidgetConfigure$1: void onClick(android.content.DialogInterface,int)>[]--><com.gelakinetic.mtgfam.MtgAppWidgetConfigure: void finishAndUpdateWidget()>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
#2.the call statck between class <com.gelakinetic.mtgfam.MtgAppWidgetConfigure$1: void onClick(android.content.DialogInterface,int)> to <android.os.BaseBundle: int getInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.RulesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
#3.the call statck between class <com.gelakinetic.mtgfam.fragments.RulesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.common.api.zzh: void onCreate(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
#4.the call statck between class <com.google.android.gms.common.api.zzh: void onCreate(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:19
crashApisInMain:6
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 22 Potential Issue API: SDKCheck of <android.view.Window: void setStatusBarColor(int)> is checking!!!
The life time of api is [21,31]
1call roads:
1 Mainhead roads:
-$i0 < 21
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onCreate(android.os.Bundle)>[[-$i0 < 21]]--><android.view.Window: void setStatusBarColor(int)>
One road protect good!
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 23 Potential Issue API: SDKCheck of <android.app.AppOpsManager: void checkPackage(int,java.lang.String)> is checking!!!
The life time of api is [19,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.gms.common.internal.zzj: java.lang.Object createFromParcel(android.os.Parcel)>[]--><com.google.android.gms.common.internal.zzj: com.google.android.gms.common.internal.zzi zzE(android.os.Parcel)>[]--><com.google.android.gms.common.internal.zzi: void <init>(int,int,int,java.lang.String,android.os.IBinder,com.google.android.gms.common.api.Scope[],android.os.Bundle,android.accounts.Account)>[]--><com.google.android.gms.common.internal.zzi: android.accounts.Account zzQ(android.os.IBinder)>[]--><com.google.android.gms.common.internal.zza: android.accounts.Account zzc(com.google.android.gms.common.internal.zzq)>[[try]]--><com.google.android.gms.common.internal.zza: android.accounts.Account getAccount()>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzd(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zza(android.content.Context,int,java.lang.String)>[[try]]--><android.app.AppOpsManager: void checkPackage(int,java.lang.String)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 24 Potential Issue API: SDKCheck of <android.widget.CompoundButton: int getCompoundPaddingRight()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.jraf.android.backport.switchwidget.Switch: int getCompoundPaddingRight()>[]--><android.widget.CompoundButton: int getCompoundPaddingRight()>
#1.the call statck between class <org.jraf.android.backport.switchwidget.Switch: int getCompoundPaddingRight()> to <android.widget.CompoundButton: int getCompoundPaddingRight()>has compatibility isssues！
-----------------------------------------
crashApis:20
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 25 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.util.Set keySet()> is checking!!!
The life time of api is [21,31]
5call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onActivityResult(int,int,android.content.Intent)>[]--><android.os.BaseBundle: java.util.Set keySet()>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
4 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zztf: java.lang.String toString()>[]--><android.os.BaseBundle: java.util.Set keySet()>
#1.the call statck between class <com.google.android.gms.internal.zztf: java.lang.String toString()> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzlk: void zza(java.lang.StringBuilder,com.google.android.gms.internal.zzld$zza,android.os.Parcel,int)>[]--><com.google.android.gms.internal.zzlk: java.util.HashMap zzk(android.os.Bundle)>[]--><android.os.BaseBundle: java.util.Set keySet()>
#2.the call statck between class <com.google.android.gms.internal.zzlk: void zza(java.lang.StringBuilder,com.google.android.gms.internal.zzld$zza,android.os.Parcel,int)> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzop$zzc zzh(android.os.Bundle)>[]--><android.os.BaseBundle: java.util.Set keySet()>
#3.the call statck between class <com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzop$zzc zzh(android.os.Bundle)> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzlk: void zzb(java.lang.StringBuilder,com.google.android.gms.internal.zzld$zza,android.os.Parcel,int)>[]--><android.os.BaseBundle: java.util.Set keySet()>
#4.the call statck between class <com.google.android.gms.internal.zzlk: void zzb(java.lang.StringBuilder,com.google.android.gms.internal.zzld$zza,android.os.Parcel,int)> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
crashApis:21
crashApisInMain:7
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 26 Potential Issue API: SDKCheck of <android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()> is checking!!!
The life time of api is [21,31]
48call roads:
0 Mainhead roads:
48 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle,android.content.Intent)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String zza(android.content.Context,android.accounts.Account,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: void showErrorNotification(int,android.content.Context)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzi(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
#4.the call statck between class <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,android.content.Intent)> to <android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ManaPoolFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.android.gms.common.api.zzd$13: void run()>[[try]]--><com.google.android.gms.common.api.zzd: void zze(com.google.android.gms.common.api.zzd,com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.api.zzd: void zza(com.google.android.gms.common.ConnectionResult)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzh(android.content.Context,int)>[]--><com.google.android.gms.common.GooglePlayServicesUtil: boolean zzg(android.content.Context,java.lang.String)>[]--><android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
One road protect good!
crashApis:22
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 27 Potential Issue API: SDKCheck of <android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <org.jraf.android.backport.switchwidget.Switch: void onMeasure(int,int)>[]--><org.jraf.android.backport.switchwidget.Switch: android.text.Layout makeLayout(java.lang.CharSequence)>[]--><android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
#1.the call statck between class <org.jraf.android.backport.switchwidget.Switch: void onMeasure(int,int)> to <android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:23
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 28 Potential Issue API: SDKCheck of <android.net.NetworkInfo: int getType()> is checking!!!
The life time of api is [1,30]
2call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity$3: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: int getNetworkState(boolean)>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
1 Packageshead roads:
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: int getNetworkState(boolean)>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 29 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putLongArray(java.lang.String,long[])> is checking!!!
The life time of api is [21,31]
7call roads:
1 Mainhead roads:
$i0 < 21
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: void onCreate(android.os.Bundle)>[[$i0 < 21]]--><com.gelakinetic.mtgfam.FamiliarActivity: boolean processIntent(android.content.Intent)>[[try]]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
One road protect good!
6 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.ResultListFragment: boolean onOptionsItemSelected(android.view.MenuItem)>[]--><com.gelakinetic.mtgfam.fragments.ResultListFragment: void startCardViewFrag(long)>[]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.ResultListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> to <android.os.BaseBundle: void putLongArray(java.lang.String,long[])>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.ResultListFragment: void access$000(com.gelakinetic.mtgfam.fragments.ResultListFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.ResultListFragment: void startCardViewFrag(long)>[]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
#2.the call statck between class <com.gelakinetic.mtgfam.fragments.ResultListFragment: void access$000(com.gelakinetic.mtgfam.fragments.ResultListFragment,long)> to <android.os.BaseBundle: void putLongArray(java.lang.String,long[])>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.helpers.WishlistHelpers$1: void onClick(android.view.View)>[[try]]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ResultListFragment: void onCreate(android.os.Bundle)>[[try]]--><com.gelakinetic.mtgfam.fragments.ResultListFragment: void startCardViewFrag(long)>[]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.MoJhoStoFragment: void access$100(com.gelakinetic.mtgfam.fragments.MoJhoStoFragment,java.lang.String,int)>[]--><com.gelakinetic.mtgfam.fragments.MoJhoStoFragment: void getOneSpell(java.lang.String,int)>[[try]]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.TradeFragment$7$4: void onClick(android.view.View)>[[try]]--><android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
One road protect good!
crashApis:24
containsStatic:false
containsTry:true
7call by main package
-----------------------------------------
#################################################
N 30 Potential Issue API: SDKCheck of <android.net.NetworkInfo: android.net.NetworkInfo.State getState()> is checking!!!
The life time of api is [1,30]
42call roads:
0 Mainhead roads:
42 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ManaPoolFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.helpers.LcPlayer: void onPause()>[]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.Service$State startAndWait()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(com.google.android.gms.common.images.ImageManager$OnImageLoadedListener,android.net.Uri,int)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void execute()>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void execute()>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void execute()>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStart()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractIdleService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.Futures$4: void run()>[]--><com.google.common.util.concurrent.Futures$FallbackFuture$1: void onFailure(java.lang.Throwable)>[[try]]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService$1$1: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$3: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStopped()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.Futures$ChainingListenableFuture: void run()>[[try]]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.FamiliarFragment$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>[]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(com.google.android.gms.common.images.ImageManager$OnImageLoadedListener,android.net.Uri)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStop()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>[]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)>[]--><com.google.common.util.concurrent.ForwardingListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStart()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(android.widget.ImageView,android.net.Uri,int)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager$ImageReceiver: void onReceiveResult(int,android.os.Bundle)>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager$ImageReceiver: void onReceiveResult(int,android.os.Bundle)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager$ImageReceiver: void onReceiveResult(int,android.os.Bundle)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(android.widget.ImageView,android.net.Uri)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.cache.LocalCache$Segment: void runUnlockedCleanup()>[]--><com.google.common.cache.LocalCache: void processPendingNotifications()>[[try]]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyRequestListenersForRequest(com.octo.android.robospice.request.SpiceRequest)>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyRequestListenersForRequest(com.octo.android.robospice.request.SpiceRequest)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyRequestListenersForRequest(com.octo.android.robospice.request.SpiceRequest)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.images.ImageManager: void loadImage(android.widget.ImageView,int)>[]--><com.google.android.gms.common.images.ImageManager: void zza(com.google.android.gms.common.images.zza)>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.TradeFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractExecutionThreadService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractExecutionThreadService$1: void doStart()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractExecutionThreadService$1: void doStart()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStop()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractIdleService$1: void doStop()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ResultListFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceListener: void start()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$FallbackFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureFallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.eventbus.AsyncEventBus: void dispatchQueuedEvents()>[]--><com.google.common.eventbus.AsyncEventBus: void dispatch(java.lang.Object,com.google.common.eventbus.EventHandler)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractScheduledService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractExecutionThreadService$1$1: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.Futures$ChainingListenableFuture: void run()>[[try]]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.Futures$4: void run()>[]--><com.google.common.util.concurrent.Futures$FallbackFuture$1: void onFailure(java.lang.Throwable)>[[try]]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractScheduledService$1$3: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStopped()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void executeListeners()>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.Futures$ChainingListenableFuture: void run()>[[try]]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.Futures$4: void run()>[]--><com.google.common.util.concurrent.Futures$FallbackFuture$1: void onFailure(java.lang.Throwable)>[[try]]--><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractIdleService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$3: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStopped()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$1: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService$1$1: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.google.common.util.concurrent.AbstractScheduledService$1$2: void run()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyStarted()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dumpState()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dumpState()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dumpState()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>[]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$CombinedFuture: void init(java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$CombinedFuture: void init(java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures$CombinedFuture: void init(java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service$State standardStartAndWait()>[]--><com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractExecutionThreadService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.Service$State stopAndWait()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner$1: void run()>[[try]]--><com.octo.android.robospice.request.DefaultRequestRunner: void processRequest(com.octo.android.robospice.request.CachedSpiceRequest)>[]--><com.octo.android.robospice.networkstate.DefaultNetworkStateChecker: boolean isNetworkAvailable(android.content.Context)>[]--><android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
One road protect good!
containsStatic:false
containsTry:true
43call by main package
-----------------------------------------
#################################################
N 31 Potential Issue API: SDKCheck of <android.net.NetworkInfo: boolean isConnected()> is checking!!!
The life time of api is [1,30]
2call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.gelakinetic.mtgfam.FamiliarActivity dummyMainMethod_com_gelakinetic_mtgfam_FamiliarActivity(android.content.Intent)>[]--><com.gelakinetic.mtgfam.FamiliarActivity$3: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: int getNetworkState(boolean)>[[try]]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
1 Packageshead roads:
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)>[]--><com.gelakinetic.mtgfam.FamiliarActivity: int getNetworkState(boolean)>[[try]]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 32 Potential Issue API: SDKCheck of <android.os.BaseBundle: long[] getLongArray(java.lang.String)> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewPagerFragment: void onActivityCreated(android.os.Bundle)>[]--><android.os.BaseBundle: long[] getLongArray(java.lang.String)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewPagerFragment: void onActivityCreated(android.os.Bundle)> to <android.os.BaseBundle: long[] getLongArray(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:25
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 33 Potential Issue API: SDKCheck of <android.app.Fragment: android.app.Fragment getParentFragment()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <com.google.android.gms.dynamic.zzb: com.google.android.gms.dynamic.zzc zzli()>[]--><android.app.Fragment: android.app.Fragment getParentFragment()>
#1.the call statck between class <com.google.android.gms.dynamic.zzb: com.google.android.gms.dynamic.zzc zzli()> to <android.app.Fragment: android.app.Fragment getParentFragment()>has compatibility isssues！
-----------------------------------------
crashApis:26
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 34 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)> is checking!!!
The life time of api is [22,31]
9call roads:
0 Mainhead roads:
9 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#2.the call statck between class <com.doomonafireball.betterpickers.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexEndIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#3.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.RulesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#4.the call statck between class <com.gelakinetic.mtgfam.fragments.RulesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onStop()>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexEndIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#5.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onStop()> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.common.api.zzh: void onCreate(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#6.the call statck between class <com.google.android.gms.common.api.zzh: void onCreate(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromBundle(android.os.Bundle)>[[try]]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.internal.zzjj$zza: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#8.the call statck between class <com.google.android.gms.internal.zzjj$zza: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 
Error road: <com.google.android.gms.internal.zzjj: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#9.the call statck between class <com.google.android.gms.internal.zzjj: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:27
containsStatic:false
containsTry:true
10call by main package
-----------------------------------------
#################################################
N 35 Potential Issue API: SDKCheck of <android.widget.AbsListView: void setSelectionFromTop(int,int)> is checking!!!
The life time of api is [21,31]
43call roads:
0 Mainhead roads:
43 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>[[try]]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.octo.android.robospice.SpiceManager: void dontNotifyAnyRequestListeners()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractIdleService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractScheduledService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ServiceManager stopAsync()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture stop()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ServiceManager$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.ForwardingExecutorService: java.lang.Object invokeAny(java.util.Collection)>[]--><com.google.common.util.concurrent.AbstractListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long)>[[try]]--><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.ManaPoolFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.fragments.FamiliarFragment: void onPause()>[[try]]--><com.octo.android.robospice.SpiceManager: void cancelAllRequests()>[]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.gelakinetic.mtgfam.fragments.LifeCounterFragment: void onPause()>[]--><com.gelakinetic.mtgfam.helpers.LcPlayer: void onPause()>[]--><com.google.common.cache.RemovalListeners$1$1: void run()>[]--><com.google.common.cache.RemovalListeners$1: void onRemoval(com.google.common.cache.RemovalNotification)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService$ListenerExecutorPair: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.Service$State startAndWait()>[]--><com.google.common.util.concurrent.AbstractService: com.google.common.util.concurrent.ListenableFuture start()>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>[]--><com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>[[try]]--><com.google.common.util.concurrent.ForwardingExecutorService: void execute(java.lang.Runnable)>[]--><com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void execute(java.lang.Runnable)>[[try]]--><com.google.common.util.concurrent.AbstractIdleService$1$2: void run()>[]--><com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>[]--><com.google.common.util.concurrent.AbstractService: void executeListeners()>[[try]]--><com.doomonafireball.betterpickers.calendardatepicker.YearPickerView$1: void run()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.ResultListFragment: void onResume()>[]--><android.widget.AbsListView: void setSelectionFromTop(int,int)>
#12.the call statck between class <com.gelakinetic.mtgfam.fragments.ResultListFragment: void onResume()> to <android.widget.AbsListView: void setSelectionFromTop(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:28
containsStatic:false
containsTry:true
13call by main package
-----------------------------------------
#################################################
N 36 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putIntArray(java.lang.String,int[])> is checking!!!
The life time of api is [21,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.timepicker.TimePicker: void saveEntryState(android.os.Bundle,java.lang.String)>[]--><android.os.BaseBundle: void putIntArray(java.lang.String,int[])>
#1.the call statck between class <com.doomonafireball.betterpickers.timepicker.TimePicker: void saveEntryState(android.os.Bundle,java.lang.String)> to <android.os.BaseBundle: void putIntArray(java.lang.String,int[])>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.hmspicker.HmsPicker: void saveEntryState(android.os.Bundle,java.lang.String)>[]--><android.os.BaseBundle: void putIntArray(java.lang.String,int[])>
#2.the call statck between class <com.doomonafireball.betterpickers.hmspicker.HmsPicker: void saveEntryState(android.os.Bundle,java.lang.String)> to <android.os.BaseBundle: void putIntArray(java.lang.String,int[])>has compatibility isssues！
-----------------------------------------
crashApis:29
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 37 Potential Issue API: SDKCheck of <android.widget.LinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.widget.AccessibleLinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>[]--><android.widget.LinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
#1.the call statck between class <com.doomonafireball.betterpickers.widget.AccessibleLinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> to <android.widget.LinearLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>has compatibility isssues！
-----------------------------------------
crashApis:30
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 38 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putLong(java.lang.String,long)> is checking!!!
The life time of api is [21,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewPagerFragment$CardViewPagerAdapter: android.support.v4.app.Fragment getItem(int)>[]--><android.os.BaseBundle: void putLong(java.lang.String,long)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewPagerFragment$CardViewPagerAdapter: android.support.v4.app.Fragment getItem(int)> to <android.os.BaseBundle: void putLong(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.fragments.MoJhoStoFragment: void access$300(com.gelakinetic.mtgfam.fragments.MoJhoStoFragment,java.lang.String)>[]--><com.gelakinetic.mtgfam.fragments.MoJhoStoFragment: void getThreeSpells(java.lang.String)>[[try]]--><android.os.BaseBundle: void putLong(java.lang.String,long)>
One road protect good!
crashApis:31
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 39 Potential Issue API: SDKCheck of <android.widget.LinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> is checking!!!
The life time of api is [16,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.doomonafireball.betterpickers.widget.AccessibleLinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>[]--><android.widget.LinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
#1.the call statck between class <com.doomonafireball.betterpickers.widget.AccessibleLinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> to <android.widget.LinearLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>has compatibility isssues！
-----------------------------------------
crashApis:32
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 40 Potential Issue API: SDKCheck of <android.widget.HorizontalScrollView: void onRestoreInstanceState(android.os.Parcelable)> is checking!!!
The life time of api is [19,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 
Error road: <com.astuetz.PagerSlidingTabStrip: void onRestoreInstanceState(android.os.Parcelable)>[]--><android.widget.HorizontalScrollView: void onRestoreInstanceState(android.os.Parcelable)>
#1.the call statck between class <com.astuetz.PagerSlidingTabStrip: void onRestoreInstanceState(android.os.Parcelable)> to <android.widget.HorizontalScrollView: void onRestoreInstanceState(android.os.Parcelable)>has compatibility isssues！
-----------------------------------------
crashApis:33
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 41 Potential Issue API: SDKCheck of <android.os.BaseBundle: int[] getIntArray(java.lang.String)> is checking!!!
The life time of api is [21,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.hmspicker.HmsPicker: void restoreEntryState(android.os.Bundle,java.lang.String)>[]--><android.os.BaseBundle: int[] getIntArray(java.lang.String)>
#1.the call statck between class <com.doomonafireball.betterpickers.hmspicker.HmsPicker: void restoreEntryState(android.os.Bundle,java.lang.String)> to <android.os.BaseBundle: int[] getIntArray(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.doomonafireball.betterpickers.timepicker.TimePicker: void restoreEntryState(android.os.Bundle,java.lang.String)>[]--><android.os.BaseBundle: int[] getIntArray(java.lang.String)>
#2.the call statck between class <com.doomonafireball.betterpickers.timepicker.TimePicker: void restoreEntryState(android.os.Bundle,java.lang.String)> to <android.os.BaseBundle: int[] getIntArray(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:34
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 42 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean isEmpty()> is checking!!!
The life time of api is [21,31]
46call roads:
0 Mainhead roads:
46 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zztf: java.lang.String toString()>[]--><android.os.BaseBundle: boolean isEmpty()>
#1.the call statck between class <com.google.android.gms.internal.zztf: java.lang.String toString()> to <android.os.BaseBundle: boolean isEmpty()>has compatibility isssues！
-----------------------------------------
crashApis:35
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 43 Potential Issue API: SDKCheck of <android.os.BaseBundle: void remove(java.lang.String)> is checking!!!
The life time of api is [21,31]
7call roads:
0 Mainhead roads:
7 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#1.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void access$500(com.gelakinetic.mtgfam.fragments.CardViewFragment,long)> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.GatheringsFragment: void onSaveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#2.the call statck between class <com.gelakinetic.mtgfam.fragments.GatheringsFragment: void onSaveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexEndIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#3.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void setUserVisibleHint(boolean)> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onStop()>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexEndIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#4.the call statck between class <com.gelakinetic.mtgfam.fragments.CardViewFragment: void onStop()> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.gelakinetic.mtgfam.fragments.CardViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromBundle(android.os.Bundle)>[[try]]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void setInfoFromID(long)>[]--><com.gelakinetic.mtgfam.fragments.CardViewFragment: void reportAppIndexViewIfAble()>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult start(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzjj$zza: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#6.the call statck between class <com.google.android.gms.internal.zzjj$zza: com.google.android.gms.common.api.PendingResult end(com.google.android.gms.common.api.GoogleApiClient)> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <com.google.android.gms.internal.zzjj: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.zzjj: com.google.android.gms.common.api.PendingResult zza(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action,int)>[]--><com.google.android.gms.internal.zzji: com.google.android.gms.internal.zzjb zza(com.google.android.gms.appindexing.Action,long,java.lang.String,int)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#7.the call statck between class <com.google.android.gms.internal.zzjj: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:36
containsStatic:false
containsTry:true
8call by main package
-----------------------------------------
crashApis numbers:36
crashApis numbers in main road:7
On Android Version 16 this app may have error api use(at least): 29 and error api roads: 105
On Android Version 17 this app may have error api use(at least): 26 and error api roads: 102
On Android Version 18 this app may have error api use(at least): 26 and error api roads: 102
On Android Version 19 this app may have error api use(at least): 24 and error api roads: 101
On Android Version 20 this app may have error api use(at least): 24 and error api roads: 101
On Android Version 21 this app may have error api use(at least): 3 and error api roads: 29
On Android Version 22 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 23 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 24 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 25 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 26 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 27 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 28 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 29 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 30 this app may have error api use(at least): 7 and error api roads: 11
On Android Version 31 this app may have error api use(at least): 8 and error api roads: 12
