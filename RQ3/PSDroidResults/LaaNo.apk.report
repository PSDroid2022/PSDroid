/home/ys/桌面/CompactDroid（复件）/dataset2/LaaNo.apk
Entry Points[com.bytesforge.linkasanote.laano.LaanoActivity$SyncBroadcastReceiver, com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteActivity, com.bytesforge.linkasanote.LaanoApplication, com.bytesforge.linkasanote.data.source.Provider, com.bytesforge.linkasanote.laano.ClipboardService, com.bytesforge.linkasanote.sync.SyncService, com.bytesforge.linkasanote.synclog.SyncLogActivity, com.bytesforge.linkasanote.addeditaccount.AuthenticatorService, com.bytesforge.linkasanote.laano.LaanoActivity$ConnectivityBroadcastReceiver, com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity, com.bytesforge.linkasanote.about.AboutActivity, com.bytesforge.linkasanote.sync.operations.OperationsService, com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteActivity, com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkActivity, com.bytesforge.linkasanote.laano.LaanoActivity, com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity, com.bytesforge.linkasanote.settings.SettingsActivity]
FllowDroidcallgraph size:8482
Soot started on Mon Jul 11 06:19:02 CST 2022
Soot finished on Mon Jul 11 06:19:07 CST 2022
Soot has run for 0 min. 5 sec.
Found 2 additional DEX files. Now visiting them one by one.
Soot started on Mon Jul 11 06:19:07 CST 2022
leftOp<android.databinding.ViewDataBinding: int SDK_INT>
Soot finished on Mon Jul 11 06:21:20 CST 2022
Soot has run for 2 min. 12 sec.
Soot started on Mon Jul 11 06:21:20 CST 2022
Soot finished on Mon Jul 11 06:21:24 CST 2022
Soot has run for 0 min. 4 sec.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 19
Declared Target Sdk version is: 29
Declared Max Sdk version is: -1
Collected 48 Android APIs in the primary DEX file
Collected 1060 Android APIs in the secondary DEX files
#################################################
N 0 Potential Issue API: SDKCheck of <android.widget.TimePicker: int getMinute()> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i1 < 23
Good road: <android.databinding.adapters.TimePickerBindingAdapter: void setMinute(android.widget.TimePicker,int)>[[-$i1 < 23]]--><android.widget.TimePicker: int getMinute()>
One road protect good!
-i0 < 23
Good road: <android.databinding.adapters.TimePickerBindingAdapter: int getMinute(android.widget.TimePicker)>[[-i0 < 23]]--><android.widget.TimePicker: int getMinute()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 1 Potential Issue API: SDKCheck of <android.widget.TimePicker: int getHour()> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 23
Good road: <android.databinding.adapters.TimePickerBindingAdapter: int getHour(android.widget.TimePicker)>[[-i0 < 23]]--><android.widget.TimePicker: int getHour()>
One road protect good!
-$i1 < 23
Good road: <android.databinding.adapters.TimePickerBindingAdapter: void setHour(android.widget.TimePicker,int)>[[-$i1 < 23]]--><android.widget.TimePicker: int getHour()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 2 Potential Issue API: SDKCheck of <android.os.BaseBundle: int getInt(java.lang.String)> is checking!!!
The life time of api is [21,31]
8call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity(android.content.Intent)>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.notes.NotesFragment dummyMainMethod_com_bytesforge_linkasanote_laano_notes_NotesFragment(android.content.Intent,android.app.Activity)>[]--><com.bytesforge.linkasanote.laano.notes.NotesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
7 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: void applyInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#1.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksViewModel: void applyInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.synclog.SyncLogViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#2.the call statck between class <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#3.the call statck between class <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: void applyInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#4.the call statck between class <com.bytesforge.linkasanote.laano.notes.NotesViewModel: void applyInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#5.the call statck between class <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#6.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#7.the call statck between class <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:1
crashApisInMain:1
containsStatic:false
containsTry:false
8call by main package
-----------------------------------------
#################################################
N 3 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> is checking!!!
The life time of api is [1,30]
6call roads:
1 Mainhead roads:
!!!this api will crash on sdk 31 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity$ConnectivityBroadcastReceiver dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity$ConnectivityBroadcastReceiver(android.content.Intent)>[]--><com.bytesforge.linkasanote.laano.LaanoActivity$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
5 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$upload$0$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,com.bytesforge.linkasanote.data.Item)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#1.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$upload$0$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,com.bytesforge.linkasanote.data.Item)> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.bytesforge.linkasanote.data.Item lambda$download$1$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#2.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.bytesforge.linkasanote.data.Item lambda$download$1$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[]--><com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: boolean isOnline()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#3.the call statck between class <com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.resources.files.model.RemoteFile lambda$readFile$3$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#4.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.resources.files.model.RemoteFile lambda$readFile$3$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$delete$2$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#5.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$delete$2$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
crashApis:2
crashApisInMain:2
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 4 Potential Issue API: SDKCheck of <android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> is checking!!!
The life time of api is [22,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 22
Good road: <com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment$AccountRemovalConfirmationDialog: void lambda$onCreateDialog$0$ManageAccountsFragment$AccountRemovalConfirmationDialog(android.content.DialogInterface,int)>[]--><com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment: void removeAccount(android.accounts.Account)>[[-$i0 < 22]]--><android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 5 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> is checking!!!
The life time of api is [23,31]
61call roads:
0 Mainhead roads:
61 Packageshead roads:
try
Good road with try: <com.owncloud.android.lib.resources.activities.GetActivitiesRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.CopyFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.RegisterAccountDeviceForProxyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.common.accounts.ExternalLinksOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.DeleteAllNotificationsRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.StorePrivateKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.DeletePublicKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ToggleFavoriteRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: void open()>[]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[]--><com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: boolean tryConnection(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ReadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.RemoveRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.UploadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.resources.files.UploadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult uploadFile(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: void tunnelCreated()>[]--><org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.comments.MarkCommentsAsReadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.UnregisterAccountDeviceForProxyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetRemoteUserInfoOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult uploadChunk(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String,com.owncloud.android.lib.resources.files.Chunk)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.SearchRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RenameFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: boolean existsFile(java.lang.String)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RenameFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.comments.CommentFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.LockFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$1: void doit()>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.RegisterAccountDeviceForNotificationsOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetPublicKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.SetRemoteUserInfoOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ReadFileVersionsRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.UnregisterAccountDeviceForNotificationsOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.GetNotificationsRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.UpdateMetadataRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.CreateRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteSharesOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.EmptyTrashbinRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.RemoveTrashbinFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.status.GetRemoteCapabilitiesOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.SendCSROperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.ToggleEncryptionRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RestoreFileVersionRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.CreateFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[]--><com.owncloud.android.lib.resources.files.CreateFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult createFolder(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.GetMetadataRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RemoveFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteShareesOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteSharesForFileOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.UnlockFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.RestoreTrashbinFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.UpdateRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.ReadTrashbinFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ExistenceCheckRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: com.owncloud.android.lib.common.network.RedirectionPath followRedirection(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ExistenceCheckRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.ProxyClient: org.apache.commons.httpclient.ProxyClient$ConnectResponse connect()>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ReadFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.MoveFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetPrivateKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetRemoteUserAvatarOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.DownloadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.resources.files.DownloadFileRemoteOperation: int downloadFile(com.owncloud.android.lib.common.OwnCloudClient,java.io.File)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.CheckEtagRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.StoreMetadataRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
containsStatic:false
containsTry:true
62call by main package
-----------------------------------------
#################################################
N 6 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setDescription(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.sync.SyncService dummyMainMethod_com_bytesforge_linkasanote_sync_SyncService(android.content.Intent)>[]--><com.bytesforge.linkasanote.sync.SyncService: void onCreate()>[[try]]--><com.bytesforge.linkasanote.sync.SyncNotifications: void <init>(android.content.Context)>[]--><com.bytesforge.linkasanote.sync.SyncNotifications: void initChannels(android.content.Context)>[[i0 >= 26]]--><android.app.NotificationChannel: void setDescription(java.lang.String)>
One road protect good!
0 Packageshead roads:
containsStatic:false
containsTry:true
1call by main package
-----------------------------------------
#################################################
N 7 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)> is checking!!!
The life time of api is [21,31]
30call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity(android.content.Intent)>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.notes.NotesFragment dummyMainMethod_com_bytesforge_linkasanote_laano_notes_NotesFragment(android.content.Intent,android.app.Activity)>[]--><com.bytesforge.linkasanote.laano.notes.NotesFragment: void onSaveInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.LinksViewModel: void saveInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
29 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.LaanoFragmentPagerAdapter: android.support.v4.app.Fragment getItem(int)>[]--><com.bytesforge.linkasanote.laano.BaseItemFragment: void attachTitle(java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#1.the call statck between class <com.bytesforge.linkasanote.laano.LaanoFragmentPagerAdapter: android.support.v4.app.Fragment getItem(int)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#2.the call statck between class <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#3.the call statck between class <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.about.AboutViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.about.AboutViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#4.the call statck between class <com.bytesforge.linkasanote.about.AboutViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.favorites.FavoritesFragment: void showConflictResolution(java.lang.String)>[]--><com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionDialog: com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionDialog newInstance(java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#5.the call statck between class <com.bytesforge.linkasanote.laano.favorites.FavoritesFragment: void showConflictResolution(java.lang.String)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment: boolean sendCheckCredentialsOperation(java.lang.String,java.lang.String,com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation$ServerInfo)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#6.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment: boolean sendCheckCredentialsOperation(java.lang.String,java.lang.String,com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation$ServerInfo)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#7.the call statck between class <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#8.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.LinksFragment$LinkConflictResolutionWarningDialog: void lambda$onCreateDialog$0$LinksFragment$LinkConflictResolutionWarningDialog(com.bytesforge.linkasanote.laano.links.LinksFragment,android.widget.CheckBox,android.content.DialogInterface,int)>[]--><com.bytesforge.linkasanote.laano.links.LinksFragment: void showConflictResolution(java.lang.String)>[]--><com.bytesforge.linkasanote.laano.links.conflictresolution.LinksConflictResolutionDialog: com.bytesforge.linkasanote.laano.links.conflictresolution.LinksConflictResolutionDialog newInstance(java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#9.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksFragment$LinkConflictResolutionWarningDialog: void lambda$onCreateDialog$0$LinksFragment$LinkConflictResolutionWarningDialog(com.bytesforge.linkasanote.laano.links.LinksFragment,android.widget.CheckBox,android.content.DialogInterface,int)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.Authenticator$AuthenticatorException: void <init>(int,java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#10.the call statck between class <com.bytesforge.linkasanote.addeditaccount.Authenticator$AuthenticatorException: void <init>(int,java.lang.String)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:3
crashApisInMain:3
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 8 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.AbstractVerifier: void <init>()> is checking!!!
The life time of api is [23,31]
4531call roads:
1 Mainhead roads:
4530 Packageshead roads:
Roads number exceed, exit!4530
#################################################
N 9 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)> is checking!!!
The life time of api is [22,31]
20call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 21 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity(android.content.Intent)>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.notes.NotesFragment dummyMainMethod_com_bytesforge_linkasanote_laano_notes_NotesFragment(android.content.Intent,android.app.Activity)>[]--><com.bytesforge.linkasanote.laano.notes.NotesFragment: void onSaveInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.LinksViewModel: void saveInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
19 Packageshead roads:
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#1.the call statck between class <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#2.the call statck between class <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#3.the call statck between class <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#4.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#5.the call statck between class <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#6.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#7.the call statck between class <com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.synclog.SyncLogViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#8.the call statck between class <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#9.the call statck between class <com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
#10.the call statck between class <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:4
crashApisInMain:4
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 10 Potential Issue API: SDKCheck of <android.os.Message: void setAsynchronous(boolean)> is checking!!!
The life time of api is [22,31]
4532call roads:
1 Mainhead roads:
4531 Packageshead roads:
Roads number exceed, exit!4531
#################################################
N 11 Potential Issue API: SDKCheck of <android.util.SizeF: float getHeight()> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <androidx.versionedparcelable.VersionedParcel: void writeSizeF(android.util.SizeF,int)>[]--><android.util.SizeF: float getHeight()>
#1.the call statck between class <androidx.versionedparcelable.VersionedParcel: void writeSizeF(android.util.SizeF,int)> to <android.util.SizeF: float getHeight()>has compatibility isssues！
-----------------------------------------
crashApis:5
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 12 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.lang.Object get(java.lang.String)> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment: void updateAccount(com.owncloud.android.lib.common.operations.RemoteOperationResult,android.accounts.Account,com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation$ServerInfo)>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#1.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment: void updateAccount(com.owncloud.android.lib.common.operations.RemoteOperationResult,android.accounts.Account,com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation$ServerInfo)> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:6
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 13 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 14 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean getBoolean(java.lang.String)> is checking!!!
The life time of api is [22,31]
11call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 21 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity(android.content.Intent)>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.notes.NotesFragment dummyMainMethod_com_bytesforge_linkasanote_laano_notes_NotesFragment(android.content.Intent,android.app.Activity)>[]--><com.bytesforge.linkasanote.laano.notes.NotesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
10 Packageshead roads:
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#1.the call statck between class <com.bytesforge.linkasanote.laano.favorites.conflictresolution.FavoritesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: void applyInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#2.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksViewModel: void applyInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.synclog.SyncLogViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#3.the call statck between class <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#4.the call statck between class <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: void applyInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#5.the call statck between class <com.bytesforge.linkasanote.laano.notes.NotesViewModel: void applyInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#6.the call statck between class <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#7.the call statck between class <com.bytesforge.linkasanote.laano.notes.conflictresolution.NotesConflictResolutionViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.links.conflictresolution.LinksConflictResolutionViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.conflictresolution.LinksConflictResolutionViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#8.the call statck between class <com.bytesforge.linkasanote.laano.links.conflictresolution.LinksConflictResolutionViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#9.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void applyInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String)>
#10.the call statck between class <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:7
crashApisInMain:5
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 15 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.lang.String getString(java.lang.String)> is checking!!!
The life time of api is [21,31]
4538call roads:
1 Mainhead roads:
4537 Packageshead roads:
Roads number exceed, exit!4537
#################################################
N 16 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putInt(java.lang.String,int)> is checking!!!
The life time of api is [21,31]
14call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity(android.content.Intent)>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.notes.NotesFragment dummyMainMethod_com_bytesforge_linkasanote_laano_notes_NotesFragment(android.content.Intent,android.app.Activity)>[]--><com.bytesforge.linkasanote.laano.notes.NotesFragment: void onSaveInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.LinksViewModel: void saveInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
13 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#1.the call statck between class <com.bytesforge.linkasanote.laano.notes.NotesViewModel: android.os.Bundle getDefaultInstanceState()> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#2.the call statck between class <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()>[]--><com.bytesforge.linkasanote.laano.BaseItemViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#3.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksViewModel: android.os.Bundle getDefaultInstanceState()> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#4.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#5.the call statck between class <com.bytesforge.linkasanote.laano.notes.addeditnote.AddEditNoteViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.Authenticator$AuthenticatorException: void <init>(int,java.lang.String)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#6.the call statck between class <com.bytesforge.linkasanote.addeditaccount.Authenticator$AuthenticatorException: void <init>(int,java.lang.String)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.synclog.SyncLogViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#7.the call statck between class <com.bytesforge.linkasanote.synclog.SyncLogViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#8.the call statck between class <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void saveInstanceState(android.os.Bundle)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#9.the call statck between class <com.bytesforge.linkasanote.laano.favorites.addeditfavorite.AddEditFavoriteViewModel: void saveInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void setInstanceState(android.os.Bundle)>[]--><com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: android.os.Bundle getDefaultInstanceState()>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#10.the call statck between class <com.bytesforge.linkasanote.laano.links.addeditlink.AddEditLinkViewModel: void setInstanceState(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:8
crashApisInMain:6
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 17 Potential Issue API: SDKCheck of <android.util.SizeF: float getWidth()> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <androidx.versionedparcelable.VersionedParcel: void writeSizeF(android.util.SizeF,int)>[]--><android.util.SizeF: float getWidth()>
#1.the call statck between class <androidx.versionedparcelable.VersionedParcel: void writeSizeF(android.util.SizeF,int)> to <android.util.SizeF: float getWidth()>has compatibility isssues！
-----------------------------------------
crashApis:9
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 18 Potential Issue API: SDKCheck of <android.net.NetworkInfo: boolean isConnectedOrConnecting()> is checking!!!
The life time of api is [1,30]
6call roads:
1 Mainhead roads:
!!!this api will crash on sdk 31 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity$ConnectivityBroadcastReceiver dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity$ConnectivityBroadcastReceiver(android.content.Intent)>[]--><com.bytesforge.linkasanote.laano.LaanoActivity$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnectedOrConnecting()>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.net.NetworkInfo: boolean isConnectedOrConnecting()>has compatibility isssues！
-----------------------------------------
5 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$upload$0$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,com.bytesforge.linkasanote.data.Item)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnectedOrConnecting()>
#1.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$upload$0$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,com.bytesforge.linkasanote.data.Item)> to <android.net.NetworkInfo: boolean isConnectedOrConnecting()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.bytesforge.linkasanote.data.Item lambda$download$1$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnectedOrConnecting()>
#2.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.bytesforge.linkasanote.data.Item lambda$download$1$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)> to <android.net.NetworkInfo: boolean isConnectedOrConnecting()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.resources.files.model.RemoteFile lambda$readFile$3$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnectedOrConnecting()>
#3.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.resources.files.model.RemoteFile lambda$readFile$3$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)> to <android.net.NetworkInfo: boolean isConnectedOrConnecting()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[]--><com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: boolean isOnline()>[]--><android.net.NetworkInfo: boolean isConnectedOrConnecting()>
#4.the call statck between class <com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)> to <android.net.NetworkInfo: boolean isConnectedOrConnecting()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$delete$2$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)>[]--><com.bytesforge.linkasanote.data.source.cloud.CloudItem: boolean isOnline()>[]--><com.bytesforge.linkasanote.utils.CloudUtils: boolean isApplicationConnected(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnectedOrConnecting()>
#5.the call statck between class <com.bytesforge.linkasanote.data.source.cloud.CloudItem: com.owncloud.android.lib.common.operations.RemoteOperationResult lambda$delete$2$CloudItem(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String)> to <android.net.NetworkInfo: boolean isConnectedOrConnecting()>has compatibility isssues！
-----------------------------------------
crashApis:10
crashApisInMain:7
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 19 Potential Issue API: SDKCheck of <android.content.res.Configuration: android.os.LocaleList getLocales()> is checking!!!
The life time of api is [24,31]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: boolean onPreferenceTreeClick(android.support.v7.preference.Preference)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void checkWriteExternalStoragePermission()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void backup()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: void lambda$null$1$SettingsFragment(java.lang.String,java.lang.Throwable)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: boolean lambda$onCreatePreferences$2$SettingsFragment(android.support.v7.preference.Preference,java.lang.Object)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void backup()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 20 Potential Issue API: SDKCheck of <android.content.Context: android.content.res.ColorStateList getColorStateList(int)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 23
Good road: <android.databinding.ViewDataBinding: android.content.res.ColorStateList getColorStateListFromResource(android.view.View,int)>[[-$i1 < 23]]--><android.content.Context: android.content.res.ColorStateList getColorStateList(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 21 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.util.Set keySet()> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment: void updateAccount(com.owncloud.android.lib.common.operations.RemoteOperationResult,android.accounts.Account,com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation$ServerInfo)>[]--><android.os.BaseBundle: java.util.Set keySet()>
#1.the call statck between class <com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment: void updateAccount(com.owncloud.android.lib.common.operations.RemoteOperationResult,android.accounts.Account,com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation$ServerInfo)> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
crashApis:11
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 22 Potential Issue API: SDKCheck of <android.util.Size: int getHeight()> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <androidx.versionedparcelable.VersionedParcel: void writeSize(android.util.Size,int)>[]--><android.util.Size: int getHeight()>
#1.the call statck between class <androidx.versionedparcelable.VersionedParcel: void writeSize(android.util.Size,int)> to <android.util.Size: int getHeight()>has compatibility isssues！
-----------------------------------------
crashApis:12
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 23 Potential Issue API: SDKCheck of <android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])> is checking!!!
The life time of api is [23,31]
1call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.laano.LaanoActivity dummyMainMethod_com_bytesforge_linkasanote_laano_LaanoActivity(android.content.Intent)>[]--><com.bytesforge.linkasanote.laano.LaanoActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])>[[]]--><android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>
!!!this api will crash on sdk 19 20 21 22 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity dummyMainMethod_com_bytesforge_linkasanote_addeditaccount_AddEditAccountActivity(android.content.Intent)>[]--><com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])>[[]]--><android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>has compatibility isssues！
-----------------------------------------
0 Packageshead roads:
crashApis:13
crashApisInMain:8
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 24 Potential Issue API: SDKCheck of <android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <com.bytesforge.linkasanote.about.'-$$Lambda$hYn90S3sSmFfvp3g0vlipPeZLyM': java.lang.Object apply(java.lang.Object)>[]--><com.bytesforge.linkasanote.utils.ActivityUtils: android.text.Spanned fromHtmlCompat(java.lang.String)>[[-$i0 < 24]]--><android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 25 Potential Issue API: SDKCheck of <android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 >= 26
Good road: <com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MainHighlightDrawable: void draw(android.graphics.Canvas)>[[$i0 >= 26]]--><android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 26 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putLongArray(java.lang.String,long[])> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 27 Potential Issue API: SDKCheck of <android.content.Context: android.graphics.drawable.Drawable getDrawable(int)> is checking!!!
The life time of api is [21,31]
7call roads:
0 Mainhead roads:
7 Packageshead roads:
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.ItemNotesNormalBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.FragmentLaanoFavoritesBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.ItemManageAccountsAddBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.FragmentLaanoLinksBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.FragmentSyncLogBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.ItemLinksBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
-$i1 < 21
Good road: <com.bytesforge.linkasanote.databinding.FragmentLaanoNotesBindingImpl: void executeBindings()>[]--><android.databinding.ViewDataBinding: android.graphics.drawable.Drawable getDrawableFromResource(android.view.View,int)>[[-$i1 < 21]]--><android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
One road protect good!
containsStatic:false
containsTry:false
8call by main package
-----------------------------------------
#################################################
N 28 Potential Issue API: SDKCheck of <android.util.Size: int getWidth()> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <androidx.versionedparcelable.VersionedParcel: void writeSize(android.util.Size,int)>[]--><android.util.Size: int getWidth()>
#1.the call statck between class <androidx.versionedparcelable.VersionedParcel: void writeSize(android.util.Size,int)> to <android.util.Size: int getWidth()>has compatibility isssues！
-----------------------------------------
crashApis:14
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 29 Potential Issue API: SDKCheck of <android.text.InputFilter.LengthFilter: int getMax()> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i2 < 21
Good road: <android.databinding.adapters.TextViewBindingAdapter: void setMaxLength(android.widget.TextView,int)>[[-i2 < 21]]--><android.text.InputFilter.LengthFilter: int getMax()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 30 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])> is checking!!!
The life time of api is [22,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 31 Potential Issue API: SDKCheck of <android.os.LocaleList: java.util.Locale get(int)> is checking!!!
The life time of api is [24,31]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: boolean onPreferenceTreeClick(android.support.v7.preference.Preference)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void checkWriteExternalStoragePermission()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void backup()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.os.LocaleList: java.util.Locale get(int)>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: void lambda$null$1$SettingsFragment(java.lang.String,java.lang.Throwable)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.os.LocaleList: java.util.Locale get(int)>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: boolean lambda$onCreatePreferences$2$SettingsFragment(android.support.v7.preference.Preference,java.lang.Object)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.os.LocaleList: java.util.Locale get(int)>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.os.LocaleList: java.util.Locale get(int)>
One road protect good!
-$i0 < 24
Good road: <com.bytesforge.linkasanote.settings.SettingsFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void backup()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: void refreshBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Map getBackupEntries()>[]--><com.bytesforge.linkasanote.settings.SettingsFragment: java.util.Locale getCurrentLocaleCompat()>[[-$i0 < 24]]--><android.os.LocaleList: java.util.Locale get(int)>
One road protect good!
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 32 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)> is checking!!!
The life time of api is [22,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 21 
Error road: <com.bytesforge.linkasanote.sync.SyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)>[]--><android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
#1.the call statck between class <com.bytesforge.linkasanote.sync.SyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> to <android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:15
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 33 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)> is checking!!!
The life time of api is [26,31]
1call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.sync.SyncService dummyMainMethod_com_bytesforge_linkasanote_sync_SyncService(android.content.Intent)>[]--><com.bytesforge.linkasanote.sync.SyncService: void onCreate()>[[try]]--><com.bytesforge.linkasanote.sync.SyncNotifications: void <init>(android.content.Context)>[]--><com.bytesforge.linkasanote.sync.SyncNotifications: void initChannels(android.content.Context)>[[i0 >= 26]]--><android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
One road protect good!
0 Packageshead roads:
containsStatic:false
containsTry:true
1call by main package
-----------------------------------------
#################################################
N 34 Potential Issue API: SDKCheck of <android.util.Size: void <init>(int,int)> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <androidx.versionedparcelable.VersionedParcel: android.util.Size readSize(android.util.Size,int)>[]--><android.util.Size: void <init>(int,int)>
#1.the call statck between class <androidx.versionedparcelable.VersionedParcel: android.util.Size readSize(android.util.Size,int)> to <android.util.Size: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:16
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 35 Potential Issue API: SDKCheck of <android.content.Context: int getColor(int)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 23
Good road: <android.databinding.ViewDataBinding: int getColorFromResource(android.view.View,int)>[[-$i1 < 23]]--><android.content.Context: int getColor(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 36 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> is checking!!!
The life time of api is [23,31]
61call roads:
0 Mainhead roads:
61 Packageshead roads:
try
Good road with try: <com.owncloud.android.lib.resources.activities.GetActivitiesRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.CopyFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.RegisterAccountDeviceForProxyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.common.accounts.ExternalLinksOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.DeleteAllNotificationsRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.StorePrivateKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.DeletePublicKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ToggleFavoriteRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: void open()>[]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[]--><com.owncloud.android.lib.resources.status.GetRemoteStatusOperation: boolean tryConnection(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ReadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.RemoveRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.UploadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.resources.files.UploadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult uploadFile(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: void tunnelCreated()>[]--><org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.comments.MarkCommentsAsReadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.UnregisterAccountDeviceForProxyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetRemoteUserInfoOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.resources.files.ChunkedFileUploadRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult uploadChunk(com.owncloud.android.lib.common.OwnCloudClient,java.lang.String,com.owncloud.android.lib.resources.files.Chunk)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.SearchRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RenameFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: boolean existsFile(java.lang.String)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RenameFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.comments.CommentFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.LockFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$1: void doit()>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.RegisterAccountDeviceForNotificationsOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetPublicKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.SetRemoteUserInfoOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ReadFileVersionsRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.UnregisterAccountDeviceForNotificationsOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.GetNotificationsRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.UpdateMetadataRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.CreateRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteSharesOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.EmptyTrashbinRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.RemoveTrashbinFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.status.GetRemoteCapabilitiesOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.SendCSROperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.ToggleEncryptionRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RestoreFileVersionRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.CreateFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[]--><com.owncloud.android.lib.resources.files.CreateFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult createFolder(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.GetMetadataRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.RemoveFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteShareesOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteSharesForFileOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.UnlockFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.RestoreTrashbinFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.UpdateRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.shares.GetRemoteShareOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.trashbin.ReadTrashbinFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ExistenceCheckRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: com.owncloud.android.lib.common.network.RedirectionPath followRedirection(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ExistenceCheckRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <org.apache.commons.httpclient.ProxyClient: org.apache.commons.httpclient.ProxyClient$ConnectResponse connect()>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.ReadFolderRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.MoveFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetPrivateKeyOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.users.GetRemoteUserAvatarOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.DownloadFileRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.resources.files.DownloadFileRemoteOperation: int downloadFile(com.owncloud.android.lib.common.OwnCloudClient,java.io.File)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.files.CheckEtagRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
try
Good road with try: <com.owncloud.android.lib.resources.e2ee.StoreMetadataRemoteOperation: com.owncloud.android.lib.common.operations.RemoteOperationResult run(com.owncloud.android.lib.common.OwnCloudClient)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethodBase,int,int)>[[try]]--><com.owncloud.android.lib.common.OwnCloudClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>[]--><org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>[]--><org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>[[try]]--><org.apache.commons.httpclient.HttpConnection: void open()>[[try]]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>[]--><com.owncloud.android.lib.common.network.AdvancedSslSocketFactory: void verifyPeerIdentity(java.lang.String,int,java.net.Socket)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
One road protect good!
containsStatic:false
containsTry:true
62call by main package
-----------------------------------------
#################################################
N 37 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putDouble(java.lang.String,double)> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 38 Potential Issue API: SDKCheck of <android.widget.TimePicker: void setHour(int)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 23
Good road: <android.databinding.adapters.TimePickerBindingAdapter: void setHour(android.widget.TimePicker,int)>[[-$i1 < 23]]--><android.widget.TimePicker: void setHour(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 39 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putIntArray(java.lang.String,int[])> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 40 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putLong(java.lang.String,long)> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 41 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 42 Potential Issue API: SDKCheck of <android.view.View: void setNestedScrollingEnabled(boolean)> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.bytesforge.linkasanote.laano.links.LinksAdapter$ViewHolder: void bind(com.bytesforge.linkasanote.data.Link,com.bytesforge.linkasanote.laano.links.LinksContract$Presenter,com.bytesforge.linkasanote.laano.links.LinksViewModel)>[[]]--><android.view.View: void setNestedScrollingEnabled(boolean)>
#1.the call statck between class <com.bytesforge.linkasanote.laano.links.LinksAdapter$ViewHolder: void bind(com.bytesforge.linkasanote.data.Link,com.bytesforge.linkasanote.laano.links.LinksContract$Presenter,com.bytesforge.linkasanote.laano.links.LinksViewModel)> to <android.view.View: void setNestedScrollingEnabled(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:17
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 43 Potential Issue API: SDKCheck of <android.util.SizeF: void <init>(float,float)> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <androidx.versionedparcelable.VersionedParcel: android.util.SizeF readSizeF(android.util.SizeF,int)>[]--><android.util.SizeF: void <init>(float,float)>
#1.the call statck between class <androidx.versionedparcelable.VersionedParcel: android.util.SizeF readSizeF(android.util.SizeF,int)> to <android.util.SizeF: void <init>(float,float)>has compatibility isssues！
-----------------------------------------
crashApis:18
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 44 Potential Issue API: SDKCheck of <android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)> is checking!!!
The life time of api is [26,31]
1call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: com.bytesforge.linkasanote.sync.SyncService dummyMainMethod_com_bytesforge_linkasanote_sync_SyncService(android.content.Intent)>[]--><com.bytesforge.linkasanote.sync.SyncService: void onCreate()>[[try]]--><com.bytesforge.linkasanote.sync.SyncNotifications: void <init>(android.content.Context)>[]--><com.bytesforge.linkasanote.sync.SyncNotifications: void initChannels(android.content.Context)>[[i0 >= 26]]--><android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
One road protect good!
0 Packageshead roads:
containsStatic:false
containsTry:true
1call by main package
-----------------------------------------
#################################################
N 45 Potential Issue API: SDKCheck of <android.widget.TimePicker: void setMinute(int)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 23
Good road: <android.databinding.adapters.TimePickerBindingAdapter: void setMinute(android.widget.TimePicker,int)>[[-$i1 < 23]]--><android.widget.TimePicker: void setMinute(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
crashApis numbers:18
crashApis numbers in main road:8
On Android Version 16 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 17 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 18 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 19 this app may have error api use(at least): 16 and error api roads: 68
On Android Version 20 this app may have error api use(at least): 16 and error api roads: 68
On Android Version 21 this app may have error api use(at least): 4 and error api roads: 29
On Android Version 22 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 23 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 24 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 25 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 26 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 27 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 28 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 29 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 30 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 31 this app may have error api use(at least): 2 and error api roads: 12
