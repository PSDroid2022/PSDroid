/home/ys/桌面/CompactDroid（复件）/dataset2/Polaris.apk
Entry Points[agersant.polaris.PolarisPlaybackService, agersant.polaris.PolarisDownloadService, agersant.polaris.PolarisApplication, agersant.polaris.MainActivity, agersant.polaris.PolarisScrobbleService]
FllowDroidcallgraph size:11232
Soot started on Mon Jul 11 11:04:22 CST 2022
StaticCheck:<okhttp3.internal.platform.Android10Platform: boolean isSupported>$yysi0 < 29
StaticCheck:<androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)>$yysi0 < 19
StaticCheck:<androidx.core.text.util.LinkifyCompat: boolean shouldAddLinksFallbackToFramework()>$yysi0 < 28
StaticCheck:<androidx.drawerlayout.widget.DrawerLayout: boolean CAN_HIDE_DESCENDANTS>$yysi0 < 19
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>i0 > 29
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>$yysi0 < 25
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean isRequestPinShortcutSupported(android.content.Context)>$yysi0 < 26
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>i1 > 29
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>i0 < 26
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>i0 < 25
StaticCheck:<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>i0 > 29
StaticCheck:<androidx.core.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>i0 < 16
StaticCheck:<androidx.core.location.LocationManagerCompat: boolean isLocationEnabled(android.location.LocationManager)>$yysi0 < 28
StaticCheck:<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>$yysi0 < 30
StaticCheck:<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback,android.os.Handler)>$yysi0 < 30
StaticCheck:<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>i0 < 30
StaticCheck:<androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>$yysi0 > 20
StaticCheck:<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean unregisterAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)>$yysi0 < 24
StaticCheck:<androidx.core.graphics.PaintCompat: boolean hasGlyph(android.graphics.Paint,java.lang.String)>i0 < 23
StaticCheck:<androidx.core.graphics.PaintCompat: boolean setBlendMode(android.graphics.Paint,androidx.core.graphics.BlendModeCompat)>i0 < 29
StaticCheck:<androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)>i0 < 21
leftOp<com.google.android.exoplayer2.util.Util: int SDK_INT>
StaticCheck:<com.google.android.material.appbar.CollapsingToolbarLayout: boolean isToolbar(android.view.View)>$yysi0 < 21
StaticCheck:<androidx.core.app.NavUtils: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)>i0 < 16
StaticCheck:<com.google.android.material.button.MaterialButtonHelper: boolean IS_LOLLIPOP>$yysi0 < 21
StaticCheck:<androidx.transition.TransitionUtils: boolean HAS_IS_ATTACHED_TO_WINDOW>$yysi0 < 19
StaticCheck:<androidx.core.os.MessageCompat: boolean isAsynchronous(android.os.Message)>i0 < 22
StaticCheck:<androidx.core.os.UserManagerCompat: boolean isUserUnlocked(android.content.Context)>$yysi0 < 24
StaticCheck:<androidx.core.content.ContextCompat: boolean isDeviceProtectedStorage(android.content.Context)>$yysi0 < 24
StaticCheck:<androidx.core.content.ContextCompat: boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)>$yysi0 < 16
StaticCheck:<androidx.transition.ChangeTransform: boolean SUPPORTS_VIEW_REMOVAL_SUPPRESSION>$yysi0 < 21
StaticCheck:<androidx.core.view.ViewParentCompat: boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean)>i0 < 21
StaticCheck:<androidx.core.view.ViewParentCompat: boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float)>i0 < 21
StaticCheck:<androidx.core.view.ViewParentCompat: boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int,int)>$yysi1 < 21
StaticCheck:<androidx.core.graphics.BitmapCompat: boolean hasMipMap(android.graphics.Bitmap)>$yysi0 < 18
StaticCheck:<androidx.documentfile.provider.DocumentFile: boolean isDocumentUri(android.content.Context,android.net.Uri)>$yysi0 < 19
StaticCheck:<androidx.appcompat.widget.AppCompatPopupWindow: boolean COMPAT_OVERLAP_ANCHOR>$yysi0 >= 21
StaticCheck:<androidx.core.widget.ListViewCompat: boolean canScrollList(android.widget.ListView,int)>i1 < 19
StaticCheck:<androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>$yysi0 >= 15
StaticCheck:<androidx.core.app.ActivityCompat: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)>$yysi0 < 23
StaticCheck:<androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)>$yysi0 < 21
StaticCheck:<com.google.android.material.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>$yysi0 < 21
StaticCheck:<androidx.core.widget.PopupWindowCompat: boolean getOverlapAnchor(android.widget.PopupWindow)>i0 < 23
StaticCheck:<androidx.recyclerview.widget.RecyclerView: boolean FORCE_INVALIDATE_DISPLAY_LIST>$yysi0 == 18
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastN()>$yysi0 < 24
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastNMR1()>$yysi0 < 25
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastO()>$yysi0 < 26
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastOMR1()>$yysi0 < 27
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastP()>$yysi0 < 28
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastQ()>$yysi0 < 29
StaticCheck:<androidx.core.os.BuildCompat: boolean isAtLeastR()>$yysi0 >= 30
StaticCheck:<androidx.core.view.MarginLayoutParamsCompat: boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams)>$yysi0 < 17
StaticCheck:<androidx.print.PrintHelper: boolean PRINT_ACTIVITY_RESPECTS_ORIENTATION>$yysi0 < 20
StaticCheck:<androidx.print.PrintHelper: boolean systemSupportsPrint()>$yysi0 < 19
StaticCheck:<com.google.android.material.textfield.DropdownMenuEndIconDelegate: boolean IS_LOLLIPOP>$yysi0 < 21
StaticCheck:<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager,androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener)>$yysi0 < 19
StaticCheck:<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager,androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener)>$yysi0 < 19
StaticCheck:<androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)>$yysi0 < 28
StaticCheck:<androidx.core.view.ScaleGestureDetectorCompat: boolean isQuickScaleEnabled(android.view.ScaleGestureDetector)>$yysi0 < 19
StaticCheck:<com.google.android.material.internal.CollapsingTextHelper: boolean USE_SCALING_TEXTURE>$yysi0 >= 18
StaticCheck:<androidx.transition.GhostViewHolder: boolean isOnTop(android.view.View,android.view.View)>i1 < 21
StaticCheck:<androidx.core.app.ActivityManagerCompat: boolean isLowRamDevice(android.app.ActivityManager)>$yysi0 < 19
StaticCheck:<androidx.core.app.NotificationCompat: boolean getAllowSystemGeneratedContextualActions(android.app.Notification)>$yysi0 < 29
StaticCheck:<androidx.core.app.NotificationCompat: boolean getLocalOnly(android.app.Notification)>$yysi0 < 20
StaticCheck:<androidx.core.app.NotificationCompat: boolean isGroupSummary(android.app.Notification)>$yysi0 < 20
StaticCheck:<androidx.appcompat.app.AppCompatDelegateImpl: boolean IS_PRE_LOLLIPOP>i0 >= 21
StaticCheck:<com.google.android.material.badge.BadgeUtils: boolean USE_COMPAT_PARENT>$yysi0 >= 18
StaticCheck:<androidx.core.view.ViewCompat: boolean dispatchNestedFling(android.view.View,float,float,boolean)>$yysi0 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean dispatchNestedPreFling(android.view.View,float,float)>$yysi0 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])>$yysi2 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])>$yysi4 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>$yysi0 < 28
StaticCheck:<androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)>$yysi0 < 28
StaticCheck:<androidx.core.view.ViewCompat: boolean getFitsSystemWindows(android.view.View)>$yysi0 < 16
StaticCheck:<androidx.core.view.ViewCompat: boolean hasExplicitFocusable(android.view.View)>$yysi0 < 26
StaticCheck:<androidx.core.view.ViewCompat: boolean hasNestedScrollingParent(android.view.View)>$yysi0 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean hasOnClickListeners(android.view.View)>$yysi0 < 15
StaticCheck:<androidx.core.view.ViewCompat: boolean hasOverlappingRendering(android.view.View)>$yysi0 < 16
StaticCheck:<androidx.core.view.ViewCompat: boolean hasTransientState(android.view.View)>$yysi0 < 16
StaticCheck:<androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>$yysi0 < 19
StaticCheck:<androidx.core.view.ViewCompat: boolean isFocusedByDefault(android.view.View)>$yysi0 < 26
StaticCheck:<androidx.core.view.ViewCompat: boolean isImportantForAccessibility(android.view.View)>$yysi0 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean isImportantForAutofill(android.view.View)>$yysi0 < 26
StaticCheck:<androidx.core.view.ViewCompat: boolean isInLayout(android.view.View)>$yysi0 < 18
StaticCheck:<androidx.core.view.ViewCompat: boolean isKeyboardNavigationCluster(android.view.View)>$yysi0 < 26
StaticCheck:<androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>$yysi0 < 19
StaticCheck:<androidx.core.view.ViewCompat: boolean isLayoutDirectionResolved(android.view.View)>$yysi0 < 19
StaticCheck:<androidx.core.view.ViewCompat: boolean isNestedScrollingEnabled(android.view.View)>$yysi0 < 21
StaticCheck:<androidx.core.view.ViewCompat: boolean isPaddingRelative(android.view.View)>$yysi0 < 17
StaticCheck:<androidx.core.view.ViewCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>$yysi1 < 16
StaticCheck:<androidx.core.view.ViewCompat: boolean restoreDefaultFocus(android.view.View)>$yysi0 < 26
StaticCheck:<androidx.core.view.ViewCompat: boolean startDragAndDrop(android.view.View,android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>$yysi1 < 24
StaticCheck:<androidx.core.view.ViewCompat: boolean startNestedScroll(android.view.View,int)>$yysi1 < 21
StaticCheck:<androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>$yysi0 == 26
StaticCheck:<androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>i0 < 28
StaticCheck:<androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>i0 < 28
StaticCheck:<com.google.android.material.snackbar.BaseTransientBottomBar: boolean USE_OFFSET_API>$yysi0 < 16
StaticCheck:<androidx.core.view.inputmethod.InputConnectionCompat: boolean commitContent(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle)>i1 < 25
StaticCheck:<androidx.core.os.HandlerCompat: boolean postDelayed(android.os.Handler,java.lang.Runnable,java.lang.Object,long)>i1 < 28
StaticCheck:<androidx.core.graphics.drawable.DrawableCompat: boolean canApplyTheme(android.graphics.drawable.Drawable)>$yysi0 < 21
StaticCheck:<androidx.core.graphics.drawable.DrawableCompat: boolean isAutoMirrored(android.graphics.drawable.Drawable)>$yysi0 < 19
StaticCheck:<androidx.core.graphics.drawable.DrawableCompat: boolean setLayoutDirection(android.graphics.drawable.Drawable,int)>i1 < 23
StaticCheck:<androidx.core.widget.AutoSizeableTextView: boolean PLATFORM_SUPPORTS_AUTOSIZE>$yysi0 < 27
StaticCheck:<androidx.core.os.ProcessCompat: boolean isApplicationUid(int)>$yysi1 < 24
StaticCheck:<androidx.core.os.TraceCompat: boolean isEnabled()>i0 < 29
Soot finished on Mon Jul 11 11:06:44 CST 2022
Soot has run for 2 min. 22 sec.
Found 2 additional DEX files. Now visiting them one by one.
Soot started on Mon Jul 11 11:06:44 CST 2022
Soot finished on Mon Jul 11 11:06:46 CST 2022
Soot has run for 0 min. 2 sec.
Soot started on Mon Jul 11 11:06:46 CST 2022
Soot finished on Mon Jul 11 11:06:49 CST 2022
Soot has run for 0 min. 2 sec.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 23
Declared Target Sdk version is: 29
Declared Max Sdk version is: -1
Collected 4411 Android APIs in the primary DEX file
Collected 182 Android APIs in the secondary DEX files
#################################################
N 0 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean isDynamic()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean isDynamic()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: boolean isDynamic()>has compatibility isssues！
-----------------------------------------
crashApis:1
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 1 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setTouchDelegateInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat)>[[-$i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 2 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: boolean addDynamicShortcuts(java.util.List)> is checking!!!
The life time of api is [25,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[i1 < 30]][[-i1 < 25]]
i1 > 29
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: boolean addDynamicShortcuts(java.util.List)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><android.content.pm.ShortcutManager: boolean addDynamicShortcuts(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 3 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i2 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: void setAlphabeticShortcut(android.view.MenuItem,char,int)>[[], [-$i2 < 26]]--><android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>
#1.the call statck between class <androidx.core.view.MenuItemCompat: void setAlphabeticShortcut(android.view.MenuItem,char,int)> to <android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>has compatibility isssues！
-----------------------------------------
crashApis:2
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 4 Potential Issue API: SDKCheck of <android.net.TrafficStats: void tagDatagramSocket(java.net.DatagramSocket)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.net.TrafficStatsCompat: void tagDatagramSocket(java.net.DatagramSocket)>[[-i0 < 24]]--><android.net.TrafficStats: void tagDatagramSocket(java.net.DatagramSocket)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 5 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setScreenReaderFocusable(boolean)>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 6 Potential Issue API: SDKCheck of <android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[$yysi0 >= 30], [-i0 < 29]]
###Multi invoking in one method, need manual check!!!--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[$yysi0 >= 30]][[-i0 < 29]]
$yysi0 >= 30
-i0 < 29
Good road: <androidx.core.view.DisplayCutoutCompat: void <init>(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[]--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[$yysi0 >= 30], [-i0 < 29]]--><android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 7 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setFontVariationSettings(java.lang.String)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setFontVariationSettings(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 8 Potential Issue API: SDKCheck of <android.widget.PopupWindow: void setTouchModal(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 9 Potential Issue API: SDKCheck of <android.graphics.Paint: java.lang.String getFontVariationSettings()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: java.lang.String toString()>[[$i0 < 21], [$i0 < 17], [-$i0 < 26], [$i0 < 24]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: java.lang.String toString()>[[$i0 < 21]][[$i0 < 17]][[-$i0 < 26]][[$i0 < 24]]
$i0 < 21
$i0 < 17
-$i0 < 26
$i0 < 24
Good road: <androidx.core.text.PrecomputedTextCompat$Params: java.lang.String toString()>[[$i0 < 21], [$i0 < 17], [-$i0 < 26], [$i0 < 24]]--><android.graphics.Paint: java.lang.String getFontVariationSettings()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 10 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$yysi0 >= 30
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setStateDescription(java.lang.CharSequence)>[[-$yysi0 >= 30]]--><android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>
#1.the call statck between class <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> to <android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>has compatibility isssues！
-----------------------------------------
crashApis:3
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 11 Potential Issue API: SDKCheck of <android.os.Trace: boolean isEnabled()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 29
Good road: <androidx.core.os.TraceCompat: boolean isEnabled()>[[-i0 < 29]]--><android.os.Trace: boolean isEnabled()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 12 Potential Issue API: SDKCheck of <android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: android.net.Uri getLinkUri()>[]--><android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>
#1.the call statck between class <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: android.net.Uri getLinkUri()> to <android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>has compatibility isssues！
-----------------------------------------
crashApis:4
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 13 Potential Issue API: SDKCheck of <android.app.RemoteAction: boolean shouldShowIcon()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[[-$i0 < 28]]--><android.app.RemoteAction: boolean shouldShowIcon()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 14 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.Color valueOf(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color toColor(long)>[]--><android.graphics.Color: android.graphics.Color valueOf(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color toColor(long)> to <android.graphics.Color: android.graphics.Color valueOf(long)>has compatibility isssues！
-----------------------------------------
crashApis:5
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 15 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: java.lang.String getPackage()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: java.lang.String getPackage()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: java.lang.String getPackage()>has compatibility isssues！
-----------------------------------------
crashApis:6
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 16 Potential Issue API: SDKCheck of <android.view.View: void setAccessibilityHeading(boolean)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$5: void frameworkSet(android.view.View,java.lang.Boolean)>[]--><android.view.View: void setAccessibilityHeading(boolean)>
#1.the call statck between class <androidx.core.view.ViewCompat$5: void frameworkSet(android.view.View,java.lang.Boolean)> to <android.view.View: void setAccessibilityHeading(boolean)>has compatibility isssues！
-----------------------------------------
-i0 < 28
Good road: <androidx.preference.PreferenceCategory: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>[[-i0 < 28]]--><android.view.View: void setAccessibilityHeading(boolean)>
One road protect good!
crashApis:7
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 17 Potential Issue API: SDKCheck of <android.view.View: void removeOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$CompatImplApi28: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)>[]--><android.view.View: void removeOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)>
#1.the call statck between class <androidx.core.view.ViewCompat$CompatImplApi28: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)> to <android.view.View: void removeOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)>has compatibility isssues！
-----------------------------------------
crashApis:8
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 18 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: void <init>(java.util.Map)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat: void <init>(java.util.Map)>[[-$i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: void <init>(java.util.Map)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 19 Potential Issue API: SDKCheck of <android.app.RemoteInput: int getResultsSource(android.content.Intent)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: int getResultsSource(android.content.Intent)>[[-i0 < 28]]
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20]][[i0 < 26]]--><androidx.core.app.RemoteInput: int getResultsSource(android.content.Intent)>[[-i0 < 28]]
-i1 < 20
i0 < 26
-i0 < 28
Good road: <androidx.core.app.RemoteInput: void addResultsToIntent(androidx.core.app.RemoteInput[],android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: int getResultsSource(android.content.Intent)>[[-i0 < 28]]--><android.app.RemoteInput: int getResultsSource(android.content.Intent)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 20 Potential Issue API: SDKCheck of <android.app.NotificationManager: int getImportance()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.app.NotificationManagerCompat: int getImportance()>[[-$i0 < 24]]--><android.app.NotificationManager: int getImportance()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 21 Potential Issue API: SDKCheck of <android.media.MediaCodecInfo: boolean isHardwareAccelerated()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.mediacodec.MediaCodecUtil: java.util.ArrayList getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey,com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)>[[try]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isHardwareAccelerated(android.media.MediaCodecInfo)>[[-$i0 < 29]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isHardwareAcceleratedV29(android.media.MediaCodecInfo)>[]--><android.media.MediaCodecInfo: boolean isHardwareAccelerated()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 22 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: void <init>()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: void <init>()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: void <init>()>has compatibility isssues！
-----------------------------------------
crashApis:9
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 23 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setDescription(java.lang.String)> is checking!!!
The life time of api is [26,31]
5call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationChannel: void setDescription(java.lang.String)>
One road protect good!
4 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setDescription(java.lang.String)>
One road protect good!
-i3 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void onCreate()>[]--><com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int,int)>[[-i3 < 26]]--><android.app.NotificationChannel: void setDescription(java.lang.String)>
One road protect good!
-i3 < 26
Good road: <com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int)>[]--><com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int,int)>[[-i3 < 26]]--><android.app.NotificationChannel: void setDescription(java.lang.String)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setDescription(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 24 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setTextDirection(android.text.TextDirectionHeuristic)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i2 < 29
Good road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>[[-$i2 < 29]]--><android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setTextDirection(android.text.TextDirectionHeuristic)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 25 Potential Issue API: SDKCheck of <android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 26 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setMandatorySystemGestureInsets(android.graphics.Insets)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setMandatorySystemGestureInsets(android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setMandatorySystemGestureInsets(android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:10
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 27 Potential Issue API: SDKCheck of <android.graphics.Typeface.Builder: android.graphics.Typeface build()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.Typeface.Builder: android.graphics.Typeface build()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 28 Potential Issue API: SDKCheck of <android.view.WindowInsets: boolean equals(java.lang.Object)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 21
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <com.google.android.material.navigation.NavigationView: void onInsetsChanged(androidx.core.view.WindowInsetsCompat)>[]--><com.google.android.material.internal.NavigationMenuPresenter: void dispatchApplyWindowInsets(androidx.core.view.WindowInsetsCompat)>[]--><androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>[[-i0 < 21]]--><android.view.WindowInsets: boolean equals(java.lang.Object)>
#1.the call statck between class <com.google.android.material.navigation.NavigationView: void onInsetsChanged(androidx.core.view.WindowInsetsCompat)> to <android.view.WindowInsets: boolean equals(java.lang.Object)>has compatibility isssues！
-----------------------------------------
-i0 < 21
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>[]--><androidx.viewpager.widget.ViewPager$4: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>[]--><androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>[[-i0 < 21]]--><android.view.WindowInsets: boolean equals(java.lang.Object)>
#2.the call statck between class <androidx.core.view.ViewCompat$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> to <android.view.WindowInsets: boolean equals(java.lang.Object)>has compatibility isssues！
-----------------------------------------
crashApis:11
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 29 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.MenuItemCompat: void setTooltipText(android.view.MenuItem,java.lang.CharSequence)>[[-$i0 < 26]]--><android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 30 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)> is checking!!!
The life time of api is [3,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setWakeMode(int)>[]--><com.google.android.exoplayer2.WifiLockManager: void setEnabled(boolean)>[]--><android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)>
#1.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)> to <android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:12
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 31 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.accessibility.AccessibilityWindowInfoCompat: androidx.core.view.accessibility.AccessibilityNodeInfoCompat getAnchor()>[[-$i0 < 24]]--><android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 32 Potential Issue API: SDKCheck of <android.widget.TextView: int getAutoSizeMinTextSize()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 27
Good road: <androidx.core.widget.TextViewCompat: int getAutoSizeMinTextSize(android.widget.TextView)>[[-$i0 < 27]]--><android.widget.TextView: int getAutoSizeMinTextSize()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 33 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setConversationId(java.lang.String,java.lang.String)> is checking!!!
The life time of api is [30,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26], [-$i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]][[-$i0 < 30]]
-i0 < 26
$i0 >= 26
-$i0 < 30
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26], [-$i0 < 30]]--><android.app.NotificationChannel: void setConversationId(java.lang.String,java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26], [-$i0 < 30]]
###Multi invoking in one method, need manual check!!!--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]][[-$i0 < 30]]
$i0 >= 26
-$i0 < 30
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26], [-$i0 < 30]]--><android.app.NotificationChannel: void setConversationId(java.lang.String,java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 34 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setColorized(boolean)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setColorized(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 35 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setSound(android.net.Uri,android.media.AudioAttributes)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setSound(android.net.Uri,android.media.AudioAttributes)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setSound(android.net.Uri,android.media.AudioAttributes)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 36 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager.WifiLock: void release()> is checking!!!
The life time of api is [1,30]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void access$2000(com.google.android.exoplayer2.SimpleExoPlayer)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void updateWakeAndWifiLock()>[]--><com.google.android.exoplayer2.WifiLockManager: void setStayAwake(boolean)>[]--><com.google.android.exoplayer2.WifiLockManager: void updateWifiLock()>[]--><android.net.wifi.WifiManager.WifiLock: void release()>
#1.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void access$2000(com.google.android.exoplayer2.SimpleExoPlayer)> to <android.net.wifi.WifiManager.WifiLock: void release()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void release()>[]--><com.google.android.exoplayer2.WifiLockManager: void setStayAwake(boolean)>[]--><com.google.android.exoplayer2.WifiLockManager: void updateWifiLock()>[]--><android.net.wifi.WifiManager.WifiLock: void release()>
#2.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void release()> to <android.net.wifi.WifiManager.WifiLock: void release()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setWakeMode(int)>[]--><com.google.android.exoplayer2.WifiLockManager: void setEnabled(boolean)>[]--><com.google.android.exoplayer2.WifiLockManager: void updateWifiLock()>[]--><android.net.wifi.WifiManager.WifiLock: void release()>
#3.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)> to <android.net.wifi.WifiManager.WifiLock: void release()>has compatibility isssues！
-----------------------------------------
crashApis:13
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 37 Potential Issue API: SDKCheck of <android.widget.TextView: int getAutoSizeStepGranularity()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 27
Good road: <androidx.core.widget.TextViewCompat: int getAutoSizeStepGranularity(android.widget.TextView)>[[-$i0 < 27]]--><android.widget.TextView: int getAutoSizeStepGranularity()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 38 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: int getDesiredHeightResId()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: int getDesiredHeightResId()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: int getDesiredHeightResId()>has compatibility isssues！
-----------------------------------------
crashApis:14
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 39 Potential Issue API: SDKCheck of <android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)>[[-i0 < 26]]
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20]][[i0 < 26]]--><androidx.core.app.RemoteInput: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)>[[-i0 < 26]]
-i1 < 20
i0 < 26
-i0 < 26
Good road: <androidx.core.app.RemoteInput: void addResultsToIntent(androidx.core.app.RemoteInput[],android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)>[[-i0 < 26]]--><android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 40 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: java.lang.String getId()> is checking!!!
The life time of api is [25,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: java.lang.String getId()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: java.lang.String getId()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutManagerCompat$Api25Impl: java.lang.String getShortcutInfoWithLowestRank(java.util.List)>[]--><android.content.pm.ShortcutInfo: java.lang.String getId()>
#2.the call statck between class <androidx.core.content.pm.ShortcutManagerCompat$Api25Impl: java.lang.String getShortcutInfoWithLowestRank(java.util.List)> to <android.content.pm.ShortcutInfo: java.lang.String getId()>has compatibility isssues！
-----------------------------------------
crashApis:15
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 41 Potential Issue API: SDKCheck of <android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 29
Good road: <androidx.core.graphics.PaintKt: boolean setBlendMode(android.graphics.Paint,androidx.core.graphics.BlendModeCompat)>[]--><androidx.core.graphics.PaintCompat: boolean setBlendMode(android.graphics.Paint,androidx.core.graphics.BlendModeCompat)>[[-i0 < 29]]--><android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 42 Potential Issue API: SDKCheck of <android.view.ViewGroup: void suppressLayout(boolean)> is checking!!!
The life time of api is [29,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-$i0 < 29
Good road: <androidx.transition.ChangeBounds$9: void onTransitionResume(androidx.transition.Transition)>[]--><androidx.transition.ViewGroupUtils: void suppressLayout(android.view.ViewGroup,boolean)>[[-$i0 < 29]]--><android.view.ViewGroup: void suppressLayout(boolean)>
One road protect good!
-$i0 < 29
Good road: <androidx.transition.Visibility$DisappearListener: void suppressLayout(boolean)>[]--><androidx.transition.ViewGroupUtils: void suppressLayout(android.view.ViewGroup,boolean)>[[-$i0 < 29]]--><android.view.ViewGroup: void suppressLayout(boolean)>
One road protect good!
-$i0 < 29
Good road: <androidx.transition.ChangeBounds$9: void onTransitionCancel(androidx.transition.Transition)>[]--><androidx.transition.ViewGroupUtils: void suppressLayout(android.view.ViewGroup,boolean)>[[-$i0 < 29]]--><android.view.ViewGroup: void suppressLayout(boolean)>
One road protect good!
-$i0 < 29
Good road: <androidx.transition.ChangeBounds$9: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.transition.ViewGroupUtils: void suppressLayout(android.view.ViewGroup,boolean)>[[-$i0 < 29]]--><android.view.ViewGroup: void suppressLayout(boolean)>
One road protect good!
-$i0 < 29
Good road: <androidx.transition.ChangeBounds: android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues)>[]--><androidx.transition.ViewGroupUtils: void suppressLayout(android.view.ViewGroup,boolean)>[[-$i0 < 29]]--><android.view.ViewGroup: void suppressLayout(boolean)>
One road protect good!
-$i0 < 29
Good road: <androidx.transition.ChangeBounds$9: void onTransitionPause(androidx.transition.Transition)>[]--><androidx.transition.ViewGroupUtils: void suppressLayout(android.view.ViewGroup,boolean)>[[-$i0 < 29]]--><android.view.ViewGroup: void suppressLayout(boolean)>
One road protect good!
containsStatic:false
containsTry:true
7call by main package
-----------------------------------------
#################################################
N 43 Potential Issue API: SDKCheck of <android.app.Person: android.graphics.drawable.Icon getIcon()> is checking!!!
The life time of api is [28,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: android.graphics.drawable.Icon getIcon()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: android.graphics.drawable.Icon getIcon()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: android.graphics.drawable.Icon getIcon()>
One road protect good!
containsStatic:true
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 44 Potential Issue API: SDKCheck of <android.graphics.Color: float red(long)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float getRed(long)>[]--><android.graphics.Color: float red(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float getRed(long)> to <android.graphics.Color: float red(long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component1(long)>[]--><android.graphics.Color: float red(long)>
#2.the call statck between class <androidx.core.graphics.ColorKt: float component1(long)> to <android.graphics.Color: float red(long)>has compatibility isssues！
-----------------------------------------
crashApis:16
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 45 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])> is checking!!!
The life time of api is [29,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 46 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 47 Potential Issue API: SDKCheck of <android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 28
Good road: <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>[[-i0 < 28]]--><android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 48 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: int getIconMaxHeight()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: int getIconMaxHeight(android.content.Context)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: int getIconMaxHeight()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 49 Potential Issue API: SDKCheck of <android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus.Callback,android.os.Handler)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[-$i0 < 24], [$i0 < 30], [try]]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[-$i0 < 24]][[$i0 < 30]][[try]]
-$i0 < 24
$i0 < 30
try
Good road with try: <androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[-$i0 < 24], [$i0 < 30], [try]]--><android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus.Callback,android.os.Handler)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 50 Potential Issue API: SDKCheck of <android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)> is checking!!!
The life time of api is [24,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
$i0 >= 24
Good road: <com.google.android.exoplayer2.util.Util: boolean checkCleartextTrafficPermitted(android.net.Uri[])>[[$i0 >= 24]]--><android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)>
One road protect good!
-$i0 < 24
Good road: <okhttp3.internal.platform.AndroidPlatform: boolean isCleartextTrafficPermitted(java.lang.String)>[[-$i0 < 24]]--><android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 23 
Error road: <okhttp3.internal.platform.Android10Platform: boolean isCleartextTrafficPermitted(java.lang.String)>[]--><android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)>
#3.the call statck between class <okhttp3.internal.platform.Android10Platform: boolean isCleartextTrafficPermitted(java.lang.String)> to <android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:17
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 51 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle: void <init>(java.lang.CharSequence)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[i0 < 28]]
-i0 < 24
i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28]]--><android.app.Notification.MessagingStyle: void <init>(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 52 Potential Issue API: SDKCheck of <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)> is checking!!!
The life time of api is [24,31]
26call roads:
1 Mainhead roads:
!!!this api will crash on sdk 23 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><agersant.polaris.PolarisApplication: void onCreate()>[]--><agersant.polaris.PolarisState: void <init>(android.content.Context)>[]--><agersant.polaris.PolarisPlayer: void <init>(android.content.Context,agersant.polaris.api.API,agersant.polaris.PlaybackQueue)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
25 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#1.the call statck between class <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#2.the call statck between class <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#3.the call statck between class <com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector)>[]--><com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean)>[]--><com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener)>[]--><com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioCapabilities,com.google.android.exoplayer2.audio.AudioProcessor[])>[]--><com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioSink)>[]--><com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioSink)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#4.the call statck between class <com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioSink)>[]--><com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioSink)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#5.the call statck between class <com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,boolean,android.os.Handler,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioSink)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int,long)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#6.the call statck between class <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int,long)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.offline.DownloadHelper: com.google.android.exoplayer2.offline.DownloadHelper forDash(android.net.Uri,com.google.android.exoplayer2.upstream.DataSource$Factory,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.trackselection.DefaultTrackSelector$Parameters)>[]--><com.google.android.exoplayer2.util.Util: com.google.android.exoplayer2.RendererCapabilities[] getRendererCapabilities(com.google.android.exoplayer2.RenderersFactory)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#7.the call statck between class <com.google.android.exoplayer2.offline.DownloadHelper: com.google.android.exoplayer2.offline.DownloadHelper forDash(android.net.Uri,com.google.android.exoplayer2.upstream.DataSource$Factory,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.trackselection.DefaultTrackSelector$Parameters)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.video.VideoDecoderInputBuffer: void <init>()>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#8.the call statck between class <com.google.android.exoplayer2.video.VideoDecoderInputBuffer: void <init>()> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#9.the call statck between class <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter)> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer$Builder: com.google.android.exoplayer2.SimpleExoPlayer build()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.upstream.BandwidthMeter,com.google.android.exoplayer2.analytics.AnalyticsCollector,com.google.android.exoplayer2.util.Clock,android.os.Looper)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: com.google.android.exoplayer2.Renderer[] createRenderers(android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.text.TextOutput,com.google.android.exoplayer2.metadata.MetadataOutput,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.DefaultRenderersFactory: void buildVideoRenderers(android.content.Context,int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>[]--><com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void <init>(android.content.Context,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,long,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,android.os.Handler,com.google.android.exoplayer2.video.VideoRendererEventListener,int)>[]--><com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void <init>(int,com.google.android.exoplayer2.mediacodec.MediaCodecSelector,com.google.android.exoplayer2.drm.DrmSessionManager,boolean,boolean,float)>[]--><com.google.android.exoplayer2.decoder.DecoderInputBuffer: void <init>(int)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo: void <init>()>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo,com.google.android.exoplayer2.decoder.CryptoInfo$1)>[]--><com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void <init>(android.media.MediaCodec$CryptoInfo)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
#10.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer$Builder: com.google.android.exoplayer2.SimpleExoPlayer build()> to <android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:18
crashApisInMain:1
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 53 Potential Issue API: SDKCheck of <android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 27
Good road: <androidx.core.widget.TextViewCompat: void setAutoSizeTextTypeUniformWithPresetSizes(android.widget.TextView,int[],int)>[[-$i1 < 27]]--><android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 54 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsetsIgnoringVisibility(int)>[]--><android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsetsIgnoringVisibility(int)> to <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>has compatibility isssues！
-----------------------------------------
crashApis:19
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 55 Potential Issue API: SDKCheck of <android.media.session.MediaSessionManager.RemoteUserInfo: int getPid()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(android.media.session.MediaSessionManager$RemoteUserInfo)>[]--><android.media.session.MediaSessionManager.RemoteUserInfo: int getPid()>
#1.the call statck between class <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(android.media.session.MediaSessionManager$RemoteUserInfo)> to <android.media.session.MediaSessionManager.RemoteUserInfo: int getPid()>has compatibility isssues！
-----------------------------------------
crashApis:20
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 56 Potential Issue API: SDKCheck of <android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.DisplayCutoutCompat: void <init>(android.graphics.Rect,java.util.List)>[[-$i0 < 28]]--><android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[i0 < 29], [$yysi0 >= 30], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[i0 < 29]][[$yysi0 >= 30]][[-i0 < 28]]
i0 < 29
$yysi0 >= 30
-i0 < 28
Good road: <androidx.core.view.DisplayCutoutCompat: void <init>(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[]--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[i0 < 29], [$yysi0 >= 30], [-i0 < 28]]--><android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>
One road protect good!
containsStatic:true
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 57 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: boolean isImportantForAccessibility()>[[-$i0 < 24]]--><android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 58 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle.Message: void <init>(java.lang.CharSequence,long,java.lang.CharSequence)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i0 < 28
!!!this api will crash on sdk 23 
Error road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[i0 < 28]]--><android.app.Notification.MessagingStyle.Message: void <init>(java.lang.CharSequence,long,java.lang.CharSequence)>
#1.the call statck between class <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()> to <android.app.Notification.MessagingStyle.Message: void <init>(java.lang.CharSequence,long,java.lang.CharSequence)>has compatibility isssues！
-----------------------------------------
crashApis:21
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 59 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: void <init>(android.content.res.Resources,int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[[try]]--><android.graphics.fonts.Font.Builder: void <init>(android.content.res.Resources,int)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.Font.Builder: void <init>(android.content.res.Resources,int)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 60 Potential Issue API: SDKCheck of <android.graphics.Typeface.Builder: void <init>(java.io.FileDescriptor)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.Typeface.Builder: void <init>(java.io.FileDescriptor)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 61 Potential Issue API: SDKCheck of <android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[]--><android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>
#1.the call statck between class <androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)> to <android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:22
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 62 Potential Issue API: SDKCheck of <android.telephony.mbms.ServiceInfo: java.util.Set getNamedContentLocales()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i0 >= 28
Good road: <androidx.core.telephony.mbms.MbmsHelper: java.lang.CharSequence getBestNameForService(android.content.Context,android.telephony.mbms.ServiceInfo)>[[i0 >= 28]]--><android.telephony.mbms.ServiceInfo: java.util.Set getNamedContentLocales()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 63 Potential Issue API: SDKCheck of <android.view.Window.Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 64 Potential Issue API: SDKCheck of <android.view.View: void dispatchFinishTemporaryDetach()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.view.ViewCompat: void dispatchFinishTemporaryDetach(android.view.View)>[[-i0 < 24]]--><android.view.View: void dispatchFinishTemporaryDetach()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 65 Potential Issue API: SDKCheck of <android.app.job.JobServiceEngine: android.os.IBinder getBinder()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.JobIntentService$JobServiceEngineImpl: android.os.IBinder compatGetBinder()>[]--><android.app.job.JobServiceEngine: android.os.IBinder getBinder()>
#1.the call statck between class <androidx.core.app.JobIntentService$JobServiceEngineImpl: android.os.IBinder compatGetBinder()> to <android.app.job.JobServiceEngine: android.os.IBinder getBinder()>has compatibility isssues！
-----------------------------------------
crashApis:23
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 66 Potential Issue API: SDKCheck of <android.app.Notification.Action: boolean isContextual()> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[i0 < 28], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[i0 < 28]][[i0 < 24]][[-i0 < 29]][[i0 < 23]][[i0 < 20]]
i0 < 28
i0 < 24
-i0 < 29
i0 < 23
i0 < 20
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[i0 < 28], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20]]--><android.app.Notification.Action: boolean isContextual()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [i0 < 24], [-i1 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28]][[i0 < 24]][[-i1 < 29]]
i0 < 28
i0 < 24
-i1 < 29
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [i0 < 24], [-i1 < 29]]--><android.app.Notification.Action: boolean isContextual()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 67 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: java.lang.CharSequence getDisabledMessage()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: java.lang.CharSequence getDisabledMessage()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: java.lang.CharSequence getDisabledMessage()>has compatibility isssues！
-----------------------------------------
crashApis:24
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 68 Potential Issue API: SDKCheck of <android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$yysi0 < 28
Good road: <androidx.core.text.util.LinkifyCompat: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>[[-$yysi0 < 28]]--><android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 69 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder recoverBuilder(android.content.Context,android.app.Notification)> is checking!!!
The life time of api is [24,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createBigContentView()>[[-i0 < 24], [i0 >= 16]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createBigContentView()>[[-i0 < 24]][[i0 >= 16]]
-i0 < 24
i0 >= 16
Good road: <androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createBigContentView()>[[-i0 < 24], [i0 >= 16]]--><android.app.Notification.Builder: android.app.Notification.Builder recoverBuilder(android.content.Context,android.app.Notification)>
One road protect good!
-$i0 < 24
Good road: <androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createContentView()>[[-$i0 < 24]]--><android.app.Notification.Builder: android.app.Notification.Builder recoverBuilder(android.content.Context,android.app.Notification)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createHeadsUpContentView()>[[-i0 < 24], [i0 >= 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createHeadsUpContentView()>[[-i0 < 24]][[i0 >= 21]]
-i0 < 24
i0 >= 21
Good road: <androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createHeadsUpContentView()>[[-i0 < 24], [i0 >= 21]]--><android.app.Notification.Builder: android.app.Notification.Builder recoverBuilder(android.content.Context,android.app.Notification)>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 70 Potential Issue API: SDKCheck of <android.view.View: java.lang.CharSequence getStateDescription()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.ViewCompat$4: java.lang.CharSequence frameworkGet(android.view.View)>[]--><android.view.View: java.lang.CharSequence getStateDescription()>
#1.the call statck between class <androidx.core.view.ViewCompat$4: java.lang.CharSequence frameworkGet(android.view.View)> to <android.view.View: java.lang.CharSequence getStateDescription()>has compatibility isssues！
-----------------------------------------
crashApis:25
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 71 Potential Issue API: SDKCheck of <android.graphics.Color: float[] getComponents()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: float[] getComponents()>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: float[] getComponents()>has compatibility isssues！
-----------------------------------------
crashApis:26
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 72 Potential Issue API: SDKCheck of <android.app.Notification.Action: int getSemanticAction()> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[i0 < 24], [i0 < 23], [i0 < 20], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[i0 < 24]][[i0 < 23]][[i0 < 20]][[-i0 < 28]]
i0 < 24
i0 < 23
i0 < 20
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[i0 < 24], [i0 < 23], [i0 < 20], [-i0 < 28]]--><android.app.Notification.Action: int getSemanticAction()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 24], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 24]][[-i0 < 28]]
i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 24], [-i0 < 28]]--><android.app.Notification.Action: int getSemanticAction()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 73 Potential Issue API: SDKCheck of <android.app.RemoteAction: android.app.PendingIntent getActionIntent()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><android.app.RemoteAction: android.app.PendingIntent getActionIntent()>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)> to <android.app.RemoteAction: android.app.PendingIntent getActionIntent()>has compatibility isssues！
-----------------------------------------
crashApis:27
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 74 Potential Issue API: SDKCheck of <android.graphics.Color: boolean isSrgb(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: boolean isSrgb(long)>[]--><android.graphics.Color: boolean isSrgb(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: boolean isSrgb(long)> to <android.graphics.Color: boolean isSrgb(long)>has compatibility isssues！
-----------------------------------------
crashApis:28
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 75 Potential Issue API: SDKCheck of <android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String,android.os.Bundle)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi26: void notifyChildrenChangedForFramework(java.lang.String,android.os.Bundle)>[]--><android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String,android.os.Bundle)>
#1.the call statck between class <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi26: void notifyChildrenChangedForFramework(java.lang.String,android.os.Bundle)> to <android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String,android.os.Bundle)>has compatibility isssues！
-----------------------------------------
crashApis:29
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 76 Potential Issue API: SDKCheck of <android.media.MediaCodec.CryptoInfo: void setPattern(android.media.MediaCodec.CryptoInfo.Pattern)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void set(int,int)>[]--><android.media.MediaCodec.CryptoInfo: void setPattern(android.media.MediaCodec.CryptoInfo.Pattern)>
#1.the call statck between class <com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void set(int,int)> to <android.media.MediaCodec.CryptoInfo: void setPattern(android.media.MediaCodec.CryptoInfo.Pattern)>has compatibility isssues！
-----------------------------------------
crashApis:30
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 77 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsets(int,androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsets(int,androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:31
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 78 Potential Issue API: SDKCheck of <android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat: androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)>[[-i0 < 21], [i0 < 29], [try], [i0 < 23]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat: androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)>[[-i0 < 21]][[i0 < 29]][[try]][[i0 < 23]]
-i0 < 21
i0 < 29
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)>[[-i0 < 21], [i0 < 29], [try], [i0 < 23]]--><android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 79 Potential Issue API: SDKCheck of <android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 30
Good road: <androidx.core.app.NotificationManagerCompat: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)>[[-$i0 < 30]]--><android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 80 Potential Issue API: SDKCheck of <android.app.Person: java.lang.String getUri()> is checking!!!
The life time of api is [28,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.String getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.String getUri()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.String getUri()>
One road protect good!
containsStatic:true
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 81 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.widget.RemoteViews createContentView()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createContentView()>[[-$i0 < 24]]--><android.app.Notification.Builder: android.widget.RemoteViews createContentView()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 82 Potential Issue API: SDKCheck of <android.graphics.Color: int toArgb()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.drawable.ColorDrawableKt: android.graphics.drawable.ColorDrawable toDrawable(android.graphics.Color)>[]--><android.graphics.Color: int toArgb()>
#1.the call statck between class <androidx.core.graphics.drawable.ColorDrawableKt: android.graphics.drawable.ColorDrawable toDrawable(android.graphics.Color)> to <android.graphics.Color: int toArgb()>has compatibility isssues！
-----------------------------------------
crashApis:32
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 83 Potential Issue API: SDKCheck of <android.location.GnssStatus: float getElevationDegrees(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: float getElevationDegrees(int)>[]--><android.location.GnssStatus: float getElevationDegrees(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: float getElevationDegrees(int)> to <android.location.GnssStatus: float getElevationDegrees(int)>has compatibility isssues！
-----------------------------------------
crashApis:33
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 84 Potential Issue API: SDKCheck of <android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 85 Potential Issue API: SDKCheck of <android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)> is checking!!!
The life time of api is [26,31]
3call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)>
One road protect good!
2 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void deleteNotificationChannel(java.lang.String)>[[-$i0 < 26]]--><android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void deleteUnlistedNotificationChannels(java.util.Collection)>[[-$i0 < 26]]--><android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 86 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeight(int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeight(int)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeight(int)>has compatibility isssues！
-----------------------------------------
crashApis:34
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 87 Potential Issue API: SDKCheck of <android.app.Notification: java.lang.String getShortcutId()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: java.lang.String getShortcutId(android.app.Notification)>[[-$i0 < 26]]--><android.app.Notification: java.lang.String getShortcutId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 88 Potential Issue API: SDKCheck of <android.app.NotificationChannelGroup: void <init>(java.lang.String,java.lang.CharSequence)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroupsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26]]--><android.app.NotificationChannelGroup: void <init>(java.lang.String,java.lang.CharSequence)>
One road protect good!
i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroup(androidx.core.app.NotificationChannelGroupCompat)>[]--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26]]--><android.app.NotificationChannelGroup: void <init>(java.lang.String,java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 89 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean isPinned()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean isPinned()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: boolean isPinned()>has compatibility isssues！
-----------------------------------------
crashApis:35
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 90 Potential Issue API: SDKCheck of <android.location.GnssStatus: boolean hasCarrierFrequencyHz(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 26
Good road: <androidx.core.location.GnssStatusWrapper: boolean hasCarrierFrequencyHz(int)>[[-$i1 < 26]]--><android.location.GnssStatus: boolean hasCarrierFrequencyHz(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 91 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:36
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 92 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle.Message: android.app.Notification.MessagingStyle.Message setData(java.lang.String,android.net.Uri)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i0 < 28
!!!this api will crash on sdk 23 
Error road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[i0 < 28]]--><android.app.Notification.MessagingStyle.Message: android.app.Notification.MessagingStyle.Message setData(java.lang.String,android.net.Uri)>
#1.the call statck between class <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()> to <android.app.Notification.MessagingStyle.Message: android.app.Notification.MessagingStyle.Message setData(java.lang.String,android.net.Uri)>has compatibility isssues！
-----------------------------------------
crashApis:37
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 93 Potential Issue API: SDKCheck of <android.app.RemoteInput: int getEditChoicesBeforeSending()> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
-i0 < 29
Good road: <androidx.core.app.NotificationCompat$CarExtender: androidx.core.app.NotificationCompat$CarExtender$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle)>[[-i0 < 29]]--><android.app.RemoteInput: int getEditChoicesBeforeSending()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 20], [i0 < 23]]--><androidx.core.app.RemoteInput: androidx.core.app.RemoteInput fromPlatform(android.app.RemoteInput)>[[-$i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 20]][[i0 < 23]]--><androidx.core.app.RemoteInput: androidx.core.app.RemoteInput fromPlatform(android.app.RemoteInput)>[[-$i0 < 29]]
-i0 < 20
i0 < 23
-$i0 < 29
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 20], [i0 < 23]]--><androidx.core.app.RemoteInput: androidx.core.app.RemoteInput fromPlatform(android.app.RemoteInput)>[[-$i0 < 29]]--><android.app.RemoteInput: int getEditChoicesBeforeSending()>
One road protect good!
-i1 < 29
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[-i1 < 29]]--><android.app.RemoteInput: int getEditChoicesBeforeSending()>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 94 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <com.google.android.material.textfield.DropdownMenuEndIconDelegate$3: void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: boolean isShowingHintText()>[[-$i0 < 26]]--><android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 95 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setBubbleMetadata(android.app.Notification.BubbleMetadata)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 28]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[-i0 < 29]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 28
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
-i0 < 29
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setBubbleMetadata(android.app.Notification.BubbleMetadata)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 96 Potential Issue API: SDKCheck of <android.location.LocationManager: boolean registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus.Callback)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[try], [-$i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[try]][[-$i0 < 30]]
try
Good road with try: <androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[try], [-$i0 < 30]]--><android.location.LocationManager: boolean registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus.Callback)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 97 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i2 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: void setNumericShortcut(android.view.MenuItem,char,int)>[[], [-$i2 < 26]]--><android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>
#1.the call statck between class <androidx.core.view.MenuItemCompat: void setNumericShortcut(android.view.MenuItem,char,int)> to <android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>has compatibility isssues！
-----------------------------------------
crashApis:38
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 98 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: int getRestrictBackgroundStatus()> is checking!!!
The life time of api is [24,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
!!!this api will crash on sdk 31 
Error road: <androidx.core.net.ConnectivityManagerCompat: int getRestrictBackgroundStatus(android.net.ConnectivityManager)>[[-$i0 < 24]]--><android.net.ConnectivityManager: int getRestrictBackgroundStatus()>
#1.the call statck between class <androidx.core.net.ConnectivityManagerCompat: int getRestrictBackgroundStatus(android.net.ConnectivityManager)> to <android.net.ConnectivityManager: int getRestrictBackgroundStatus()>has compatibility isssues！
-----------------------------------------
crashApis:39
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 99 Potential Issue API: SDKCheck of <android.app.NotificationManager: java.util.List getNotificationChannelGroups()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[$i0 < 28], [-$i0 < 26]]--><androidx.core.app.NotificationManagerCompat: java.util.List getNotificationChannelGroups()>[[-$i0 < 26]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[$i0 < 28]][[-$i0 < 26]]--><androidx.core.app.NotificationManagerCompat: java.util.List getNotificationChannelGroups()>[[-$i0 < 26]]
$i0 < 28
-$i0 < 26
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[$i0 < 28], [-$i0 < 26]]--><androidx.core.app.NotificationManagerCompat: java.util.List getNotificationChannelGroups()>[[-$i0 < 26]]--><android.app.NotificationManager: java.util.List getNotificationChannelGroups()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 100 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)> is checking!!!
The life time of api is [26,31]
18call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: int onStartCommand(android.content.Intent,int,int)>[]--><agersant.polaris.PolarisPlaybackService: void handleIntent(android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
17 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
One road protect good!
containsStatic:false
containsTry:true
18call by main package
-----------------------------------------
#################################################
N 101 Potential Issue API: SDKCheck of <android.view.View: void setScreenReaderFocusable(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$2: void frameworkSet(android.view.View,java.lang.Boolean)>[]--><android.view.View: void setScreenReaderFocusable(boolean)>
#1.the call statck between class <androidx.core.view.ViewCompat$2: void frameworkSet(android.view.View,java.lang.Boolean)> to <android.view.View: void setScreenReaderFocusable(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:40
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 102 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>[]--><android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()> to <android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>has compatibility isssues！
-----------------------------------------
crashApis:41
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 103 Potential Issue API: SDKCheck of <android.app.Notification.DecoratedCustomViewStyle: void <init>()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.app.NotificationCompat$DecoratedCustomViewStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-$i0 < 24]]--><android.app.Notification.DecoratedCustomViewStyle: void <init>()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 104 Potential Issue API: SDKCheck of <android.app.NotificationManager: java.util.List getNotificationChannels()> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void deleteUnlistedNotificationChannels(java.util.Collection)>[[-$i0 < 26]]--><android.app.NotificationManager: java.util.List getNotificationChannels()>
One road protect good!
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: java.util.List getNotificationChannels()>[[-$i0 < 26]]--><android.app.NotificationManager: java.util.List getNotificationChannels()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 105 Potential Issue API: SDKCheck of <android.view.ViewGroup: int getChildDrawingOrder(int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$z0 == 0
$i0 != 28
i1 < 21
-$i1 < 29
Good road: <androidx.transition.ChangeTransform: android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues)>[[-$z0 == 0]]--><androidx.transition.ChangeTransform: void createGhostView(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues)>[]--><androidx.transition.GhostViewUtils: androidx.transition.GhostView addGhost(android.view.View,android.view.ViewGroup,android.graphics.Matrix)>[[$i0 != 28]]--><androidx.transition.GhostViewPort: androidx.transition.GhostViewPort addGhost(android.view.View,android.view.ViewGroup,android.graphics.Matrix)>[]--><androidx.transition.GhostViewHolder: void addGhostView(androidx.transition.GhostViewPort)>[]--><androidx.transition.GhostViewHolder: int getInsertIndex(java.util.ArrayList)>[]--><androidx.transition.GhostViewHolder: boolean isOnTop(java.util.ArrayList,java.util.ArrayList)>[]--><androidx.transition.GhostViewHolder: boolean isOnTop(android.view.View,android.view.View)>[[i1 < 21]]--><androidx.transition.ViewGroupUtils: int getChildDrawingOrder(android.view.ViewGroup,int)>[[-$i1 < 29]]--><android.view.ViewGroup: int getChildDrawingOrder(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 106 Potential Issue API: SDKCheck of <android.location.GnssStatus: float getAzimuthDegrees(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: float getAzimuthDegrees(int)>[]--><android.location.GnssStatus: float getAzimuthDegrees(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: float getAzimuthDegrees(int)> to <android.location.GnssStatus: float getAzimuthDegrees(int)>has compatibility isssues！
-----------------------------------------
crashApis:42
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 107 Potential Issue API: SDKCheck of <android.app.Notification: int getGroupAlertBehavior()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationCompat: int getGroupAlertBehavior(android.app.Notification)>[[-$i0 < 26]]--><android.app.Notification: int getGroupAlertBehavior()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 108 Potential Issue API: SDKCheck of <android.view.View: void setKeyboardNavigationCluster(boolean)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!--><com.google.android.material.appbar.AppBarLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>[[i2 < 21], [$i0 < 21], [-$i0 < 26]]
###Multi invoking in one method, need manual check!!!--><com.google.android.material.appbar.AppBarLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>[[i2 < 21]][[$i0 < 21]][[-$i0 < 26]]
i2 < 21
$i0 < 21
-$i0 < 26
Good road: <com.google.android.material.appbar.AppBarLayout: void <init>(android.content.Context)>[]--><com.google.android.material.appbar.AppBarLayout: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.appbar.AppBarLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>[[i2 < 21], [$i0 < 21], [-$i0 < 26]]--><android.view.View: void setKeyboardNavigationCluster(boolean)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: void setKeyboardNavigationCluster(android.view.View,boolean)>[[-$i0 < 26]]--><android.view.View: void setKeyboardNavigationCluster(boolean)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 109 Potential Issue API: SDKCheck of <android.text.PrecomputedText: int getParagraphEnd(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 29
Good road: <androidx.core.text.PrecomputedTextCompat: int getParagraphEnd(int)>[[-$i1 < 29]]--><android.text.PrecomputedText: int getParagraphEnd(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 110 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int displayCutout()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int displayCutout()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int displayCutout()>has compatibility isssues！
-----------------------------------------
crashApis:43
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 111 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.Network getActiveNetwork()> is checking!!!
The life time of api is [23,30]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean checkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.Network getActiveNetwork()>
#1.the call statck between class <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)> to <android.net.ConnectivityManager: android.net.Network getActiveNetwork()>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void recheckNotMetNetworkRequirements()>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.Network getActiveNetwork()>
#2.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.ConnectivityManager: android.net.Network getActiveNetwork()>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.Network getActiveNetwork()>
#3.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.ConnectivityManager: android.net.Network getActiveNetwork()>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void setRequirements(com.google.android.exoplayer2.scheduler.Requirements)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.Network getActiveNetwork()>
#4.the call statck between class <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)> to <android.net.ConnectivityManager: android.net.Network getActiveNetwork()>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.Network getActiveNetwork()>
#5.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.ConnectivityManager: android.net.Network getActiveNetwork()>has compatibility isssues！
-----------------------------------------
crashApis:44
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 112 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: android.content.Intent[] getIntents()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: android.content.Intent[] getIntents()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: android.content.Intent[] getIntents()>has compatibility isssues！
-----------------------------------------
crashApis:45
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 113 Potential Issue API: SDKCheck of <android.os.Process: boolean isApplicationUid(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.ProcessCompat$Api24Impl: boolean isApplicationUid(int)>[]--><android.os.Process: boolean isApplicationUid(int)>
#1.the call statck between class <androidx.core.os.ProcessCompat$Api24Impl: boolean isApplicationUid(int)> to <android.os.Process: boolean isApplicationUid(int)>has compatibility isssues！
-----------------------------------------
crashApis:46
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 114 Potential Issue API: SDKCheck of <android.view.View: void setTransitionAlpha(float)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: void setTransitionAlpha(android.view.View,float)>[]--><android.view.View: void setTransitionAlpha(float)>
#1.the call statck between class <androidx.transition.ViewUtilsApi29: void setTransitionAlpha(android.view.View,float)> to <android.view.View: void setTransitionAlpha(float)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <androidx.transition.ViewUtilsApi19: void setTransitionAlpha(android.view.View,float)>[[try]]--><android.view.View: void setTransitionAlpha(float)>
One road protect good!
crashApis:47
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 115 Potential Issue API: SDKCheck of <android.app.Notification: java.lang.CharSequence getSettingsText()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: java.lang.CharSequence getSettingsText(android.app.Notification)>[[-$i0 < 26]]--><android.app.Notification: java.lang.CharSequence getSettingsText()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 116 Potential Issue API: SDKCheck of <android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 25
Good road: <androidx.core.view.inputmethod.InputConnectionCompat: boolean commitContent(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle)>[[-i1 < 25]]--><android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
One road protect good!
-i1 < 25
Good road: <androidx.core.view.inputmethod.InputConnectionCompat: boolean commitContent(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle)>[[-i1 < 25]]--><androidx.core.view.inputmethod.InputConnectionCompat$1: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>[[]]--><android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 117 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)> is checking!!!
The life time of api is [21,30]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean checkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>
#1.the call statck between class <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)> to <android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void recheckNotMetNetworkRequirements()>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>
#2.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>
#3.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void setRequirements(com.google.android.exoplayer2.scheduler.Requirements)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>
#4.the call statck between class <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)> to <android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>
#5.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>has compatibility isssues！
-----------------------------------------
crashApis:48
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 118 Potential Issue API: SDKCheck of <android.text.PrecomputedText: int getParagraphCount()> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.text.PrecomputedTextCompat: int getParagraphStart(int)>[]--><androidx.core.text.PrecomputedTextCompat: int getParagraphCount()>[[-$i0 < 29]]--><android.text.PrecomputedText: int getParagraphCount()>
One road protect good!
-$i0 < 29
Good road: <androidx.core.text.PrecomputedTextCompat: int getParagraphEnd(int)>[]--><androidx.core.text.PrecomputedTextCompat: int getParagraphCount()>[[-$i0 < 29]]--><android.text.PrecomputedText: int getParagraphCount()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 119 Potential Issue API: SDKCheck of <android.widget.AutoCompleteTextView: void refreshAutoCompleteResults()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 120 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person.Builder setBot(boolean)> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 121 Potential Issue API: SDKCheck of <android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)> is checking!!!
The life time of api is [28,31]
13call roads:
0 Mainhead roads:
13 Packageshead roads:
-$i2 < 29
Good road: <androidx.preference.PreferenceRecyclerViewAccessibilityDelegate$1: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.core.widget.NestedScrollView$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.core.text.SpannedStringKt: java.lang.Object[] getSpans$default(android.text.Spanned,int,int,int,java.lang.Object)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.core.text.SpannedStringKt: java.lang.Object[] getSpans(android.text.Spanned,int,int)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.core.text.SpannableStringKt: void clearSpans(android.text.Spannable)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <com.google.android.material.snackbar.BaseTransientBottomBar$5: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void addSpansToExtras(java.lang.CharSequence,android.view.View)>[[-i0 >= 26], [-i0 < 19]]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]
###Multi invoking in one method, need manual check!!!--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void addSpansToExtras(java.lang.CharSequence,android.view.View)>[[-i0 >= 26]][[-i0 < 19]]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]
-i0 >= 26
-i0 < 19
-$i2 < 29
Good road: <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void addSpansToExtras(java.lang.CharSequence,android.view.View)>[[-i0 >= 26], [-i0 < 19]]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate$ItemDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
$yysi0 < 28
$yysi0 < 28
-$i2 < 29
Good road: <androidx.core.text.util.LinkifyCompat: boolean addLinks(android.widget.TextView,int)>[[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,int)>[[$yysi0 < 28]]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
-$i2 < 29
Good road: <com.google.android.material.bottomsheet.BottomSheetDialog$2: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean performClickableSpanAction(int,android.view.View)>[]--><androidx.core.view.AccessibilityDelegateCompat: boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence)>[]--><androidx.core.text.PrecomputedTextCompat: java.lang.Object[] getSpans(int,int,java.lang.Class)>[[-$i2 < 29]]--><android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
One road protect good!
containsStatic:true
containsTry:false
14call by main package
-----------------------------------------
#################################################
N 122 Potential Issue API: SDKCheck of <android.app.job.JobWorkItem: android.content.Intent getIntent()> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.JobIntentService$JobServiceEngineImpl: androidx.core.app.JobIntentService$GenericWorkItem dequeueWork()>[]--><android.app.job.JobWorkItem: android.content.Intent getIntent()>
#1.the call statck between class <androidx.core.app.JobIntentService$JobServiceEngineImpl: androidx.core.app.JobIntentService$GenericWorkItem dequeueWork()> to <android.app.job.JobWorkItem: android.content.Intent getIntent()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem: android.content.Intent getIntent()>[]--><android.app.job.JobWorkItem: android.content.Intent getIntent()>
#2.the call statck between class <androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem: android.content.Intent getIntent()> to <android.app.job.JobWorkItem: android.content.Intent getIntent()>has compatibility isssues！
-----------------------------------------
crashApis:49
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 123 Potential Issue API: SDKCheck of <android.app.Notification.Builder: void <init>(android.content.Context,java.lang.String)> is checking!!!
The life time of api is [26,31]
3call roads:
1 Mainhead roads:
i0 < 26
-i0 <= 25
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[i0 < 26]]--><agersant.polaris.PolarisPlaybackService: void pushSystemNotification()>[[-i0 <= 25]]--><android.app.Notification.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
2 Packageshead roads:
-i0 < 26
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 26]]--><android.app.Notification.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
-i0 <= 25
Good road: <agersant.polaris.PolarisPlaybackService: void access$600(agersant.polaris.PolarisPlaybackService)>[]--><agersant.polaris.PolarisPlaybackService: void pushSystemNotification()>[[-i0 <= 25]]--><android.app.Notification.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 124 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setHyphenationFrequency(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i2 < 29
Good road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>[[-$i2 < 29]]--><android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setHyphenationFrequency(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 125 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
crashApis:50
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 126 Potential Issue API: SDKCheck of <android.view.ViewConfiguration: float getScaledVerticalScrollFactor()> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 26
Good road: <androidx.viewpager2.widget.ViewPager2$RecyclerViewImpl: void <init>(androidx.viewpager2.widget.ViewPager2,android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.core.view.ViewConfigurationCompat: float getScaledVerticalScrollFactor(android.view.ViewConfiguration,android.content.Context)>[[-$i0 < 26]]--><android.view.ViewConfiguration: float getScaledVerticalScrollFactor()>
One road protect good!
-$i0 < 26
Good road: <com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.core.view.ViewConfigurationCompat: float getScaledVerticalScrollFactor(android.view.ViewConfiguration,android.content.Context)>[[-$i0 < 26]]--><android.view.ViewConfiguration: float getScaledVerticalScrollFactor()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 127 Potential Issue API: SDKCheck of <android.app.RemoteAction: java.lang.CharSequence getTitle()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><android.app.RemoteAction: java.lang.CharSequence getTitle()>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)> to <android.app.RemoteAction: java.lang.CharSequence getTitle()>has compatibility isssues！
-----------------------------------------
crashApis:51
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 128 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: java.util.List getPinnedShortcuts()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30]][[-i1 < 25]]
$i0 < 25
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: java.util.List getPinnedShortcuts()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 129 Potential Issue API: SDKCheck of <android.content.pm.PermissionInfo: int getProtection()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.content.pm.PermissionInfoCompat: int getProtection(android.content.pm.PermissionInfo)>[[-$i0 < 28]]--><android.content.pm.PermissionInfo: int getProtection()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 130 Potential Issue API: SDKCheck of <android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)> is checking!!!
The life time of api is [26,31]
4call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
One road protect good!
3 Packageshead roads:
-i3 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void onCreate()>[]--><com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int,int)>[[-i3 < 26]]--><android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
One road protect good!
-i3 < 26
Good road: <com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int)>[]--><com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int,int)>[[-i3 < 26]]--><android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationManagerCompat: void createNotificationChannel(android.app.NotificationChannel)>[[-$i0 < 26]]--><android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 131 Potential Issue API: SDKCheck of <android.view.Window: void setDecorFitsSystemWindows(boolean)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowCompat$Impl30: void setDecorFitsSystemWindows(android.view.Window,boolean)>[]--><android.view.Window: void setDecorFitsSystemWindows(boolean)>
#1.the call statck between class <androidx.core.view.WindowCompat$Impl30: void setDecorFitsSystemWindows(android.view.Window,boolean)> to <android.view.Window: void setDecorFitsSystemWindows(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:52
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 132 Potential Issue API: SDKCheck of <android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl: android.util.SparseIntArray[] stop()>[]--><android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)>
#1.the call statck between class <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl: android.util.SparseIntArray[] stop()> to <android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl: android.util.SparseIntArray[] remove(android.app.Activity)>[]--><android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)>
#2.the call statck between class <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl: android.util.SparseIntArray[] remove(android.app.Activity)> to <android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)>has compatibility isssues！
-----------------------------------------
crashApis:53
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 133 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: int getDisabledReason()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[-$i0 < 28]]--><android.content.pm.ShortcutInfo: int getDisabledReason()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 134 Potential Issue API: SDKCheck of <android.location.GnssStatus: boolean hasAlmanacData(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: boolean hasAlmanacData(int)>[]--><android.location.GnssStatus: boolean hasAlmanacData(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: boolean hasAlmanacData(int)> to <android.location.GnssStatus: boolean hasAlmanacData(int)>has compatibility isssues！
-----------------------------------------
crashApis:54
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 135 Potential Issue API: SDKCheck of <android.location.GnssStatus: int getSvid(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: int getSvid(int)>[]--><android.location.GnssStatus: int getSvid(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: int getSvid(int)> to <android.location.GnssStatus: int getSvid(int)>has compatibility isssues！
-----------------------------------------
crashApis:55
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 136 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()>
$i0 < 28
$i0 < 29
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><androidx.core.content.pm.ShortcutInfoCompat: androidx.core.content.LocusIdCompat getLocusId(android.content.pm.ShortcutInfo)>[[$i0 < 29]]--><android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()>has compatibility isssues！
-----------------------------------------
crashApis:56
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 137 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)> is checking!!!
The life time of api is [26,31]
19call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: int onStartCommand(android.content.Intent,int,int)>[]--><agersant.polaris.PolarisPlaybackService: void handleIntent(android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
18 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26]][[$i1 >= 26]]
-$i1 < 26
$i1 >= 26
Good road: <androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
One road protect good!
containsStatic:false
containsTry:true
19call by main package
-----------------------------------------
#################################################
N 138 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setAllowSystemGeneratedContextualActions(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 28]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[-i0 < 29]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 28
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
-i0 < 29
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setAllowSystemGeneratedContextualActions(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 139 Potential Issue API: SDKCheck of <android.view.MenuItem: java.lang.CharSequence getContentDescription()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: java.lang.CharSequence getContentDescription(android.view.MenuItem)>[[], [-$i0 < 26]]--><android.view.MenuItem: java.lang.CharSequence getContentDescription()>
#1.the call statck between class <androidx.core.view.MenuItemCompat: java.lang.CharSequence getContentDescription(android.view.MenuItem)> to <android.view.MenuItem: java.lang.CharSequence getContentDescription()>has compatibility isssues！
-----------------------------------------
crashApis:57
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 140 Potential Issue API: SDKCheck of <android.view.View: void transformMatrixToLocal(android.graphics.Matrix)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.transition.ViewUtilsApi21: void transformMatrixToLocal(android.view.View,android.graphics.Matrix)>[[try]]--><android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: void transformMatrixToLocal(android.view.View,android.graphics.Matrix)>[]--><android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>
#2.the call statck between class <androidx.transition.ViewUtilsApi29: void transformMatrixToLocal(android.view.View,android.graphics.Matrix)> to <android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>has compatibility isssues！
-----------------------------------------
crashApis:58
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 141 Potential Issue API: SDKCheck of <android.widget.TextView: boolean setFontVariationSettings(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 142 Potential Issue API: SDKCheck of <android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 >= 24
Good road: <androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl: android.graphics.Rect getLaunchBounds()>[[$i0 >= 24]]--><android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 143 Potential Issue API: SDKCheck of <android.os.Handler: android.os.Handler createAsync(android.os.Looper)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 28
Good road: <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>[[-i0 < 28]]--><android.os.Handler: android.os.Handler createAsync(android.os.Looper)>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void postToMainThread(java.lang.Runnable)>[[try]]--><androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler createAsync(android.os.Looper)>[[-i0 < 28]]--><android.os.Handler: android.os.Handler createAsync(android.os.Looper)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 144 Potential Issue API: SDKCheck of <android.view.FrameMetrics: long getMetric(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl$1: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>[]--><android.view.FrameMetrics: long getMetric(int)>
#1.the call statck between class <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl$1: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)> to <android.view.FrameMetrics: long getMetric(int)>has compatibility isssues！
-----------------------------------------
crashApis:59
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 145 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle.Message: void <init>(java.lang.CharSequence,long,android.app.Person)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><android.app.Notification.MessagingStyle.Message: void <init>(java.lang.CharSequence,long,android.app.Person)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 146 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: android.app.PendingIntent getDeleteIntent()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: android.app.PendingIntent getDeleteIntent()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: android.app.PendingIntent getDeleteIntent()>has compatibility isssues！
-----------------------------------------
crashApis:60
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 147 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: java.util.Set getCategories()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: java.util.Set getCategories()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: java.util.Set getCategories()>has compatibility isssues！
-----------------------------------------
crashApis:61
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 148 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)> is checking!!!
The life time of api is [26,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color convertTo(android.graphics.Color,android.graphics.ColorSpace$Named)>[]--><android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>
#2.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color convertTo(android.graphics.Color,android.graphics.ColorSpace$Named)> to <android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color convertTo(android.graphics.Color,android.graphics.ColorSpace)>[]--><android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>
#3.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color convertTo(android.graphics.Color,android.graphics.ColorSpace)> to <android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
crashApis:62
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 149 Potential Issue API: SDKCheck of <android.view.MenuItem: java.lang.CharSequence getTooltipText()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: java.lang.CharSequence getTooltipText(android.view.MenuItem)>[[], [-$i0 < 26]]--><android.view.MenuItem: java.lang.CharSequence getTooltipText()>
#1.the call statck between class <androidx.core.view.MenuItemCompat: java.lang.CharSequence getTooltipText(android.view.MenuItem)> to <android.view.MenuItem: java.lang.CharSequence getTooltipText()>has compatibility isssues！
-----------------------------------------
crashApis:63
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 150 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void enableShortcuts(java.util.List)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: void enableShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><android.content.pm.ShortcutManager: void enableShortcuts(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 151 Potential Issue API: SDKCheck of <android.location.GnssStatus: int getConstellationType(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: int getConstellationType(int)>[]--><android.location.GnssStatus: int getConstellationType(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: int getConstellationType(int)> to <android.location.GnssStatus: int getConstellationType(int)>has compatibility isssues！
-----------------------------------------
crashApis:64
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 152 Potential Issue API: SDKCheck of <android.app.Person: boolean isImportant()> is checking!!!
The life time of api is [28,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: boolean isImportant()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: boolean isImportant()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: boolean isImportant()>
One road protect good!
containsStatic:true
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 153 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> is checking!!!
The life time of api is [1,30]
385call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><agersant.polaris.PolarisApplication: void onCreate()>[]--><agersant.polaris.PolarisState: void <init>(android.content.Context)>[]--><agersant.polaris.PolarisPlayer: void <init>(android.content.Context,agersant.polaris.api.API,agersant.polaris.PlaybackQueue)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
384 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.DispatchQueue: void resume()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int,long)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setPublicShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void prepare(com.google.android.exoplayer2.offline.DownloadHelper$Callback)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30]][[try]][[$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]
$i0 < 30
try
Good road with try: <androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$1: void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(int,com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.wav.WavExtractor$PassthroughOutputWriter: void init(int,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController: void access$handleDestroy(androidx.lifecycle.LifecycleController,kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void handleDestroy(kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat: boolean removeSubscription(java.lang.String,androidx.media.MediaBrowserServiceCompat$ConnectionRecord,android.os.IBinder)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource: void prepareSourceInternal(com.google.android.exoplayer2.upstream.TransferListener)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void completeTransaction()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$8: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>[]--><okhttp3.internal.ws.RealWebSocket: void connect(okhttp3.OkHttpClient)>[]--><okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)>[]--><okhttp3.Dispatcher: void enqueue$okhttp(okhttp3.internal.connection.RealCall$AsyncCall)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$3: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean filterInPlace$CollectionsKt__MutableCollectionsKt(java.lang.Iterable,kotlin.jvm.functions.Function1,boolean)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.app.NotificationManagerCompat$SideChannelManager: void updateListenerMap()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.lifecycle.PausingDispatcherKt$whenStateAtLeast$2: java.lang.Object invokeSuspend(java.lang.Object)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void onUpstreamFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.ToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void handlePositionDiscontinuity(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime,int)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerImplInternal: boolean handleMessage(android.os.Message)>[[try]]--><com.google.android.exoplayer2.ExoPlayerImplInternal: void sendMessageToTargetThread(com.google.android.exoplayer2.PlayerMessage)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaSource removeMediaSource(int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void renderedFirstFrame(android.view.Surface)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.CollapsingToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void setNetworkTypeOverride(int)>[[try]]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.lifecycle.DispatchQueue: void access$enqueue(androidx.lifecycle.DispatchQueue,java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$1: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion2: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EGLSurfaceTexture: void onFrameAvailable(android.graphics.SurfaceTexture)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21: void notifyChildrenChangedForCompat(java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(java.util.Collection,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$2: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayer$Builder: void <init>(android.content.Context,com.google.android.exoplayer2.Renderer[])>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onLeafAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.core.widget.AutoScrollHelper: boolean onTouch(android.view.View,android.view.MotionEvent)>[]--><androidx.core.widget.AutoScrollHelper: void startAnimating()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: boolean removePreferenceRecursively(java.lang.CharSequence)>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: void removeAll()>[[try]]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.EventLoopImplBase: void shutdown()>[]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <androidx.navigation.NavGraph: void clear()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EventDispatcher$HandlerAndListener: void dispatch(com.google.android.exoplayer2.util.EventDispatcher$Event)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseTouchCallback: void onSwiped(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void onSwiped(android.view.View)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void queueDirectory()>[]--><agersant.polaris.api.API: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void videoSizeChanged(int,int,int,float)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
#137.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
crashApis:65
containsStatic:true
containsTry:true
138call by main package
-----------------------------------------
#################################################
N 154 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 155 Potential Issue API: SDKCheck of <android.app.NotificationManager: void createNotificationChannels(java.util.List)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><android.app.NotificationManager: void createNotificationChannels(java.util.List)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannels(java.util.List)>[[-$i0 < 26]]--><android.app.NotificationManager: void createNotificationChannels(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 156 Potential Issue API: SDKCheck of <android.database.CursorWindow: void <init>(java.lang.String,long)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 28
Good road: <androidx.core.database.CursorWindowCompat: android.database.CursorWindow create(java.lang.String,long)>[[-$i1 < 28]]--><android.database.CursorWindow: void <init>(java.lang.String,long)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 157 Potential Issue API: SDKCheck of <android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroupsCompat(java.util.List)>[[-i0 < 26]]--><android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroups(java.util.List)>[[-$i0 < 26]]--><android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 158 Potential Issue API: SDKCheck of <android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[]--><android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()> to <android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>has compatibility isssues！
-----------------------------------------
crashApis:66
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 159 Potential Issue API: SDKCheck of <android.app.RemoteAction: java.lang.CharSequence getContentDescription()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><android.app.RemoteAction: java.lang.CharSequence getContentDescription()>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)> to <android.app.RemoteAction: java.lang.CharSequence getContentDescription()>has compatibility isssues！
-----------------------------------------
crashApis:67
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 160 Potential Issue API: SDKCheck of <android.widget.FrameLayout: void setVisibility(int)> is checking!!!
The life time of api is [21,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 161 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: boolean isActiveNetworkMetered()> is checking!!!
The life time of api is [16,30]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean checkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
#1.the call statck between class <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)> to <android.net.ConnectivityManager: boolean isActiveNetworkMetered()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void recheckNotMetNetworkRequirements()>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
#2.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.ConnectivityManager: boolean isActiveNetworkMetered()>has compatibility isssues！
-----------------------------------------
-i0 < 16
!!!this api will crash on sdk 31 
Error road: <androidx.core.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>[[-i0 < 16]]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
#3.the call statck between class <androidx.core.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> to <android.net.ConnectivityManager: boolean isActiveNetworkMetered()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
#4.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.ConnectivityManager: boolean isActiveNetworkMetered()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void setRequirements(com.google.android.exoplayer2.scheduler.Requirements)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
#5.the call statck between class <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)> to <android.net.ConnectivityManager: boolean isActiveNetworkMetered()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
#6.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.ConnectivityManager: boolean isActiveNetworkMetered()>has compatibility isssues！
-----------------------------------------
crashApis:68
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 162 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void removeLongLivedShortcuts(java.util.List)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 >= 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: void removeLongLivedShortcuts(android.content.Context,java.util.List)>[[$i0 >= 30]]--><android.content.pm.ShortcutManager: void removeLongLivedShortcuts(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 163 Potential Issue API: SDKCheck of <android.widget.TextView: void setFirstBaselineToTopHeight(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 28
Good road: <androidx.core.widget.TextViewCompat: void setFirstBaselineToTopHeight(android.widget.TextView,int)>[[-i1 < 28]]--><android.widget.TextView: void setFirstBaselineToTopHeight(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 164 Potential Issue API: SDKCheck of <android.app.NotificationChannel: java.lang.String getId()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void deleteUnlistedNotificationChannels(java.util.Collection)>[[-$i0 < 26]]--><android.app.NotificationChannel: java.lang.String getId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 165 Potential Issue API: SDKCheck of <android.media.MediaCodecInfo: boolean isVendor()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.mediacodec.MediaCodecUtil: java.util.ArrayList getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey,com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)>[[try]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isVendor(android.media.MediaCodecInfo)>[[-i0 < 29]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isVendorV29(android.media.MediaCodecInfo)>[]--><android.media.MediaCodecInfo: boolean isVendor()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 166 Potential Issue API: SDKCheck of <android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 167 Potential Issue API: SDKCheck of <android.location.LocationManager: void unregisterGnssStatusCallback(android.location.GnssStatus.Callback)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: void unregisterGnssStatusCallback(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback)>[[-$i0 < 24], [try]]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: void unregisterGnssStatusCallback(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback)>[[-$i0 < 24]][[try]]
-$i0 < 24
try
Good road with try: <androidx.core.location.LocationManagerCompat: void unregisterGnssStatusCallback(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback)>[[-$i0 < 24], [try]]--><android.location.LocationManager: void unregisterGnssStatusCallback(android.location.GnssStatus.Callback)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 168 Potential Issue API: SDKCheck of <android.graphics.Color: float blue(long)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float getBlue(long)>[]--><android.graphics.Color: float blue(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float getBlue(long)> to <android.graphics.Color: float blue(long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component3(long)>[]--><android.graphics.Color: float blue(long)>
#2.the call statck between class <androidx.core.graphics.ColorKt: float component3(long)> to <android.graphics.Color: float blue(long)>has compatibility isssues！
-----------------------------------------
crashApis:69
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 169 Potential Issue API: SDKCheck of <android.os.Trace: void endAsyncSection(java.lang.String,int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 29
Good road: <androidx.core.os.TraceCompat: void endAsyncSection(java.lang.String,int)>[[-i1 < 29]]--><android.os.Trace: void endAsyncSection(java.lang.String,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 170 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata build()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata build()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata build()>has compatibility isssues！
-----------------------------------------
crashApis:70
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 171 Potential Issue API: SDKCheck of <android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$3: void frameworkSet(android.view.View,java.lang.CharSequence)>[]--><android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>
#1.the call statck between class <androidx.core.view.ViewCompat$3: void frameworkSet(android.view.View,java.lang.CharSequence)> to <android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>has compatibility isssues！
-----------------------------------------
crashApis:71
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 172 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.accessibility.AccessibilityWindowInfoCompat: java.lang.CharSequence getTitle()>[[-$i0 < 24]]--><android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 173 Potential Issue API: SDKCheck of <android.os.LocaleList: int size()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListCompat: int size()>[]--><androidx.core.os.LocaleListPlatformWrapper: int size()>[]--><android.os.LocaleList: int size()>
#1.the call statck between class <androidx.core.os.LocaleListCompat: int size()> to <android.os.LocaleList: int size()>has compatibility isssues！
-----------------------------------------
crashApis:72
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 174 Potential Issue API: SDKCheck of <android.app.Notification.Action: boolean getAllowGeneratedReplies()> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 24], [i0 < 23], [i0 < 20]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 24]][[i0 < 23]][[i0 < 20]]
-i0 < 24
i0 < 23
i0 < 20
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 24], [i0 < 23], [i0 < 20]]--><android.app.Notification.Action: boolean getAllowGeneratedReplies()>
One road protect good!
-i0 < 24
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[-i0 < 24]]--><android.app.Notification.Action: boolean getAllowGeneratedReplies()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 175 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void enableLights(boolean)> is checking!!!
The life time of api is [26,31]
3call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationChannel: void enableLights(boolean)>
One road protect good!
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void enableLights(boolean)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void enableLights(boolean)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 176 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()> is checking!!!
The life time of api is [24,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 177 Potential Issue API: SDKCheck of <android.net.TrafficStats: void untagDatagramSocket(java.net.DatagramSocket)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.net.TrafficStatsCompat: void untagDatagramSocket(java.net.DatagramSocket)>[[-i0 < 24]]--><android.net.TrafficStats: void untagDatagramSocket(java.net.DatagramSocket)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 178 Potential Issue API: SDKCheck of <android.graphics.Path: float[] approximate(float)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.PathKt: java.lang.Iterable flatten$default(android.graphics.Path,float,int,java.lang.Object)>[]--><androidx.core.graphics.PathKt: java.lang.Iterable flatten(android.graphics.Path,float)>[]--><androidx.core.graphics.PathUtils: java.util.Collection flatten(android.graphics.Path,float)>[]--><android.graphics.Path: float[] approximate(float)>
#1.the call statck between class <androidx.core.graphics.PathKt: java.lang.Iterable flatten$default(android.graphics.Path,float,int,java.lang.Object)> to <android.graphics.Path: float[] approximate(float)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.PathUtils: java.util.Collection flatten(android.graphics.Path)>[]--><androidx.core.graphics.PathUtils: java.util.Collection flatten(android.graphics.Path,float)>[]--><android.graphics.Path: float[] approximate(float)>
#2.the call statck between class <androidx.core.graphics.PathUtils: java.util.Collection flatten(android.graphics.Path)> to <android.graphics.Path: float[] approximate(float)>has compatibility isssues！
-----------------------------------------
crashApis:73
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 179 Potential Issue API: SDKCheck of <android.view.View: boolean isKeyboardNavigationCluster()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: boolean isKeyboardNavigationCluster(android.view.View)>[[-$i0 < 26]]--><android.view.View: boolean isKeyboardNavigationCluster()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 180 Potential Issue API: SDKCheck of <android.content.res.TypedArray: android.graphics.Typeface getFont(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.content.res.TypedArrayKt: android.graphics.Typeface getFontOrThrow(android.content.res.TypedArray,int)>[]--><android.content.res.TypedArray: android.graphics.Typeface getFont(int)>
#1.the call statck between class <androidx.core.content.res.TypedArrayKt: android.graphics.Typeface getFontOrThrow(android.content.res.TypedArray,int)> to <android.content.res.TypedArray: android.graphics.Typeface getFont(int)>has compatibility isssues！
-----------------------------------------
crashApis:74
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 181 Potential Issue API: SDKCheck of <android.widget.TextView: int[] getAutoSizeTextAvailableSizes()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 27
Good road: <androidx.core.widget.TextViewCompat: int[] getAutoSizeTextAvailableSizes(android.widget.TextView)>[[-$i0 < 27]]--><android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 182 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean isCached()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[-$i0 < 30], [$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[-$i0 < 30]][[$i0 < 28]]
-$i0 < 30
$i0 < 28
Good road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[-$i0 < 30], [$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean isCached()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 183 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: void setIconTintList(android.view.MenuItem,android.content.res.ColorStateList)>[[], [-$i0 < 26]]--><android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>
#1.the call statck between class <androidx.core.view.MenuItemCompat: void setIconTintList(android.view.MenuItem,android.content.res.ColorStateList)> to <android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>has compatibility isssues！
-----------------------------------------
crashApis:75
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 184 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: android.app.PendingIntent getIntent()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: android.app.PendingIntent getIntent()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: android.app.PendingIntent getIntent()>has compatibility isssues！
-----------------------------------------
crashApis:76
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 185 Potential Issue API: SDKCheck of <android.app.NotificationManager: void deleteNotificationChannelGroup(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void deleteNotificationChannelGroup(java.lang.String)>[[-$i0 < 26]]--><android.app.NotificationManager: void deleteNotificationChannelGroup(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 186 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 187 Potential Issue API: SDKCheck of <android.widget.TextView: void setImeHintLocales(android.os.LocaleList)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 24
Good road: <com.google.android.material.timepicker.ChipTextInputComboView: void <init>(android.content.Context)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void updateHintLocales()>[[-i0 < 24]]--><android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>
One road protect good!
-i0 < 24
Good road: <com.google.android.material.timepicker.ChipTextInputComboView: void onConfigurationChanged(android.content.res.Configuration)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void updateHintLocales()>[[-i0 < 24]]--><android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 188 Potential Issue API: SDKCheck of <android.animation.AnimatorSet: void <init>()> is checking!!!
The life time of api is [24,31]
203call roads:
1 Mainhead roads:
202 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate$2: void onAnimationEnd(android.animation.Animator)>[]--><com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate: void startAnimator()>[]--><com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate: void maybeInitializeAnimators()>[]--><android.animation.AnimatorSet: void <init>()>
#3.the call statck between class <com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate$2: void onAnimationEnd(android.animation.Animator)> to <android.animation.AnimatorSet: void <init>()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.material.transition.MaterialFadeThrough: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues)>[]--><com.google.android.material.transition.MaterialVisibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues)>[]--><com.google.android.material.transition.MaterialVisibility: android.animation.Animator createAnimator(android.view.ViewGroup,android.view.View,boolean)>[]--><android.animation.AnimatorSet: void <init>()>
#8.the call statck between class <com.google.android.material.transition.MaterialFadeThrough: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues)> to <android.animation.AnimatorSet: void <init>()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 
Error road: <com.google.android.material.transition.platform.MaterialFadeThrough: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>[]--><com.google.android.material.transition.platform.MaterialVisibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>[]--><com.google.android.material.transition.platform.MaterialVisibility: android.animation.Animator createAnimator(android.view.ViewGroup,android.view.View,boolean)>[]--><android.animation.AnimatorSet: void <init>()>
#9.the call statck between class <com.google.android.material.transition.platform.MaterialFadeThrough: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)> to <android.animation.AnimatorSet: void <init>()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><com.google.android.material.datepicker.DateFormatTextWatcher$2: void run()>[]--><com.google.android.material.textfield.TextInputLayout: void setError(java.lang.CharSequence)>[]--><com.google.android.material.textfield.IndicatorViewController: void hideError()>[]--><com.google.android.material.textfield.IndicatorViewController: void updateCaptionViewsVisibility(int,int,boolean)>[]--><android.animation.AnimatorSet: void <init>()>
One road protect good!
!!!this api will crash on sdk 23 
Error road: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><com.google.android.material.datepicker.DateFormatTextWatcher$2: void run()>[]--><com.google.android.material.textfield.TextInputLayout: void setError(java.lang.CharSequence)>[]--><com.google.android.material.textfield.IndicatorViewController: void hideError()>[]--><com.google.android.material.textfield.IndicatorViewController: void updateCaptionViewsVisibility(int,int,boolean)>[]--><android.animation.AnimatorSet: void <init>()>
!!!this api will crash on sdk 23 
Error road: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><com.google.android.material.datepicker.DateFormatTextWatcher$1: void run()>[]--><com.google.android.material.textfield.TextInputLayout: void setError(java.lang.CharSequence)>[]--><com.google.android.material.textfield.IndicatorViewController: void hideError()>[]--><com.google.android.material.textfield.IndicatorViewController: void updateCaptionViewsVisibility(int,int,boolean)>[]--><android.animation.AnimatorSet: void <init>()>
#10.the call statck between class <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()> to <android.animation.AnimatorSet: void <init>()>has compatibility isssues！
-----------------------------------------
crashApis:77
containsStatic:true
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 189 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setDrawingOrder(int)>[[-$i1 < 24]]--><android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 190 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setGroupConversation(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 26]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[i0 < 26]]
-i0 < 24
i0 < 26
!!!this api will crash on sdk 24 25 
Error road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 26]]--><android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setGroupConversation(boolean)>
#1.the call statck between class <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)> to <android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setGroupConversation(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:78
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 191 Potential Issue API: SDKCheck of <android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i0 < 23
-i0 < 26
Good road: <androidx.core.app.NotificationCompat$Style: android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int,int)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[[i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawableInner(android.content.Context)>[[-i0 < 26]]--><android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 192 Potential Issue API: SDKCheck of <android.media.MediaDrm: android.os.PersistableBundle getMetrics()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 >= 28
Good road: <com.google.android.exoplayer2.drm.FrameworkMediaDrm: android.os.PersistableBundle getMetrics()>[[$i0 >= 28]]--><android.media.MediaDrm: android.os.PersistableBundle getMetrics()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 193 Potential Issue API: SDKCheck of <android.content.Context: android.content.Context createDeviceProtectedStorageContext()> is checking!!!
The life time of api is [24,31]
34call roads:
0 Mainhead roads:
34 Packageshead roads:
-$i0 < 24
Good road: <androidx.preference.EditTextPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.EditTextPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.EditTextPreference: void setText(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.ListPreference: void setValueIndex(int)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.Preference: boolean persistLong(long)>[]--><androidx.preference.Preference: long getPersistedLong(long)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.MultiSelectListPreference: void onRestoreInstanceState(android.os.Parcelable)>[]--><androidx.preference.MultiSelectListPreference: void setValues(java.util.Set)>[]--><androidx.preference.Preference: boolean persistStringSet(java.util.Set)>[]--><androidx.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.MultiSelectListPreferenceDialogFragmentCompat: void onDialogClosed(boolean)>[]--><androidx.preference.MultiSelectListPreference: void setValues(java.util.Set)>[]--><androidx.preference.Preference: boolean persistStringSet(java.util.Set)>[]--><androidx.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.PreferenceManager: android.content.SharedPreferences$Editor getEditor()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.SwitchPreference$Listener: void onCheckedChanged(android.widget.CompoundButton,boolean)>[]--><androidx.preference.TwoStatePreference: void setChecked(boolean)>[]--><androidx.preference.Preference: boolean persistBoolean(boolean)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.EditTextPreferenceDialogFragment: void onDialogClosed(boolean)>[]--><androidx.preference.EditTextPreference: void setText(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.SeekBarPreference$1: void onProgressChanged(android.widget.SeekBar,int,boolean)>[]--><androidx.preference.SeekBarPreference: void syncValueInternal(android.widget.SeekBar)>[]--><androidx.preference.SeekBarPreference: void setValueInternal(int,boolean)>[]--><androidx.preference.Preference: boolean persistInt(int)>[]--><androidx.preference.Preference: int getPersistedInt(int)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.EditTextPreferenceDialogFragmentCompat: void onDialogClosed(boolean)>[]--><androidx.preference.EditTextPreference: void setText(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.ListPreferenceDialogFragmentCompat: void onDialogClosed(boolean)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.MultiSelectListPreferenceDialogFragment: void onDialogClosed(boolean)>[]--><androidx.preference.MultiSelectListPreference: void setValues(java.util.Set)>[]--><androidx.preference.Preference: boolean persistStringSet(java.util.Set)>[]--><androidx.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.ListPreference: void onRestoreInstanceState(android.os.Parcelable)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.PreferenceManager: androidx.preference.PreferenceScreen createPreferenceScreen(android.content.Context)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.TwoStatePreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.TwoStatePreference: void setChecked(boolean)>[]--><androidx.preference.Preference: boolean persistBoolean(boolean)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.TwoStatePreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.PreferenceFragment: void addPreferencesFromResource(int)>[]--><androidx.preference.PreferenceManager: androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.ListPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.ListPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.SwitchPreferenceCompat$Listener: void onCheckedChanged(android.widget.CompoundButton,boolean)>[]--><androidx.preference.TwoStatePreference: void setChecked(boolean)>[]--><androidx.preference.Preference: boolean persistBoolean(boolean)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.PreferenceFragment: void setPreferencesFromResource(int,java.lang.String)>[]--><androidx.preference.PreferenceManager: androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.TwoStatePreference: void onRestoreInstanceState(android.os.Parcelable)>[]--><androidx.preference.TwoStatePreference: void setChecked(boolean)>[]--><androidx.preference.Preference: boolean persistBoolean(boolean)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.MultiSelectListPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.MultiSelectListPreference: void setValues(java.util.Set)>[]--><androidx.preference.Preference: boolean persistStringSet(java.util.Set)>[]--><androidx.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.MultiSelectListPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.PreferenceFragmentCompat: void addPreferencesFromResource(int)>[]--><androidx.preference.PreferenceManager: androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.TwoStatePreference: void onClick()>[]--><androidx.preference.TwoStatePreference: void setChecked(boolean)>[]--><androidx.preference.Preference: boolean persistBoolean(boolean)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <agersant.polaris.features.settings.SettingsFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>[]--><androidx.preference.PreferenceFragmentCompat: void setPreferencesFromResource(int,java.lang.String)>[]--><androidx.preference.PreferenceManager: androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.SeekBarPreference$1: void onStopTrackingTouch(android.widget.SeekBar)>[]--><androidx.preference.SeekBarPreference: void syncValueInternal(android.widget.SeekBar)>[]--><androidx.preference.SeekBarPreference: void setValueInternal(int,boolean)>[]--><androidx.preference.Preference: boolean persistInt(int)>[]--><androidx.preference.Preference: int getPersistedInt(int)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.SeekBarPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.Preference: int getPersistedInt(int)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.SeekBarPreference: void onSetInitialValue(java.lang.Object)>[]--><androidx.preference.SeekBarPreference: void setValue(int)>[]--><androidx.preference.SeekBarPreference: void setValueInternal(int,boolean)>[]--><androidx.preference.Preference: boolean persistInt(int)>[]--><androidx.preference.Preference: int getPersistedInt(int)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.DropDownPreference$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupKt: void plusAssign(androidx.preference.PreferenceGroup,androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean addPreference(androidx.preference.Preference)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager,long)>[[try]]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.EditTextPreference: void onRestoreInstanceState(android.os.Parcelable)>[]--><androidx.preference.EditTextPreference: void setText(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.CheckBoxPreference$Listener: void onCheckedChanged(android.widget.CompoundButton,boolean)>[]--><androidx.preference.TwoStatePreference: void setChecked(boolean)>[]--><androidx.preference.Preference: boolean persistBoolean(boolean)>[]--><androidx.preference.Preference: boolean getPersistedBoolean(boolean)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.Preference: boolean persistFloat(float)>[]--><androidx.preference.Preference: float getPersistedFloat(float)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.ListPreferenceDialogFragment: void onDialogClosed(boolean)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)>[]--><androidx.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>[]--><androidx.preference.PreferenceManager: androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen)>[]--><androidx.preference.Preference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>[]--><androidx.preference.Preference: void dispatchSetInitialValue()>[]--><androidx.preference.Preference: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
-$i0 < 24
Good road: <androidx.preference.DropDownPreference: void setValueIndex(int)>[]--><androidx.preference.ListPreference: void setValue(java.lang.String)>[]--><androidx.preference.Preference: boolean persistString(java.lang.String)>[]--><androidx.preference.Preference: java.lang.String getPersistedString(java.lang.String)>[]--><androidx.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>[]--><androidx.core.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
One road protect good!
containsStatic:false
containsTry:true
35call by main package
-----------------------------------------
#################################################
N 194 Potential Issue API: SDKCheck of <android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)> is checking!!!
The life time of api is [28,31]
184call roads:
1 Mainhead roads:
183 Packageshead roads:
-$i3 < 29
Good road: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.text.util.LinkifyCompat: boolean addLinks(android.widget.TextView,int)>[[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,int)>[[-$z0 == 0], [$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: void applyLink(java.lang.String,int,int,android.text.Spannable)>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.util.LinkifyCompat: boolean addLinks(android.widget.TextView,int)>[[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,int)>[[-$z0 == 0]][[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: void applyLink(java.lang.String,int,int,android.text.Spannable)>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]
$yysi0 < 28
-$z0 == 0
$yysi0 < 28
-$i3 < 29
Good road: <androidx.core.text.util.LinkifyCompat: boolean addLinks(android.widget.TextView,int)>[[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,int)>[[-$z0 == 0], [$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: void applyLink(java.lang.String,int,int,android.text.Spannable)>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$yysi0 < 19
-$i3 < 29
Good road: <androidx.transition.FragmentTransitionSupport: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.customview.widget.ExploreByTouchHelper: void invalidateRoot()>[]--><androidx.customview.widget.ExploreByTouchHelper: void invalidateVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.chip.Chip$ChipTouchHelper: boolean onPerformActionForVirtualView(int,int,android.os.Bundle)>[]--><com.google.android.material.chip.Chip: boolean performCloseIconClick()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$yysi0 < 19
-$i3 < 29
Good road: <com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void setItemHorizontalTranslationEnabled(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationPresenter: void updateMenuView(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationMenuView: void updateMenuView()>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.chip.Chip: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: void updateHoveredVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.RangeSlider: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><com.google.android.material.slider.BaseSlider: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: void updateHoveredVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.BaseSlider: void onFocusChanged(boolean,int,android.graphics.Rect)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean requestKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.BaseSlider: void onFocusChanged(boolean,int,android.graphics.Rect)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean clearKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
$yysi0 < 28
-$i3 < 29
Good road: <androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>[[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: void applyLink(java.lang.String,int,int,android.text.Spannable)>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.recyclerview.widget.RecyclerView: void onMeasure(int,int)>[]--><androidx.recyclerview.widget.AdapterHelper: void consumeUpdatesInOnePass()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$yysi0 < 19
-$i3 < 29
Good road: <androidx.navigation.ui.ToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$yysi0 < 19
-$i3 < 29
Good road: <androidx.navigation.ui.CollapsingToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.transition.TransitionManager: void transitionTo(androidx.transition.Scene)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.BaseSlider$AccessibilityHelper: boolean onPerformActionForVirtualView(int,int,android.os.Bundle)>[]--><androidx.customview.widget.ExploreByTouchHelper: void invalidateVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: void invalidateVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.Slider: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><com.google.android.material.slider.BaseSlider: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean dispatchHoverEvent(android.view.MotionEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: void updateHoveredVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.customview.widget.ExploreByTouchHelper$MyNodeProvider: androidx.core.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtainAccessibilityNodeInfo(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: androidx.core.view.accessibility.AccessibilityNodeInfoCompat createNodeForChild(int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.chip.Chip: boolean onTouchEvent(android.view.MotionEvent)>[]--><com.google.android.material.chip.Chip: boolean performCloseIconClick()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.recyclerview.widget.AsyncListDiffer: void latchList(java.util.List,androidx.recyclerview.widget.DiffUtil$DiffResult,java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer: void onCurrentListChanged(java.util.List,java.lang.Runnable)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.chip.Chip: boolean dispatchKeyEvent(android.view.KeyEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean dispatchKeyEvent(android.view.KeyEvent)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean moveFocus(int,android.graphics.Rect)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean requestKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.transition.TransitionManager: void go(androidx.transition.Scene)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(java.lang.String)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.String toString()>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.customview.widget.ExploreByTouchHelper$MyNodeProvider: boolean performAction(int,int,android.os.Bundle)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean performAction(int,int,android.os.Bundle)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean performActionForChild(int,int,android.os.Bundle)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean clearKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.transition.TransitionManager: void go(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.core.text.SpannableStringKt: void set(android.text.Spannable,kotlin.ranges.IntRange,java.lang.Object)>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.chip.Chip: void onFocusChanged(boolean,int,android.graphics.Rect)>[]--><androidx.customview.widget.ExploreByTouchHelper: void onFocusChanged(boolean,int,android.graphics.Rect)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean moveFocus(int,android.graphics.Rect)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean requestKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.core.text.SpannableStringKt: void set(android.text.Spannable,int,int,java.lang.Object)>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.Slider: void setFocusedThumbIndex(int)>[]--><com.google.android.material.slider.BaseSlider: void setFocusedThumbIndex(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean requestKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void run()>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
-$i3 < 29
Good road: <com.google.android.material.slider.RangeSlider: void setFocusedThumbIndex(int)>[]--><com.google.android.material.slider.BaseSlider: void setFocusedThumbIndex(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean requestKeyboardFocusForVirtualView(int)>[]--><androidx.customview.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>[]--><androidx.customview.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getText()>[]--><androidx.core.text.PrecomputedTextCompat: void setSpan(java.lang.Object,int,int,int)>[[-$i3 < 29]]--><android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
One road protect good!
containsStatic:true
containsTry:true
184call by main package
-----------------------------------------
#################################################
N 195 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)> is checking!!!
The life time of api is [26,31]
19call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 < 26]]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
18 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26]][[$i1 >= 26]]
-$i1 < 26
$i1 >= 26
Good road: <androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
One road protect good!
containsStatic:false
containsTry:true
19call by main package
-----------------------------------------
#################################################
N 196 Potential Issue API: SDKCheck of <android.view.View: boolean isFocusedByDefault()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: boolean isFocusedByDefault(android.view.View)>[[-$i0 < 26]]--><android.view.View: boolean isFocusedByDefault()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 197 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i0 < 26
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[i0 < 26]]--><androidx.core.content.pm.ShortcutManagerCompat: boolean isRequestPinShortcutSupported(android.content.Context)>[[-$i0 < 26]]--><android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 198 Potential Issue API: SDKCheck of <android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setSemanticAction(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [-i0 < 20], [i0 < 24], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23]][[-i0 < 20]][[i0 < 24]][[-i0 < 28]]
i1 < 23
-i0 < 20
i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [-i0 < 20], [i0 < 24], [-i0 < 28]]--><android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setSemanticAction(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 199 Potential Issue API: SDKCheck of <android.view.View: boolean isScreenReaderFocusable()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$2: java.lang.Boolean frameworkGet(android.view.View)>[]--><android.view.View: boolean isScreenReaderFocusable()>
#1.the call statck between class <androidx.core.view.ViewCompat$2: java.lang.Boolean frameworkGet(android.view.View)> to <android.view.View: boolean isScreenReaderFocusable()>has compatibility isssues！
-----------------------------------------
crashApis:79
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 200 Potential Issue API: SDKCheck of <android.database.sqlite.SQLiteCursor: void setFillWindowForwardOnly(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.database.sqlite.SQLiteCursorCompat: void setFillWindowForwardOnly(android.database.sqlite.SQLiteCursor,boolean)>[[-$i0 < 28]]--><android.database.sqlite.SQLiteCursor: void setFillWindowForwardOnly(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 201 Potential Issue API: SDKCheck of <android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setAlignment(android.text.Layout.Alignment)> is checking!!!
The life time of api is [23,30]
196call roads:
1 Mainhead roads:
195 Packageshead roads:
containsStatic:true
containsTry:true
196call by main package
-----------------------------------------
#################################################
N 202 Potential Issue API: SDKCheck of <android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)> is checking!!!
The life time of api is [26,31]
22call roads:
1 Mainhead roads:
-$i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: int onStartCommand(android.content.Intent,int,int)>[]--><agersant.polaris.PolarisPlaybackService: void handleIntent(android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
21 Packageshead roads:
-$i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void release()>[]--><com.google.android.exoplayer2.AudioFocusManager: void release()>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService: void access$700(agersant.polaris.PolarisPlaybackService)>[]--><agersant.polaris.PolarisPlaybackService: void abandonAudioFocus()>[[-$i0 < 26]]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <androidx.media.AudioManagerCompat: int abandonAudioFocusRequest(android.media.AudioManager,androidx.media.AudioFocusRequestCompat)>[[-$i0 < 26]]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.AudioFocusManager: void access$000(com.google.android.exoplayer2.AudioFocusManager,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void handlePlatformAudioFocusChange(int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocus()>[[-$i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: void abandonAudioFocusV26()>[]--><android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
One road protect good!
containsStatic:false
containsTry:true
22call by main package
-----------------------------------------
#################################################
N 203 Potential Issue API: SDKCheck of <android.graphics.Color: float luminance(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float getLuminance(long)>[]--><android.graphics.Color: float luminance(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float getLuminance(long)> to <android.graphics.Color: float luminance(long)>has compatibility isssues！
-----------------------------------------
crashApis:80
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 204 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.widget.RemoteViews createHeadsUpContentView()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createHeadsUpContentView()>[[-i0 < 24], [i0 >= 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createHeadsUpContentView()>[[-i0 < 24]][[i0 >= 21]]
-i0 < 24
i0 >= 21
Good road: <androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createHeadsUpContentView()>[[-i0 < 24], [i0 >= 21]]--><android.app.Notification.Builder: android.widget.RemoteViews createHeadsUpContentView()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 205 Potential Issue API: SDKCheck of <android.view.View: void setAutofillHints(java.lang.String[])> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: void setAutofillHints(android.view.View,java.lang.String[])>[[-$i0 < 26]]--><android.view.View: void setAutofillHints(java.lang.String[])>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 206 Potential Issue API: SDKCheck of <android.view.inputmethod.InputContentInfo: void releasePermission()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: void releasePermission()>[]--><android.view.inputmethod.InputContentInfo: void releasePermission()>
#1.the call statck between class <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: void releasePermission()> to <android.view.inputmethod.InputContentInfo: void releasePermission()>has compatibility isssues！
-----------------------------------------
crashApis:81
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 207 Potential Issue API: SDKCheck of <android.graphics.Canvas: void disableZ()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!--><androidx.transition.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>[[i0 >= 21], [-i0 < 29]]
###Multi invoking in one method, need manual check!!!--><androidx.transition.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>[[i0 >= 21]][[-i0 < 29]]
i0 >= 21
-i0 < 29
Good road: <androidx.transition.GhostViewPort: void onDraw(android.graphics.Canvas)>[]--><androidx.transition.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>[[i0 >= 21], [-i0 < 29]]--><android.graphics.Canvas: void disableZ()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 208 Potential Issue API: SDKCheck of <android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.media.VolumeProviderCompat$1: void <init>(androidx.media.VolumeProviderCompat,int,int,int,java.lang.String)>[]--><android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>
#1.the call statck between class <androidx.media.VolumeProviderCompat$1: void <init>(androidx.media.VolumeProviderCompat,int,int,int,java.lang.String)> to <android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:82
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 209 Potential Issue API: SDKCheck of <android.graphics.Color: long pack(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long toColorLong(int)>[]--><android.graphics.Color: long pack(int)>
#1.the call statck between class <androidx.core.graphics.ColorKt: long toColorLong(int)> to <android.graphics.Color: long pack(int)>has compatibility isssues！
-----------------------------------------
crashApis:83
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 210 Potential Issue API: SDKCheck of <android.os.LocaleList: android.os.LocaleList getDefault()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getDefault()>[[-$i0 < 24]]--><android.os.LocaleList: android.os.LocaleList getDefault()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 211 Potential Issue API: SDKCheck of <android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler.Callback)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 28
Good road: <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>[[-i0 < 28]]--><android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler.Callback)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 212 Potential Issue API: SDKCheck of <android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.transition.ViewUtilsApi21: void transformMatrixToGlobal(android.view.View,android.graphics.Matrix)>[[try]]--><android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: void transformMatrixToGlobal(android.view.View,android.graphics.Matrix)>[]--><android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>
#2.the call statck between class <androidx.transition.ViewUtilsApi29: void transformMatrixToGlobal(android.view.View,android.graphics.Matrix)> to <android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>has compatibility isssues！
-----------------------------------------
crashApis:84
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 213 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setShortcutId(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setShortcutId(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 214 Potential Issue API: SDKCheck of <android.graphics.Color: float alpha()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: float alpha()>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: float alpha()>has compatibility isssues！
-----------------------------------------
crashApis:85
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 215 Potential Issue API: SDKCheck of <android.widget.PopupWindow: void setEpicenterBounds(android.graphics.Rect)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 216 Potential Issue API: SDKCheck of <android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.JobIntentService$JobWorkEnqueuer: void enqueueWork(android.content.Intent)>[]--><android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
#1.the call statck between class <androidx.core.app.JobIntentService$JobWorkEnqueuer: void enqueueWork(android.content.Intent)> to <android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>has compatibility isssues！
-----------------------------------------
crashApis:86
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 217 Potential Issue API: SDKCheck of <android.media.MediaCodecInfo: boolean isSoftwareOnly()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.mediacodec.MediaCodecUtil: java.util.ArrayList getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey,com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)>[[try]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isSoftwareOnly(android.media.MediaCodecInfo)>[[-i0 < 29]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isSoftwareOnlyV29(android.media.MediaCodecInfo)>[]--><android.media.MediaCodecInfo: boolean isSoftwareOnly()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.mediacodec.MediaCodecUtil: java.util.ArrayList getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey,com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)>[[try]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isHardwareAccelerated(android.media.MediaCodecInfo)>[[$i0 < 29]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isSoftwareOnly(android.media.MediaCodecInfo)>[[-i0 < 29]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isSoftwareOnlyV29(android.media.MediaCodecInfo)>[]--><android.media.MediaCodecInfo: boolean isSoftwareOnly()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 218 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)> is checking!!!
The life time of api is [29,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 219 Potential Issue API: SDKCheck of <android.text.Html: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.text.HtmlCompat: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html$ImageGetter,android.text.Html$TagHandler)>[[-$i1 < 24]]--><android.text.Html: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 220 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params: android.text.TextDirectionHeuristic getTextDirection()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)>[]--><android.text.PrecomputedText.Params: android.text.TextDirectionHeuristic getTextDirection()>
#1.the call statck between class <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)> to <android.text.PrecomputedText.Params: android.text.TextDirectionHeuristic getTextDirection()>has compatibility isssues！
-----------------------------------------
crashApis:87
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 221 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: java.util.List getManifestShortcuts()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30]][[-i1 < 25]]
$i0 < 25
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: java.util.List getManifestShortcuts()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 222 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()>[]--><android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()> to <android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>has compatibility isssues！
-----------------------------------------
crashApis:88
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 223 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setShowBadge(boolean)> is checking!!!
The life time of api is [26,31]
3call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationChannel: void setShowBadge(boolean)>
One road protect good!
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setShowBadge(boolean)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setShowBadge(boolean)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 224 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: java.lang.CharSequence getLongLabel()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: java.lang.CharSequence getLongLabel()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: java.lang.CharSequence getLongLabel()>has compatibility isssues！
-----------------------------------------
crashApis:89
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 225 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)> is checking!!!
The life time of api is [24,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
One road protect good!
-i0 < 25
i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
One road protect good!
-$i0 < 26
i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]
i0 > 29
-i0 < 25
i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]
i1 > 29
-i1 < 25
i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]
i0 > 29
-i0 < 25
i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 226 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void pushDynamicShortcut(android.content.pm.ShortcutInfo)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-i1 < 30], [i1 > 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-i1 < 30]][[i1 > 29]]
-i1 < 30
i1 > 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-i1 < 30], [i1 > 29]]--><android.content.pm.ShortcutManager: void pushDynamicShortcut(android.content.pm.ShortcutInfo)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 227 Potential Issue API: SDKCheck of <android.view.View: android.view.autofill.AutofillId getAutofillId()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>[]--><android.view.View: android.view.autofill.AutofillId getAutofillId()>
#1.the call statck between class <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> to <android.view.View: android.view.autofill.AutofillId getAutofillId()>has compatibility isssues！
-----------------------------------------
crashApis:90
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 228 Potential Issue API: SDKCheck of <android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 229 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setTextEntryKey(boolean)>[[-$i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 230 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setSettingsText(java.lang.CharSequence)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setSettingsText(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 231 Potential Issue API: SDKCheck of <android.graphics.BlendModeColorFilter: void <init>(int,android.graphics.BlendMode)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 29
Good road: <com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback: void access$000(android.view.Window)>[]--><com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback: void removeWindowBackground(android.view.Window)>[]--><androidx.core.graphics.BlendModeColorFilterCompat: android.graphics.ColorFilter createBlendModeColorFilterCompat(int,androidx.core.graphics.BlendModeCompat)>[[-i1 < 29]]--><android.graphics.BlendModeColorFilter: void <init>(int,android.graphics.BlendMode)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 232 Potential Issue API: SDKCheck of <android.view.View.BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.viewpager2.widget.ViewPager2$SavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>[]--><android.view.View.BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>
#1.the call statck between class <androidx.viewpager2.widget.ViewPager2$SavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)> to <android.view.View.BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>has compatibility isssues！
-----------------------------------------
-$i0 < 24
Good road: <androidx.viewpager2.widget.ViewPager2$SavedState$1: androidx.viewpager2.widget.ViewPager2$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>[[-$i0 < 24]]--><android.view.View.BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>
One road protect good!
crashApis:91
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 233 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 234 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDeleteIntent(android.app.PendingIntent)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDeleteIntent(android.app.PendingIntent)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDeleteIntent(android.app.PendingIntent)>has compatibility isssues！
-----------------------------------------
crashApis:92
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 235 Potential Issue API: SDKCheck of <android.view.View: void setAnimationMatrix(android.graphics.Matrix)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: void setAnimationMatrix(android.view.View,android.graphics.Matrix)>[]--><android.view.View: void setAnimationMatrix(android.graphics.Matrix)>
#1.the call statck between class <androidx.transition.ViewUtilsApi29: void setAnimationMatrix(android.view.View,android.graphics.Matrix)> to <android.view.View: void setAnimationMatrix(android.graphics.Matrix)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <androidx.transition.ViewUtilsApi21: void setAnimationMatrix(android.view.View,android.graphics.Matrix)>[[try]]--><android.view.View: void setAnimationMatrix(android.graphics.Matrix)>
One road protect good!
crashApis:93
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 236 Potential Issue API: SDKCheck of <android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)> is checking!!!
The life time of api is [29,31]
1call roads:
1 Mainhead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.MainActivity dummyMainMethod_agersant_polaris_MainActivity(android.content.Intent)>[]--><agersant.polaris.MainActivity: void onCreate(android.os.Bundle)>[]--><androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>[]--><androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)>[]--><androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>[]--><androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)>[]--><android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)>has compatibility isssues！
-----------------------------------------
0 Packageshead roads:
crashApis:94
crashApisInMain:2
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 237 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setSlant(int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setSlant(int)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setSlant(int)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 238 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()>has compatibility isssues！
-----------------------------------------
crashApis:95
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 239 Potential Issue API: SDKCheck of <android.net.NetworkInfo: boolean isConnected()> is checking!!!
The life time of api is [1,30]
384call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><agersant.polaris.PolarisApplication: void onCreate()>[]--><agersant.polaris.PolarisState: void <init>(android.content.Context)>[]--><agersant.polaris.PolarisPlayer: void <init>(android.content.Context,agersant.polaris.api.API,agersant.polaris.PlaybackQueue)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
383 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.DispatchQueue: void resume()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int,long)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setPublicShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void prepare(com.google.android.exoplayer2.offline.DownloadHelper$Callback)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30]][[try]][[$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]
$i0 < 30
try
Good road with try: <androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$1: void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(int,com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.wav.WavExtractor$PassthroughOutputWriter: void init(int,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController: void access$handleDestroy(androidx.lifecycle.LifecycleController,kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void handleDestroy(kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat: boolean removeSubscription(java.lang.String,androidx.media.MediaBrowserServiceCompat$ConnectionRecord,android.os.IBinder)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource: void prepareSourceInternal(com.google.android.exoplayer2.upstream.TransferListener)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void completeTransaction()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$8: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>[]--><okhttp3.internal.ws.RealWebSocket: void connect(okhttp3.OkHttpClient)>[]--><okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)>[]--><okhttp3.Dispatcher: void enqueue$okhttp(okhttp3.internal.connection.RealCall$AsyncCall)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$3: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean filterInPlace$CollectionsKt__MutableCollectionsKt(java.lang.Iterable,kotlin.jvm.functions.Function1,boolean)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.app.NotificationManagerCompat$SideChannelManager: void updateListenerMap()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.lifecycle.PausingDispatcherKt$whenStateAtLeast$2: java.lang.Object invokeSuspend(java.lang.Object)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void onUpstreamFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.ToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void handlePositionDiscontinuity(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime,int)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerImplInternal: boolean handleMessage(android.os.Message)>[[try]]--><com.google.android.exoplayer2.ExoPlayerImplInternal: void sendMessageToTargetThread(com.google.android.exoplayer2.PlayerMessage)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaSource removeMediaSource(int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void renderedFirstFrame(android.view.Surface)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.CollapsingToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void setNetworkTypeOverride(int)>[[try]]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.lifecycle.DispatchQueue: void access$enqueue(androidx.lifecycle.DispatchQueue,java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$1: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion2: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EGLSurfaceTexture: void onFrameAvailable(android.graphics.SurfaceTexture)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21: void notifyChildrenChangedForCompat(java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(java.util.Collection,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$2: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayer$Builder: void <init>(android.content.Context,com.google.android.exoplayer2.Renderer[])>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onLeafAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.core.widget.AutoScrollHelper: boolean onTouch(android.view.View,android.view.MotionEvent)>[]--><androidx.core.widget.AutoScrollHelper: void startAnimating()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: boolean removePreferenceRecursively(java.lang.CharSequence)>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: void removeAll()>[[try]]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.EventLoopImplBase: void shutdown()>[]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <androidx.navigation.NavGraph: void clear()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EventDispatcher$HandlerAndListener: void dispatch(com.google.android.exoplayer2.util.EventDispatcher$Event)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseTouchCallback: void onSwiped(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void onSwiped(android.view.View)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void queueDirectory()>[]--><agersant.polaris.api.API: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void videoSizeChanged(int,int,int,float)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><android.net.NetworkInfo: boolean isConnected()>
#137.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.NetworkInfo: boolean isConnected()>has compatibility isssues！
-----------------------------------------
crashApis:96
containsStatic:true
containsTry:true
138call by main package
-----------------------------------------
#################################################
N 240 Potential Issue API: SDKCheck of <android.view.View: boolean restoreDefaultFocus()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: boolean restoreDefaultFocus(android.view.View)>[[-$i0 < 26]]--><android.view.View: boolean restoreDefaultFocus()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 241 Potential Issue API: SDKCheck of <android.media.AudioManager: int getStreamMinVolume(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 28
Good road: <androidx.media.AudioManagerCompat: int getStreamMinVolume(android.media.AudioManager,int)>[[-$i1 < 28]]--><android.media.AudioManager: int getStreamMinVolume(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 242 Potential Issue API: SDKCheck of <android.view.View: int getNextClusterForwardId()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: int getNextClusterForwardId(android.view.View)>[[-$i0 < 26]]--><android.view.View: int getNextClusterForwardId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 243 Potential Issue API: SDKCheck of <android.location.GnssStatus: float getCn0DbHz(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: float getCn0DbHz(int)>[]--><android.location.GnssStatus: float getCn0DbHz(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: float getCn0DbHz(int)> to <android.location.GnssStatus: float getCn0DbHz(int)>has compatibility isssues！
-----------------------------------------
crashApis:97
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 244 Potential Issue API: SDKCheck of <android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [-i0 < 20]]--><androidx.core.app.RemoteInput: android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[])>[]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23]][[-i0 < 20]]--><androidx.core.app.RemoteInput: android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[])>[]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]
i1 < 23
-i0 < 20
-$i0 < 29
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [-i0 < 20]]--><androidx.core.app.RemoteInput: android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[])>[]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]--><android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)>
One road protect good!
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)>[[-i0 < 26]]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20]][[i0 < 26]]--><androidx.core.app.RemoteInput: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)>[[-i0 < 26]]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]
-i1 < 20
i0 < 26
-i0 < 26
-$i0 < 29
Good road: <androidx.core.app.RemoteInput: void addResultsToIntent(androidx.core.app.RemoteInput[],android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)>[[-i0 < 26]]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]--><android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)>
One road protect good!
-i1 < 20
-$i0 < 29
Good road: <androidx.core.app.RemoteInput: void addResultsToIntent(androidx.core.app.RemoteInput[],android.content.Intent,android.os.Bundle)>[[-i1 < 20]]--><androidx.core.app.RemoteInput: android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[])>[]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]--><android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)>
One road protect good!
i0 < 23
-$i0 < 29
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[i0 < 23]]--><androidx.core.app.RemoteInput: android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[])>[]--><androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)>[[-$i0 < 29]]--><android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 245 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void removeDynamicShortcuts(java.util.List)> is checking!!!
The life time of api is [25,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 >= 30
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: void removeLongLivedShortcuts(android.content.Context,java.util.List)>[[-$i0 >= 30]]--><androidx.core.content.pm.ShortcutManagerCompat: void removeDynamicShortcuts(android.content.Context,java.util.List)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: void removeDynamicShortcuts(java.util.List)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[i1 < 30]][[-i1 < 25]]
i1 > 29
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: void removeDynamicShortcuts(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 246 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)> is checking!!!
The life time of api is [24,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 247 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setLightColor(int)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setLightColor(int)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setLightColor(int)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 248 Potential Issue API: SDKCheck of <android.view.ViewConfiguration: int getScaledHoverSlop()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.ViewConfigurationCompat: int getScaledHoverSlop(android.view.ViewConfiguration)>[[-$i0 < 28]]--><android.view.ViewConfiguration: int getScaledHoverSlop()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 249 Potential Issue API: SDKCheck of <android.widget.Button: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> is checking!!!
The life time of api is [14,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.google.android.material.button.MaterialButton: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>[[]]--><android.widget.Button: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
#1.the call statck between class <com.google.android.material.button.MaterialButton: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> to <android.widget.Button: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>has compatibility isssues！
-----------------------------------------
crashApis:98
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 250 Potential Issue API: SDKCheck of <android.app.RemoteAction: android.graphics.drawable.Icon getIcon()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)> to <android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>has compatibility isssues！
-----------------------------------------
crashApis:99
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 251 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 252 Potential Issue API: SDKCheck of <android.view.View: void setFocusedByDefault(boolean)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: void setFocusedByDefault(android.view.View,boolean)>[[-$i0 < 26]]--><android.view.View: void setFocusedByDefault(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 253 Potential Issue API: SDKCheck of <android.content.LocusId: java.lang.String getId()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.content.LocusIdCompat$Api29Impl: java.lang.String getId(android.content.LocusId)>[]--><android.content.LocusId: java.lang.String getId()>
#1.the call statck between class <androidx.core.content.LocusIdCompat$Api29Impl: java.lang.String getId(android.content.LocusId)> to <android.content.LocusId: java.lang.String getId()>has compatibility isssues！
-----------------------------------------
crashApis:100
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 254 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.ColorSpace getColorSpace()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: android.graphics.ColorSpace getColorSpace()>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: android.graphics.ColorSpace getColorSpace()>has compatibility isssues！
-----------------------------------------
crashApis:101
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 255 Potential Issue API: SDKCheck of <android.view.View: int getImportantForAutofill()> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 26
Good road: <androidx.viewpager2.widget.ViewPager2$RecyclerViewImpl: void <init>(androidx.viewpager2.widget.ViewPager2,android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void initAutofill()>[]--><androidx.core.view.ViewCompat: int getImportantForAutofill(android.view.View)>[[-$i0 < 26]]--><android.view.View: int getImportantForAutofill()>
One road protect good!
-$i0 < 26
Good road: <com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void initAutofill()>[]--><androidx.core.view.ViewCompat: int getImportantForAutofill(android.view.View)>[[-$i0 < 26]]--><android.view.View: int getImportantForAutofill()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 256 Potential Issue API: SDKCheck of <android.view.View: void cancelDragAndDrop()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.ViewCompat: void cancelDragAndDrop(android.view.View)>[[-$i0 < 24]]--><android.view.View: void cancelDragAndDrop()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 257 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: int getRegionCount()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat: int getRegionCount()>[[-$i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: int getRegionCount()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 258 Potential Issue API: SDKCheck of <android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 26
Good road: <androidx.core.view.ViewCompat: android.view.View keyboardNavigationClusterSearch(android.view.View,android.view.View,int)>[[-$i1 < 26]]--><android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 259 Potential Issue API: SDKCheck of <android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[[try]]--><android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[]--><android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()>
#2.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)> to <android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[]--><android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()>
#3.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)> to <android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()>has compatibility isssues！
-----------------------------------------
crashApis:102
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 260 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 29
Good road: <com.google.android.material.snackbar.Snackbar: int getDuration()>[[-$i1 < 29]]--><android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 261 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeightResId(int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeightResId(int)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeightResId(int)>has compatibility isssues！
-----------------------------------------
crashApis:103
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 262 Potential Issue API: SDKCheck of <android.location.GnssStatus: boolean usedInFix(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: boolean usedInFix(int)>[]--><android.location.GnssStatus: boolean usedInFix(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: boolean usedInFix(int)> to <android.location.GnssStatus: boolean usedInFix(int)>has compatibility isssues！
-----------------------------------------
crashApis:104
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 263 Potential Issue API: SDKCheck of <android.content.pm.PermissionInfo: int getProtectionFlags()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.content.pm.PermissionInfoCompat: int getProtectionFlags(android.content.pm.PermissionInfo)>[[-$i0 < 28]]--><android.content.pm.PermissionInfo: int getProtectionFlags()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 264 Potential Issue API: SDKCheck of <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>
#1.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)> to <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>
#2.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)> to <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>
#3.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)> to <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>has compatibility isssues！
-----------------------------------------
crashApis:105
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 265 Potential Issue API: SDKCheck of <android.os.LocaleList: android.os.LocaleList getAdjustedDefault()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getAdjustedDefault()>[[-$i0 < 24]]--><android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 266 Potential Issue API: SDKCheck of <android.media.MediaCodec.CryptoInfo.Pattern: void set(int,int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void set(int,int)>[]--><android.media.MediaCodec.CryptoInfo.Pattern: void set(int,int)>
#1.the call statck between class <com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24: void set(int,int)> to <android.media.MediaCodec.CryptoInfo.Pattern: void set(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:106
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 267 Potential Issue API: SDKCheck of <android.util.Half: android.util.Half valueOf(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.util.HalfKt: android.util.Half toHalf(java.lang.String)>[]--><android.util.Half: android.util.Half valueOf(java.lang.String)>
#1.the call statck between class <androidx.core.util.HalfKt: android.util.Half toHalf(java.lang.String)> to <android.util.Half: android.util.Half valueOf(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:107
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 268 Potential Issue API: SDKCheck of <android.view.View: void addOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$CompatImplApi28: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)>[]--><android.view.View: void addOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)>
#1.the call statck between class <androidx.core.view.ViewCompat$CompatImplApi28: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)> to <android.view.View: void addOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)>has compatibility isssues！
-----------------------------------------
crashApis:108
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 269 Potential Issue API: SDKCheck of <android.widget.Toolbar: int getTitleMarginEnd()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0]][[-$yysi0 < 16]][[$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
-$z0 == 0
-$yysi0 < 16
$yysi0 < 19
-$i1 < 24
Good road: <com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]--><android.widget.Toolbar: int getTitleMarginEnd()>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 270 Potential Issue API: SDKCheck of <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.graphics.ImageDecoderKt: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,kotlin.jvm.functions.Function3)>[]--><android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)>
#1.the call statck between class <androidx.core.graphics.ImageDecoderKt: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,kotlin.jvm.functions.Function3)> to <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)>has compatibility isssues！
-----------------------------------------
crashApis:109
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 271 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setWeight(int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setWeight(int)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setWeight(int)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 272 Potential Issue API: SDKCheck of <android.view.View: void setStateDescription(java.lang.CharSequence)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.ViewCompat$4: void frameworkSet(android.view.View,java.lang.CharSequence)>[]--><android.view.View: void setStateDescription(java.lang.CharSequence)>
#1.the call statck between class <androidx.core.view.ViewCompat$4: void frameworkSet(android.view.View,java.lang.CharSequence)> to <android.view.View: void setStateDescription(java.lang.CharSequence)>has compatibility isssues！
-----------------------------------------
crashApis:110
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 273 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)> is checking!!!
The life time of api is [26,31]
18call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: int onStartCommand(android.content.Intent,int,int)>[]--><agersant.polaris.PolarisPlaybackService: void handleIntent(android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
17 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
One road protect good!
containsStatic:false
containsTry:true
18call by main package
-----------------------------------------
#################################################
N 274 Potential Issue API: SDKCheck of <android.app.job.JobParameters: android.app.job.JobWorkItem dequeueWork()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.app.JobIntentService$JobServiceEngineImpl: androidx.core.app.JobIntentService$GenericWorkItem dequeueWork()>[[try]]--><android.app.job.JobParameters: android.app.job.JobWorkItem dequeueWork()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 275 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemWindowInsets(android.graphics.Insets)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemWindowInsets(android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemWindowInsets(android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:111
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 276 Potential Issue API: SDKCheck of <android.location.LocationManager: boolean isLocationEnabled()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.location.LocationManagerCompat: boolean isLocationEnabled(android.location.LocationManager)>[[-$i0 < 28]]--><android.location.LocationManager: boolean isLocationEnabled()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 277 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()> is checking!!!
The life time of api is [26,31]
19call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 < 26]]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
18 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26]][[$i1 >= 26]]
-$i1 < 26
$i1 >= 26
Good road: <androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
One road protect good!
containsStatic:false
containsTry:true
19call by main package
-----------------------------------------
#################################################
N 278 Potential Issue API: SDKCheck of <android.graphics.drawable.Icon: java.lang.String getResPackage()> is checking!!!
The life time of api is [28,31]
24call roads:
0 Mainhead roads:
24 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-i0 < 24
-i0 < 28
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setSmallIcon(androidx.core.graphics.drawable.IconCompat)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i1 < 28
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-i0 < 23
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Style: android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int,int)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: void checkResource(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-i0 < 28
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-i0 < 26
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[i0 < 26], [-$yysi0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.Intent addToIntent(android.content.Intent)>[]--><androidx.core.graphics.drawable.IconCompat: void addToShortcutIntent(android.content.Intent,android.graphics.drawable.Drawable,android.content.Context)>[[try]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[i0 < 26]][[-$yysi0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.Intent addToIntent(android.content.Intent)>[]--><androidx.core.graphics.drawable.IconCompat: void addToShortcutIntent(android.content.Intent,android.graphics.drawable.Drawable,android.content.Context)>[[try]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 26
-$yysi0 < 26
try
Good road with try: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[i0 < 26], [-$yysi0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.Intent addToIntent(android.content.Intent)>[]--><androidx.core.graphics.drawable.IconCompat: void addToShortcutIntent(android.content.Intent,android.graphics.drawable.Drawable,android.content.Context)>[[try]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-i0 < 25
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20]][[-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-i0 < 20
-i1 < 23
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-i0 < 28
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
$i0 < 26
try
Good road with try: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.Intent addToIntent(android.content.Intent)>[]--><androidx.core.graphics.drawable.IconCompat: void addToShortcutIntent(android.content.Intent,android.graphics.drawable.Drawable,android.content.Context)>[[try]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 26
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.content.Context,android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 > 29
-i0 < 25
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28]][[-i1 < 23]][[i0 < 24]][[i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 28
-i1 < 23
i0 < 24
i1 < 29
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i1 > 29
-i1 < 25
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 > 29
-i0 < 25
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: java.lang.String getResPackage()>
One road protect good!
containsStatic:true
containsTry:true
25call by main package
-----------------------------------------
#################################################
N 279 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params: int getBreakStrategy()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)>[]--><android.text.PrecomputedText.Params: int getBreakStrategy()>
#1.the call statck between class <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)> to <android.text.PrecomputedText.Params: int getBreakStrategy()>has compatibility isssues！
-----------------------------------------
crashApis:112
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 280 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: boolean requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><android.content.pm.ShortcutManager: boolean requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 281 Potential Issue API: SDKCheck of <android.app.Notification: long getTimeoutAfter()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 26
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: long getTimeoutAfter(android.app.Notification)>[[-$i1 < 26]]--><android.app.Notification: long getTimeoutAfter()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 282 Potential Issue API: SDKCheck of <android.app.NotificationChannel: java.lang.String getParentChannelId()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: void deleteUnlistedNotificationChannels(java.util.Collection)>[[-$i0 < 30], [-$i0 < 26]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: void deleteUnlistedNotificationChannels(java.util.Collection)>[[-$i0 < 30]][[-$i0 < 26]]
-$i0 < 30
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void deleteUnlistedNotificationChannels(java.util.Collection)>[[-$i0 < 30], [-$i0 < 26]]--><android.app.NotificationChannel: java.lang.String getParentChannelId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 283 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager.WifiLock: void acquire()> is checking!!!
The life time of api is [1,30]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void access$2000(com.google.android.exoplayer2.SimpleExoPlayer)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void updateWakeAndWifiLock()>[]--><com.google.android.exoplayer2.WifiLockManager: void setStayAwake(boolean)>[]--><com.google.android.exoplayer2.WifiLockManager: void updateWifiLock()>[]--><android.net.wifi.WifiManager.WifiLock: void acquire()>
#1.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void access$2000(com.google.android.exoplayer2.SimpleExoPlayer)> to <android.net.wifi.WifiManager.WifiLock: void acquire()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void release()>[]--><com.google.android.exoplayer2.WifiLockManager: void setStayAwake(boolean)>[]--><com.google.android.exoplayer2.WifiLockManager: void updateWifiLock()>[]--><android.net.wifi.WifiManager.WifiLock: void acquire()>
#2.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void release()> to <android.net.wifi.WifiManager.WifiLock: void acquire()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setWakeMode(int)>[]--><com.google.android.exoplayer2.WifiLockManager: void setEnabled(boolean)>[]--><com.google.android.exoplayer2.WifiLockManager: void updateWifiLock()>[]--><android.net.wifi.WifiManager.WifiLock: void acquire()>
#3.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)> to <android.net.wifi.WifiManager.WifiLock: void acquire()>has compatibility isssues！
-----------------------------------------
crashApis:113
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 284 Potential Issue API: SDKCheck of <android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.app.ActivityCompat: androidx.core.view.DragAndDropPermissionsCompat requestDragAndDropPermissions(android.app.Activity,android.view.DragEvent)>[]--><androidx.core.view.DragAndDropPermissionsCompat: androidx.core.view.DragAndDropPermissionsCompat request(android.app.Activity,android.view.DragEvent)>[[-i0 < 24]]--><android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 285 Potential Issue API: SDKCheck of <android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 26
Good road: <androidx.core.view.ViewCompat: void addKeyboardNavigationClusters(android.view.View,java.util.Collection,int)>[[-$i1 < 26]]--><android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 286 Potential Issue API: SDKCheck of <android.view.View: float getTransitionAlpha()> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.transition.ViewUtilsApi19: float getTransitionAlpha(android.view.View)>[[try]]--><android.view.View: float getTransitionAlpha()>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: float getTransitionAlpha(android.view.View)>[]--><android.view.View: float getTransitionAlpha()>
#2.the call statck between class <androidx.transition.ViewUtilsApi29: float getTransitionAlpha(android.view.View)> to <android.view.View: float getTransitionAlpha()>has compatibility isssues！
-----------------------------------------
crashApis:114
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 287 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIntent(android.app.PendingIntent)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIntent(android.app.PendingIntent)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIntent(android.app.PendingIntent)>has compatibility isssues！
-----------------------------------------
crashApis:115
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 288 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean isImmutable()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean isImmutable()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: boolean isImmutable()>has compatibility isssues！
-----------------------------------------
crashApis:116
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 289 Potential Issue API: SDKCheck of <android.text.PrecomputedText: void removeSpan(java.lang.Object)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
$yysi0 < 28
$yysi0 < 28
-$i0 < 29
Good road: <androidx.core.text.util.LinkifyCompat: boolean addLinks(android.widget.TextView,int)>[[$yysi0 < 28]]--><androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,int)>[[$yysi0 < 28]]--><androidx.core.text.PrecomputedTextCompat: void removeSpan(java.lang.Object)>[[-$i0 < 29]]--><android.text.PrecomputedText: void removeSpan(java.lang.Object)>
One road protect good!
-$i0 < 29
Good road: <androidx.core.text.SpannableStringKt: void clearSpans(android.text.Spannable)>[]--><androidx.core.text.PrecomputedTextCompat: void removeSpan(java.lang.Object)>[[-$i0 < 29]]--><android.text.PrecomputedText: void removeSpan(java.lang.Object)>
One road protect good!
containsStatic:true
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 290 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: void <init>(int)> is checking!!!
The life time of api is [26,31]
19call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 < 26]]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
18 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26]][[$i1 >= 26]]
-$i1 < 26
$i1 >= 26
Good road: <androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioFocusRequest.Builder: void <init>(int)>
One road protect good!
containsStatic:false
containsTry:true
19call by main package
-----------------------------------------
#################################################
N 291 Potential Issue API: SDKCheck of <android.app.Notification: android.content.LocusId getLocusId()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 29
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: androidx.core.content.LocusIdCompat getLocusId(android.app.Notification)>[[-i0 < 29]]--><android.app.Notification: android.content.LocusId getLocusId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 292 Potential Issue API: SDKCheck of <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$yysi0 < 19
Good road: <androidx.transition.Visibility: android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues)>[]--><androidx.transition.Visibility: android.animation.Animator onDisappear(android.view.ViewGroup,androidx.transition.TransitionValues,int,androidx.transition.TransitionValues,int)>[]--><androidx.transition.TransitionUtils: android.view.View copyViewImage(android.view.ViewGroup,android.view.View,android.view.View)>[]--><androidx.transition.TransitionUtils: android.graphics.Bitmap createViewBitmap(android.view.View,android.graphics.Matrix,android.graphics.RectF,android.view.ViewGroup)>[[$yysi0 < 19]]--><android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 293 Potential Issue API: SDKCheck of <android.widget.Toolbar: int getTitleMarginBottom()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0]][[-$yysi0 < 16]][[$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
-$z0 == 0
-$yysi0 < 16
$yysi0 < 19
-$i1 < 24
Good road: <com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]--><android.widget.Toolbar: int getTitleMarginBottom()>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 294 Potential Issue API: SDKCheck of <android.view.DisplayCutout: int getSafeInsetBottom()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)>[]--><androidx.core.view.DisplayCutoutCompat: int getSafeInsetBottom()>[[-$i0 < 28]]--><android.view.DisplayCutout: int getSafeInsetBottom()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 295 Potential Issue API: SDKCheck of <android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.app.ActivityCompat$Api30Impl: void setLocusContext(android.app.Activity,androidx.core.content.LocusIdCompat,android.os.Bundle)>[]--><android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>
#1.the call statck between class <androidx.core.app.ActivityCompat$Api30Impl: void setLocusContext(android.app.Activity,androidx.core.content.LocusIdCompat,android.os.Bundle)> to <android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>has compatibility isssues！
-----------------------------------------
crashApis:117
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 296 Potential Issue API: SDKCheck of <android.text.style.AlignmentSpan.Standard: void <init>(android.text.Layout.Alignment)> is checking!!!
The life time of api is [1,22]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerImplInternal: boolean handleMessage(android.os.Message)>[[try]]--><com.google.android.exoplayer2.ExoPlayerImplInternal: void doSomeWork()>[]--><com.google.android.exoplayer2.text.TextRenderer: void render(long,long)>[]--><com.google.android.exoplayer2.text.SubtitleOutputBuffer: java.util.List getCues(long)>[]--><com.google.android.exoplayer2.text.ttml.TtmlSubtitle: java.util.List getCues(long)>[]--><com.google.android.exoplayer2.text.ttml.TtmlNode: java.util.List getCues(long,java.util.Map,java.util.Map,java.util.Map)>[]--><com.google.android.exoplayer2.text.ttml.TtmlNode: void traverseForStyle(long,java.util.Map,java.util.Map)>[]--><com.google.android.exoplayer2.text.ttml.TtmlNode: void applyStyleToOutput(java.util.Map,android.text.SpannableStringBuilder,int,int)>[]--><com.google.android.exoplayer2.text.ttml.TtmlRenderUtil: void applyStylesToSpan(android.text.SpannableStringBuilder,int,int,com.google.android.exoplayer2.text.ttml.TtmlStyle)>[]--><android.text.style.AlignmentSpan.Standard: void <init>(android.text.Layout.Alignment)>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.google.android.exoplayer2.text.webvtt.WebvttCueParser: void applySpansForTag(java.lang.String,com.google.android.exoplayer2.text.webvtt.WebvttCueParser$StartTag,android.text.SpannableStringBuilder,java.util.List,java.util.List)>[]--><com.google.android.exoplayer2.text.webvtt.WebvttCueParser: void applyStyleToText(android.text.SpannableStringBuilder,com.google.android.exoplayer2.text.webvtt.WebvttCssStyle,int,int)>[]--><android.text.style.AlignmentSpan.Standard: void <init>(android.text.Layout.Alignment)>
#2.the call statck between class <com.google.android.exoplayer2.text.webvtt.WebvttCueParser: void applySpansForTag(java.lang.String,com.google.android.exoplayer2.text.webvtt.WebvttCueParser$StartTag,android.text.SpannableStringBuilder,java.util.List,java.util.List)> to <android.text.style.AlignmentSpan.Standard: void <init>(android.text.Layout.Alignment)>has compatibility isssues！
-----------------------------------------
crashApis:118
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 297 Potential Issue API: SDKCheck of <android.graphics.drawable.Icon: int getType()> is checking!!!
The life time of api is [28,31]
11call roads:
0 Mainhead roads:
11 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
-i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.content.Context,android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action: void <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,androidx.core.app.RemoteInput[],androidx.core.app.RemoteInput[],boolean,int,boolean,boolean)>[]--><androidx.core.graphics.drawable.IconCompat: int getType()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28]][[-i1 < 23]][[i0 < 24]][[i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 28
-i1 < 23
i0 < 24
i1 < 29
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
i0 < 23
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getType()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata$Builder: androidx.core.app.NotificationCompat$BubbleMetadata$Builder setIcon(androidx.core.graphics.drawable.IconCompat)>[]--><androidx.core.graphics.drawable.IconCompat: int getType()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
-i0 < 28
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getType()>
One road protect good!
containsStatic:true
containsTry:true
12call by main package
-----------------------------------------
#################################################
N 298 Potential Issue API: SDKCheck of <android.app.RemoteAction: void setShouldShowIcon(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[[-$i0 < 28]]--><android.app.RemoteAction: void setShouldShowIcon(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 299 Potential Issue API: SDKCheck of <android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$yysi0 >= 30
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.DisplayCutoutCompat: androidx.core.graphics.Insets getWaterfallInsets()>[[-$yysi0 >= 30]]--><android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>
#1.the call statck between class <androidx.core.view.DisplayCutoutCompat: androidx.core.graphics.Insets getWaterfallInsets()> to <android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>has compatibility isssues！
-----------------------------------------
crashApis:119
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 300 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.widget.RemoteViews createBigContentView()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createBigContentView()>[[-i0 < 24], [i0 >= 16]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createBigContentView()>[[-i0 < 24]][[i0 >= 16]]
-i0 < 24
i0 >= 16
Good road: <androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews createBigContentView()>[[-i0 < 24], [i0 >= 16]]--><android.app.Notification.Builder: android.widget.RemoteViews createBigContentView()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 301 Potential Issue API: SDKCheck of <android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.PointerIconCompat: androidx.core.view.PointerIconCompat create(android.graphics.Bitmap,float,float)>[[-$i0 < 24]]--><android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 302 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int mandatorySystemGestures()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int mandatorySystemGestures()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int mandatorySystemGestures()>has compatibility isssues！
-----------------------------------------
crashApis:120
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 303 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: boolean updateShortcuts(java.util.List)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><android.content.pm.ShortcutManager: boolean updateShortcuts(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 304 Potential Issue API: SDKCheck of <android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 305 Potential Issue API: SDKCheck of <android.app.Dialog: android.view.View requireViewById(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 28
Good road: <androidx.core.app.DialogCompat: android.view.View requireViewById(android.app.Dialog,int)>[[-i1 < 28]]--><android.app.Dialog: android.view.View requireViewById(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 306 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setSuppressNotification(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setSuppressNotification(boolean)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setSuppressNotification(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:121
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 307 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setCustomHeadsUpContentView(android.widget.RemoteViews)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24]][[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
-i0 < 24
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setCustomHeadsUpContentView(android.widget.RemoteViews)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 308 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addHistoricMessage(android.app.Notification.MessagingStyle.Message)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28], [-i0 < 26]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[i0 < 28]][[-i0 < 26]]
-i0 < 24
i0 < 28
-i0 < 26
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28], [-i0 < 26]]--><android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addHistoricMessage(android.app.Notification.MessagingStyle.Message)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 309 Potential Issue API: SDKCheck of <android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>[]--><android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>
#1.the call statck between class <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)> to <android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>has compatibility isssues！
-----------------------------------------
crashApis:122
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 310 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: int getDesiredHeight()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: int getDesiredHeight()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: int getDesiredHeight()>has compatibility isssues！
-----------------------------------------
crashApis:123
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 311 Potential Issue API: SDKCheck of <android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 26
Good road: <androidx.viewpager2.widget.ViewPager2$RecyclerViewImpl: void <init>(androidx.viewpager2.widget.ViewPager2,android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.core.view.ViewConfigurationCompat: float getScaledHorizontalScrollFactor(android.view.ViewConfiguration,android.content.Context)>[[-$i0 < 26]]--><android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()>
One road protect good!
-$i0 < 26
Good road: <com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.core.view.ViewConfigurationCompat: float getScaledHorizontalScrollFactor(android.view.ViewConfiguration,android.content.Context)>[[-$i0 < 26]]--><android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 312 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemGestureInsets(android.graphics.Insets)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemGestureInsets(android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemGestureInsets(android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:124
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 313 Potential Issue API: SDKCheck of <android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$z0 == 0
!!!this api will crash on sdk 23 
Error road: <androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>[[-$z0 == 0]]--><android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
#1.the call statck between class <androidx.core.text.util.LinkifyCompat: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)> to <android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>has compatibility isssues！
-----------------------------------------
crashApis:125
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 314 Potential Issue API: SDKCheck of <android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText.Params)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat: androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)>[[try], [-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat: androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)>[[try]][[-i0 < 29]]
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)>[[try], [-i0 < 29]]--><android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText.Params)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 315 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle: void <init>(android.app.Person)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><android.app.Notification.MessagingStyle: void <init>(android.app.Person)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 316 Potential Issue API: SDKCheck of <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)> is checking!!!
The life time of api is [26,31]
4call roads:
0 Mainhead roads:
4 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color convertTo(android.graphics.Color,android.graphics.ColorSpace$Named)>[]--><android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color convertTo(android.graphics.Color,android.graphics.ColorSpace$Named)> to <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.BitmapKt: android.graphics.Bitmap createBitmap$default(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace,int,java.lang.Object)>[]--><android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>
#2.the call statck between class <androidx.core.graphics.BitmapKt: android.graphics.Bitmap createBitmap$default(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace,int,java.lang.Object)> to <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long convertTo(int,android.graphics.ColorSpace$Named)>[]--><android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>
#3.the call statck between class <androidx.core.graphics.ColorKt: long convertTo(int,android.graphics.ColorSpace$Named)> to <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long convertTo(long,android.graphics.ColorSpace$Named)>[]--><android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>
#4.the call statck between class <androidx.core.graphics.ColorKt: long convertTo(long,android.graphics.ColorSpace$Named)> to <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>has compatibility isssues！
-----------------------------------------
crashApis:126
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 317 Potential Issue API: SDKCheck of <android.app.Person.Builder: void <init>()> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: void <init>()>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 318 Potential Issue API: SDKCheck of <android.app.job.JobWorkItem: void <init>(android.content.Intent)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.JobIntentService$JobWorkEnqueuer: void enqueueWork(android.content.Intent)>[]--><android.app.job.JobWorkItem: void <init>(android.content.Intent)>
#1.the call statck between class <androidx.core.app.JobIntentService$JobWorkEnqueuer: void enqueueWork(android.content.Intent)> to <android.app.job.JobWorkItem: void <init>(android.content.Intent)>has compatibility isssues！
-----------------------------------------
crashApis:127
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 319 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setVibrationPattern(long[])> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setVibrationPattern(long[])>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setVibrationPattern(long[])>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 320 Potential Issue API: SDKCheck of <android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.app.CoreComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>[]--><android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>
#1.the call statck between class <androidx.core.app.CoreComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)> to <android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:128
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 321 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 322 Potential Issue API: SDKCheck of <android.content.Context: java.io.File getDataDir()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.content.ContextCompat: java.io.File getDataDir(android.content.Context)>[[-i0 < 24]]--><android.content.Context: java.io.File getDataDir()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 323 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,java.lang.CharSequence)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: void disableShortcuts(android.content.Context,java.util.List,java.lang.CharSequence)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 324 Potential Issue API: SDKCheck of <android.view.DisplayCutout: java.util.List getBoundingRects()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.DisplayCutoutCompat: java.util.List getBoundingRects()>[[-$i0 < 28]]--><android.view.DisplayCutout: java.util.List getBoundingRects()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 325 Potential Issue API: SDKCheck of <android.app.Notification: boolean getAllowSystemGeneratedContextualActions()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: boolean getAllowSystemGeneratedContextualActions(android.app.Notification)>[[-$i0 < 29]]--><android.app.Notification: boolean getAllowSystemGeneratedContextualActions()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 326 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 327 Potential Issue API: SDKCheck of <android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setWeight(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setWeight(int)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 328 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: int getDrawingOrder()>[[-$i0 < 24]]--><android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 329 Potential Issue API: SDKCheck of <android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)> is checking!!!
The life time of api is [29,31]
19call roads:
1 Mainhead roads:
-i0 < 26
-$i0 < 29
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: int onStartCommand(android.content.Intent,int,int)>[]--><agersant.polaris.PolarisPlaybackService: void handleIntent(android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
18 Packageshead roads:
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-$i0 < 29
Good road: <com.google.android.exoplayer2.audio.DefaultAudioSink$Configuration: android.media.AudioTrack createAudioTrackV21(boolean,com.google.android.exoplayer2.audio.AudioAttributes,int)>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
-i0 < 26
-$i0 < 29
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><com.google.android.exoplayer2.audio.AudioAttributes: android.media.AudioAttributes getAudioAttributesV21()>[[-$i0 < 29]]--><android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
One road protect good!
containsStatic:false
containsTry:true
19call by main package
-----------------------------------------
#################################################
N 330 Potential Issue API: SDKCheck of <android.app.Notification: android.app.Notification.BubbleMetadata getBubbleMetadata()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$BubbleMetadata getBubbleMetadata(android.app.Notification)>[[-$i0 < 29]]--><android.app.Notification: android.app.Notification.BubbleMetadata getBubbleMetadata()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 331 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat: androidx.core.view.accessibility.AccessibilityNodeInfoCompat getTargetForRegion(android.graphics.Region)>[[-i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 332 Potential Issue API: SDKCheck of <android.graphics.Color: float green(long)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float getGreen(long)>[]--><android.graphics.Color: float green(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float getGreen(long)> to <android.graphics.Color: float green(long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component2(long)>[]--><android.graphics.Color: float green(long)>
#2.the call statck between class <androidx.core.graphics.ColorKt: float component2(long)> to <android.graphics.Color: float green(long)>has compatibility isssues！
-----------------------------------------
crashApis:129
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 333 Potential Issue API: SDKCheck of <android.os.LocaleList: int hashCode()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListPlatformWrapper: int hashCode()>[]--><android.os.LocaleList: int hashCode()>
#1.the call statck between class <androidx.core.os.LocaleListPlatformWrapper: int hashCode()> to <android.os.LocaleList: int hashCode()>has compatibility isssues！
-----------------------------------------
crashApis:130
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 334 Potential Issue API: SDKCheck of <android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 27
Good road: <androidx.core.widget.TextViewCompat: void setAutoSizeTextTypeWithDefaults(android.widget.TextView,int)>[[-$i1 < 27]]--><android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 335 Potential Issue API: SDKCheck of <android.view.Window.Callback: void onPointerCaptureChanged(boolean)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 336 Potential Issue API: SDKCheck of <android.app.NotificationChannelGroup: java.lang.String getId()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[$i0 < 28], [-$i0 < 26]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[$i0 < 28]][[-$i0 < 26]]
$i0 < 28
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[$i0 < 28], [-$i0 < 26]]--><android.app.NotificationChannelGroup: java.lang.String getId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 337 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: java.lang.CharSequence getShortLabel()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[]--><android.content.pm.ShortcutInfo: java.lang.CharSequence getShortLabel()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: java.lang.CharSequence getShortLabel()>has compatibility isssues！
-----------------------------------------
crashApis:131
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 338 Potential Issue API: SDKCheck of <android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.view.PointerIconCompat: androidx.core.view.PointerIconCompat load(android.content.res.Resources,int)>[[-$i1 < 24]]--><android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 339 Potential Issue API: SDKCheck of <android.os.Trace: void setCounter(java.lang.String,long)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 29
Good road: <androidx.core.os.TraceCompat: void setCounter(java.lang.String,int)>[[-i1 < 29]]--><android.os.Trace: void setCounter(java.lang.String,long)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 340 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.graphics.Insets getInsets(int)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)>[]--><android.view.WindowInsets: android.graphics.Insets getInsets(int)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)> to <android.view.WindowInsets: android.graphics.Insets getInsets(int)>has compatibility isssues！
-----------------------------------------
crashApis:132
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 341 Potential Issue API: SDKCheck of <android.graphics.Color: float getComponent(int)> is checking!!!
The life time of api is [26,31]
4call roads:
0 Mainhead roads:
4 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component4(android.graphics.Color)>[]--><android.graphics.Color: float getComponent(int)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float component4(android.graphics.Color)> to <android.graphics.Color: float getComponent(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component2(android.graphics.Color)>[]--><android.graphics.Color: float getComponent(int)>
#2.the call statck between class <androidx.core.graphics.ColorKt: float component2(android.graphics.Color)> to <android.graphics.Color: float getComponent(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component3(android.graphics.Color)>[]--><android.graphics.Color: float getComponent(int)>
#3.the call statck between class <androidx.core.graphics.ColorKt: float component3(android.graphics.Color)> to <android.graphics.Color: float getComponent(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component1(android.graphics.Color)>[]--><android.graphics.Color: float getComponent(int)>
#4.the call statck between class <androidx.core.graphics.ColorKt: float component1(android.graphics.Color)> to <android.graphics.Color: float getComponent(int)>has compatibility isssues！
-----------------------------------------
crashApis:133
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 342 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: int getIconMaxWidth()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: int getIconMaxWidth(android.content.Context)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: int getIconMaxWidth()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 343 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <androidx.core.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
#1.the call statck between class <androidx.core.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)> to <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>has compatibility isssues！
-----------------------------------------
crashApis:134
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 344 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)> is checking!!!
The life time of api is [24,30]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[[-$i0 < 24]]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void registerNetworkCallbackV24()>[]--><android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>
#1.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>has compatibility isssues！
-----------------------------------------
-$i0 < 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void setRequirements(com.google.android.exoplayer2.scheduler.Requirements)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[[-$i0 < 24]]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void registerNetworkCallbackV24()>[]--><android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>
#2.the call statck between class <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)> to <android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>has compatibility isssues！
-----------------------------------------
crashApis:135
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 345 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIcon(android.graphics.drawable.Icon)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIcon(android.graphics.drawable.Icon)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIcon(android.graphics.drawable.Icon)>has compatibility isssues！
-----------------------------------------
crashApis:136
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 346 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()> is checking!!!
The life time of api is [25,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
$i0 < 25
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: int getMaxShortcutCountPerActivity(android.content.Context)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()>
One road protect good!
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[]--><androidx.core.content.pm.ShortcutManagerCompat: int getMaxShortcutCountPerActivity(android.content.Context)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 347 Potential Issue API: SDKCheck of <android.text.PrecomputedText: int getParagraphStart(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 29
Good road: <androidx.core.text.PrecomputedTextCompat: int getParagraphStart(int)>[[-$i1 < 29]]--><android.text.PrecomputedText: int getParagraphStart(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 348 Potential Issue API: SDKCheck of <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)> is checking!!!
The life time of api is [24,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
-$i1 < 24
Good road: <com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void setLabelVisibilityMode(int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationPresenter: void updateMenuView(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationMenuView: void buildMenuView()>[]--><com.google.android.material.bottomnavigation.BottomNavigationItemView: void initialize(androidx.appcompat.view.menu.MenuItemImpl,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationItemView: void setEnabled(boolean)>[]--><androidx.core.view.PointerIconCompat: androidx.core.view.PointerIconCompat getSystemIcon(android.content.Context,int)>[[-$i1 < 24]]--><android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
One road protect good!
-$i1 < 24
Good road: <com.google.android.material.tabs.TabLayout$TabView: void <init>(com.google.android.material.tabs.TabLayout,android.content.Context)>[]--><androidx.core.view.PointerIconCompat: androidx.core.view.PointerIconCompat getSystemIcon(android.content.Context,int)>[[-$i1 < 24]]--><android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
One road protect good!
!!!this api will crash on sdk 23 
Error road: <com.google.android.material.chip.Chip: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>[]--><android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
#3.the call statck between class <com.google.android.material.chip.Chip: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)> to <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>has compatibility isssues！
-----------------------------------------
crashApis:137
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 349 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int ime()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int ime()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int ime()>has compatibility isssues！
-----------------------------------------
crashApis:138
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 350 Potential Issue API: SDKCheck of <android.widget.TextView: int getAutoSizeTextType()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 27
Good road: <androidx.core.widget.TextViewCompat: int getAutoSizeTextType(android.widget.TextView)>[[-$i0 < 27]]--><android.widget.TextView: int getAutoSizeTextType()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 351 Potential Issue API: SDKCheck of <android.view.View: boolean isAccessibilityHeading()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$5: java.lang.Boolean frameworkGet(android.view.View)>[]--><android.view.View: boolean isAccessibilityHeading()>
#1.the call statck between class <androidx.core.view.ViewCompat$5: java.lang.Boolean frameworkGet(android.view.View)> to <android.view.View: boolean isAccessibilityHeading()>has compatibility isssues！
-----------------------------------------
crashApis:139
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 352 Potential Issue API: SDKCheck of <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)> is checking!!!
The life time of api is [26,31]
17call roads:
0 Mainhead roads:
17 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 24
-i0 < 28
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 26
i0 < 30
Good road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setSmallIcon(androidx.core.graphics.drawable.IconCompat)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-$i1 < 28
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 23
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 23
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$Style: android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int,int)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 26
-i0 < 26
i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 25
-i0 < 26
i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20]][[-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 20
-i1 < 23
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-i0 < 28
-i0 < 26
i0 < 30
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
-$i0 < 26
-i0 < 26
i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
i0 > 29
-i0 < 25
-i0 < 26
i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
i1 > 29
-i1 < 25
-i0 < 26
i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26]][[i0 < 30]]
i0 > 29
-i0 < 25
-i0 < 26
i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 26], [i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
One road protect good!
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.drawable.IconKt: android.graphics.drawable.Icon toAdaptiveIcon(android.graphics.Bitmap)>[]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
#17.the call statck between class <androidx.core.graphics.drawable.IconKt: android.graphics.drawable.Icon toAdaptiveIcon(android.graphics.Bitmap)> to <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>has compatibility isssues！
-----------------------------------------
crashApis:140
containsStatic:false
containsTry:false
18call by main package
-----------------------------------------
#################################################
N 353 Potential Issue API: SDKCheck of <android.content.res.Configuration: android.os.LocaleList getLocales()> is checking!!!
The life time of api is [24,31]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.os.ConfigurationCompat: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)>[[-$i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-$i0 < 24
Good road: <com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioTrackScore: void <init>(com.google.android.exoplayer2.Format,com.google.android.exoplayer2.trackselection.DefaultTrackSelector$Parameters,int)>[]--><com.google.android.exoplayer2.util.Util: java.lang.String[] getSystemLanguageCodes()>[]--><com.google.android.exoplayer2.util.Util: java.lang.String[] getSystemLocales()>[[-$i0 < 24]]--><com.google.android.exoplayer2.util.Util: java.lang.String[] getSystemLocalesV24(android.content.res.Configuration)>[]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-i0 < 24
Good road: <com.google.android.material.timepicker.ChipTextInputComboView: void <init>(android.content.Context)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void updateHintLocales()>[[-i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
-i0 < 24
Good road: <com.google.android.material.timepicker.ChipTextInputComboView: void onConfigurationChanged(android.content.res.Configuration)>[]--><com.google.android.material.timepicker.ChipTextInputComboView: void updateHintLocales()>[[-i0 < 24]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
i0 >= 28
Good road: <androidx.core.telephony.mbms.MbmsHelper: java.lang.CharSequence getBestNameForService(android.content.Context,android.telephony.mbms.ServiceInfo)>[[i0 >= 28]]--><android.content.res.Configuration: android.os.LocaleList getLocales()>
One road protect good!
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 354 Potential Issue API: SDKCheck of <android.view.WindowInsets: boolean isVisible(int)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$Impl30: boolean isVisible(int)>[]--><android.view.WindowInsets: boolean isVisible(int)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl30: boolean isVisible(int)> to <android.view.WindowInsets: boolean isVisible(int)>has compatibility isssues！
-----------------------------------------
crashApis:141
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 355 Potential Issue API: SDKCheck of <android.view.MenuItem: android.graphics.PorterDuff.Mode getIconTintMode()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem)>[[], [-$i0 < 26]]--><android.view.MenuItem: android.graphics.PorterDuff.Mode getIconTintMode()>
#1.the call statck between class <androidx.core.view.MenuItemCompat: android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem)> to <android.view.MenuItem: android.graphics.PorterDuff.Mode getIconTintMode()>has compatibility isssues！
-----------------------------------------
crashApis:142
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 356 Potential Issue API: SDKCheck of <android.view.View: boolean isImportantForAutofill()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: boolean isImportantForAutofill(android.view.View)>[[-$i0 < 26]]--><android.view.View: boolean isImportantForAutofill()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 357 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setCustomBigContentView(android.widget.RemoteViews)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24]][[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
-i0 < 24
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setCustomBigContentView(android.widget.RemoteViews)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 358 Potential Issue API: SDKCheck of <android.view.inputmethod.InputContentInfo: void requestPermission()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: void requestPermission()>[]--><android.view.inputmethod.InputContentInfo: void requestPermission()>
#1.the call statck between class <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: void requestPermission()> to <android.view.inputmethod.InputContentInfo: void requestPermission()>has compatibility isssues！
-----------------------------------------
crashApis:143
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 359 Potential Issue API: SDKCheck of <android.view.MenuItem: int getAlphabeticModifiers()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: int getAlphabeticModifiers(android.view.MenuItem)>[[], [-$i0 < 26]]--><android.view.MenuItem: int getAlphabeticModifiers()>
#1.the call statck between class <androidx.core.view.MenuItemCompat: int getAlphabeticModifiers(android.view.MenuItem)> to <android.view.MenuItem: int getAlphabeticModifiers()>has compatibility isssues！
-----------------------------------------
crashApis:144
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 360 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: java.util.List getShortcuts(int)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 25
-i1 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[-i1 < 30]]--><android.content.pm.ShortcutManager: java.util.List getShortcuts(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 361 Potential Issue API: SDKCheck of <android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 362 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int statusBars()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int statusBars()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int statusBars()>has compatibility isssues！
-----------------------------------------
crashApis:145
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 363 Potential Issue API: SDKCheck of <android.app.RemoteAction: void setEnabled(boolean)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[]--><android.app.RemoteAction: void setEnabled(boolean)>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()> to <android.app.RemoteAction: void setEnabled(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:146
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 364 Potential Issue API: SDKCheck of <android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.text.HtmlCompat: android.text.Spanned fromHtml(java.lang.String,int)>[[-$i1 < 24]]--><android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 365 Potential Issue API: SDKCheck of <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)> is checking!!!
The life time of api is [30,31]
16call roads:
0 Mainhead roads:
16 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
-i0 < 24
-i0 < 28
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
-i0 < 30
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 30
Good road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setSmallIcon(androidx.core.graphics.drawable.IconCompat)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-$i1 < 28
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 23
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 23
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$Style: android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int,int)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 26
-i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 25
-i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20]][[-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
-i0 < 20
-i1 < 23
-i0 < 30
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-i0 < 28
-i0 < 30
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
-$i0 < 26
-i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
i0 > 29
-i0 < 25
-i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
i1 > 29
-i1 < 25
-i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]
i0 > 29
-i0 < 25
-i0 < 30
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[-i0 < 30]]--><android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
One road protect good!
containsStatic:false
containsTry:false
17call by main package
-----------------------------------------
#################################################
N 366 Potential Issue API: SDKCheck of <android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>[[-i0 < 26]]
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20]][[i0 < 26]]--><androidx.core.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>[[-i0 < 26]]
-i1 < 20
i0 < 26
-i0 < 26
Good road: <androidx.core.app.RemoteInput: void addResultsToIntent(androidx.core.app.RemoteInput[],android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>[[-i0 < 26]]--><android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 367 Potential Issue API: SDKCheck of <android.app.RemoteAction: boolean isEnabled()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><android.app.RemoteAction: boolean isEnabled()>
#1.the call statck between class <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)> to <android.app.RemoteAction: boolean isEnabled()>has compatibility isssues！
-----------------------------------------
crashApis:147
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 368 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: void <init>(android.view.WindowInsets)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)>[]--><android.view.WindowInsets.Builder: void <init>(android.view.WindowInsets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)> to <android.view.WindowInsets.Builder: void <init>(android.view.WindowInsets)>has compatibility isssues！
-----------------------------------------
crashApis:148
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 369 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.ColorSpace.Model getModel()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: android.graphics.ColorSpace.Model getModel()>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: android.graphics.ColorSpace.Model getModel()>has compatibility isssues！
-----------------------------------------
crashApis:149
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 370 Potential Issue API: SDKCheck of <android.view.View: void setTooltipText(java.lang.CharSequence)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: void setTooltipText(android.view.View,java.lang.CharSequence)>[[-$i0 < 26]]--><android.view.View: void setTooltipText(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 371 Potential Issue API: SDKCheck of <android.os.LocaleList: void <init>(java.util.Locale[])> is checking!!!
The life time of api is [24,31]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
$i0 < 24
-$i0 < 24
Good road: <androidx.core.os.ConfigurationCompat: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)>[[$i0 < 24]]--><androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>[[-$i0 < 24]]--><android.os.LocaleList: void <init>(java.util.Locale[])>
One road protect good!
$i0 < 24
-$i0 < 24
Good road: <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getDefault()>[[$i0 < 24]]--><androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>[[-$i0 < 24]]--><android.os.LocaleList: void <init>(java.util.Locale[])>
One road protect good!
$i1 < 21
-$i0 < 24
Good road: <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)>[[$i1 < 21]]--><androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>[[-$i0 < 24]]--><android.os.LocaleList: void <init>(java.util.Locale[])>
One road protect good!
-$i0 < 24
Good road: <androidx.core.os.LocaleListCompat: void <clinit>()>[]--><androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>[[-$i0 < 24]]--><android.os.LocaleList: void <init>(java.util.Locale[])>
One road protect good!
$i0 < 24
-$i0 < 24
Good road: <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getAdjustedDefault()>[[$i0 < 24]]--><androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>[[-$i0 < 24]]--><android.os.LocaleList: void <init>(java.util.Locale[])>
One road protect good!
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 372 Potential Issue API: SDKCheck of <android.app.ActivityOptions: android.app.ActivityOptions setLaunchBounds(android.graphics.Rect)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 >= 24
Good road: <androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl: androidx.core.app.ActivityOptionsCompat setLaunchBounds(android.graphics.Rect)>[[$i0 >= 24]]--><android.app.ActivityOptions: android.app.ActivityOptions setLaunchBounds(android.graphics.Rect)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 373 Potential Issue API: SDKCheck of <android.content.Context: java.util.concurrent.Executor getMainExecutor()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>[[-$i0 < 28]]--><android.content.Context: java.util.concurrent.Executor getMainExecutor()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 374 Potential Issue API: SDKCheck of <android.graphics.Canvas: void enableZ()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!--><androidx.transition.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>[[i0 >= 21], [-i0 < 29]]
###Multi invoking in one method, need manual check!!!--><androidx.transition.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>[[i0 >= 21]][[-i0 < 29]]
i0 >= 21
-i0 < 29
Good road: <androidx.transition.GhostViewPort: void onDraw(android.graphics.Canvas)>[]--><androidx.transition.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>[[i0 >= 21], [-i0 < 29]]--><android.graphics.Canvas: void enableZ()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 375 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getHintText()>[[-$i0 < 26]]--><android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 376 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.view.WindowInsetsCompat inset(int,int,int,int)>[]--><android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.view.WindowInsetsCompat inset(int,int,int,int)> to <android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>has compatibility isssues！
-----------------------------------------
crashApis:150
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 377 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
-$i0 < 29
Good road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><androidx.core.content.pm.ShortcutInfoCompat: androidx.core.content.LocusIdCompat getLocusId(android.content.pm.ShortcutInfo)>[[-$i0 < 29]]--><android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 378 Potential Issue API: SDKCheck of <android.graphics.Color: long convert(int,android.graphics.ColorSpace)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long convertTo(int,android.graphics.ColorSpace$Named)>[]--><android.graphics.Color: long convert(int,android.graphics.ColorSpace)>
#1.the call statck between class <androidx.core.graphics.ColorKt: long convertTo(int,android.graphics.ColorSpace$Named)> to <android.graphics.Color: long convert(int,android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long convertTo(int,android.graphics.ColorSpace)>[]--><android.graphics.Color: long convert(int,android.graphics.ColorSpace)>
#2.the call statck between class <androidx.core.graphics.ColorKt: long convertTo(int,android.graphics.ColorSpace)> to <android.graphics.Color: long convert(int,android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
crashApis:151
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 379 Potential Issue API: SDKCheck of <android.content.Context: boolean isDeviceProtectedStorage()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.content.ContextCompat: boolean isDeviceProtectedStorage(android.content.Context)>[[-$i0 < 24]]--><android.content.Context: boolean isDeviceProtectedStorage()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 380 Potential Issue API: SDKCheck of <android.os.LocaleList: int indexOf(java.util.Locale)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListCompat: int indexOf(java.util.Locale)>[]--><androidx.core.os.LocaleListPlatformWrapper: int indexOf(java.util.Locale)>[]--><android.os.LocaleList: int indexOf(java.util.Locale)>
#1.the call statck between class <androidx.core.os.LocaleListCompat: int indexOf(java.util.Locale)> to <android.os.LocaleList: int indexOf(java.util.Locale)>has compatibility isssues！
-----------------------------------------
crashApis:152
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 381 Potential Issue API: SDKCheck of <android.os.LocaleList: java.lang.String toString()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListPlatformWrapper: java.lang.String toString()>[]--><android.os.LocaleList: java.lang.String toString()>
#1.the call statck between class <androidx.core.os.LocaleListPlatformWrapper: java.lang.String toString()> to <android.os.LocaleList: java.lang.String toString()>has compatibility isssues！
-----------------------------------------
crashApis:153
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 382 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)> is checking!!!
The life time of api is [29,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 383 Potential Issue API: SDKCheck of <android.os.LocaleList: java.util.Locale get(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListCompat: java.util.Locale get(int)>[]--><androidx.core.os.LocaleListPlatformWrapper: java.util.Locale get(int)>[]--><android.os.LocaleList: java.util.Locale get(int)>
#1.the call statck between class <androidx.core.os.LocaleListCompat: java.util.Locale get(int)> to <android.os.LocaleList: java.util.Locale get(int)>has compatibility isssues！
-----------------------------------------
crashApis:154
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 384 Potential Issue API: SDKCheck of <android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 385 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)> is checking!!!
The life time of api is [26,31]
5call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
One road protect good!
4 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
One road protect good!
-i3 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void onCreate()>[]--><com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int,int)>[[-i3 < 26]]--><android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
One road protect good!
-i3 < 26
Good road: <com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int)>[]--><com.google.android.exoplayer2.util.NotificationUtil: void createNotificationChannel(android.content.Context,java.lang.String,int,int,int)>[[-i3 < 26]]--><android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
One road protect good!
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 386 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff.Mode)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: void setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode)>[[], [-$i0 < 26]]--><android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff.Mode)>
#1.the call statck between class <androidx.core.view.MenuItemCompat: void setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode)> to <android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff.Mode)>has compatibility isssues！
-----------------------------------------
crashApis:155
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 387 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: long getLastChangedTimestamp()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: long getLastChangedTimestamp()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: long getLastChangedTimestamp()>has compatibility isssues！
-----------------------------------------
crashApis:156
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 388 Potential Issue API: SDKCheck of <android.app.RemoteInput: void setResultsSource(android.content.Intent,int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: void setResultsSource(android.content.Intent,int)>[[-i1 < 28]]
###Multi invoking in one method, need manual check!!!,android.content.Intent,android.os.Bundle)>[[-i1 < 20]][[i0 < 26]]--><androidx.core.app.RemoteInput: void setResultsSource(android.content.Intent,int)>[[-i1 < 28]]
-i1 < 20
i0 < 26
-i1 < 28
Good road: <androidx.core.app.RemoteInput: void addResultsToIntent(androidx.core.app.RemoteInput[],android.content.Intent,android.os.Bundle)>[[-i1 < 20], [i0 < 26]]--><androidx.core.app.RemoteInput: void setResultsSource(android.content.Intent,int)>[[-i1 < 28]]--><android.app.RemoteInput: void setResultsSource(android.content.Intent,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 389 Potential Issue API: SDKCheck of <android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[]--><android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>
#1.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)> to <android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>has compatibility isssues！
-----------------------------------------
crashApis:157
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 390 Potential Issue API: SDKCheck of <android.view.View: android.view.View.AccessibilityDelegate getAccessibilityDelegate()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.ViewCompat: android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View)>[[-$i0 < 29]]--><android.view.View: android.view.View.AccessibilityDelegate getAccessibilityDelegate()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 391 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params: android.text.TextPaint getTextPaint()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)>[]--><android.text.PrecomputedText.Params: android.text.TextPaint getTextPaint()>
#1.the call statck between class <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)> to <android.text.PrecomputedText.Params: android.text.TextPaint getTextPaint()>has compatibility isssues！
-----------------------------------------
crashApis:158
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 392 Potential Issue API: SDKCheck of <android.media.session.MediaSessionManager.RemoteUserInfo: java.lang.String getPackageName()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(android.media.session.MediaSessionManager$RemoteUserInfo)>[]--><android.media.session.MediaSessionManager.RemoteUserInfo: java.lang.String getPackageName()>
#1.the call statck between class <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(android.media.session.MediaSessionManager$RemoteUserInfo)> to <android.media.session.MediaSessionManager.RemoteUserInfo: java.lang.String getPackageName()>has compatibility isssues！
-----------------------------------------
crashApis:159
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 393 Potential Issue API: SDKCheck of <android.location.GnssStatus: int getSatelliteCount()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: int getSatelliteCount()>[]--><android.location.GnssStatus: int getSatelliteCount()>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: int getSatelliteCount()> to <android.location.GnssStatus: int getSatelliteCount()>has compatibility isssues！
-----------------------------------------
crashApis:160
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 394 Potential Issue API: SDKCheck of <android.location.GnssStatus: float getCarrierFrequencyHz(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 26
Good road: <androidx.core.location.GnssStatusWrapper: float getCarrierFrequencyHz(int)>[[-$i1 < 26]]--><android.location.GnssStatus: float getCarrierFrequencyHz(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 395 Potential Issue API: SDKCheck of <android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.app.NotificationManagerCompat: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>[[-$i0 < 28]]--><android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 396 Potential Issue API: SDKCheck of <android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.app.CoreComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>[]--><android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
#1.the call statck between class <androidx.core.app.CoreComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)> to <android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>has compatibility isssues！
-----------------------------------------
crashApis:161
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 397 Potential Issue API: SDKCheck of <android.view.DisplayCutout: int getSafeInsetLeft()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)>[]--><androidx.core.view.DisplayCutoutCompat: int getSafeInsetLeft()>[[-$i0 < 28]]--><android.view.DisplayCutout: int getSafeInsetLeft()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 398 Potential Issue API: SDKCheck of <android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>[]--><android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>
#1.the call statck between class <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> to <android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>has compatibility isssues！
-----------------------------------------
crashApis:162
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 399 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)> is checking!!!
The life time of api is [26,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
-$i0 < 26
Good road: <com.google.android.material.textfield.DropdownMenuEndIconDelegate$3: void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setHintText(java.lang.CharSequence)>[[-$i0 < 26]]--><android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.material.datepicker.MaterialCalendar$5: void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setHintText(java.lang.CharSequence)>[[-$i0 < 26]]--><android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>
One road protect good!
-i1 < 26
-$i0 < 26
Good road: <com.google.android.material.textfield.TextInputLayout$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)>[[-i1 < 26]]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setHintText(java.lang.CharSequence)>[[-$i0 < 26]]--><android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 400 Potential Issue API: SDKCheck of <android.util.FloatProperty: void setValue(java.lang.Object,float)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.dynamicanimation.animation.FloatPropertyCompat$1: void setValue(java.lang.Object,float)>[]--><android.util.FloatProperty: void setValue(java.lang.Object,float)>
#1.the call statck between class <androidx.dynamicanimation.animation.FloatPropertyCompat$1: void setValue(java.lang.Object,float)> to <android.util.FloatProperty: void setValue(java.lang.Object,float)>has compatibility isssues！
-----------------------------------------
crashApis:163
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 401 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: boolean isRateLimitingActive()> is checking!!!
The life time of api is [25,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: boolean isRateLimitingActive()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[i1 < 30]][[-i1 < 25]]
i1 > 29
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: boolean isRateLimitingActive()>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 402 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: int getRank()> is checking!!!
The life time of api is [25,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: int getRank()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: int getRank()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutManagerCompat$Api25Impl: java.lang.String getShortcutInfoWithLowestRank(java.util.List)>[]--><android.content.pm.ShortcutInfo: int getRank()>
#2.the call statck between class <androidx.core.content.pm.ShortcutManagerCompat$Api25Impl: java.lang.String getShortcutInfoWithLowestRank(java.util.List)> to <android.content.pm.ShortcutInfo: int getRank()>has compatibility isssues！
-----------------------------------------
crashApis:164
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 403 Potential Issue API: SDKCheck of <android.app.Service: void stopForeground(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.app.ServiceCompat: void stopForeground(android.app.Service,int)>[[-$i1 < 24]]--><android.app.Service: void stopForeground(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 404 Potential Issue API: SDKCheck of <android.graphics.drawable.Icon: android.net.Uri getUri()> is checking!!!
The life time of api is [28,31]
24call roads:
0 Mainhead roads:
24 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-i0 < 24
-i0 < 28
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: android.app.RemoteAction toRemoteAction()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setSmallIcon(androidx.core.graphics.drawable.IconCompat)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-$i1 < 28
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 < 23
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 < 28
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
i0 < 23
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Style: android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int,int)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>[[i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawableInner(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 < 26
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 < 25
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20]][[-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-i0 < 20
-i1 < 23
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 20], [-i1 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 < 28
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.content.Context,android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-$i0 < 26
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 > 29
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[-i0 > 29]]--><androidx.core.content.pm.ShortcutManagerCompat: void convertUriIconsToBitmapIcons(android.content.Context,java.util.List)>[]--><androidx.core.content.pm.ShortcutManagerCompat: boolean convertUriIconToBitmapIcon(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 > 29
-i0 < 25
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28]][[-i1 < 23]][[i0 < 24]][[i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 28
-i1 < 23
i0 < 24
i1 < 29
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i1 > 29
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-i1 > 29]]--><androidx.core.content.pm.ShortcutManagerCompat: boolean convertUriIconToBitmapIcon(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i1 > 29
-i1 < 25
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
-i0 > 29
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 > 29]]--><androidx.core.content.pm.ShortcutManagerCompat: void convertUriIconsToBitmapIcons(android.content.Context,java.util.List)>[]--><androidx.core.content.pm.ShortcutManagerCompat: boolean convertUriIconToBitmapIcon(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 > 29
-i0 < 25
i0 < 30
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)>[[i0 < 30]]--><androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)>[]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: android.net.Uri getUri()>
One road protect good!
containsStatic:true
containsTry:true
25call by main package
-----------------------------------------
#################################################
N 405 Potential Issue API: SDKCheck of <android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)> is checking!!!
The life time of api is [29,31]
9call roads:
0 Mainhead roads:
9 Packageshead roads:
###Multi invoking in one method, need manual check!!!--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i1 < 29], [-$i1 < 21]]
###Multi invoking in one method, need manual check!!!--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i1 < 29]][[-$i1 < 21]]
-$i1 < 29
-$i1 < 21
Good road: <androidx.viewpager2.widget.ViewPager2$RecyclerViewImpl: void <init>(androidx.viewpager2.widget.ViewPager2,android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i1 < 29], [-$i1 < 21]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
-$i0 < 29
Good road: <androidx.viewpager2.widget.ViewPager2: void <init>(android.content.Context)>[]--><androidx.viewpager2.widget.ViewPager2: void initialize(android.content.Context,android.util.AttributeSet)>[]--><androidx.viewpager2.widget.ViewPager2: void setOrientation(android.content.Context,android.util.AttributeSet)>[[-$i0 < 29]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
-i1 < 29
Good road: <com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout: void <init>(android.content.Context)>[]--><com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.coordinatorlayout.widget.CoordinatorLayout: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.coordinatorlayout.widget.CoordinatorLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-i1 < 29]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
-$i0 < 29
Good road: <androidx.viewpager2.widget.ViewPager2: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.viewpager2.widget.ViewPager2: void initialize(android.content.Context,android.util.AttributeSet)>[]--><androidx.viewpager2.widget.ViewPager2: void setOrientation(android.content.Context,android.util.AttributeSet)>[[-$i0 < 29]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
-$i0 < 29
Good road: <androidx.viewpager2.widget.ViewPager2: void <init>(android.content.Context,android.util.AttributeSet,int,int)>[]--><androidx.viewpager2.widget.ViewPager2: void initialize(android.content.Context,android.util.AttributeSet)>[]--><androidx.viewpager2.widget.ViewPager2: void setOrientation(android.content.Context,android.util.AttributeSet)>[[-$i0 < 29]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
-i1 < 29
Good road: <androidx.coordinatorlayout.widget.CoordinatorLayout: void <init>(android.content.Context)>[]--><androidx.coordinatorlayout.widget.CoordinatorLayout: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.coordinatorlayout.widget.CoordinatorLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-i1 < 29]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>[]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
#7.the call statck between class <androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)> to <android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>has compatibility isssues！
-----------------------------------------
-$i0 < 29
Good road: <androidx.viewpager2.widget.ViewPager2: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.viewpager2.widget.ViewPager2: void initialize(android.content.Context,android.util.AttributeSet)>[]--><androidx.viewpager2.widget.ViewPager2: void setOrientation(android.content.Context,android.util.AttributeSet)>[[-$i0 < 29]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i1 < 29], [-$i1 < 21]]
###Multi invoking in one method, need manual check!!!--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i1 < 29]][[-$i1 < 21]]
-$i1 < 29
-$i1 < 21
Good road: <com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i1 < 29], [-$i1 < 21]]--><android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
One road protect good!
crashApis:165
containsStatic:false
containsTry:false
10call by main package
-----------------------------------------
#################################################
N 406 Potential Issue API: SDKCheck of <android.media.session.MediaSessionManager.RemoteUserInfo: void <init>(java.lang.String,int,int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(java.lang.String,int,int)>[]--><android.media.session.MediaSessionManager.RemoteUserInfo: void <init>(java.lang.String,int,int)>
#1.the call statck between class <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(java.lang.String,int,int)> to <android.media.session.MediaSessionManager.RemoteUserInfo: void <init>(java.lang.String,int,int)>has compatibility isssues！
-----------------------------------------
crashApis:166
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 407 Potential Issue API: SDKCheck of <android.view.View: android.view.View requireViewById(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 28
Good road: <androidx.core.view.ViewCompat: android.view.View requireViewById(android.view.View,int)>[[-i1 < 28]]--><android.view.View: android.view.View requireViewById(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 408 Potential Issue API: SDKCheck of <android.widget.Toolbar: int getTitleMarginTop()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0]][[-$yysi0 < 16]][[$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
-$z0 == 0
-$yysi0 < 16
$yysi0 < 19
-$i1 < 24
Good road: <com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]--><android.widget.Toolbar: int getTitleMarginTop()>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 409 Potential Issue API: SDKCheck of <android.content.res.Configuration: void setLocales(android.os.LocaleList)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 410 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()>[]--><android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()> to <android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>has compatibility isssues！
-----------------------------------------
crashApis:167
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 411 Potential Issue API: SDKCheck of <android.view.DisplayCutout: int getSafeInsetRight()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)>[]--><androidx.core.view.DisplayCutoutCompat: int getSafeInsetRight()>[[-$i0 < 28]]--><android.view.DisplayCutout: int getSafeInsetRight()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 412 Potential Issue API: SDKCheck of <android.view.View: void setLeftTopRightBottom(int,int,int,int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.transition.ViewUtilsApi22: void setLeftTopRightBottom(android.view.View,int,int,int,int)>[[try]]--><android.view.View: void setLeftTopRightBottom(int,int,int,int)>
One road protect good!
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: void setLeftTopRightBottom(android.view.View,int,int,int,int)>[]--><android.view.View: void setLeftTopRightBottom(int,int,int,int)>
#2.the call statck between class <androidx.transition.ViewUtilsApi29: void setLeftTopRightBottom(android.view.View,int,int,int,int)> to <android.view.View: void setLeftTopRightBottom(int,int,int,int)>has compatibility isssues！
-----------------------------------------
crashApis:168
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 413 Potential Issue API: SDKCheck of <android.media.session.MediaSessionManager.RemoteUserInfo: int getUid()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(android.media.session.MediaSessionManager$RemoteUserInfo)>[]--><android.media.session.MediaSessionManager.RemoteUserInfo: int getUid()>
#1.the call statck between class <androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28: void <init>(android.media.session.MediaSessionManager$RemoteUserInfo)> to <android.media.session.MediaSessionManager.RemoteUserInfo: int getUid()>has compatibility isssues！
-----------------------------------------
crashApis:169
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 414 Potential Issue API: SDKCheck of <android.media.AudioAttributes: int getVolumeControlStream()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.media.AudioAttributesCompat: int getVolumeControlStream()>[]--><androidx.media.AudioAttributesImplApi26: int getVolumeControlStream()>[]--><android.media.AudioAttributes: int getVolumeControlStream()>
#1.the call statck between class <androidx.media.AudioAttributesCompat: int getVolumeControlStream()> to <android.media.AudioAttributes: int getVolumeControlStream()>has compatibility isssues！
-----------------------------------------
crashApis:170
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 415 Potential Issue API: SDKCheck of <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)> is checking!!!
The life time of api is [29,31]
8call roads:
0 Mainhead roads:
8 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#2.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#3.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsets(int,androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#4.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsets(int,androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#5.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#6.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets)>[]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
#7.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets)> to <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>has compatibility isssues！
-----------------------------------------
###Multi invoking in one method, need manual check!!!--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[-$yysi0 >= 30], [-i0 < 29]]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]
###Multi invoking in one method, need manual check!!!--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[-$yysi0 >= 30]][[-i0 < 29]]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]
-$yysi0 >= 30
-i0 < 29
Good road: <androidx.core.view.DisplayCutoutCompat: void <init>(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[]--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[-$yysi0 >= 30], [-i0 < 29]]--><androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>[]--><android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
One road protect good!
crashApis:171
containsStatic:true
containsTry:false
9call by main package
-----------------------------------------
#################################################
N 416 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: android.os.UserHandle getUserHandle()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: android.os.UserHandle getUserHandle()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: android.os.UserHandle getUserHandle()>has compatibility isssues！
-----------------------------------------
crashApis:172
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 417 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getPaneTitle()>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 418 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean hasKeyFieldsOnly()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean hasKeyFieldsOnly()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: boolean hasKeyFieldsOnly()>has compatibility isssues！
-----------------------------------------
crashApis:173
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 419 Potential Issue API: SDKCheck of <android.view.ViewGroup: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>[[try]]--><android.view.ViewGroup: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 420 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void reportShortcutUsed(java.lang.String)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: void reportShortcutUsed(android.content.Context,java.lang.String)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: void reportShortcutUsed(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 421 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setConversationTitle(java.lang.CharSequence)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28], [i0 < 26]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[i0 < 28]][[i0 < 26]]
-i0 < 24
i0 < 28
i0 < 26
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28], [i0 < 26]]--><android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setConversationTitle(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 422 Potential Issue API: SDKCheck of <android.graphics.Color: int getComponentCount()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)>[]--><androidx.core.graphics.ColorUtils: android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)>[]--><android.graphics.Color: int getComponentCount()>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color plus(android.graphics.Color,android.graphics.Color)> to <android.graphics.Color: int getComponentCount()>has compatibility isssues！
-----------------------------------------
crashApis:174
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 423 Potential Issue API: SDKCheck of <android.widget.TextView: void setTextLocales(android.os.LocaleList)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 424 Potential Issue API: SDKCheck of <android.view.View: boolean hasExplicitFocusable()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.ViewCompat: boolean hasExplicitFocusable(android.view.View)>[[-$i0 < 26]]--><android.view.View: boolean hasExplicitFocusable()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 425 Potential Issue API: SDKCheck of <android.app.Person: java.lang.CharSequence getName()> is checking!!!
The life time of api is [28,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.CharSequence getName()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.CharSequence getName()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.CharSequence getName()>
One road protect good!
containsStatic:true
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 426 Potential Issue API: SDKCheck of <android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>[[]]--><android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>
#1.the call statck between class <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> to <android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>has compatibility isssues！
-----------------------------------------
crashApis:175
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 427 Potential Issue API: SDKCheck of <android.telephony.mbms.ServiceInfo: java.lang.CharSequence getNameForLocale(java.util.Locale)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i0 >= 28
Good road: <androidx.core.telephony.mbms.MbmsHelper: java.lang.CharSequence getBestNameForService(android.content.Context,android.telephony.mbms.ServiceInfo)>[[i0 >= 28]]--><android.telephony.mbms.ServiceInfo: java.lang.CharSequence getNameForLocale(java.util.Locale)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 428 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: void <init>()> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)>[]--><android.view.WindowInsets.Builder: void <init>()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)> to <android.view.WindowInsets.Builder: void <init>()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()>[]--><android.view.WindowInsets.Builder: void <init>()>
#2.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()> to <android.view.WindowInsets.Builder: void <init>()>has compatibility isssues！
-----------------------------------------
crashApis:176
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 429 Potential Issue API: SDKCheck of <android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setContextual(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [i0 < 28], [-i0 < 20], [i0 < 24], [-i0 < 29]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23]][[i0 < 28]][[-i0 < 20]][[i0 < 24]][[-i0 < 29]]
i1 < 23
i0 < 28
-i0 < 20
i0 < 24
-i0 < 29
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [i0 < 28], [-i0 < 20], [i0 < 24], [-i0 < 29]]--><android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setContextual(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 430 Potential Issue API: SDKCheck of <android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.app.CoreComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>[]--><android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>
#1.the call statck between class <androidx.core.app.CoreComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)> to <android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:177
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 431 Potential Issue API: SDKCheck of <android.view.inputmethod.InputConnectionWrapper: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 25
Good road: <androidx.core.view.inputmethod.InputConnectionCompat: boolean commitContent(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle)>[[-i1 < 25]]--><androidx.core.view.inputmethod.InputConnectionCompat$1: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>[]--><android.view.inputmethod.InputConnectionWrapper: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 432 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setTooltipText(java.lang.CharSequence)>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 433 Potential Issue API: SDKCheck of <android.widget.PopupWindow: void setIsClippedToScreen(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 434 Potential Issue API: SDKCheck of <android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setItalic(boolean)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setItalic(boolean)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 435 Potential Issue API: SDKCheck of <android.app.job.JobParameters: void completeWork(android.app.job.JobWorkItem)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem: void complete()>[[try]]--><android.app.job.JobParameters: void completeWork(android.app.job.JobWorkItem)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 436 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i4 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: void setShortcut(android.view.MenuItem,char,char,int,int)>[[], [-$i4 < 26]]--><android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>
#1.the call statck between class <androidx.core.view.MenuItemCompat: void setShortcut(android.view.MenuItem,char,char,int,int)> to <android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>has compatibility isssues！
-----------------------------------------
crashApis:178
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 437 Potential Issue API: SDKCheck of <android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>
#1.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)> to <android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>
#2.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)> to <android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>
#3.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)> to <android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>has compatibility isssues！
-----------------------------------------
crashApis:179
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 438 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params build()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i2 < 29
Good road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>[[-$i2 < 29]]--><android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params build()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 439 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setTimeoutAfter(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setTimeoutAfter(long)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 440 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params: int getHyphenationFrequency()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)>[]--><android.text.PrecomputedText.Params: int getHyphenationFrequency()>
#1.the call statck between class <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.PrecomputedText$Params)> to <android.text.PrecomputedText.Params: int getHyphenationFrequency()>has compatibility isssues！
-----------------------------------------
crashApis:180
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 441 Potential Issue API: SDKCheck of <android.widget.Button: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> is checking!!!
The life time of api is [14,22]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.google.android.material.button.MaterialButton: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>[[]]--><android.widget.Button: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
#1.the call statck between class <com.google.android.material.button.MaterialButton: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> to <android.widget.Button: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>has compatibility isssues！
-----------------------------------------
crashApis:181
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 442 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setBadgeIconType(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setBadgeIconType(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 443 Potential Issue API: SDKCheck of <android.os.LocaleList: java.lang.String toLanguageTags()> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 24
Good road: <com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioTrackScore: void <init>(com.google.android.exoplayer2.Format,com.google.android.exoplayer2.trackselection.DefaultTrackSelector$Parameters,int)>[]--><com.google.android.exoplayer2.util.Util: java.lang.String[] getSystemLanguageCodes()>[]--><com.google.android.exoplayer2.util.Util: java.lang.String[] getSystemLocales()>[[-$i0 < 24]]--><com.google.android.exoplayer2.util.Util: java.lang.String[] getSystemLocalesV24(android.content.res.Configuration)>[]--><android.os.LocaleList: java.lang.String toLanguageTags()>
One road protect good!
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()>[]--><androidx.core.os.LocaleListPlatformWrapper: java.lang.String toLanguageTags()>[]--><android.os.LocaleList: java.lang.String toLanguageTags()>
#2.the call statck between class <androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()> to <android.os.LocaleList: java.lang.String toLanguageTags()>has compatibility isssues！
-----------------------------------------
crashApis:182
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 444 Potential Issue API: SDKCheck of <android.widget.AutoCompleteTextView: void setInputMethodMode(int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 445 Potential Issue API: SDKCheck of <android.graphics.Color: long convert(long,android.graphics.ColorSpace)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long convertTo(long,android.graphics.ColorSpace)>[]--><android.graphics.Color: long convert(long,android.graphics.ColorSpace)>
#1.the call statck between class <androidx.core.graphics.ColorKt: long convertTo(long,android.graphics.ColorSpace)> to <android.graphics.Color: long convert(long,android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: long convertTo(long,android.graphics.ColorSpace$Named)>[]--><android.graphics.Color: long convert(long,android.graphics.ColorSpace)>
#2.the call statck between class <androidx.core.graphics.ColorKt: long convertTo(long,android.graphics.ColorSpace$Named)> to <android.graphics.Color: long convert(long,android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
crashApis:183
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 446 Potential Issue API: SDKCheck of <android.view.View: void setSystemGestureExclusionRects(java.util.List)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.ViewCompat: void setSystemGestureExclusionRects(android.view.View,java.util.List)>[[-$i0 < 29]]--><android.view.View: void setSystemGestureExclusionRects(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 447 Potential Issue API: SDKCheck of <android.view.View: void updateDragShadow(android.view.View.DragShadowBuilder)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.ViewCompat: void updateDragShadow(android.view.View,android.view.View$DragShadowBuilder)>[[-$i0 < 24]]--><android.view.View: void updateDragShadow(android.view.View.DragShadowBuilder)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 448 Potential Issue API: SDKCheck of <android.graphics.Color: int toArgb(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: int toColorInt(long)>[]--><android.graphics.Color: int toArgb(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: int toColorInt(long)> to <android.graphics.Color: int toArgb(long)>has compatibility isssues！
-----------------------------------------
crashApis:184
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 449 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setDisplayCutout(android.view.DisplayCutout)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setDisplayCutout(androidx.core.view.DisplayCutoutCompat)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setDisplayCutout(android.view.DisplayCutout)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setDisplayCutout(androidx.core.view.DisplayCutoutCompat)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setDisplayCutout(android.view.DisplayCutout)>has compatibility isssues！
-----------------------------------------
crashApis:185
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 450 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: android.graphics.fonts.Font build()> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font build()>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font build()>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font build()>
One road protect good!
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 451 Potential Issue API: SDKCheck of <android.app.NotificationChannelGroup: void setDescription(java.lang.String)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroupsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroupsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26]][[-i0 < 28]]
-i0 < 26
i0 >= 26
-i0 < 28
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroupsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26], [-i0 < 28]]--><android.app.NotificationChannelGroup: void setDescription(java.lang.String)>
One road protect good!
###Multi invoking in one method, need manual check!!!--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26]][[-i0 < 28]]
i0 >= 26
-i0 < 28
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroup(androidx.core.app.NotificationChannelGroupCompat)>[]--><androidx.core.app.NotificationChannelGroupCompat: android.app.NotificationChannelGroup getNotificationChannelGroup()>[[i0 >= 26], [-i0 < 28]]--><android.app.NotificationChannelGroup: void setDescription(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 452 Potential Issue API: SDKCheck of <android.widget.RemoteViews: void setChronometerCountDown(int,boolean)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Style: android.widget.RemoteViews applyStandardTemplate(boolean,int,boolean)>[[-$i0 < 24], [$i0 >= 21], [$i3 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Style: android.widget.RemoteViews applyStandardTemplate(boolean,int,boolean)>[[-$i0 < 24]][[$i0 >= 21]][[$i3 < 21]]
-$i0 < 24
$i0 >= 21
$i3 < 21
Good road: <androidx.core.app.NotificationCompat$Style: android.widget.RemoteViews applyStandardTemplate(boolean,int,boolean)>[[-$i0 < 24], [$i0 >= 21], [$i3 < 21]]--><android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 453 Potential Issue API: SDKCheck of <android.widget.ImageView: void animateTransform(android.graphics.Matrix)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 29
Good road: <androidx.transition.ChangeImageTransform$2: void set(android.widget.ImageView,android.graphics.Matrix)>[]--><androidx.transition.ImageViewUtils: void animateTransform(android.widget.ImageView,android.graphics.Matrix)>[[-i0 < 29]]--><android.widget.ImageView: void animateTransform(android.graphics.Matrix)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 454 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void setGroup(java.lang.String)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setGroup(java.lang.String)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void setGroup(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 455 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params.Builder: void <init>(android.text.TextPaint)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i2 < 29
Good road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>[[-$i2 < 29]]--><android.text.PrecomputedText.Params.Builder: void <init>(android.text.TextPaint)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 456 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager.WifiLock: void setReferenceCounted(boolean)> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setWakeMode(int)>[]--><com.google.android.exoplayer2.WifiLockManager: void setEnabled(boolean)>[]--><android.net.wifi.WifiManager.WifiLock: void setReferenceCounted(boolean)>
#1.the call statck between class <com.google.android.exoplayer2.SimpleExoPlayer: void setHandleWakeLock(boolean)> to <android.net.wifi.WifiManager.WifiLock: void setReferenceCounted(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:186
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 457 Potential Issue API: SDKCheck of <android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setBreakStrategy(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i2 < 29
Good road: <androidx.core.text.PrecomputedTextCompat$Params: void <init>(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>[[-$i2 < 29]]--><android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setBreakStrategy(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 458 Potential Issue API: SDKCheck of <android.service.media.MediaBrowserService: android.media.session.MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi28: androidx.media.MediaSessionManager$RemoteUserInfo getCurrentBrowserInfo()>[]--><android.service.media.MediaBrowserService: android.media.session.MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()>
#1.the call statck between class <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi28: androidx.media.MediaSessionManager$RemoteUserInfo getCurrentBrowserInfo()> to <android.service.media.MediaBrowserService: android.media.session.MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()>has compatibility isssues！
-----------------------------------------
crashApis:187
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 459 Potential Issue API: SDKCheck of <android.net.NetworkInfo: int getSubtype()> is checking!!!
The life time of api is [3,30]
379call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><agersant.polaris.PolarisApplication: void onCreate()>[]--><agersant.polaris.PolarisState: void <init>(android.content.Context)>[]--><agersant.polaris.PolarisPlayer: void <init>(android.content.Context,agersant.polaris.api.API,agersant.polaris.PlaybackQueue)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
378 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.DispatchQueue: void resume()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int,long)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setPublicShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void prepare(com.google.android.exoplayer2.offline.DownloadHelper$Callback)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30]][[try]][[$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]
$i0 < 30
try
Good road with try: <androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$1: void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(int,com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.wav.WavExtractor$PassthroughOutputWriter: void init(int,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController: void access$handleDestroy(androidx.lifecycle.LifecycleController,kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void handleDestroy(kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat: boolean removeSubscription(java.lang.String,androidx.media.MediaBrowserServiceCompat$ConnectionRecord,android.os.IBinder)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource: void prepareSourceInternal(com.google.android.exoplayer2.upstream.TransferListener)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void completeTransaction()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$8: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>[]--><okhttp3.internal.ws.RealWebSocket: void connect(okhttp3.OkHttpClient)>[]--><okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)>[]--><okhttp3.Dispatcher: void enqueue$okhttp(okhttp3.internal.connection.RealCall$AsyncCall)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$3: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean filterInPlace$CollectionsKt__MutableCollectionsKt(java.lang.Iterable,kotlin.jvm.functions.Function1,boolean)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.app.NotificationManagerCompat$SideChannelManager: void updateListenerMap()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.PausingDispatcherKt$whenStateAtLeast$2: java.lang.Object invokeSuspend(java.lang.Object)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void onUpstreamFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.ToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void handlePositionDiscontinuity(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime,int)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerImplInternal: boolean handleMessage(android.os.Message)>[[try]]--><com.google.android.exoplayer2.ExoPlayerImplInternal: void sendMessageToTargetThread(com.google.android.exoplayer2.PlayerMessage)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaSource removeMediaSource(int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void renderedFirstFrame(android.view.Surface)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.CollapsingToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void setNetworkTypeOverride(int)>[[try]]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.DispatchQueue: void access$enqueue(androidx.lifecycle.DispatchQueue,java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$1: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion2: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EGLSurfaceTexture: void onFrameAvailable(android.graphics.SurfaceTexture)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21: void notifyChildrenChangedForCompat(java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(java.util.Collection,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$2: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayer$Builder: void <init>(android.content.Context,com.google.android.exoplayer2.Renderer[])>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onLeafAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.widget.AutoScrollHelper: boolean onTouch(android.view.View,android.view.MotionEvent)>[]--><androidx.core.widget.AutoScrollHelper: void startAnimating()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: boolean removePreferenceRecursively(java.lang.CharSequence)>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: void removeAll()>[[try]]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.EventLoopImplBase: void shutdown()>[]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.navigation.NavGraph: void clear()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EventDispatcher$HandlerAndListener: void dispatch(com.google.android.exoplayer2.util.EventDispatcher$Event)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseTouchCallback: void onSwiped(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void onSwiped(android.view.View)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void queueDirectory()>[]--><agersant.polaris.api.API: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void videoSizeChanged(int,int,int,float)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void endFakeDrag()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseFragment: void lambda$onCreateView$1$BrowseFragment(com.orangegangsters.github.swipyrefreshlayout.library.SwipyRefreshLayoutDirection)>[]--><agersant.polaris.features.browse.BrowseFragment: void loadContent()>[]--><agersant.polaris.features.browse.BrowseFragment: void loadPath(java.lang.String)>[]--><agersant.polaris.api.API: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseFragment: void lambda$onCreateView$0$BrowseFragment(android.view.View)>[]--><agersant.polaris.features.browse.BrowseFragment: void loadContent()>[]--><agersant.polaris.features.browse.BrowseFragment: void loadPath(java.lang.String)>[]--><agersant.polaris.api.API: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupAdapter$3: boolean onPreferenceClick(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroupAdapter: void onPreferenceHierarchyChange(androidx.preference.Preference)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.internal.connection.RealCall$AsyncCall: void executeOn(java.util.concurrent.ExecutorService)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.internal.connection.RealCall$AsyncCall: void executeOn(java.util.concurrent.ExecutorService)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.internal.connection.RealCall$AsyncCall: void executeOn(java.util.concurrent.ExecutorService)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void droppedFrames(int,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.view.ViewPropertyAnimatorCompat$1: void onAnimationStart(android.animation.Animator)>[]--><androidx.core.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorListenerApi14: void onAnimationStart(android.view.View)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void onStartEnterTransition()>[]--><androidx.fragment.app.FragmentManager: void scheduleCommit()>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource$HandlerAndRunnable: void dispatch()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.Dispatcher: void setMaxRequests(int)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource$ComponentListener: void onAdPlaybackState(com.google.android.exoplayer2.source.ads.AdPlaybackState)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.timepicker.RadialViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource$AdPrepareErrorListener: void onPrepareError(com.google.android.exoplayer2.source.MediaSource$MediaPeriodId,java.io.IOException)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.ts.Ac4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.ts.Ac3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.wav.WavExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void enabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.wav.WavExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.ts.Ac3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.ts.Ac4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(boolean,com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(boolean,com.google.android.exoplayer2.source.ShuffleOrder,com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(boolean,boolean,com.google.android.exoplayer2.source.ShuffleOrder,com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(java.util.Collection)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void enabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void postToMainThread(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager: void enqueueAction(androidx.fragment.app.FragmentManager$OpGenerator,boolean)>[[try]]--><androidx.fragment.app.FragmentManager: void scheduleCommit()>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void onRestoreInstanceState(android.os.Parcelable)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void access$300(com.google.android.exoplayer2.offline.DownloadHelper,java.io.IOException)>[]--><com.google.android.exoplayer2.offline.DownloadHelper: void onMediaPreparationFailed(java.io.IOException)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.snackbar.BaseTransientBottomBar$7: void onViewDetachedFromWindow(android.view.View)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.scheduler.RequirementsWatcher$NetworkCallback: void postRecheckNotMetNetworkRequirements()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase: void notifyChildrenChanged(java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void scrollToPreference(java.lang.String)>[]--><androidx.preference.PreferenceFragment: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.transition.FragmentTransitionSupport: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.SystemHandlerWrapper: boolean post(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void clear(android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removeMediaSourceRange(int,int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.internal.tls.BasicCertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: void processMoovAtom(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: void processMoovAtom(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2: void getAlbums(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.wav.WavExtractor$ImaAdPcmOutputWriter: void init(int,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ogg.OggExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int readPayload(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: void maybeOutputSeekMap(long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.PsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void readPastStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void updateFlacStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void outputSeekMap(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader: boolean read(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: boolean readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void maybeOutputSeekMap(long,int)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void getFrameStartMarker(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void maybeOutputSeekMap(long,boolean,boolean)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void setItemHorizontalTranslationEnabled(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationPresenter: void updateMenuView(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationMenuView: void updateMenuView()>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3: void getAlbums(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onSatelliteStatusChanged(android.location.GnssStatus)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onSatelliteStatusChanged(android.location.GnssStatus)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onSatelliteStatusChanged(android.location.GnssStatus)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.material.tabs.TabLayout$ViewPagerOnTabSelectedListener: void onTabSelected(com.google.android.material.tabs.TabLayout$Tab)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <okhttp3.Dispatcher: void setMaxRequestsPerHost(int)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$4: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void audioTrackUnderrun(int,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$PagerObserver: void onChanged()>[]--><androidx.viewpager.widget.ViewPager: void dataSetChanged()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.AudioBecomingNoisyManager$AudioBecomingNoisyReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setPublicShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaSource removeMediaSource(int)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>[[$i0 < 28]]--><androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>[[i0 < 28], [try], [$yysi0 == 26]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>[[$i0 < 28]]--><androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>[[i0 < 28]][[try]][[$yysi0 == 26]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]
$i0 < 28
i0 < 28
try
Good road with try: <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>[[$i0 < 28]]--><androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>[[i0 < 28], [try], [$yysi0 == 26]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: void maybeOutputSeekMap(long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void readPastStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void updateFlacStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void outputSeekMap(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader: boolean read(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void maybeOutputSeekMap(long,boolean,boolean)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void maybeOutputSeekMap(long,int)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void getFrameStartMarker(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: boolean readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.PsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ogg.OggExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int readPayload(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource: void releaseSourceInternal()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$1: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ConnectionRecord: void binderDied()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void moveMediaSource(int,int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void movePublicMediaSource(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader$LoadTask: void execute()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader$LoadTask: void execute()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader$LoadTask: void execute()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.TransitionManager: void transitionTo(androidx.transition.Scene)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaPeriod createPeriod(com.google.android.exoplayer2.source.MediaSource$MediaPeriodId,com.google.android.exoplayer2.upstream.Allocator,long)>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void disableUnusedMediaSources()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.activity.ComponentActivity$2: void onLaunch(int,androidx.activity.result.contract.ActivityResultContract,java.lang.Object,androidx.core.app.ActivityOptionsCompat)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
i1 < 23
try
Good road with try: <androidx.activity.ComponentActivity$2: void onLaunch(int,androidx.activity.result.contract.ActivityResultContract,java.lang.Object,androidx.core.app.ActivityOptionsCompat)>[]--><androidx.core.app.ActivityCompat: void requestPermissions(android.app.Activity,java.lang.String[],int)>[[i1 < 23]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupKt: void minusAssign(androidx.preference.PreferenceGroup,androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.android.HandlerContext: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.SimpleExoPlayer$Builder: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void access$200(com.google.android.exoplayer2.offline.DownloadHelper)>[]--><com.google.android.exoplayer2.offline.DownloadHelper: void onMediaPrepared()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase: void setSessionToken(android.support.v4.media.session.MediaSessionCompat$Token)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><agersant.polaris.features.browse.BrowseFragment: void loadContent()>[]--><agersant.polaris.features.browse.BrowseFragment: void loadPath(java.lang.String)>[]--><agersant.polaris.api.API: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$8: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.PausingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void runOrEnqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController: void <init>(androidx.lifecycle.Lifecycle,androidx.lifecycle.Lifecycle$State,androidx.lifecycle.DispatchQueue,kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(int,java.util.Collection)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21: void notifyChildrenChangedForCompat(androidx.media.MediaSessionManager$RemoteUserInfo,java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragment: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip: boolean onTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void handleTimelineUpdate(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$1: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.provider.FontsContractCompat: void requestFontInternal(android.content.Context,androidx.core.provider.FontRequest,androidx.core.provider.FontsContractCompat$FontRequestCallback,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.AudioFocusManager$AudioFocusListener: void onAudioFocusChange(int)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void getFrameStartMarker(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void readPastStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void updateFlacStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void outputSeekMap(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void maybeOutputSeekMap(long,boolean,boolean)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader: boolean read(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ogg.OggExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int readPayload(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: boolean readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: void maybeOutputSeekMap(long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.PsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void maybeOutputSeekMap(long,int)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void moveMediaSource(int,int)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void movePublicMediaSource(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.content.res.ResourcesCompat$FontCallback: void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void computeScroll()>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(com.google.android.exoplayer2.source.MediaSource)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(int,com.google.android.exoplayer2.source.MediaSource)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.ComputableLiveData$1: void onActive()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.ComputableLiveData$1: void onActive()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.lifecycle.ComputableLiveData$1: void onActive()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.TransitionManager: void go(androidx.transition.Scene)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void onSizeChanged(int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void recomputeScrollPosition(int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(java.lang.String)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$2: void maybeExecuteBackgroundRunnable()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$2: void maybeExecuteBackgroundRunnable()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$2: void maybeExecuteBackgroundRunnable()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean dispatchKeyEvent(android.view.KeyEvent)>[]--><androidx.viewpager.widget.ViewPager: boolean executeKeyEvent(android.view.KeyEvent)>[]--><androidx.viewpager.widget.ViewPager: boolean pageLeft()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$PagerObserver: void onInvalidated()>[]--><androidx.viewpager.widget.ViewPager: void dataSetChanged()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.fragment.app.DefaultSpecialEffectsController: java.util.Map startTransitions(java.util.List,boolean,androidx.fragment.app.SpecialEffectsController$Operation,androidx.fragment.app.SpecialEffectsController$Operation)>[]--><androidx.fragment.app.FragmentTransitionImpl: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void audioSessionId(int)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.transition.TransitionManager: void go(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$GpsStatusTransport: void onGpsStatusChanged(int)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$GpsStatusTransport: void onGpsStatusChanged(int)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$GpsStatusTransport: void onGpsStatusChanged(int)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void setAdapter(androidx.viewpager.widget.PagerAdapter)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void clear()>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removeMediaSourceRange(int,int)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.PolarisScrobbleService: void access$300(agersant.polaris.PolarisScrobbleService)>[]--><agersant.polaris.PolarisScrobbleService: void nowPlaying()>[]--><agersant.polaris.api.remote.ServerAPI: void setLastFMNowPlaying(java.lang.String)>[]--><agersant.polaris.api.remote.ServerAPI: void fetchAPIVersionAsync(agersant.polaris.api.remote.ServerAPI$VersionCallback)>[]--><okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)>[]--><okhttp3.Dispatcher: void enqueue$okhttp(okhttp3.internal.connection.RealCall$AsyncCall)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onMoovContainerAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void setPageMargin(int)>[]--><androidx.viewpager.widget.ViewPager: void recomputeScrollPosition(int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.features.player.PlayerFragment: void onStart()>[]--><agersant.polaris.features.player.PlayerFragment: void scheduleSeekBarUpdates()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.scheduler.RequirementsWatcher$NetworkCallback: void postCheckRequirements()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupAdapter: void onPreferenceVisibilityChange(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroupAdapter: void onPreferenceHierarchyChange(androidx.preference.Preference)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader: void release(com.google.android.exoplayer2.upstream.Loader$ReleaseCallback)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader: void release(com.google.android.exoplayer2.upstream.Loader$ReleaseCallback)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader: void release(com.google.android.exoplayer2.upstream.Loader$ReleaseCallback)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase: void notifyChildrenChanged(androidx.media.MediaSessionManager$RemoteUserInfo,java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void onLayout(boolean,int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$3: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void finishAllSessions(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><com.google.android.exoplayer2.util.Util: int getMobileNetworkType(android.net.NetworkInfo)>[]--><android.net.NetworkInfo: int getSubtype()>
One road protect good!
containsStatic:true
containsTry:true
379call by main package
-----------------------------------------
#################################################
N 460 Potential Issue API: SDKCheck of <android.app.Notification: int getBadgeIconType()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: int getBadgeIconType(android.app.Notification)>[[-$i0 < 26]]--><android.app.Notification: int getBadgeIconType()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 461 Potential Issue API: SDKCheck of <android.app.NotificationManager: boolean areNotificationsEnabled()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.app.NotificationManagerCompat: boolean areNotificationsEnabled()>[[-i0 < 24]]--><android.app.NotificationManager: boolean areNotificationsEnabled()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 462 Potential Issue API: SDKCheck of <android.graphics.fonts.FontStyle: void <init>(int,int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[]--><android.graphics.fonts.FontStyle: void <init>(int,int)>
#1.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)> to <android.graphics.fonts.FontStyle: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[]--><android.graphics.fonts.FontStyle: void <init>(int,int)>
#2.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)> to <android.graphics.fonts.FontStyle: void <init>(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:188
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 463 Potential Issue API: SDKCheck of <android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListCompat: java.util.Locale getFirstMatch(java.lang.String[])>[]--><androidx.core.os.LocaleListPlatformWrapper: java.util.Locale getFirstMatch(java.lang.String[])>[]--><android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>
#1.the call statck between class <androidx.core.os.LocaleListCompat: java.util.Locale getFirstMatch(java.lang.String[])> to <android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>has compatibility isssues！
-----------------------------------------
i0 >= 28
Good road: <androidx.core.telephony.mbms.MbmsHelper: java.lang.CharSequence getBestNameForService(android.content.Context,android.telephony.mbms.ServiceInfo)>[[i0 >= 28]]--><android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>
One road protect good!
crashApis:189
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 464 Potential Issue API: SDKCheck of <android.graphics.Color: float alpha(long)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float getAlpha(long)>[]--><android.graphics.Color: float alpha(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float getAlpha(long)> to <android.graphics.Color: float alpha(long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: float component4(long)>[]--><android.graphics.Color: float alpha(long)>
#2.the call statck between class <androidx.core.graphics.ColorKt: float component4(long)> to <android.graphics.Color: float alpha(long)>has compatibility isssues！
-----------------------------------------
crashApis:190
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 465 Potential Issue API: SDKCheck of <android.content.LocusId: void <init>(java.lang.String)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.content.LocusIdCompat$Api29Impl: android.content.LocusId create(java.lang.String)>[]--><android.content.LocusId: void <init>(java.lang.String)>
#1.the call statck between class <androidx.core.content.LocusIdCompat$Api29Impl: android.content.LocusId create(java.lang.String)> to <android.content.LocusId: void <init>(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:191
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 466 Potential Issue API: SDKCheck of <android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 467 Potential Issue API: SDKCheck of <android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,android.os.Handler)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]
###Multi invoking in one method, need manual check!!!<androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26]][[$i1 >= 26]]
-$i1 < 26
$i1 >= 26
Good road: <androidx.media.AudioFocusRequestCompat: void <init>(int,android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler,androidx.media.AudioAttributesCompat,boolean)>[[-$i1 < 26], [$i1 >= 26]]--><android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,android.os.Handler)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 468 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 469 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>[]--><android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()> to <android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>has compatibility isssues！
-----------------------------------------
crashApis:192
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 470 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: void <init>(android.os.ParcelFileDescriptor)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.Font.Builder: void <init>(android.os.ParcelFileDescriptor)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 471 Potential Issue API: SDKCheck of <android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.graphics.ImageDecoderKt: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,kotlin.jvm.functions.Function3)>[]--><android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)>
#1.the call statck between class <androidx.core.graphics.ImageDecoderKt: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,kotlin.jvm.functions.Function3)> to <android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)>has compatibility isssues！
-----------------------------------------
crashApis:193
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 472 Potential Issue API: SDKCheck of <android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)> is checking!!!
The life time of api is [28,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-i1 < 28
Good road: <androidx.core.os.HandlerKt: java.lang.Runnable postDelayed$default(android.os.Handler,long,java.lang.Object,kotlin.jvm.functions.Function0,int,java.lang.Object)>[]--><androidx.core.os.HandlerCompat: boolean postDelayed(android.os.Handler,java.lang.Runnable,java.lang.Object,long)>[[-i1 < 28]]--><android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>
One road protect good!
-i1 < 28
Good road: <androidx.core.os.HandlerKt: java.lang.Runnable postDelayed(android.os.Handler,long,java.lang.Object,kotlin.jvm.functions.Function0)>[]--><androidx.core.os.HandlerCompat: boolean postDelayed(android.os.Handler,java.lang.Runnable,java.lang.Object,long)>[[-i1 < 28]]--><android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 473 Potential Issue API: SDKCheck of <android.view.MenuItem: int getNumericModifiers()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: int getNumericModifiers(android.view.MenuItem)>[[], [-$i0 < 26]]--><android.view.MenuItem: int getNumericModifiers()>
#1.the call statck between class <androidx.core.view.MenuItemCompat: int getNumericModifiers(android.view.MenuItem)> to <android.view.MenuItem: int getNumericModifiers()>has compatibility isssues！
-----------------------------------------
crashApis:194
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 474 Potential Issue API: SDKCheck of <android.graphics.Color: boolean isWideGamut(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: boolean isWideGamut(long)>[]--><android.graphics.Color: boolean isWideGamut(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: boolean isWideGamut(long)> to <android.graphics.Color: boolean isWideGamut(long)>has compatibility isssues！
-----------------------------------------
crashApis:195
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 475 Potential Issue API: SDKCheck of <android.view.Window: android.view.View requireViewById(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 28
Good road: <androidx.core.view.WindowCompat: android.view.View requireViewById(android.view.Window,int)>[[-i1 < 28]]--><android.view.Window: android.view.View requireViewById(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 476 Potential Issue API: SDKCheck of <android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.app.CoreComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>[]--><android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
#1.the call statck between class <androidx.core.app.CoreComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)> to <android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>has compatibility isssues！
-----------------------------------------
crashApis:196
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 477 Potential Issue API: SDKCheck of <android.app.job.JobServiceEngine: void <init>(android.app.Service)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.app.JobIntentService$JobServiceEngineImpl: void <init>(androidx.core.app.JobIntentService)>[]--><android.app.job.JobServiceEngine: void <init>(android.app.Service)>
#1.the call statck between class <androidx.core.app.JobIntentService$JobServiceEngineImpl: void <init>(androidx.core.app.JobIntentService)> to <android.app.job.JobServiceEngine: void <init>(android.app.Service)>has compatibility isssues！
-----------------------------------------
crashApis:197
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 478 Potential Issue API: SDKCheck of <android.view.View: void setPointerIcon(android.view.PointerIcon)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i0 < 24
Good road: <com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void setLabelVisibilityMode(int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationPresenter: void updateMenuView(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationMenuView: void buildMenuView()>[]--><com.google.android.material.bottomnavigation.BottomNavigationItemView: void initialize(androidx.appcompat.view.menu.MenuItemImpl,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationItemView: void setEnabled(boolean)>[]--><androidx.core.view.ViewCompat: void setPointerIcon(android.view.View,androidx.core.view.PointerIconCompat)>[[-$i0 < 24]]--><android.view.View: void setPointerIcon(android.view.PointerIcon)>
One road protect good!
-$i0 < 24
Good road: <com.google.android.material.tabs.TabLayout$TabView: void <init>(com.google.android.material.tabs.TabLayout,android.content.Context)>[]--><androidx.core.view.ViewCompat: void setPointerIcon(android.view.View,androidx.core.view.PointerIconCompat)>[[-$i0 < 24]]--><android.view.View: void setPointerIcon(android.view.PointerIcon)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 479 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setAutoExpandBubble(boolean)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setAutoExpandBubble(boolean)>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)> to <android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setAutoExpandBubble(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:198
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 480 Potential Issue API: SDKCheck of <android.app.Activity: android.view.View requireViewById(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 28
Good road: <androidx.navigation.ActivityKt: androidx.navigation.NavController findNavController(android.app.Activity,int)>[]--><androidx.navigation.Navigation: androidx.navigation.NavController findNavController(android.app.Activity,int)>[]--><androidx.core.app.ActivityCompat: android.view.View requireViewById(android.app.Activity,int)>[[-i1 < 28]]--><android.app.Activity: android.view.View requireViewById(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 481 Potential Issue API: SDKCheck of <android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.view.MenuItemCompat: void setContentDescription(android.view.MenuItem,java.lang.CharSequence)>[[-$i0 < 26]]--><android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 482 Potential Issue API: SDKCheck of <android.os.LocaleList: boolean equals(java.lang.Object)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params)>[[$i0 < 23], [-$i0 < 24], [$i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params)>[[$i0 < 23]][[-$i0 < 24]][[$i0 < 21]]
$i0 < 23
-$i0 < 24
$i0 < 21
Good road: <androidx.core.text.PrecomputedTextCompat$Params: boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params)>[[$i0 < 23], [-$i0 < 24], [$i0 < 21]]--><android.os.LocaleList: boolean equals(java.lang.Object)>
One road protect good!
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListPlatformWrapper: boolean equals(java.lang.Object)>[]--><android.os.LocaleList: boolean equals(java.lang.Object)>
#2.the call statck between class <androidx.core.os.LocaleListPlatformWrapper: boolean equals(java.lang.Object)> to <android.os.LocaleList: boolean equals(java.lang.Object)>has compatibility isssues！
-----------------------------------------
crashApis:199
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 483 Potential Issue API: SDKCheck of <android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.app.CoreComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>[]--><android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
#1.the call statck between class <androidx.core.app.CoreComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)> to <android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>has compatibility isssues！
-----------------------------------------
crashApis:200
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 484 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setStableInsets(android.graphics.Insets)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setStableInsets(android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setStableInsets(android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:201
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 485 Potential Issue API: SDKCheck of <android.view.View: void dispatchStartTemporaryDetach()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 24
Good road: <androidx.core.view.ViewCompat: void dispatchStartTemporaryDetach(android.view.View)>[[-i0 < 24]]--><android.view.View: void dispatchStartTemporaryDetach()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 486 Potential Issue API: SDKCheck of <android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.ViewCompat$3: java.lang.CharSequence frameworkGet(android.view.View)>[]--><android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>
#1.the call statck between class <androidx.core.view.ViewCompat$3: java.lang.CharSequence frameworkGet(android.view.View)> to <android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>has compatibility isssues！
-----------------------------------------
crashApis:202
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 487 Potential Issue API: SDKCheck of <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>
#1.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)> to <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>
#2.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)> to <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[]--><android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>
#3.the call statck between class <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)> to <android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>has compatibility isssues！
-----------------------------------------
crashApis:203
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 488 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 28
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: boolean isHeading()>[[-i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 489 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.Color valueOf(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.Color toColor(int)>[]--><android.graphics.Color: android.graphics.Color valueOf(int)>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.Color toColor(int)> to <android.graphics.Color: android.graphics.Color valueOf(int)>has compatibility isssues！
-----------------------------------------
crashApis:204
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 490 Potential Issue API: SDKCheck of <android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>[]--><android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>
#1.the call statck between class <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> to <android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>has compatibility isssues！
-----------------------------------------
crashApis:205
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 491 Potential Issue API: SDKCheck of <android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View.DragShadowBuilder,java.lang.Object,int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.view.ViewCompat: boolean startDragAndDrop(android.view.View,android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>[[-$i1 < 24]]--><android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View.DragShadowBuilder,java.lang.Object,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 492 Potential Issue API: SDKCheck of <android.app.Notification: java.lang.String getChannelId()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[]--><androidx.core.app.NotificationCompat: java.lang.String getChannelId(android.app.Notification)>[[-$i0 < 26]]--><android.app.Notification: java.lang.String getChannelId()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 493 Potential Issue API: SDKCheck of <android.view.View: void setNextClusterForwardId(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 26
Good road: <androidx.core.view.ViewCompat: void setNextClusterForwardId(android.view.View,int)>[[-$i1 < 26]]--><android.view.View: void setNextClusterForwardId(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 494 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int captionBar()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int captionBar()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int captionBar()>has compatibility isssues！
-----------------------------------------
crashApis:206
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 495 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setRemoteInputHistory(java.lang.CharSequence[])> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24]][[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
-i0 < 24
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setRemoteInputHistory(java.lang.CharSequence[])>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 496 Potential Issue API: SDKCheck of <android.media.MediaCodecInfo: boolean isAlias()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.mediacodec.MediaCodecUtil: java.util.ArrayList getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey,com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)>[[try]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isAlias(android.media.MediaCodecInfo)>[[-$i0 < 29]]--><com.google.android.exoplayer2.mediacodec.MediaCodecUtil: boolean isAliasV29(android.media.MediaCodecInfo)>[]--><android.media.MediaCodecInfo: boolean isAlias()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 497 Potential Issue API: SDKCheck of <android.util.Half: android.util.Half valueOf(short)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.util.HalfKt: android.util.Half toHalf(short)>[]--><android.util.Half: android.util.Half valueOf(short)>
#1.the call statck between class <androidx.core.util.HalfKt: android.util.Half toHalf(short)> to <android.util.Half: android.util.Half valueOf(short)>has compatibility isssues！
-----------------------------------------
crashApis:207
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 498 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.graphics.Region getRegionAt(int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat: android.graphics.Region getRegionAt(int)>[[-$i1 < 29]]--><android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.graphics.Region getRegionAt(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 499 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: android.graphics.drawable.Icon getIcon()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: android.graphics.drawable.Icon getIcon()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: android.graphics.drawable.Icon getIcon()>has compatibility isssues！
-----------------------------------------
crashApis:208
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 500 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 501 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: boolean isTextEntryKey()>[[-$i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 502 Potential Issue API: SDKCheck of <android.widget.TextView: android.text.PrecomputedText.Params getTextMetricsParams()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 28
Good road: <androidx.core.widget.TextViewCompat: androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParams(android.widget.TextView)>[[-i0 < 28]]--><android.widget.TextView: android.text.PrecomputedText.Params getTextMetricsParams()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 503 Potential Issue API: SDKCheck of <android.app.NotificationChannel: void enableVibration(boolean)> is checking!!!
The life time of api is [26,31]
3call roads:
1 Mainhead roads:
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]
###Multi invoking in one method, need manual check!!!--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25]][[i0 < 26]]
-i0 <= 25
i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: void onCreate()>[[-i0 <= 25], [i0 < 26]]--><android.app.NotificationChannel: void enableVibration(boolean)>
One road protect good!
2 Packageshead roads:
-i0 < 26
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelsCompat(java.util.List)>[[-i0 < 26]]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void enableVibration(boolean)>
One road protect good!
$i0 >= 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannel(androidx.core.app.NotificationChannelCompat)>[]--><androidx.core.app.NotificationChannelCompat: android.app.NotificationChannel getNotificationChannel()>[[$i0 >= 26]]--><android.app.NotificationChannel: void enableVibration(boolean)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 504 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 505 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: boolean getAutoExpandBubble()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: boolean getAutoExpandBubble()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: boolean getAutoExpandBubble()>has compatibility isssues！
-----------------------------------------
crashApis:209
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 506 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean isEnabled()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean isEnabled()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: boolean isEnabled()>has compatibility isssues！
-----------------------------------------
crashApis:210
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 507 Potential Issue API: SDKCheck of <android.widget.TextView: void setLastBaselineToBottomHeight(int)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 508 Potential Issue API: SDKCheck of <android.widget.TextView: boolean isHorizontallyScrollable()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 509 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setCustomContentView(android.widget.RemoteViews)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24]][[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
-i0 < 24
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[-i0 < 24], [i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setCustomContentView(android.widget.RemoteViews)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 510 Potential Issue API: SDKCheck of <android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: android.content.ClipDescription getDescription()>[]--><android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>
#1.the call statck between class <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: android.content.ClipDescription getDescription()> to <android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>has compatibility isssues！
-----------------------------------------
crashApis:211
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 511 Potential Issue API: SDKCheck of <android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)> is checking!!!
The life time of api is [26,31]
20call roads:
1 Mainhead roads:
-i0 < 26
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: agersant.polaris.PolarisPlaybackService dummyMainMethod_agersant_polaris_PolarisPlaybackService(android.content.Intent)>[]--><agersant.polaris.PolarisPlaybackService: int onStartCommand(android.content.Intent,int,int)>[]--><agersant.polaris.PolarisPlaybackService: void handleIntent(android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
19 Packageshead roads:
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$2$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$3$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void setAudioStreamType(int)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setAudioAttributes(com.google.android.exoplayer2.audio.AudioAttributes,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.player.PlayerFragment: void lambda$onCreateView$1$PlayerFragment(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToPrevious()>[]--><agersant.polaris.PolarisPlayer: void skipPrevious()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer: void onPlayerStateChanged(boolean,int)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.features.queue.QueueAdapter$QueueItemHolder: void onClick(android.view.View)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService: void access$400(agersant.polaris.PolarisPlaybackService)>[]--><agersant.polaris.PolarisPlaybackService: void requestAudioFocus()>[[-$i0 < 26]]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchSetPlayWhenReady(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-$i0 < 26
Good road: <androidx.media.AudioManagerCompat: int requestAudioFocus(android.media.AudioManager,androidx.media.AudioFocusRequestCompat)>[[-$i0 < 26]]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlayer$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onSkipToNext()>[]--><agersant.polaris.PolarisPlayer: boolean skipNext()>[]--><agersant.polaris.PolarisPlayer: boolean advance(agersant.polaris.CollectionItem,int)>[]--><agersant.polaris.PolarisPlayer: void play(agersant.polaris.CollectionItem)>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.DefaultControlDispatcher: boolean dispatchStop(com.google.android.exoplayer2.Player,boolean)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void stop(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPause()>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void retry()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$1: void onReceive(android.content.Context,android.content.Intent)>[]--><agersant.polaris.PolarisPlayer: void pause()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioBecomingNoisy()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
-i0 < 26
Good road: <agersant.polaris.PolarisPlaybackService$MediaSessionCallback: void onPlay()>[]--><agersant.polaris.PolarisPlayer: void resume()>[]--><com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>[]--><com.google.android.exoplayer2.AudioFocusManager: int updateAudioFocus(boolean,int)>[]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocus()>[[-i0 < 26]]--><com.google.android.exoplayer2.AudioFocusManager: int requestAudioFocusV26()>[]--><android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
One road protect good!
containsStatic:false
containsTry:true
20call by main package
-----------------------------------------
#################################################
N 512 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$yysi0 >= 30
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getStateDescription()>[[-$yysi0 >= 30]]--><android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>
#1.the call statck between class <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getStateDescription()> to <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>has compatibility isssues！
-----------------------------------------
crashApis:212
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 513 Potential Issue API: SDKCheck of <android.content.res.Resources.Theme: void rebase()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.content.res.ResourcesCompat$ThemeCompat$ImplApi29: void rebase(android.content.res.Resources$Theme)>[]--><android.content.res.Resources.Theme: void rebase()>
#1.the call statck between class <androidx.core.content.res.ResourcesCompat$ThemeCompat$ImplApi29: void rebase(android.content.res.Resources$Theme)> to <android.content.res.Resources.Theme: void rebase()>has compatibility isssues！
-----------------------------------------
crashApis:213
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 514 Potential Issue API: SDKCheck of <android.view.DragAndDropPermissions: void release()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.DragAndDropPermissionsCompat: void release()>[[-$i0 < 24]]--><android.view.DragAndDropPermissions: void release()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 515 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()> is checking!!!
The life time of api is [25,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30]][[-i1 < 25]]
$i0 < 25
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean isRateLimitingActive(android.content.Context)>[[$i0 < 25]]--><androidx.core.content.pm.ShortcutManagerCompat: java.util.List getShortcuts(android.content.Context,int)>[[i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: java.util.List getDynamicShortcuts(android.content.Context)>[[-i0 < 25]]--><android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[i1 < 30]][[-i1 < 25]]
i1 > 29
i1 < 30
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [i1 < 30], [-i1 < 25]]--><android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 516 Potential Issue API: SDKCheck of <android.net.NetworkInfo: int getType()> is checking!!!
The life time of api is [1,30]
381call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><agersant.polaris.PolarisApplication: void onCreate()>[]--><agersant.polaris.PolarisState: void <init>(android.content.Context)>[]--><agersant.polaris.PolarisPlayer: void <init>(android.content.Context,agersant.polaris.api.API,agersant.polaris.PlaybackQueue)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
380 Packageshead roads:
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController$observer$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>[]--><androidx.lifecycle.DispatchQueue: void resume()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int,long)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setPublicShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void prepare(com.google.android.exoplayer2.offline.DownloadHelper$Callback)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30]][[try]][[$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]
$i0 < 30
try
Good road with try: <androidx.core.location.LocationManagerCompat: boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback)>[[$i0 < 30], [try], [$i0 < 24]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$1: void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ServiceHandler: void postOrRun(java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(int,com.google.android.exoplayer2.source.MediaSource,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.wav.WavExtractor$PassthroughOutputWriter: void init(int,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController: void access$handleDestroy(androidx.lifecycle.LifecycleController,kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void handleDestroy(kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat: boolean removeSubscription(java.lang.String,androidx.media.MediaBrowserServiceCompat$ConnectionRecord,android.os.IBinder)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onFirstFix(int)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource: void prepareSourceInternal(com.google.android.exoplayer2.upstream.TransferListener)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void completeTransaction()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$8: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>[]--><okhttp3.internal.ws.RealWebSocket: void connect(okhttp3.OkHttpClient)>[]--><okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)>[]--><okhttp3.Dispatcher: void enqueue$okhttp(okhttp3.internal.connection.RealCall$AsyncCall)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.text.PrecomputedTextCompat: java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$3: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.MediaSourceEventListener$EventDispatcher: void postOrRun(android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean filterInPlace$CollectionsKt__MutableCollectionsKt(java.lang.Iterable,kotlin.jvm.functions.Function1,boolean)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.app.NotificationManagerCompat$SideChannelManager: void updateListenerMap()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.PausingDispatcherKt$whenStateAtLeast$2: java.lang.Object invokeSuspend(java.lang.Object)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void onUpstreamFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.ToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void handlePositionDiscontinuity(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime,int)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStarted()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onStopped()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerImplInternal: boolean handleMessage(android.os.Message)>[[try]]--><com.google.android.exoplayer2.ExoPlayerImplInternal: void sendMessageToTargetThread(com.google.android.exoplayer2.PlayerMessage)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaSource removeMediaSource(int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.ExecutorCoroutineDispatcherBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void renderedFirstFrame(android.view.Surface)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.navigation.ui.CollapsingToolbarOnDestinationChangedListener: void setNavigationIcon(android.graphics.drawable.Drawable,int)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void setNetworkTypeOverride(int)>[[try]]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.DispatchQueue: void access$enqueue(androidx.lifecycle.DispatchQueue,java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$1: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion2: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$7: void onSuccess()>[]--><agersant.polaris.api.local.LocalAPI: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.ExoPlayer newInstance(android.content.Context,com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EGLSurfaceTexture: void onFrameAvailable(android.graphics.SurfaceTexture)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.loader.content.ModernAsyncTask: void execute(java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21: void notifyChildrenChangedForCompat(java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(java.util.Collection,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip$2: void onClick(android.view.View)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayer$Builder: void <init>(android.content.Context,com.google.android.exoplayer2.Renderer[])>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onLeafAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.widget.AutoScrollHelper: boolean onTouch(android.view.View,android.view.MotionEvent)>[]--><androidx.core.widget.AutoScrollHelper: void startAnimating()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: boolean removePreferenceRecursively(java.lang.CharSequence)>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroup: void removeAll()>[[try]]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.EventLoopImplBase: void shutdown()>[]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.navigation.NavGraph: void clear()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.EventDispatcher$HandlerAndListener: void dispatch(com.google.android.exoplayer2.util.EventDispatcher$Event)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseTouchCallback: void onSwiped(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void onSwiped(android.view.View)>[]--><agersant.polaris.features.browse.BrowseItemHolder: void queueDirectory()>[]--><agersant.polaris.api.API: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.local.LocalAPI: void flatten(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void videoSizeChanged(int,int,int,float)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean onTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void endFakeDrag()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.DefaultItemAnimator: void runPendingAnimations()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseFragment: void lambda$onCreateView$1$BrowseFragment(com.orangegangsters.github.swipyrefreshlayout.library.SwipyRefreshLayoutDirection)>[]--><agersant.polaris.features.browse.BrowseFragment: void loadContent()>[]--><agersant.polaris.features.browse.BrowseFragment: void loadPath(java.lang.String)>[]--><agersant.polaris.api.API: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseFragment: void lambda$onCreateView$0$BrowseFragment(android.view.View)>[]--><agersant.polaris.features.browse.BrowseFragment: void loadContent()>[]--><agersant.polaris.features.browse.BrowseFragment: void loadPath(java.lang.String)>[]--><agersant.polaris.api.API: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupAdapter$3: boolean onPreferenceClick(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroupAdapter: void onPreferenceHierarchyChange(androidx.preference.Preference)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.internal.connection.RealCall$AsyncCall: void executeOn(java.util.concurrent.ExecutorService)>[[try]]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.internal.connection.RealCall$AsyncCall: void executeOn(java.util.concurrent.ExecutorService)>[[try]]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.internal.connection.RealCall$AsyncCall: void executeOn(java.util.concurrent.ExecutorService)>[[try]]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void droppedFrames(int,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.view.ViewPropertyAnimatorCompat$1: void onAnimationStart(android.animation.Animator)>[]--><androidx.core.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorListenerApi14: void onAnimationStart(android.view.View)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void onStartEnterTransition()>[]--><androidx.fragment.app.FragmentManager: void scheduleCommit()>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource$HandlerAndRunnable: void dispatch()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.Dispatcher: void setMaxRequests(int)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource$ComponentListener: void onAdPlaybackState(com.google.android.exoplayer2.source.ads.AdPlaybackState)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.timepicker.RadialViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void show()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource$AdPrepareErrorListener: void onPrepareError(com.google.android.exoplayer2.source.MediaSource$MediaPeriodId,java.io.IOException)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.ts.Ac4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.ts.Ac3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.wav.WavExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper: void init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider,long,long)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.FragmentTransitionSupport$5: void onTransitionEnd(androidx.transition.Transition)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void enabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.wav.WavExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.ts.Ac3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.ts.Ac4Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.ExtractorOutput,android.net.Uri)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void init(com.google.android.exoplayer2.extractor.ExtractorOutput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(boolean,com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(boolean,com.google.android.exoplayer2.source.ShuffleOrder,com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void <init>(boolean,boolean,com.google.android.exoplayer2.source.ShuffleOrder,com.google.android.exoplayer2.source.MediaSource[])>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(java.util.Collection)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void enabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void postToMainThread(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.FragmentManager: void enqueueAction(androidx.fragment.app.FragmentManager$OpGenerator,boolean)>[[try]]--><androidx.fragment.app.FragmentManager: void scheduleCommit()>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void onRestoreInstanceState(android.os.Parcelable)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void access$300(com.google.android.exoplayer2.offline.DownloadHelper,java.io.IOException)>[]--><com.google.android.exoplayer2.offline.DownloadHelper: void onMediaPreparationFailed(java.io.IOException)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.snackbar.BaseTransientBottomBar$7: void onViewDetachedFromWindow(android.view.View)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.scheduler.RequirementsWatcher$NetworkCallback: void postRecheckNotMetNetworkRequirements()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase: void notifyChildrenChanged(java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void scrollToPreference(java.lang.String)>[]--><androidx.preference.PreferenceFragment: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <androidx.transition.FragmentTransitionSupport: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.util.SystemHandlerWrapper: boolean post(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.ItemTouchHelper$2: void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void clear(android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removeMediaSourceRange(int,int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.internal.tls.BasicCertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: void processMoovAtom(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.Mp4Extractor: void processMoovAtom(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2: void getAlbums(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,int)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,android.os.Looper)>[]--><com.google.android.exoplayer2.ExoPlayerFactory: com.google.android.exoplayer2.SimpleExoPlayer newSimpleInstance(android.content.Context,com.google.android.exoplayer2.RenderersFactory,com.google.android.exoplayer2.trackselection.TrackSelector,com.google.android.exoplayer2.LoadControl,com.google.android.exoplayer2.drm.DrmSessionManager,com.google.android.exoplayer2.analytics.AnalyticsCollector,android.os.Looper)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.wav.WavExtractor$ImaAdPcmOutputWriter: void init(int,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ogg.OggExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int readPayload(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: void maybeOutputSeekMap(long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.PsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void readPastStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void updateFlacStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void outputSeekMap(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader: boolean read(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: boolean readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void maybeOutputSeekMap(long,int)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void getFrameStartMarker(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ProgressiveMediaPeriod$ExtractingLoadable: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void maybeOutputSeekMap(long,boolean,boolean)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
-$yysi0 < 19
try
Good road with try: <com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><com.google.android.material.bottomnavigation.BottomNavigationView: void setItemHorizontalTranslationEnabled(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationPresenter: void updateMenuView(boolean)>[]--><com.google.android.material.bottomnavigation.BottomNavigationMenuView: void updateMenuView()>[]--><androidx.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition)>[[-$yysi0 < 19]]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.progressindicator.BaseProgressIndicator: void hide()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3: void getAlbums(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onSatelliteStatusChanged(android.location.GnssStatus)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onSatelliteStatusChanged(android.location.GnssStatus)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport: void onSatelliteStatusChanged(android.location.GnssStatus)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.material.tabs.TabLayout$ViewPagerOnTabSelectedListener: void onTabSelected(com.google.android.material.tabs.TabLayout$Tab)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <okhttp3.Dispatcher: void setMaxRequestsPerHost(int)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$4: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void audioTrackUnderrun(int,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$PagerObserver: void onChanged()>[]--><androidx.viewpager.widget.ViewPager: void dataSetChanged()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.AudioBecomingNoisyManager$AudioBecomingNoisyReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void setPublicShuffleOrder(com.google.android.exoplayer2.source.ShuffleOrder,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaSource removeMediaSource(int)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>[[$i0 < 28]]--><androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>[[i0 < 28], [try], [$yysi0 == 26]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>[[$i0 < 28]]--><androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>[[i0 < 28]][[try]][[$yysi0 == 26]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]
$i0 < 28
i0 < 28
try
Good road with try: <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>[[$i0 < 28]]--><androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>[[i0 < 28], [try], [$yysi0 == 26]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: void maybeOutputSeekMap(long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void readPastStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void updateFlacStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void outputSeekMap(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader: boolean read(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void maybeOutputSeekMap(long,boolean,boolean)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void maybeOutputSeekMap(long,int)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void getFrameStartMarker(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: boolean readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.PsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.ContainerMediaChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ogg.OggExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int readPayload(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ads.AdsMediaSource: void releaseSourceInternal()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$1: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$ConnectionRecord: void binderDied()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$3: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void moveMediaSource(int,int,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void movePublicMediaSource(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader$LoadTask: void execute()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader$LoadTask: void execute()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader$LoadTask: void execute()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.TransitionManager: void transitionTo(androidx.transition.Scene)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: com.google.android.exoplayer2.source.MediaPeriod createPeriod(com.google.android.exoplayer2.source.MediaSource$MediaPeriodId,com.google.android.exoplayer2.upstream.Allocator,long)>[]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void disableUnusedMediaSources()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.activity.ComponentActivity$2: void onLaunch(int,androidx.activity.result.contract.ActivityResultContract,java.lang.Object,androidx.core.app.ActivityOptionsCompat)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
i1 < 23
try
Good road with try: <androidx.activity.ComponentActivity$2: void onLaunch(int,androidx.activity.result.contract.ActivityResultContract,java.lang.Object,androidx.core.app.ActivityOptionsCompat)>[]--><androidx.core.app.ActivityCompat: void requestPermissions(android.app.Activity,java.lang.String[],int)>[[i1 < 23]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupKt: void minusAssign(androidx.preference.PreferenceGroup,androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <kotlinx.coroutines.android.HandlerContext: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.SimpleExoPlayer$Builder: void <init>(android.content.Context,com.google.android.exoplayer2.RenderersFactory)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter getSingletonInstance(android.content.Context)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$Builder: com.google.android.exoplayer2.upstream.DefaultBandwidthMeter build()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean,com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$1)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.offline.DownloadHelper: void access$200(com.google.android.exoplayer2.offline.DownloadHelper)>[]--><com.google.android.exoplayer2.offline.DownloadHelper: void onMediaPrepared()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase: void setSessionToken(android.support.v4.media.session.MediaSessionCompat$Token)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.features.browse.BrowseFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>[]--><agersant.polaris.features.browse.BrowseFragment: void loadContent()>[]--><agersant.polaris.features.browse.BrowseFragment: void loadPath(java.lang.String)>[]--><agersant.polaris.api.API: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.api.remote.APIVersion3: void browse(java.lang.String,agersant.polaris.api.ItemsCallback)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.ServerAPI$8: void onError()>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.PausingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void runOrEnqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.LifecycleController: void <init>(androidx.lifecycle.Lifecycle,androidx.lifecycle.Lifecycle$State,androidx.lifecycle.DispatchQueue,kotlinx.coroutines.Job)>[]--><androidx.lifecycle.LifecycleController: void finish()>[]--><androidx.lifecycle.DispatchQueue: void finish()>[]--><androidx.lifecycle.DispatchQueue: void drainQueue()>[[try]]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(int,java.util.Collection)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21: void notifyChildrenChangedForCompat(androidx.media.MediaSessionManager$RemoteUserInfo,java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragment: void scrollToPreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceFragment: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.PagerTabStrip: boolean onTouchEvent(android.view.MotionEvent)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.analytics.DefaultPlaybackSessionManager: void handleTimelineUpdate(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime)>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
i0 < 16
Good road: <androidx.core.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>[[i0 < 16]]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void <init>(android.content.Context,android.util.SparseArray,int,com.google.android.exoplayer2.util.Clock,boolean)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void register(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$1: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$2: void onFailure(okhttp3.Call,java.io.IOException)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.provider.FontsContractCompat: void requestFontInternal(android.content.Context,androidx.core.provider.FontRequest,androidx.core.provider.FontsContractCompat$FontRequestCallback,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.core.provider.FontsContractCompat$4: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><kotlinx.coroutines.DefaultExecutor: void run()>[[try]]--><kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void onViewCreated(android.view.View,android.os.Bundle)>[]--><androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1: void run()>[]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.AudioFocusManager$AudioFocusListener: void onAudioFocusChange(int)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flac.FlacExtractor: void getFrameStartMarker(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void readPastStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void updateFlacStreamInfo(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.ext.flac.FlacExtractor: void outputSeekMap(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.util.FlacStreamInfo)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.AdtsExtractor: void maybeOutputSeekMap(long,boolean,boolean)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader: boolean read(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ogg.OggExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ogg.StreamReader: int readPayload(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.flv.FlvExtractor: boolean readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.ts.TsExtractor: void maybeOutputSeekMap(long)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.ts.PsExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.mp3.Mp3Extractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.chunk.InitializationChunk: void load()>[[try]]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: int read(com.google.android.exoplayer2.extractor.ExtractorInput,com.google.android.exoplayer2.extractor.PositionHolder)>[]--><com.google.android.exoplayer2.extractor.amr.AmrExtractor: void maybeOutputSeekMap(long,int)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void seekMap(com.google.android.exoplayer2.extractor.SeekMap)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void moveMediaSource(int,int)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void movePublicMediaSource(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.content.res.ResourcesCompat$FontCallback: void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void computeScroll()>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(com.google.android.exoplayer2.source.MediaSource)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSource(int,com.google.android.exoplayer2.source.MediaSource)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.ComputableLiveData$1: void onActive()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.ComputableLiveData$1: void onActive()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.lifecycle.ComputableLiveData$1: void onActive()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.TransitionManager: void go(androidx.transition.Scene)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void onSizeChanged(int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void recomputeScrollPosition(int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceFragmentCompat: void scrollToPreference(java.lang.String)>[]--><androidx.preference.PreferenceFragmentCompat: void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String)>[]--><androidx.fragment.app.Fragment$2: void run()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$2: void maybeExecuteBackgroundRunnable()>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$2: void maybeExecuteBackgroundRunnable()>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.recyclerview.widget.MessageThreadUtil$2: void maybeExecuteBackgroundRunnable()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: boolean dispatchKeyEvent(android.view.KeyEvent)>[]--><androidx.viewpager.widget.ViewPager: boolean executeKeyEvent(android.view.KeyEvent)>[]--><androidx.viewpager.widget.ViewPager: boolean pageLeft()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItem(int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager$PagerObserver: void onInvalidated()>[]--><androidx.viewpager.widget.ViewPager: void dataSetChanged()>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.fragment.app.DefaultSpecialEffectsController: java.util.Map startTransitions(java.util.List,boolean,androidx.fragment.app.SpecialEffectsController$Operation,androidx.fragment.app.SpecialEffectsController$Operation)>[]--><androidx.fragment.app.FragmentTransitionImpl: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)>[]--><androidx.fragment.app.Fragment$1: void run()>[]--><androidx.fragment.app.Fragment: void startPostponedEnterTransition()>[]--><androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion2$1: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void audioSessionId(int)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onError()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.api.remote.APIVersion3$2: void onResponse(okhttp3.Call,okhttp3.Response)>[]--><agersant.polaris.features.browse.BrowseItemHolder$1: void onSuccess(java.util.ArrayList)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.transition.TransitionManager: void go(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void changeScene(androidx.transition.Scene,androidx.transition.Transition)>[]--><androidx.transition.TransitionManager: void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition)>[]--><androidx.transition.Scene: void exit()>[]--><androidx.lifecycle.ComputableLiveData$3: void run()>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$GpsStatusTransport: void onGpsStatusChanged(int)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$GpsStatusTransport: void onGpsStatusChanged(int)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.core.location.LocationManagerCompat$GpsStatusTransport: void onGpsStatusChanged(int)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void setAdapter(androidx.viewpager.widget.PagerAdapter)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>[]--><androidx.viewpager.widget.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>[]--><androidx.viewpager.widget.ViewPager: void scrollToItem(int,boolean,int,boolean)>[]--><androidx.viewpager.widget.ViewPager: void smoothScrollTo(int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void clear()>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removeMediaSourceRange(int,int)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void removePublicMediaSources(int,int,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.PolarisScrobbleService: void access$300(agersant.polaris.PolarisScrobbleService)>[]--><agersant.polaris.PolarisScrobbleService: void nowPlaying()>[]--><agersant.polaris.api.remote.ServerAPI: void setLastFMNowPlaying(java.lang.String)>[]--><agersant.polaris.api.remote.ServerAPI: void fetchAPIVersionAsync(agersant.polaris.api.remote.ServerAPI$VersionCallback)>[]--><okhttp3.internal.connection.RealCall: void enqueue(okhttp3.Callback)>[]--><okhttp3.Dispatcher: void enqueue$okhttp(okhttp3.internal.connection.RealCall$AsyncCall)>[]--><okhttp3.Dispatcher: boolean promoteAndExecute()>[[try]]--><androidx.preference.PreferenceGroupKt$iterator$1: void remove()>[]--><androidx.preference.PreferenceGroup: boolean removePreference(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroup: boolean removePreferenceInt(androidx.preference.Preference)>[[try]]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[[try]]--><com.google.android.exoplayer2.source.ConcatenatingMediaSource: void addPublicMediaSources(int,java.util.Collection,android.os.Handler,java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor: void onMoovContainerAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)>[]--><com.google.android.exoplayer2.source.ProgressiveMediaPeriod: void endTracks()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.viewpager.widget.ViewPager: void setPageMargin(int)>[]--><androidx.viewpager.widget.ViewPager: void recomputeScrollPosition(int,int,int,int)>[]--><androidx.viewpager.widget.ViewPager: void completeScroll(boolean)>[]--><androidx.core.provider.SelfDestructiveThread$2: void run()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <agersant.polaris.features.player.PlayerFragment: void onStart()>[]--><agersant.polaris.features.player.PlayerFragment: void scheduleSeekBarUpdates()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.scheduler.RequirementsWatcher$NetworkCallback: void postCheckRequirements()>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.preference.PreferenceGroupAdapter: void onPreferenceVisibilityChange(androidx.preference.Preference)>[]--><androidx.preference.PreferenceGroupAdapter: void onPreferenceHierarchyChange(androidx.preference.Preference)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader: void release(com.google.android.exoplayer2.upstream.Loader$ReleaseCallback)>[]--><androidx.core.os.HandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader: void release(com.google.android.exoplayer2.upstream.Loader$ReleaseCallback)>[]--><androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.android.exoplayer2.upstream.Loader: void release(com.google.android.exoplayer2.upstream.Loader$ReleaseCallback)>[]--><androidx.core.content.ContextCompat$MainHandlerExecutor: void execute(java.lang.Runnable)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase: void notifyChildrenChanged(androidx.media.MediaSessionManager$RemoteUserInfo,java.lang.String,android.os.Bundle)>[]--><android.os.Handler: boolean post(java.lang.Runnable)>[]--><com.google.android.exoplayer2.upstream.'-$$Lambda$DefaultBandwidthMeter$ConnectivityActionReceiver$mti4nZG5medJd4VCi4eWnkFCrdE': void run()>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void lambda$register$0$DefaultBandwidthMeter$ConnectivityActionReceiver(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter$ConnectivityActionReceiver: void updateBandwidthMeter(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void access$100(com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)>[]--><com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: void onConnectivityAction()>[[try]]--><com.google.android.exoplayer2.util.Util: int getNetworkType(android.content.Context)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <androidx.core.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>[]--><android.net.NetworkInfo: int getType()>
#376.the call statck between class <androidx.core.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)> to <android.net.NetworkInfo: int getType()>has compatibility isssues！
-----------------------------------------
crashApis:214
containsStatic:true
containsTry:true
377call by main package
-----------------------------------------
#################################################
N 517 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder addPerson(android.app.Person)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><android.app.Notification.Builder: android.app.Notification.Builder addPerson(android.app.Person)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 518 Potential Issue API: SDKCheck of <android.os.UserManager: boolean isUserUnlocked()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.os.UserManagerCompat: boolean isUserUnlocked(android.content.Context)>[[-$i0 < 24]]--><android.os.UserManager: boolean isUserUnlocked()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 519 Potential Issue API: SDKCheck of <android.graphics.fonts.FontFamily.Builder: void <init>(android.graphics.fonts.Font)> is checking!!!
The life time of api is [29,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>[[try]]--><android.graphics.fonts.FontFamily.Builder: void <init>(android.graphics.fonts.Font)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.FontFamily.Builder: void <init>(android.graphics.fonts.Font)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.FontFamily.Builder: void <init>(android.graphics.fonts.Font)>
One road protect good!
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 520 Potential Issue API: SDKCheck of <android.app.NotificationManager: void createNotificationChannelGroup(android.app.NotificationChannelGroup)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroup(androidx.core.app.NotificationChannelGroupCompat)>[]--><androidx.core.app.NotificationManagerCompat: void createNotificationChannelGroup(android.app.NotificationChannelGroup)>[[-$i0 < 26]]--><android.app.NotificationManager: void createNotificationChannelGroup(android.app.NotificationChannelGroup)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 521 Potential Issue API: SDKCheck of <android.view.View: void setImportantForAutofill(int)> is checking!!!
The life time of api is [26,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
-$i1 < 26
Good road: <androidx.viewpager2.widget.ViewPager2$RecyclerViewImpl: void <init>(androidx.viewpager2.widget.ViewPager2,android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void initAutofill()>[]--><androidx.core.view.ViewCompat: void setImportantForAutofill(android.view.View,int)>[[-$i1 < 26]]--><android.view.View: void setImportantForAutofill(int)>
One road protect good!
-$i0 < 26
-$i1 < 26
Good road: <com.google.android.material.textfield.TextInputLayout: void <init>(android.content.Context)>[]--><com.google.android.material.textfield.TextInputLayout: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.textfield.TextInputLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>[[-$i0 < 26]]--><androidx.core.view.ViewCompat: void setImportantForAutofill(android.view.View,int)>[[-$i1 < 26]]--><android.view.View: void setImportantForAutofill(int)>
One road protect good!
-$i1 < 26
Good road: <com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet)>[]--><com.google.android.material.internal.NavigationMenuView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>[]--><androidx.recyclerview.widget.RecyclerView: void initAutofill()>[]--><androidx.core.view.ViewCompat: void setImportantForAutofill(android.view.View,int)>[[-$i1 < 26]]--><android.view.View: void setImportantForAutofill(int)>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 522 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int systemGestures()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int systemGestures()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int systemGestures()>has compatibility isssues！
-----------------------------------------
crashApis:215
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 523 Potential Issue API: SDKCheck of <android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,android.os.Handler)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl: void add(android.app.Activity)>[]--><android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,android.os.Handler)>
#1.the call statck between class <androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl: void add(android.app.Activity)> to <android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,android.os.Handler)>has compatibility isssues！
-----------------------------------------
crashApis:216
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 524 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)> is checking!!!
The life time of api is [25,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 525 Potential Issue API: SDKCheck of <android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>[]--><android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>
#1.the call statck between class <com.google.android.material.textfield.TextInputLayout: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)> to <android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>has compatibility isssues！
-----------------------------------------
crashApis:217
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 526 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: boolean setDynamicShortcuts(java.util.List)> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><android.content.pm.ShortcutManager: boolean setDynamicShortcuts(java.util.List)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 527 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setImportantForAccessibility(boolean)>[[-$i0 < 24]]--><android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 528 Potential Issue API: SDKCheck of <android.graphics.Paint: android.os.LocaleList getTextLocales()> is checking!!!
The life time of api is [24,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: java.lang.String toString()>[[-$i0 < 24], [$i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: java.lang.String toString()>[[-$i0 < 24]][[$i0 < 21]]
-$i0 < 24
$i0 < 21
Good road: <androidx.core.text.PrecomputedTextCompat$Params: java.lang.String toString()>[[-$i0 < 24], [$i0 < 21]]--><android.graphics.Paint: android.os.LocaleList getTextLocales()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params)>[[$i0 < 23], [-$i0 < 24], [$i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.text.PrecomputedTextCompat$Params: boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params)>[[$i0 < 23]][[-$i0 < 24]][[$i0 < 21]]
$i0 < 23
-$i0 < 24
$i0 < 21
Good road: <androidx.core.text.PrecomputedTextCompat$Params: boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params)>[[$i0 < 23], [-$i0 < 24], [$i0 < 21]]--><android.graphics.Paint: android.os.LocaleList getTextLocales()>
One road protect good!
-$i0 < 24
Good road: <androidx.core.text.PrecomputedTextCompat$Params: int hashCode()>[[-$i0 < 24]]--><android.graphics.Paint: android.os.LocaleList getTextLocales()>
One road protect good!
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 529 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int navigationBars()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int navigationBars()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int navigationBars()>has compatibility isssues！
-----------------------------------------
crashApis:218
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 530 Potential Issue API: SDKCheck of <android.app.Person: java.lang.String getKey()> is checking!!!
The life time of api is [28,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.String getKey()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.String getKey()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: java.lang.String getKey()>
One road protect good!
containsStatic:true
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 531 Potential Issue API: SDKCheck of <android.util.Half: android.util.Half valueOf(float)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.util.HalfKt: android.util.Half toHalf(float)>[]--><android.util.Half: android.util.Half valueOf(float)>
#1.the call statck between class <androidx.core.util.HalfKt: android.util.Half toHalf(float)> to <android.util.Half: android.util.Half valueOf(float)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.util.HalfKt: android.util.Half toHalf(double)>[]--><android.util.Half: android.util.Half valueOf(float)>
#2.the call statck between class <androidx.core.util.HalfKt: android.util.Half toHalf(double)> to <android.util.Half: android.util.Half valueOf(float)>has compatibility isssues！
-----------------------------------------
crashApis:219
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 532 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo: boolean isDeclaredInManifest()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)>[[$i0 < 28]]--><android.content.pm.ShortcutInfo: boolean isDeclaredInManifest()>
#1.the call statck between class <androidx.core.content.pm.ShortcutInfoCompat$Builder: void <init>(android.content.Context,android.content.pm.ShortcutInfo)> to <android.content.pm.ShortcutInfo: boolean isDeclaredInManifest()>has compatibility isssues！
-----------------------------------------
crashApis:220
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 533 Potential Issue API: SDKCheck of <android.app.Notification.BubbleMetadata: boolean isNotificationSuppressed()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><android.app.Notification.BubbleMetadata: boolean isNotificationSuppressed()>
#1.the call statck between class <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)> to <android.app.Notification.BubbleMetadata: boolean isNotificationSuppressed()>has compatibility isssues！
-----------------------------------------
crashApis:221
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 534 Potential Issue API: SDKCheck of <android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 
Error road: <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: android.net.Uri getContentUri()>[]--><android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>
#1.the call statck between class <androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl: android.net.Uri getContentUri()> to <android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>has compatibility isssues！
-----------------------------------------
crashApis:222
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 535 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setVisible(int,boolean)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setVisible(int,boolean)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setVisible(int,boolean)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setVisible(int,boolean)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setVisible(int,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:223
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 536 Potential Issue API: SDKCheck of <android.os.Trace: void beginAsyncSection(java.lang.String,int)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i1 < 29
Good road: <androidx.core.os.TraceCompat: void beginAsyncSection(java.lang.String,int)>[[-i1 < 29]]--><android.os.Trace: void beginAsyncSection(java.lang.String,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 537 Potential Issue API: SDKCheck of <android.os.LocaleList: boolean isEmpty()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.os.LocaleListCompat: boolean isEmpty()>[]--><androidx.core.os.LocaleListPlatformWrapper: boolean isEmpty()>[]--><android.os.LocaleList: boolean isEmpty()>
#1.the call statck between class <androidx.core.os.LocaleListCompat: boolean isEmpty()> to <android.os.LocaleList: boolean isEmpty()>has compatibility isssues！
-----------------------------------------
crashApis:224
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 538 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-i0 < 29
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat getTouchDelegateInfo()>[[-i0 < 29]]--><android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 539 Potential Issue API: SDKCheck of <android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setAllowGeneratedReplies(boolean)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 24], [i1 < 23], [-i0 < 20]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 24]][[i1 < 23]][[-i0 < 20]]
-i0 < 24
i1 < 23
-i0 < 20
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[-i0 < 24], [i1 < 23], [-i0 < 20]]--><android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setAllowGeneratedReplies(boolean)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 24], [i0 < 23]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 24]][[i0 < 23]]
-i0 < 24
i0 < 23
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[-i0 < 24], [i0 < 23]]--><android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setAllowGeneratedReplies(boolean)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 540 Potential Issue API: SDKCheck of <android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$yysi0 >= 30
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.DisplayCutoutCompat: void <init>(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[]--><androidx.core.view.DisplayCutoutCompat: android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)>[[-$yysi0 >= 30]]--><android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.DisplayCutoutCompat: void <init>(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets)> to <android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:225
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 541 Potential Issue API: SDKCheck of <android.location.GnssStatus: boolean hasEphemerisData(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.location.GnssStatusWrapper: boolean hasEphemerisData(int)>[]--><android.location.GnssStatus: boolean hasEphemerisData(int)>
#1.the call statck between class <androidx.core.location.GnssStatusWrapper: boolean hasEphemerisData(int)> to <android.location.GnssStatus: boolean hasEphemerisData(int)>has compatibility isssues！
-----------------------------------------
crashApis:226
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 542 Potential Issue API: SDKCheck of <android.view.WindowInsets: int hashCode()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()>[]--><android.view.WindowInsets: int hashCode()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()> to <android.view.WindowInsets: int hashCode()>has compatibility isssues！
-----------------------------------------
crashApis:227
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 543 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setGroupAlertBehavior(int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 29], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 28]][[i0 < 29]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 28
i0 < 29
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 29], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setGroupAlertBehavior(int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 544 Potential Issue API: SDKCheck of <android.view.Menu: void setGroupDividerEnabled(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 28
!!!this api will crash on sdk 23 24 25 26 27 
Error road: <androidx.core.view.MenuCompat: void setGroupDividerEnabled(android.view.Menu,boolean)>[[], [-$i0 < 28]]--><android.view.Menu: void setGroupDividerEnabled(boolean)>
#1.the call statck between class <androidx.core.view.MenuCompat: void setGroupDividerEnabled(android.view.Menu,boolean)> to <android.view.Menu: void setGroupDividerEnabled(boolean)>has compatibility isssues！
-----------------------------------------
crashApis:228
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 545 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setHeading(boolean)>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 546 Potential Issue API: SDKCheck of <android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()>[]--><android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()> to <android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>has compatibility isssues！
-----------------------------------------
-i0 < 29
Good road: <com.google.android.material.snackbar.BaseTransientBottomBar$7: void onViewAttachedToWindow(android.view.View)>[[-i0 < 29]]--><android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>
One road protect good!
crashApis:229
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 547 Potential Issue API: SDKCheck of <android.app.Notification.Builder: android.app.Notification.Builder setLocusId(android.content.LocusId)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20], [i0 < 21]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 28]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[-i0 < 29]][[i0 < 23]][[i0 < 20]][[i0 < 21]]
i0 < 19
i0 < 17
i0 < 28
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
-i0 < 29
i0 < 23
i0 < 20
i0 < 21
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 28], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [-i0 < 29], [i0 < 23], [i0 < 20], [i0 < 21]]--><android.app.Notification.Builder: android.app.Notification.Builder setLocusId(android.content.LocusId)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 548 Potential Issue API: SDKCheck of <android.service.media.MediaBrowserService: android.os.Bundle getBrowserRootHints()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi26: android.os.Bundle getBrowserRootHints()>[]--><android.service.media.MediaBrowserService: android.os.Bundle getBrowserRootHints()>
#1.the call statck between class <androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi26: android.os.Bundle getBrowserRootHints()> to <android.service.media.MediaBrowserService: android.os.Bundle getBrowserRootHints()>has compatibility isssues！
-----------------------------------------
crashApis:230
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 549 Potential Issue API: SDKCheck of <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.ColorKt: android.graphics.ColorSpace getColorSpace(long)>[]--><android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>
#1.the call statck between class <androidx.core.graphics.ColorKt: android.graphics.ColorSpace getColorSpace(long)> to <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>has compatibility isssues！
-----------------------------------------
crashApis:231
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 550 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setTappableElementInsets(android.graphics.Insets)> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setTappableElementInsets(android.graphics.Insets)>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)> to <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setTappableElementInsets(android.graphics.Insets)>has compatibility isssues！
-----------------------------------------
crashApis:232
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 551 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: boolean isScreenReaderFocusable()>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 552 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.accessibility.AccessibilityNodeInfoCompat: java.lang.CharSequence getTooltipText()>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 553 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>[]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setPaneTitle(java.lang.CharSequence)>[[-$i0 < 28]]--><android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 554 Potential Issue API: SDKCheck of <android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i4 < 27
Good road: <androidx.core.widget.TextViewCompat: void setAutoSizeTextTypeUniformWithConfiguration(android.widget.TextView,int,int,int,int)>[[-$i4 < 27]]--><android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 555 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 556 Potential Issue API: SDKCheck of <android.net.NetworkCapabilities: boolean hasCapability(int)> is checking!!!
The life time of api is [21,30]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean checkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.NetworkCapabilities: boolean hasCapability(int)>
#1.the call statck between class <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)> to <android.net.NetworkCapabilities: boolean hasCapability(int)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void recheckNotMetNetworkRequirements()>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.NetworkCapabilities: boolean hasCapability(int)>
#2.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$500(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.NetworkCapabilities: boolean hasCapability(int)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.offline.WritableDownloadIndex,com.google.android.exoplayer2.offline.DownloaderFactory)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.NetworkCapabilities: boolean hasCapability(int)>
#3.the call statck between class <com.google.android.exoplayer2.offline.DownloadManager: void <init>(android.content.Context,com.google.android.exoplayer2.database.DatabaseProvider,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.DataSource$Factory)> to <android.net.NetworkCapabilities: boolean hasCapability(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher$NetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>[]--><android.net.NetworkCapabilities: boolean hasCapability(int)>
#4.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher$NetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)> to <android.net.NetworkCapabilities: boolean hasCapability(int)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void setRequirements(com.google.android.exoplayer2.scheduler.Requirements)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: int start()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.NetworkCapabilities: boolean hasCapability(int)>
#5.the call statck between class <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)> to <android.net.NetworkCapabilities: boolean hasCapability(int)>has compatibility isssues！
-----------------------------------------
i0 >= 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void checkRequirements()>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>[]--><com.google.android.exoplayer2.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>[[i0 >= 24]]--><android.net.NetworkCapabilities: boolean hasCapability(int)>
#6.the call statck between class <com.google.android.exoplayer2.scheduler.RequirementsWatcher: void access$200(com.google.android.exoplayer2.scheduler.RequirementsWatcher)> to <android.net.NetworkCapabilities: boolean hasCapability(int)>has compatibility isssues！
-----------------------------------------
crashApis:233
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 557 Potential Issue API: SDKCheck of <android.app.Person: boolean isBot()> is checking!!!
The life time of api is [28,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: boolean isBot()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: boolean isBot()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><android.app.Person: boolean isBot()>
One road protect good!
containsStatic:true
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 558 Potential Issue API: SDKCheck of <android.view.View: void setTransitionVisibility(int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.transition.ViewUtilsApi29: void setTransitionVisibility(android.view.View,int)>[]--><android.view.View: void setTransitionVisibility(int)>
#1.the call statck between class <androidx.transition.ViewUtilsApi29: void setTransitionVisibility(android.view.View,int)> to <android.view.View: void setTransitionVisibility(int)>has compatibility isssues！
-----------------------------------------
###Multi invoking in one method, need manual check!!!<androidx.transition.ViewUtilsApi23: void setTransitionVisibility(android.view.View,int)>[[try], [i1 != 28]]
###Multi invoking in one method, need manual check!!!<androidx.transition.ViewUtilsApi23: void setTransitionVisibility(android.view.View,int)>[[try]][[i1 != 28]]
try
Good road with try: <androidx.transition.ViewUtilsApi23: void setTransitionVisibility(android.view.View,int)>[[try], [i1 != 28]]--><android.view.View: void setTransitionVisibility(int)>
One road protect good!
crashApis:234
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 559 Potential Issue API: SDKCheck of <android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)> is checking!!!
The life time of api is [26,31]
13call roads:
0 Mainhead roads:
13 Packageshead roads:
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendRemoveDownload(android.content.Context,java.lang.Class,java.lang.String,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendResumeDownloads(android.content.Context,java.lang.Class,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService$DownloadManagerHelper: void restartService()>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendAddDownload(android.content.Context,java.lang.Class,com.google.android.exoplayer2.offline.DownloadRequest,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.ContextCompat: void startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendPauseDownloads(android.content.Context,java.lang.Class,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <androidx.media.session.MediaButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><androidx.media.session.MediaButtonReceiver: void startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService: boolean onStartJob(android.app.job.JobParameters)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendAddDownload(android.content.Context,java.lang.Class,com.google.android.exoplayer2.offline.DownloadRequest,int,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void startForeground(android.content.Context,java.lang.Class)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendSetStopReason(android.content.Context,java.lang.Class,java.lang.String,int,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendRemoveAllDownloads(android.content.Context,java.lang.Class,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
-$i0 < 26
Good road: <com.google.android.exoplayer2.offline.DownloadService: void sendSetRequirements(android.content.Context,java.lang.Class,com.google.android.exoplayer2.scheduler.Requirements,boolean)>[]--><com.google.android.exoplayer2.offline.DownloadService: void startService(android.content.Context,android.content.Intent,boolean)>[]--><com.google.android.exoplayer2.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>[[-$i0 < 26]]--><android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
One road protect good!
containsStatic:false
containsTry:false
14call by main package
-----------------------------------------
#################################################
N 560 Potential Issue API: SDKCheck of <android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setTtcIndex(int)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setTtcIndex(int)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setTtcIndex(int)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 561 Potential Issue API: SDKCheck of <android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addMessage(android.app.Notification.MessagingStyle.Message)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[i0 < 28]]
-i0 < 24
i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [i0 < 28]]--><android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addMessage(android.app.Notification.MessagingStyle.Message)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 562 Potential Issue API: SDKCheck of <android.view.MenuItem: android.content.res.ColorStateList getIconTintList()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 26
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.view.MenuItemCompat: android.content.res.ColorStateList getIconTintList(android.view.MenuItem)>[[], [-$i0 < 26]]--><android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>
#1.the call statck between class <androidx.core.view.MenuItemCompat: android.content.res.ColorStateList getIconTintList(android.view.MenuItem)> to <android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>has compatibility isssues！
-----------------------------------------
crashApis:235
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 563 Potential Issue API: SDKCheck of <android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
$i0 < 30
-$i0 < 26
Good road: <androidx.core.app.NotificationManagerCompat: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)>[[$i0 < 30]]--><androidx.core.app.NotificationManagerCompat: android.app.NotificationChannel getNotificationChannel(java.lang.String)>[[-$i0 < 26]]--><android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 564 Potential Issue API: SDKCheck of <android.view.WindowInsets.Builder: android.view.WindowInsets build()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 
Error road: <androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()>[]--><android.view.WindowInsets.Builder: android.view.WindowInsets build()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()> to <android.view.WindowInsets.Builder: android.view.WindowInsets build()>has compatibility isssues！
-----------------------------------------
crashApis:236
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 565 Potential Issue API: SDKCheck of <android.app.Person.Builder: android.app.Person build()> is checking!!!
The life time of api is [28,31]
10call roads:
0 Mainhead roads:
10 Packageshead roads:
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
-i0 < 24
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)>[[-i0 < 24], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
-i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19]][[i0 < 17]][[i0 < 26]][[i0 < 16]][[i0 >= 21]][[i0 < 24]][[i0 < 23]][[i0 < 20]][[i0 < 21]][[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 < 19
i0 < 17
i0 < 26
i0 < 16
i0 >= 21
i0 < 24
i0 < 23
i0 < 20
i0 < 21
-i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void <init>(androidx.core.app.NotificationCompat$Builder)>[[i0 < 19], [i0 < 17], [i0 < 26], [i0 < 16], [i0 >= 21], [i0 < 24], [i0 < 23], [i0 < 20], [i0 < 21], [-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
-$i1 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.os.Bundle toBundle()>[[-$i1 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
-i0 < 28
Good road: <androidx.core.app.NotificationCompat$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message toAndroidMessage()>[[-i0 < 28]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
-$i0 < 26
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i1 > 29
-i1 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]
i0 > 29
-i0 < 25
-i0 < 29
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[[-i0 < 29]]--><androidx.core.app.Person: android.app.Person toAndroidPerson()>[]--><android.app.Person.Builder: android.app.Person build()>
One road protect good!
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 566 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: void removeAllDynamicShortcuts()> is checking!!!
The life time of api is [25,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: void removeAllDynamicShortcuts(android.content.Context)>[[-$i0 < 25]]--><android.content.pm.ShortcutManager: void removeAllDynamicShortcuts()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 567 Potential Issue API: SDKCheck of <android.widget.Toolbar: int getTitleMarginStart()> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
###Multi invoking in one method, need manual check!!!<com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0]][[-$yysi0 < 16]][[$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]
-$z0 == 0
-$yysi0 < 16
$yysi0 < 19
-$i1 < 24
Good road: <com.google.android.material.appbar.CollapsingToolbarLayout: void onLayout(boolean,int,int,int,int)>[[-$z0 == 0], [-$yysi0 < 16], [$yysi0 < 19]]--><com.google.android.material.appbar.CollapsingToolbarLayout: void updateCollapsedBounds(boolean)>[[-$i1 < 24]]--><android.widget.Toolbar: int getTitleMarginStart()>
One road protect good!
containsStatic:true
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 568 Potential Issue API: SDKCheck of <android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily.Builder addFont(android.graphics.fonts.Font)> is checking!!!
The life time of api is [29,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>[[try]]--><android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily.Builder addFont(android.graphics.fonts.Font)>
One road protect good!
try
Good road with try: <androidx.core.graphics.TypefaceCompatApi29Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>[[try]]--><android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily.Builder addFont(android.graphics.fonts.Font)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 569 Potential Issue API: SDKCheck of <android.widget.TextView: int getAutoSizeMaxTextSize()> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 27
Good road: <androidx.core.widget.TextViewCompat: int getAutoSizeMaxTextSize(android.widget.TextView)>[[-$i0 < 27]]--><android.widget.TextView: int getAutoSizeMaxTextSize()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 570 Potential Issue API: SDKCheck of <android.view.DisplayCutout: int getSafeInsetTop()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 28
Good road: <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)>[]--><androidx.core.view.DisplayCutoutCompat: int getSafeInsetTop()>[[-$i0 < 28]]--><android.view.DisplayCutout: int getSafeInsetTop()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 571 Potential Issue API: SDKCheck of <android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)> is checking!!!
The life time of api is [24,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
-i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender)>[[-i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean setDynamicShortcuts(android.content.Context,java.util.List)>[[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean updateShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29]][[-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i1 > 29
-i1 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[i1 > 29], [-i1 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
###Multi invoking in one method, need manual check!!!<androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29]][[-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]
i0 > 29
-i0 < 25
Good road: <androidx.core.content.pm.ShortcutManagerCompat: boolean addDynamicShortcuts(android.content.Context,java.util.List)>[[i0 > 29], [-i0 < 25]]--><androidx.core.content.pm.ShortcutInfoCompat: android.content.pm.ShortcutInfo toShortcutInfo()>[]--><android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
One road protect good!
containsStatic:false
containsTry:false
7call by main package
-----------------------------------------
#################################################
N 572 Potential Issue API: SDKCheck of <android.graphics.drawable.Icon: int getResId()> is checking!!!
The life time of api is [28,31]
14call roads:
0 Mainhead roads:
14 Packageshead roads:
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatJellybean: android.os.Bundle getBundleForAction(androidx.core.app.NotificationCompat$Action)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.graphics.drawable.IconCompat: java.lang.String toString()>[]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try]][[-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
try
Good road with try: <androidx.core.app.NotificationCompat$MessagingStyle$Message: androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)>[[try], [-$i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
i0 < 23
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$WearableExtender: android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action)>[[i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0]][[-$i1 < 28]][[$i2 < 21]][[-$yysi0 < 29]][[-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
-$z0 == 0
-$i1 < 28
$i2 < 21
-$yysi0 < 29
-$z0 != 0
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Builder: void <init>(android.content.Context,android.app.Notification)>[[-$z0 == 0], [-$i1 < 28], [$i2 < 21], [-$yysi0 < 29], [-$z0 != 0]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-i0 < 28
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: java.util.List getPeople(android.app.Notification)>[[-i0 < 28]]--><androidx.core.app.Person: androidx.core.app.Person fromAndroidPerson(android.app.Person)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.RemoteActionCompat: androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [-i0 < 20]]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23]][[-i0 < 20]]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i1 < 23
-i0 < 20
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)>[[i1 < 23], [-i0 < 20]]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action$Builder: androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action)>[[-i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
try
Good road with try: <androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.content.Context,android.graphics.drawable.Icon)>[[try]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompatJellybean: android.os.Bundle writeActionAndGetExtras(android.app.Notification$Builder,androidx.core.app.NotificationCompat$Action)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-$i0 < 23
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$Action: void <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,androidx.core.app.RemoteInput[],androidx.core.app.RemoteInput[],boolean,int,boolean,boolean)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId()>[[-$i0 < 23]]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat$BubbleMetadata: androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata)>[]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
###Multi invoking in one method, need manual check!!!<androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28]][[-i1 < 23]][[i0 < 24]][[i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]
i0 < 28
-i1 < 23
i0 < 24
i1 < 29
-$i0 < 28
Good road: <androidx.core.app.NotificationCompat: androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action)>[[i0 < 28], [-i1 < 23], [i0 < 24], [i1 < 29]]--><androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon)>[]--><androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)>[[-$i0 < 28]]--><android.graphics.drawable.Icon: int getResId()>
One road protect good!
containsStatic:true
containsTry:true
15call by main package
-----------------------------------------
#################################################
N 573 Potential Issue API: SDKCheck of <android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 26
Good road: <androidx.core.content.pm.ShortcutManagerCompat: android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat)>[[-$i0 < 26]]--><android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 574 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)> is checking!!!
The life time of api is [21,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 24
!!!this api will crash on sdk 31 
Error road: <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)>[]--><com.google.android.exoplayer2.offline.DownloadManager: void setRequirements(com.google.android.exoplayer2.scheduler.Requirements)>[]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void stop()>[[-$i0 < 24]]--><com.google.android.exoplayer2.scheduler.RequirementsWatcher: void unregisterNetworkCallbackV24()>[]--><android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>
#1.the call statck between class <com.google.android.exoplayer2.offline.DownloadService: int onStartCommand(android.content.Intent,int,int)> to <android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>has compatibility isssues！
-----------------------------------------
crashApis:237
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 575 Potential Issue API: SDKCheck of <android.view.WindowInsets.Type: int tappableElement()> is checking!!!
The life time of api is [30,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 24 25 26 27 28 29 
Error road: <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>[]--><android.view.WindowInsets.Type: int tappableElement()>
#1.the call statck between class <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)> to <android.view.WindowInsets.Type: int tappableElement()>has compatibility isssues！
-----------------------------------------
crashApis:238
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 576 Potential Issue API: SDKCheck of <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)> is checking!!!
The life time of api is [26,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.BitmapKt: android.graphics.Bitmap createBitmap$default(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace,int,java.lang.Object)>[]--><android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)>
#1.the call statck between class <androidx.core.graphics.BitmapKt: android.graphics.Bitmap createBitmap$default(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace,int,java.lang.Object)> to <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 23 24 25 
Error road: <androidx.core.graphics.BitmapKt: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>[]--><android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)>
#2.the call statck between class <androidx.core.graphics.BitmapKt: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)> to <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)>has compatibility isssues！
-----------------------------------------
crashApis:239
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 577 Potential Issue API: SDKCheck of <android.content.pm.PackageInfo: long getLongVersionCode()> is checking!!!
The life time of api is [28,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i1 < 28
Good road: <androidx.core.content.pm.PackageInfoCompat: long getLongVersionCode(android.content.pm.PackageInfo)>[[-$i1 < 28]]--><android.content.pm.PackageInfo: long getLongVersionCode()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 578 Potential Issue API: SDKCheck of <android.view.View: java.util.List getSystemGestureExclusionRects()> is checking!!!
The life time of api is [29,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 29
Good road: <androidx.core.view.ViewCompat: java.util.List getSystemGestureExclusionRects(android.view.View)>[[-$i0 < 29]]--><android.view.View: java.util.List getSystemGestureExclusionRects()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 579 Potential Issue API: SDKCheck of <android.text.Html: java.lang.String toHtml(android.text.Spanned,int)> is checking!!!
The life time of api is [24,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
-$i1 < 24
Good road: <androidx.core.text.HtmlKt: java.lang.String toHtml$default(android.text.Spanned,int,int,java.lang.Object)>[]--><androidx.core.text.HtmlCompat: java.lang.String toHtml(android.text.Spanned,int)>[[-$i1 < 24]]--><android.text.Html: java.lang.String toHtml(android.text.Spanned,int)>
One road protect good!
-$i1 < 24
Good road: <androidx.core.text.HtmlKt: java.lang.String toHtml(android.text.Spanned,int)>[]--><androidx.core.text.HtmlCompat: java.lang.String toHtml(android.text.Spanned,int)>[[-$i1 < 24]]--><android.text.Html: java.lang.String toHtml(android.text.Spanned,int)>
One road protect good!
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 580 Potential Issue API: SDKCheck of <android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)> is checking!!!
The life time of api is [26,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
i1 < 26
-$i0 < 26
Good road: <com.google.android.material.textfield.TextInputLayout$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)>[[i1 < 26]]--><androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setShowingHintText(boolean)>[[-$i0 < 26]]--><android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 581 Potential Issue API: SDKCheck of <android.graphics.Color: float luminance(int)> is checking!!!
The life time of api is [24,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 23 
Error road: <androidx.core.graphics.ColorKt: float getLuminance(int)>[]--><android.graphics.Color: float luminance(int)>
#1.the call statck between class <androidx.core.graphics.ColorKt: float getLuminance(int)> to <android.graphics.Color: float luminance(int)>has compatibility isssues！
-----------------------------------------
crashApis:240
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
crashApis numbers:240
crashApis numbers in main road:2
On Android Version 16 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 17 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 18 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 19 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 20 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 21 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 22 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 23 this app may have error api use(at least): 224 and error api roads: 276
On Android Version 24 this app may have error api use(at least): 189 and error api roads: 226
On Android Version 25 this app may have error api use(at least): 165 and error api roads: 199
On Android Version 26 this app may have error api use(at least): 103 and error api roads: 119
On Android Version 27 this app may have error api use(at least): 103 and error api roads: 119
On Android Version 28 this app may have error api use(at least): 74 and error api roads: 89
On Android Version 29 this app may have error api use(at least): 26 and error api roads: 26
On Android Version 30 this app may have error api use(at least): 3 and error api roads: 3
On Android Version 31 this app may have error api use(at least): 18 and error api roads: 41
