/home/ys/桌面/CompactDroid（复件）/dataset2/fb-client.apk
Entry Points[eu.devunit.fb_client.LoginActivity, eu.devunit.fb_client.SettingsActivity, eu.devunit.fb_client.PostUploadActivity, eu.devunit.fb_client.UploadActivity]
FllowDroidcallgraph size:276
Soot started on Mon Jul 11 04:00:20 CST 2022
StaticCheck:<eu.devunit.fb_client.SettingsActivity: boolean isSimplePreferences(android.content.Context)>$yysi0 < 11
StaticCheck:$ys0 < 
StaticCheck:<com.google.android.gms.internal.ll: boolean aW(int)>< 
Soot finished on Mon Jul 11 04:01:34 CST 2022
Soot has run for 1 min. 14 sec.
Found 0 additional DEX files. Now visiting them one by one.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 19
Declared Target Sdk version is: 21
Declared Max Sdk version is: -1
Collected 1041 Android APIs in the primary DEX file
Collected 0 Android APIs in the secondary DEX files
#################################################
N 0 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
35call roads:
0 Mainhead roads:
35 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.co: void run()>[]--><com.google.android.gms.tagmanager.co: void qe()>[[try]]--><com.google.android.gms.tagmanager.av: java.io.InputStream cF(java.lang.String)>[]--><com.google.android.gms.tagmanager.av: org.apache.http.client.HttpClient pM()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
#20.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> to <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:1
containsStatic:false
containsTry:true
21call by main package
-----------------------------------------
#################################################
N 1 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> is checking!!!
The life time of api is [23,31]
40call roads:
0 Mainhead roads:
40 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: void run()>[[try]]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: boolean revalidateCacheEntry()>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse revalidateCacheEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.cache.HttpCacheEntry)>[]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.AbstractPooledConnAdapter: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.AbstractPoolEntry: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
One road protect good!
containsStatic:false
containsTry:true
41call by main package
-----------------------------------------
#################################################
N 2 Potential Issue API: SDKCheck of <android.os.BaseBundle: int getInt(java.lang.String)> is checking!!!
The life time of api is [21,31]
591call roads:
0 Mainhead roads:
591 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()>[]--><com.google.android.gms.games.multiplayer.realtime.RoomEntity: int a(com.google.android.gms.games.multiplayer.realtime.Room)>[]--><com.google.android.gms.games.multiplayer.realtime.RoomRef: int getStatus()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#1.the call statck between class <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.leaderboard.LeaderboardRef: void getDisplayName(android.database.CharArrayBuffer)>[]--><com.google.android.gms.common.data.d: void a(java.lang.String,android.database.CharArrayBuffer)>[]--><com.google.android.gms.common.data.DataHolder: void a(java.lang.String,int,int,android.database.CharArrayBuffer)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#2.the call statck between class <com.google.android.gms.games.leaderboard.LeaderboardRef: void getDisplayName(android.database.CharArrayBuffer)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean a(com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatch,java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchRef: boolean isLocallyModified()>[]--><com.google.android.gms.common.data.d: boolean getBoolean(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: boolean d(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#4.the call statck between class <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.leaderboard.LeaderboardRef: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.leaderboard.LeaderboardEntity: boolean a(com.google.android.gms.games.leaderboard.Leaderboard,java.lang.Object)>[]--><com.google.android.gms.games.leaderboard.LeaderboardRef: android.net.Uri getIconImageUri()>[]--><com.google.android.gms.common.data.d: android.net.Uri aR(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: android.net.Uri g(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#6.the call statck between class <com.google.android.gms.games.leaderboard.LeaderboardRef: boolean equals(java.lang.Object)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.quest.MilestoneRef: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.quest.MilestoneEntity: boolean a(com.google.android.gms.games.quest.Milestone,java.lang.Object)>[]--><com.google.android.gms.games.quest.MilestoneRef: long getTargetProgress()>[]--><com.google.android.gms.common.data.d: long getLong(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: long a(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#7.the call statck between class <com.google.android.gms.games.quest.MilestoneRef: boolean equals(java.lang.Object)> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean mm()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String getApplicationId()>[]--><com.google.android.gms.common.data.d: java.lang.String getString(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean ml()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: int jC()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String getPackageName()>[]--><com.google.android.gms.common.data.d: java.lang.String getString(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean mo()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String getDisplayName()>[]--><com.google.android.gms.common.data.d: java.lang.String getString(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean mn()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><android.os.BaseBundle: int getInt(java.lang.String)>
#8.the call statck between class <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()> to <android.os.BaseBundle: int getInt(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:2
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 3 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> is checking!!!
The life time of api is [1,30]
38call roads:
0 Mainhead roads:
38 Packageshead roads:
try
Good road with try: <com.google.android.gms.analytics.ExceptionReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[]--><com.google.android.gms.analytics.GoogleAnalytics: void dY()>[]--><com.google.android.gms.analytics.x: void dY()>[]--><com.google.android.gms.analytics.x: void init()>[[try]]--><com.google.android.gms.analytics.w: void eB()>[]--><com.google.android.gms.analytics.w: void eF()>[[try]]--><com.google.android.gms.analytics.w: void eE()>[[try]]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.cy$3: void run()>[]--><com.google.android.gms.tagmanager.cb: void dispatch()>[]--><com.google.android.gms.tagmanager.db: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.x$b: void run()>[]--><com.google.android.gms.analytics.w: void dispatch()>[]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.x: void run()>[[try]]--><com.google.android.gms.analytics.x$d: void run()>[]--><com.google.android.gms.analytics.w: void b(java.util.Map,long,java.lang.String,java.util.List)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.x$d: void run()>[]--><com.google.android.gms.analytics.w: void b(java.util.Map,long,java.lang.String,java.util.List)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.co: void run()>[]--><com.google.android.gms.tagmanager.co: void qe()>[]--><com.google.android.gms.tagmanager.co: boolean qd()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.w$e: void run()>[]--><com.google.android.gms.analytics.w: void d(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eF()>[[try]]--><com.google.android.gms.analytics.w: void eE()>[[try]]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.w$c: void run()>[]--><com.google.android.gms.analytics.w: void c(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eE()>[[try]]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
#8.the call statck between class <com.google.android.gms.internal.gh$1: java.lang.Void ds()> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
crashApis:3
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 4 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)>[]--><org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)> to <org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:4
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 5 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)> is checking!!!
The life time of api is [23,31]
43call roads:
0 Mainhead roads:
43 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.co: void run()>[]--><com.google.android.gms.tagmanager.co: void qe()>[[try]]--><com.google.android.gms.tagmanager.av: java.io.InputStream cF(java.lang.String)>[]--><com.google.android.gms.tagmanager.av: org.apache.http.client.HttpClient pM()>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setMaxRedirects(int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
#9.the call statck between class <org.apache.http.client.params.ClientParamBean: void setMaxRedirects(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:5
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 6 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean containsKey(java.lang.String)> is checking!!!
The life time of api is [21,31]
571call roads:
0 Mainhead roads:
571 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()>[]--><com.google.android.gms.games.multiplayer.realtime.RoomEntity: int a(com.google.android.gms.games.multiplayer.realtime.Room)>[]--><com.google.android.gms.games.multiplayer.realtime.RoomRef: int getStatus()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#1.the call statck between class <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.leaderboard.LeaderboardRef: void getDisplayName(android.database.CharArrayBuffer)>[]--><com.google.android.gms.common.data.d: void a(java.lang.String,android.database.CharArrayBuffer)>[]--><com.google.android.gms.common.data.DataHolder: void a(java.lang.String,int,int,android.database.CharArrayBuffer)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#2.the call statck between class <com.google.android.gms.games.leaderboard.LeaderboardRef: void getDisplayName(android.database.CharArrayBuffer)> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentOptions: void ab(android.content.Context)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: void ab(android.content.Context)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: void a(android.content.res.TypedArray,int,java.lang.String)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#4.the call statck between class <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean a(com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatch,java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchRef: boolean isLocallyModified()>[]--><com.google.android.gms.common.data.d: boolean getBoolean(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: boolean d(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#5.the call statck between class <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.quest.MilestoneRef: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.quest.MilestoneEntity: boolean a(com.google.android.gms.games.quest.Milestone,java.lang.Object)>[]--><com.google.android.gms.games.quest.MilestoneRef: long getTargetProgress()>[]--><com.google.android.gms.common.data.d: long getLong(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: long a(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#7.the call statck between class <com.google.android.gms.games.quest.MilestoneRef: boolean equals(java.lang.Object)> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.leaderboard.LeaderboardRef: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.leaderboard.LeaderboardEntity: boolean a(com.google.android.gms.games.leaderboard.Leaderboard,java.lang.Object)>[]--><com.google.android.gms.games.leaderboard.LeaderboardRef: android.net.Uri getIconImageUri()>[]--><com.google.android.gms.common.data.d: android.net.Uri aR(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: android.net.Uri g(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#8.the call statck between class <com.google.android.gms.games.leaderboard.LeaderboardRef: boolean equals(java.lang.Object)> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean mm()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String getApplicationId()>[]--><com.google.android.gms.common.data.d: java.lang.String getString(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean ml()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: int jC()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String getPackageName()>[]--><com.google.android.gms.common.data.d: java.lang.String getString(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean mo()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String getDisplayName()>[]--><com.google.android.gms.common.data.d: java.lang.String getString(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: java.lang.String c(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()>[]--><com.google.android.gms.games.internal.game.GameInstanceRef: boolean mn()>[]--><com.google.android.gms.common.data.d: int getInteger(java.lang.String)>[]--><com.google.android.gms.common.data.DataHolder: int b(java.lang.String,int,int)>[]--><com.google.android.gms.common.data.DataHolder: void g(java.lang.String,int)>[]--><android.os.BaseBundle: boolean containsKey(java.lang.String)>
#9.the call statck between class <com.google.android.gms.games.internal.game.GameInstanceRef: java.lang.String toString()> to <android.os.BaseBundle: boolean containsKey(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:6
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 7 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> to <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:7
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 8 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)> is checking!!!
The life time of api is [21,31]
85call roads:
0 Mainhead roads:
85 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.cast.MediaMetadata: void putString(java.lang.String,java.lang.String)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#1.the call statck between class <com.google.android.gms.cast.MediaMetadata: void putString(java.lang.String,java.lang.String)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter eq(com.google.android.gms.drive.metadata.CustomPropertyKey,java.lang.String)>[]--><com.google.android.gms.drive.query.internal.HasFilter: void <init>(com.google.android.gms.drive.metadata.SearchableMetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: com.google.android.gms.drive.metadata.internal.MetadataBundle a(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void b(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.a: void a(java.lang.Object,android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#2.the call statck between class <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter eq(com.google.android.gms.drive.metadata.CustomPropertyKey,java.lang.String)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter contains(com.google.android.gms.drive.metadata.SearchableMetadataField,java.lang.String)>[]--><com.google.android.gms.drive.query.internal.ComparisonFilter: void <init>(com.google.android.gms.drive.query.internal.Operator,com.google.android.gms.drive.metadata.SearchableMetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: com.google.android.gms.drive.metadata.internal.MetadataBundle a(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void b(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.a: void a(java.lang.Object,android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#3.the call statck between class <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter contains(com.google.android.gms.drive.metadata.SearchableMetadataField,java.lang.String)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.identity.intents.Address$2: void a(com.google.android.gms.internal.mw)>[]--><com.google.android.gms.internal.mw: void a(com.google.android.gms.identity.intents.UserAddressRequest,int)>[[try]]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
One road protect good!
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.plus.internal.e: void a(com.google.android.gms.internal.jt,com.google.android.gms.internal.jl$e)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#8.the call statck between class <com.google.android.gms.plus.internal.e: void a(com.google.android.gms.internal.jt,com.google.android.gms.internal.jl$e)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.internal.cu$1: void run()>[[try]]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.cu,com.google.android.gms.internal.ct)>[]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.ct)>[[try]]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,com.google.android.gms.internal.da)>[]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,java.lang.String,com.google.android.gms.internal.da)>[[try]]--><com.google.android.gms.internal.dc: android.os.Bundle a(java.lang.String,int,java.lang.String)>[[try]]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
One road protect good!
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.MetadataChangeSet$Builder: com.google.android.gms.drive.MetadataChangeSet$Builder setLastViewedByMeDate(java.util.Date)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void b(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.a: void a(java.lang.Object,android.os.Bundle)>[]--><android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
#10.the call statck between class <com.google.android.gms.drive.MetadataChangeSet$Builder: com.google.android.gms.drive.MetadataChangeSet$Builder setLastViewedByMeDate(java.util.Date)> to <android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:8
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 9 Potential Issue API: SDKCheck of <android.widget.FrameLayout: void setVisibility(int)> is checking!!!
The life time of api is [21,22]
38call roads:
0 Mainhead roads:
38 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.internal.gz: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>[]--><com.google.android.gms.internal.gv: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>[]--><com.google.android.gms.internal.gv: void e(android.net.Uri)>[]--><com.google.android.gms.internal.cj: void a(com.google.android.gms.internal.gu,java.util.Map)>[]--><android.widget.FrameLayout: void setVisibility(int)>
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.google.android.gms.internal.gz: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>[]--><com.google.android.gms.internal.gv: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>[]--><com.google.android.gms.internal.gv: void e(android.net.Uri)>[]--><com.google.android.gms.internal.cj: void a(com.google.android.gms.internal.gu,java.util.Map)>[]--><android.widget.FrameLayout: void setVisibility(int)>
#6.the call statck between class <com.google.android.gms.internal.gz: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> to <android.widget.FrameLayout: void setVisibility(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.internal.ab$1: void run()>[]--><com.google.android.gms.internal.u: void b(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean au()>[]--><android.widget.FrameLayout: void setVisibility(int)>
!!!this api will crash on sdk 23 24 25 26 27 28 29 30 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.internal.ab$1: void run()>[]--><com.google.android.gms.internal.u: void b(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean au()>[]--><android.widget.FrameLayout: void setVisibility(int)>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.internal.cu$1: void run()>[[try]]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.cu,com.google.android.gms.internal.ct)>[]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.ct)>[[try]]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,com.google.android.gms.internal.da)>[]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,java.lang.String,com.google.android.gms.internal.da)>[[try]]--><com.google.ads.mediation.admob.AdMobAdapter: void requestBannerAd(android.content.Context,com.google.android.gms.ads.mediation.MediationBannerListener,android.os.Bundle,com.google.android.gms.ads.AdSize,com.google.android.gms.ads.mediation.MediationAdRequest,android.os.Bundle)>[]--><com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)>[]--><com.google.android.gms.internal.bh: void a(com.google.android.gms.internal.bg)>[[try]]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean au()>[]--><android.widget.FrameLayout: void setVisibility(int)>
One road protect good!
#8.the call statck between class <com.google.android.gms.internal.gh$1: java.lang.Void ds()> to <android.widget.FrameLayout: void setVisibility(int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.internal.cu$1: void run()>[[try]]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.cu,com.google.android.gms.internal.ct)>[]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.ct)>[[try]]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,com.google.android.gms.internal.da)>[]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,java.lang.String,com.google.android.gms.internal.da)>[[try]]--><com.google.ads.mediation.admob.AdMobAdapter: void requestBannerAd(android.content.Context,com.google.android.gms.ads.mediation.MediationBannerListener,android.os.Bundle,com.google.android.gms.ads.AdSize,com.google.android.gms.ads.mediation.MediationAdRequest,android.os.Bundle)>[]--><com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)>[]--><com.google.android.gms.internal.bh: void a(com.google.android.gms.internal.bg)>[[try]]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean au()>[]--><android.widget.FrameLayout: void setVisibility(int)>
One road protect good!
crashApis:9
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 10 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: boolean isActiveNetworkMetered()> is checking!!!
The life time of api is [16,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.ff: void cx()>[[try]]--><com.google.android.gms.internal.ff: com.google.android.gms.internal.fj a(com.google.android.gms.internal.fl,com.google.android.gms.internal.fh)>[[try]]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj b(com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj a(android.content.Context,com.google.android.gms.internal.bm,com.google.android.gms.internal.cn,com.google.android.gms.internal.fw,com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fv: void <init>(android.content.Context)>[[-$i0 < 16]]--><android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 11 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)> is checking!!!
The life time of api is [23,31]
4call roads:
0 Mainhead roads:
4 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.params.ConnManagerParams: void setTimeout(org.apache.http.params.HttpParams,long)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
#1.the call statck between class <org.apache.http.conn.params.ConnManagerParams: void setTimeout(org.apache.http.params.HttpParams,long)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.HttpClientParams: void setConnectionManagerTimeout(org.apache.http.params.HttpParams,long)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
#2.the call statck between class <org.apache.http.client.params.HttpClientParams: void setConnectionManagerTimeout(org.apache.http.params.HttpParams,long)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.params.ConnManagerParamBean: void setTimeout(long)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
#3.the call statck between class <org.apache.http.conn.params.ConnManagerParamBean: void setTimeout(long)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setConnectionManagerTimeout(long)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
#4.the call statck between class <org.apache.http.client.params.ClientParamBean: void setConnectionManagerTimeout(long)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
crashApis:10
containsStatic:false
containsTry:false
5call by main package
-----------------------------------------
#################################################
N 12 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.AbstractVerifier: void <init>()> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLSocketFactory: void <clinit>()>[]--><org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>[]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLSocketFactory: void <clinit>()>[[]]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLSocketFactory: void <clinit>()>[]--><org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>[]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLSocketFactory: void <clinit>()>[]--><org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>[]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
#1.the call statck between class <org.apache.http.conn.ssl.SSLSocketFactory: void <clinit>()> to <org.apache.http.conn.ssl.AbstractVerifier: void <init>()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLConnectionSocketFactory: void <clinit>()>[]--><org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>[]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLConnectionSocketFactory: void <clinit>()>[[]]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLConnectionSocketFactory: void <clinit>()>[]--><org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>[]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.SSLConnectionSocketFactory: void <clinit>()>[]--><org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>[]--><org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
#2.the call statck between class <org.apache.http.conn.ssl.SSLConnectionSocketFactory: void <clinit>()> to <org.apache.http.conn.ssl.AbstractVerifier: void <init>()>has compatibility isssues！
-----------------------------------------
crashApis:11
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 13 Potential Issue API: SDKCheck of <android.os.BaseBundle: long getLong(java.lang.String)> is checking!!!
The life time of api is [21,31]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wallet.fragment.WalletFragment$c: void a(android.widget.FrameLayout)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: int a(java.lang.String,android.util.DisplayMetrics,int)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#1.the call statck between class <com.google.android.gms.wallet.fragment.WalletFragment$c: void a(android.widget.FrameLayout)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wallet.fragment.SupportWalletFragment$c: void a(android.widget.FrameLayout)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: int a(java.lang.String,android.util.DisplayMetrics,int)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#2.the call statck between class <com.google.android.gms.wallet.fragment.SupportWalletFragment$c: void a(android.widget.FrameLayout)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.internal.lq: java.lang.Object c(com.google.android.gms.common.data.DataHolder,int,int)>[]--><com.google.android.gms.internal.lq: com.google.android.gms.drive.DriveId m(com.google.android.gms.common.data.DataHolder,int,int)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#3.the call statck between class <com.google.android.gms.internal.lq: java.lang.Object c(com.google.android.gms.common.data.DataHolder,int,int)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.metadata.internal.d: java.lang.Object i(android.os.Bundle)>[]--><com.google.android.gms.drive.metadata.internal.d: java.util.Date k(android.os.Bundle)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#4.the call statck between class <com.google.android.gms.drive.metadata.internal.d: java.lang.Object i(android.os.Bundle)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.metadata.internal.g: java.lang.Object i(android.os.Bundle)>[]--><com.google.android.gms.drive.metadata.internal.g: java.lang.Long m(android.os.Bundle)>[]--><android.os.BaseBundle: long getLong(java.lang.String)>
#5.the call statck between class <com.google.android.gms.drive.metadata.internal.g: java.lang.Object i(android.os.Bundle)> to <android.os.BaseBundle: long getLong(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:12
containsStatic:false
containsTry:false
6call by main package
-----------------------------------------
#################################################
N 14 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> is checking!!!
The life time of api is [23,31]
40call roads:
0 Mainhead roads:
40 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: void run()>[[try]]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: boolean revalidateCacheEntry()>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse revalidateCacheEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.cache.HttpCacheEntry)>[]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.AbstractPooledConnAdapter: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.AbstractPoolEntry: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
containsStatic:false
containsTry:true
41call by main package
-----------------------------------------
#################################################
N 15 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)> is checking!!!
The life time of api is [23,31]
38call roads:
0 Mainhead roads:
38 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DefaultRedirectStrategyAdaptor: org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:true
39call by main package
-----------------------------------------
#################################################
N 16 Potential Issue API: SDKCheck of <android.os.BaseBundle: double getDouble(java.lang.String)> is checking!!!
The life time of api is [21,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <com.google.android.gms.cast.RemoteMediaPlayer$4: void a(com.google.android.gms.internal.im)>[[try]]--><com.google.android.gms.internal.it: long a(com.google.android.gms.internal.iv,com.google.android.gms.cast.MediaInfo,boolean,long,long[],org.json.JSONObject)>[[try]]--><com.google.android.gms.cast.MediaInfo: org.json.JSONObject toJson()>[[try]]--><com.google.android.gms.cast.MediaMetadata: org.json.JSONObject toJson()>[]--><com.google.android.gms.cast.MediaMetadata: void a(org.json.JSONObject,java.lang.String[])>[[try]]--><android.os.BaseBundle: double getDouble(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.cast.MediaMetadata: double getDouble(java.lang.String)>[]--><android.os.BaseBundle: double getDouble(java.lang.String)>
#2.the call statck between class <com.google.android.gms.cast.MediaMetadata: double getDouble(java.lang.String)> to <android.os.BaseBundle: double getDouble(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:13
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 17 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> is checking!!!
The life time of api is [23,31]
299call roads:
1 Mainhead roads:
298 Packageshead roads:
try
Good road with try: <org.apache.http.client.utils.HttpClientUtils: void closeQuietly(org.apache.http.client.methods.CloseableHttpResponse)>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: void close()>[]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>[]--><org.apache.http.impl.conn.SchemeRegistryFactory: org.apache.http.conn.scheme.SchemeRegistry createDefault()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.conn.PoolingClientConnectionManager: void <init>()>[]--><org.apache.http.impl.conn.SchemeRegistryFactory: org.apache.http.conn.scheme.SchemeRegistry createDefault()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
#22.the call statck between class <org.apache.http.impl.conn.PoolingClientConnectionManager: void <init>()> to <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>has compatibility isssues！
-----------------------------------------
crashApis:14
containsStatic:false
containsTry:true
23call by main package
-----------------------------------------
#################################################
N 18 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.lang.Object get(java.lang.String)> is checking!!!
The life time of api is [21,31]
70call roads:
0 Mainhead roads:
70 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.CreateFileActivityBuilder: android.content.IntentSender build(com.google.android.gms.common.api.GoogleApiClient)>[]--><com.google.android.gms.drive.internal.i: android.content.IntentSender build(com.google.android.gms.common.api.GoogleApiClient)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void setContext(android.content.Context)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: java.lang.Object a(com.google.android.gms.drive.metadata.MetadataField)>[]--><com.google.android.gms.drive.metadata.a: java.lang.Object h(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#2.the call statck between class <com.google.android.gms.drive.CreateFileActivityBuilder: android.content.IntentSender build(com.google.android.gms.common.api.GoogleApiClient)> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.internal.v$2: void a(com.google.android.gms.drive.internal.r)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void setContext(android.content.Context)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: java.lang.Object a(com.google.android.gms.drive.metadata.MetadataField)>[]--><com.google.android.gms.drive.metadata.a: java.lang.Object h(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#6.the call statck between class <com.google.android.gms.drive.internal.v$2: void a(com.google.android.gms.drive.internal.r)> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.internal.api.RequestsImpl: java.util.ArrayList getGameRequestsFromInboxResponse(android.content.Intent)>[]--><com.google.android.gms.games.internal.api.RequestsImpl: java.util.ArrayList getGameRequestsFromBundle(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.Object get(java.lang.String)>
#7.the call statck between class <com.google.android.gms.games.internal.api.RequestsImpl: java.util.ArrayList getGameRequestsFromInboxResponse(android.content.Intent)> to <android.os.BaseBundle: java.lang.Object get(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:15
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 19 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)> is checking!!!
The life time of api is [23,31]
38call roads:
0 Mainhead roads:
38 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DefaultRedirectStrategyAdaptor: org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:true
39call by main package
-----------------------------------------
#################################################
N 20 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.lang.String getString(java.lang.String)> is checking!!!
The life time of api is [21,31]
58call roads:
1 Mainhead roads:
!!!this api will crash on sdk 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.PostUploadActivity dummyMainMethod_eu_devunit_fb__client_PostUploadActivity(android.content.Intent)>[]--><eu.devunit.fb_client.PostUploadActivity: void onCreate(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
!!!this api will crash on sdk 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.LoginActivity dummyMainMethod_eu_devunit_fb__client_LoginActivity(android.content.Intent)>[]--><eu.devunit.fb_client.LoginActivity: void onCreate(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
57 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.cast.MediaMetadata: java.lang.String getDateAsString(java.lang.String)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#1.the call statck between class <com.google.android.gms.cast.MediaMetadata: java.lang.String getDateAsString(java.lang.String)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.internal.hz: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)>[]--><com.google.android.gms.internal.hy: com.google.android.gms.internal.hr a(com.google.android.gms.appindexing.Action,java.lang.String,long,java.lang.String,int)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#2.the call statck between class <com.google.android.gms.internal.hz: com.google.android.gms.appindexing.AppIndexApi$ActionResult action(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.appindexing.Action)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.internal.cu$1: void run()>[[try]]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.cu,com.google.android.gms.internal.ct)>[]--><com.google.android.gms.internal.cu: void a(com.google.android.gms.internal.ct)>[[try]]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,com.google.android.gms.internal.da)>[]--><com.google.android.gms.internal.dc: void a(com.google.android.gms.dynamic.d,com.google.android.gms.internal.ay,com.google.android.gms.internal.av,java.lang.String,java.lang.String,com.google.android.gms.internal.da)>[[try]]--><com.google.android.gms.ads.mediation.customevent.CustomEventAdapter: void requestBannerAd(android.content.Context,com.google.android.gms.ads.mediation.MediationBannerListener,android.os.Bundle,com.google.android.gms.ads.AdSize,com.google.android.gms.ads.mediation.MediationAdRequest,android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String a(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[[try]]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[[try]]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getAccountId(android.content.Context,java.lang.String)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[[try]]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.internal.ky: void a(java.lang.StringBuilder,com.google.android.gms.internal.kr$a,android.os.Parcel,int)>[]--><com.google.android.gms.internal.ky: java.util.HashMap g(android.os.Bundle)>[]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
#9.the call statck between class <com.google.android.gms.internal.ky: void a(java.lang.StringBuilder,com.google.android.gms.internal.kr$a,android.os.Parcel,int)> to <android.os.BaseBundle: java.lang.String getString(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getTokenWithNotification(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.os.Bundle)>[]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String a(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[[try]]--><com.google.android.gms.auth.GoogleAuthUtil: java.lang.String getToken(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>[[try]]--><android.os.BaseBundle: java.lang.String getString(java.lang.String)>
One road protect good!
crashApis:16
crashApisInMain:1
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 21 Potential Issue API: SDKCheck of <android.net.NetworkInfo: android.net.NetworkInfo.DetailedState getDetailedState()> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.ff: void cx()>[[try]]--><com.google.android.gms.internal.ff: com.google.android.gms.internal.fj a(com.google.android.gms.internal.fl,com.google.android.gms.internal.fh)>[[try]]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj b(com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj a(android.content.Context,com.google.android.gms.internal.bm,com.google.android.gms.internal.cn,com.google.android.gms.internal.fw,com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fv: void <init>(android.content.Context)>[[-$i0 < 16]]--><android.net.NetworkInfo: android.net.NetworkInfo.DetailedState getDetailedState()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 22 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)> is checking!!!
The life time of api is [23,31]
39call roads:
0 Mainhead roads:
39 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: void run()>[[try]]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: boolean revalidateCacheEntry()>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse revalidateCacheEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.cache.HttpCacheEntry)>[]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.AbstractPooledConnAdapter: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.AbstractPoolEntry: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
containsStatic:false
containsTry:true
40call by main package
-----------------------------------------
#################################################
N 23 Potential Issue API: SDKCheck of <org.apache.http.conn.ConnectTimeoutException: void <init>()> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ConnectionPoolTimeoutException: void <init>()>[]--><org.apache.http.conn.ConnectTimeoutException: void <init>()>
#1.the call statck between class <org.apache.http.conn.ConnectionPoolTimeoutException: void <init>()> to <org.apache.http.conn.ConnectTimeoutException: void <init>()>has compatibility isssues！
-----------------------------------------
crashApis:17
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 24 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putInt(java.lang.String,int)> is checking!!!
The life time of api is [21,31]
344call roads:
0 Mainhead roads:
344 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()>[]--><com.google.android.gms.games.multiplayer.realtime.RoomEntity: int a(com.google.android.gms.games.multiplayer.realtime.Room)>[]--><com.google.android.gms.games.multiplayer.realtime.RoomRef: android.os.Bundle getAutoMatchCriteria()>[]--><com.google.android.gms.games.multiplayer.realtime.RoomConfig: android.os.Bundle createAutoMatchCriteria(int,int,long)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#1.the call statck between class <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentOptions: void ab(android.content.Context)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: void ab(android.content.Context)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: void b(android.content.res.TypedArray,int,java.lang.String)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#5.the call statck between class <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean a(com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatch,java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchRef: android.os.Bundle getAutoMatchCriteria()>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchConfig: android.os.Bundle createAutoMatchCriteria(int,int,long)>[]--><android.os.BaseBundle: void putInt(java.lang.String,int)>
#9.the call statck between class <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)> to <android.os.BaseBundle: void putInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:18
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 25 Potential Issue API: SDKCheck of <android.os.BaseBundle: int getInt(java.lang.String,int)> is checking!!!
The life time of api is [21,31]
301call roads:
0 Mainhead roads:
301 Packageshead roads:
try
Good road with try: <com.google.android.gms.ads.search.SearchAdView: void loadAd(com.google.android.gms.ads.search.SearchAdRequest)>[]--><com.google.android.gms.internal.bh: void a(com.google.android.gms.internal.bg)>[[try]]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.ga: com.google.android.gms.internal.an l(android.content.Context)>[[try]]--><com.google.android.gms.internal.an: void <init>(com.google.android.gms.internal.am,com.google.android.gms.internal.al,android.os.Bundle,com.google.android.gms.internal.ex)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
One road protect good!
try
Good road with try: <com.google.android.gms.ads.doubleclick.PublisherAdView: void loadAd(com.google.android.gms.ads.doubleclick.PublisherAdRequest)>[]--><com.google.android.gms.internal.bh: void a(com.google.android.gms.internal.bg)>[[try]]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.ga: com.google.android.gms.internal.an l(android.content.Context)>[[try]]--><com.google.android.gms.internal.an: void <init>(com.google.android.gms.internal.am,com.google.android.gms.internal.al,android.os.Bundle,com.google.android.gms.internal.ex)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
One road protect good!
try
Good road with try: <com.google.android.gms.analytics.ExceptionReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[]--><com.google.android.gms.analytics.GoogleAnalytics: void dY()>[]--><com.google.android.gms.analytics.x: void dY()>[[try]]--><com.google.android.gms.internal.ab$1: void run()>[]--><com.google.android.gms.internal.u: void b(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.u: boolean a(com.google.android.gms.internal.av)>[]--><com.google.android.gms.internal.ga: com.google.android.gms.internal.an l(android.content.Context)>[[try]]--><com.google.android.gms.internal.an: void <init>(com.google.android.gms.internal.am,com.google.android.gms.internal.al,android.os.Bundle,com.google.android.gms.internal.ex)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
One road protect good!
try
Good road with try: <com.google.android.gms.internal.u: com.google.android.gms.internal.fh$a a(com.google.android.gms.internal.av,android.os.Bundle)>[]--><com.google.android.gms.internal.fz: void e(com.google.android.gms.internal.av)>[[try]]--><com.google.android.gms.internal.gb: void b(com.google.android.gms.internal.av,long)>[[try]]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
One road protect good!
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.request.GameRequestRef: int hashCode()>[]--><com.google.android.gms.games.request.GameRequestEntity: int a(com.google.android.gms.games.request.GameRequest)>[]--><com.google.android.gms.games.request.GameRequestEntity: int[] b(com.google.android.gms.games.request.GameRequest)>[]--><com.google.android.gms.games.request.GameRequestEntity: int getRecipientStatus(java.lang.String)>[]--><android.os.BaseBundle: int getInt(java.lang.String,int)>
#139.the call statck between class <com.google.android.gms.games.request.GameRequestRef: int hashCode()> to <android.os.BaseBundle: int getInt(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:19
containsStatic:false
containsTry:true
140call by main package
-----------------------------------------
#################################################
N 26 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()>[]--><org.apache.http.impl.client.DefaultHttpClient: void setDefaultHttpParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
#1.the call statck between class <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()> to <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
#2.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> to <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:20
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 27 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)> is checking!!!
The life time of api is [23,31]
13call roads:
0 Mainhead roads:
13 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#1.the call statck between class <org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)>[]--><org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#2.the call statck between class <org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setAllowCircularRedirects(boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#3.the call statck between class <org.apache.http.client.params.ClientParamBean: void setAllowCircularRedirects(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#4.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#5.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParams: void setSoReuseaddr(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#6.the call statck between class <org.apache.http.params.HttpConnectionParams: void setSoReuseaddr(org.apache.http.params.HttpParams,boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#7.the call statck between class <org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParams: void setSoKeepalive(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#8.the call statck between class <org.apache.http.params.HttpConnectionParams: void setSoKeepalive(org.apache.http.params.HttpParams,boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setHandleRedirects(boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#9.the call statck between class <org.apache.http.client.params.ClientParamBean: void setHandleRedirects(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()>[]--><org.apache.http.impl.client.DefaultHttpClient: void setDefaultHttpParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#10.the call statck between class <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:21
containsStatic:false
containsTry:false
11call by main package
-----------------------------------------
#################################################
N 28 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 29 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor: java.net.Socket createSocket(org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 30 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)> is checking!!!
The life time of api is [23,31]
335call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.UploadActivity dummyMainMethod_eu_devunit_fb__client_UploadActivity(android.content.Intent)>[]--><eu.devunit.fb_client.UploadActivity: void onBtnUploadTextClick(android.view.View)>[]--><java.lang.Thread: void run()>[]--><eu.devunit.fb_client.UploadActivity$1: void run()>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadText(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String[])>[[try]]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.client.methods.HttpRequestWrapper wrap(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestWrapper: void <init>(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestBase: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
334 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParams: java.nio.charset.CodingErrorAction getMalformedInputAction(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParams: java.nio.charset.CodingErrorAction getMalformedInputAction(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParams: java.nio.charset.CodingErrorAction getMalformedInputAction(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#2.the call statck between class <org.apache.http.params.HttpProtocolParams: java.nio.charset.CodingErrorAction getMalformedInputAction(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.client.utils.HttpClientUtils: void closeQuietly(org.apache.http.client.methods.CloseableHttpResponse)>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: void close()>[]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>[]--><org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.client.utils.HttpClientUtils: void closeQuietly(org.apache.http.client.methods.CloseableHttpResponse)>[[try]]--><org.apache.http.impl.client.cache.AsynchronousValidator: void close()>[]--><org.apache.http.impl.client.InternalHttpClient: void close()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: void close()>[]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>[]--><org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.client.utils.HttpClientUtils: void closeQuietly(org.apache.http.client.methods.CloseableHttpResponse)>[[try]]--><org.apache.http.impl.client.FutureRequestExecutionService: void close()>[]--><org.apache.http.impl.client.InternalHttpClient: void close()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: void close()>[]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>[]--><org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.client.utils.HttpClientUtils: void closeQuietly(org.apache.http.client.methods.CloseableHttpResponse)>[[try]]--><org.apache.http.impl.client.InternalHttpClient: void close()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: void close()>[]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>[]--><org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
crashApis:22
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 31 Potential Issue API: SDKCheck of <android.os.BaseBundle: java.util.Set keySet()> is checking!!!
The life time of api is [21,31]
333call roads:
0 Mainhead roads:
333 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter eq(com.google.android.gms.drive.metadata.CustomPropertyKey,java.lang.String)>[]--><com.google.android.gms.drive.query.internal.HasFilter: void <init>(com.google.android.gms.drive.metadata.SearchableMetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: com.google.android.gms.drive.metadata.internal.MetadataBundle a(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: com.google.android.gms.drive.metadata.internal.MetadataBundle iZ()>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void <init>(android.os.Bundle)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void <init>(int,android.os.Bundle)>[]--><android.os.BaseBundle: java.util.Set keySet()>
#2.the call statck between class <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter eq(com.google.android.gms.drive.metadata.CustomPropertyKey,java.lang.String)> to <android.os.BaseBundle: java.util.Set keySet()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.common.api.Batch: void cancel()>[]--><com.google.android.gms.common.api.BaseImplementation$AbstractPendingResult: void cancel()>[[try]]--><com.google.android.gms.common.api.BaseImplementation: void a(com.google.android.gms.common.api.Result)>[[try]]--><com.google.android.gms.games.internal.GamesClientImpl$LoadRequestsResultImpl: void release()>[]--><android.os.BaseBundle: java.util.Set keySet()>
One road protect good!
crashApis:23
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 32 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()> is checking!!!
The life time of api is [23,31]
53call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.UploadActivity dummyMainMethod_eu_devunit_fb__client_UploadActivity(android.content.Intent)>[]--><eu.devunit.fb_client.UploadActivity: void onBtnUploadTextClick(android.view.View)>[]--><java.lang.Thread: void run()>[]--><eu.devunit.fb_client.UploadActivity$1: void run()>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadText(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String[])>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.LoginActivity dummyMainMethod_eu_devunit_fb__client_LoginActivity(android.content.Intent)>[]--><eu.devunit.fb_client.LoginActivity$2: void onClick(android.view.View)>[]--><eu.devunit.fb_client.LoginActivity: void attemptLogin()>[]--><eu.devunit.fb_client.LoginActivity$UserLoginTask: java.lang.Object doInBackground(java.lang.Object[])>[]--><eu.devunit.fb_client.LoginActivity$UserLoginTask: java.lang.String doInBackground(java.lang.Void[])>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String generateApikey(java.lang.String,java.lang.String)>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
52 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: int a(java.util.List,com.google.android.gms.analytics.af,boolean)>[]--><com.google.android.gms.analytics.h: void a(com.google.android.gms.analytics.af,org.apache.http.HttpHost,com.google.android.gms.analytics.i,com.google.android.gms.analytics.l)>[]--><com.google.android.gms.analytics.h: boolean a(java.lang.String,org.apache.http.HttpHost,int,com.google.android.gms.analytics.af,com.google.android.gms.analytics.l)>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>[]--><org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>[]--><org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse callBackend(org.apache.http.HttpHost,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.impl.auth.HttpAuthenticator: boolean handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AuthenticationStrategyAdaptor: java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
#7.the call statck between class <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.HttpAuthenticator: boolean authenticate(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.HttpAuthenticator: boolean handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AuthenticationStrategyAdaptor: java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.DefaultHttpRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
crashApis:24
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 33 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)> is checking!!!
The life time of api is [23,31]
40call roads:
0 Mainhead roads:
40 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: void run()>[[try]]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: boolean revalidateCacheEntry()>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse revalidateCacheEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.cache.HttpCacheEntry)>[]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.AbstractPooledConnAdapter: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.AbstractPoolEntry: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse callBackend(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
One road protect good!
containsStatic:false
containsTry:true
41call by main package
-----------------------------------------
#################################################
N 34 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor2: boolean isSecure(java.net.Socket)>[]--><org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor: boolean isSecure(java.net.Socket)>[]--><org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 35 Potential Issue API: SDKCheck of <android.net.NetworkInfo: int getType()> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.ff: void cx()>[[try]]--><com.google.android.gms.internal.ff: com.google.android.gms.internal.fj a(com.google.android.gms.internal.fl,com.google.android.gms.internal.fh)>[[try]]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj b(com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj a(android.content.Context,com.google.android.gms.internal.bm,com.google.android.gms.internal.cn,com.google.android.gms.internal.fw,com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fv: void <init>(android.content.Context)>[]--><com.google.android.gms.internal.fv: int a(android.content.Context,android.net.ConnectivityManager,android.content.pm.PackageManager)>[]--><android.net.NetworkInfo: int getType()>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 36 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putLongArray(java.lang.String,long[])> is checking!!!
The life time of api is [21,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 37 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>
#1.the call statck between class <org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> to <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>
#2.the call statck between class <org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> to <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>has compatibility isssues！
-----------------------------------------
crashApis:25
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 38 Potential Issue API: SDKCheck of <android.net.NetworkInfo: boolean isConnected()> is checking!!!
The life time of api is [1,30]
37call roads:
0 Mainhead roads:
37 Packageshead roads:
try
Good road with try: <com.google.android.gms.analytics.ExceptionReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)>[]--><com.google.android.gms.analytics.GoogleAnalytics: void dY()>[]--><com.google.android.gms.analytics.x: void dY()>[]--><com.google.android.gms.analytics.x: void init()>[[try]]--><com.google.android.gms.analytics.w: void eB()>[]--><com.google.android.gms.analytics.w: void eF()>[[try]]--><com.google.android.gms.analytics.w: void eE()>[[try]]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.cy$3: void run()>[]--><com.google.android.gms.tagmanager.cb: void dispatch()>[]--><com.google.android.gms.tagmanager.db: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.x$b: void run()>[]--><com.google.android.gms.analytics.w: void dispatch()>[]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.x: void run()>[[try]]--><com.google.android.gms.analytics.x$d: void run()>[]--><com.google.android.gms.analytics.w: void b(java.util.Map,long,java.lang.String,java.util.List)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.x$d: void run()>[]--><com.google.android.gms.analytics.w: void b(java.util.Map,long,java.lang.String,java.util.List)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.w$e: void run()>[]--><com.google.android.gms.analytics.w: void d(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eF()>[[try]]--><com.google.android.gms.analytics.w: void eE()>[[try]]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.co: void run()>[]--><com.google.android.gms.tagmanager.co: void qe()>[]--><com.google.android.gms.tagmanager.co: boolean qd()>[]--><android.net.NetworkInfo: boolean isConnected()>
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.analytics.w$c: void run()>[]--><com.google.android.gms.analytics.w: void c(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eE()>[[try]]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
#8.the call statck between class <com.google.android.gms.internal.gh$1: java.lang.Void ds()> to <android.net.NetworkInfo: boolean isConnected()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: boolean ea()>[]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
crashApis:26
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 39 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.AbstractPooledConnAdapter: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.AbstractPoolEntry: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 40 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>[]--><org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>
#1.the call statck between class <org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> to <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>[]--><org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>[]--><org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>
#2.the call statck between class <org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> to <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:27
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 41 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()>[]--><org.apache.http.impl.client.DefaultHttpClient: void setDefaultHttpParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
#1.the call statck between class <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()> to <org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
#2.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> to <org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:28
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 42 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)> is checking!!!
The life time of api is [23,31]
4call roads:
0 Mainhead roads:
4 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
#1.the call statck between class <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.params.ConnManagerParams: long getTimeout(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
#4.the call statck between class <org.apache.http.conn.params.ConnManagerParams: long getTimeout(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
crashApis:29
containsStatic:false
containsTry:true
5call by main package
-----------------------------------------
#################################################
N 43 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putDouble(java.lang.String,double)> is checking!!!
The life time of api is [21,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.cast.MediaMetadata: void putDouble(java.lang.String,double)>[]--><android.os.BaseBundle: void putDouble(java.lang.String,double)>
#1.the call statck between class <com.google.android.gms.cast.MediaMetadata: void putDouble(java.lang.String,double)> to <android.os.BaseBundle: void putDouble(java.lang.String,double)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.cast.RemoteMediaPlayer: void onMessageReceived(com.google.android.gms.cast.CastDevice,java.lang.String,java.lang.String)>[]--><com.google.android.gms.internal.it: void aD(java.lang.String)>[[try]]--><com.google.android.gms.internal.it: void a(long,org.json.JSONObject)>[]--><com.google.android.gms.cast.MediaStatus: int a(org.json.JSONObject,int)>[]--><com.google.android.gms.cast.MediaInfo: void <init>(org.json.JSONObject)>[]--><com.google.android.gms.cast.MediaMetadata: void c(org.json.JSONObject)>[]--><com.google.android.gms.cast.MediaMetadata: void b(org.json.JSONObject,java.lang.String[])>[[try]]--><android.os.BaseBundle: void putDouble(java.lang.String,double)>
One road protect good!
try
Good road with try: <com.google.android.gms.internal.ff: void cx()>[[try]]--><com.google.android.gms.internal.ff: com.google.android.gms.internal.fj a(com.google.android.gms.internal.fl,com.google.android.gms.internal.fh)>[[try]]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj b(com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fq: com.google.android.gms.internal.fj a(android.content.Context,com.google.android.gms.internal.bm,com.google.android.gms.internal.cn,com.google.android.gms.internal.fw,com.google.android.gms.internal.fh)>[]--><com.google.android.gms.internal.fr: java.lang.String a(com.google.android.gms.internal.fh,com.google.android.gms.internal.fv,android.location.Location,java.lang.String,java.lang.String,java.lang.String)>[[try]]--><com.google.android.gms.internal.fr: void a(java.util.HashMap,com.google.android.gms.internal.fv)>[]--><android.os.BaseBundle: void putDouble(java.lang.String,double)>
One road protect good!
crashApis:30
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 44 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 45 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.SocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 46 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
35call roads:
0 Mainhead roads:
35 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><com.google.android.gms.tagmanager.co: void run()>[]--><com.google.android.gms.tagmanager.co: void qe()>[[try]]--><com.google.android.gms.tagmanager.av: java.io.InputStream cF(java.lang.String)>[]--><com.google.android.gms.tagmanager.av: org.apache.http.client.HttpClient pM()>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
#26.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)> to <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:31
containsStatic:false
containsTry:true
27call by main package
-----------------------------------------
#################################################
N 47 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putLong(java.lang.String,long)> is checking!!!
The life time of api is [21,31]
318call roads:
0 Mainhead roads:
318 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()>[]--><com.google.android.gms.games.multiplayer.realtime.RoomEntity: int a(com.google.android.gms.games.multiplayer.realtime.Room)>[]--><com.google.android.gms.games.multiplayer.realtime.RoomRef: android.os.Bundle getAutoMatchCriteria()>[]--><com.google.android.gms.games.multiplayer.realtime.RoomConfig: android.os.Bundle createAutoMatchCriteria(int,int,long)>[]--><android.os.BaseBundle: void putLong(java.lang.String,long)>
#1.the call statck between class <com.google.android.gms.games.multiplayer.realtime.RoomRef: int hashCode()> to <android.os.BaseBundle: void putLong(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentOptions: void ab(android.content.Context)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: void ab(android.content.Context)>[]--><com.google.android.gms.wallet.fragment.WalletFragmentStyle: void a(android.content.res.TypedArray,int,java.lang.String)>[]--><android.os.BaseBundle: void putLong(java.lang.String,long)>
#5.the call statck between class <com.google.android.gms.wallet.fragment.SupportWalletFragment: void onCreate(android.os.Bundle)> to <android.os.BaseBundle: void putLong(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean a(com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatch,java.lang.Object)>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchRef: android.os.Bundle getAutoMatchCriteria()>[]--><com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchConfig: android.os.Bundle createAutoMatchCriteria(int,int,long)>[]--><android.os.BaseBundle: void putLong(java.lang.String,long)>
#9.the call statck between class <com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity: boolean equals(java.lang.Object)> to <android.os.BaseBundle: void putLong(java.lang.String,long)>has compatibility isssues！
-----------------------------------------
crashApis:32
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 48 Potential Issue API: SDKCheck of <android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])> is checking!!!
The life time of api is [21,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.plus.internal.e: void a(com.google.android.gms.internal.jt,com.google.android.gms.internal.jl$e)>[]--><android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>
#1.the call statck between class <com.google.android.gms.plus.internal.e: void a(com.google.android.gms.internal.jt,com.google.android.gms.internal.jl$e)> to <android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>has compatibility isssues！
-----------------------------------------
crashApis:33
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 49 Potential Issue API: SDKCheck of <android.os.BaseBundle: int size()> is checking!!!
The life time of api is [21,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.cast.MediaMetadata: boolean equals(java.lang.Object)>[]--><com.google.android.gms.cast.MediaMetadata: boolean a(android.os.Bundle,android.os.Bundle)>[]--><android.os.BaseBundle: int size()>
#1.the call statck between class <com.google.android.gms.cast.MediaMetadata: boolean equals(java.lang.Object)> to <android.os.BaseBundle: int size()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.wearable.PutDataRequest: java.lang.String toString()>[]--><com.google.android.gms.wearable.PutDataRequest: java.lang.String toString(boolean)>[]--><android.os.BaseBundle: int size()>
#2.the call statck between class <com.google.android.gms.wearable.PutDataRequest: java.lang.String toString()> to <android.os.BaseBundle: int size()>has compatibility isssues！
-----------------------------------------
crashApis:34
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 50 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)> is checking!!!
The life time of api is [23,31]
58call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.UploadActivity dummyMainMethod_eu_devunit_fb__client_UploadActivity(android.content.Intent)>[]--><eu.devunit.fb_client.UploadActivity: void onBtnUploadTextClick(android.view.View)>[]--><java.lang.Thread: void run()>[]--><eu.devunit.fb_client.UploadActivity$1: void run()>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadText(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String[])>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.LoginActivity dummyMainMethod_eu_devunit_fb__client_LoginActivity(android.content.Intent)>[]--><eu.devunit.fb_client.LoginActivity$2: void onClick(android.view.View)>[]--><eu.devunit.fb_client.LoginActivity: void attemptLogin()>[]--><eu.devunit.fb_client.LoginActivity$UserLoginTask: java.lang.Object doInBackground(java.lang.Object[])>[]--><eu.devunit.fb_client.LoginActivity$UserLoginTask: java.lang.String doInBackground(java.lang.Void[])>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String generateApikey(java.lang.String,java.lang.String)>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
57 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: int a(java.util.List,com.google.android.gms.analytics.af,boolean)>[]--><com.google.android.gms.analytics.h: void a(com.google.android.gms.analytics.af,org.apache.http.HttpHost,com.google.android.gms.analytics.i,com.google.android.gms.analytics.l)>[]--><com.google.android.gms.analytics.h: boolean a(java.lang.String,org.apache.http.HttpHost,int,com.google.android.gms.analytics.af,com.google.android.gms.analytics.l)>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>[]--><org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>[]--><org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.cache.CachingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.cache.CachingHttpClient: org.apache.http.HttpResponse callBackend(org.apache.http.HttpHost,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#7.the call statck between class <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
crashApis:35
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 51 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 52 Potential Issue API: SDKCheck of <android.os.BaseBundle: boolean isEmpty()> is checking!!!
The life time of api is [21,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.internal.or: java.lang.String toString()>[]--><android.os.BaseBundle: boolean isEmpty()>
#1.the call statck between class <com.google.android.gms.internal.or: java.lang.String toString()> to <android.os.BaseBundle: boolean isEmpty()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.common.api.c$4: void onConnectionFailed(com.google.android.gms.common.ConnectionResult)>[[try]]--><com.google.android.gms.common.api.c: void d(com.google.android.gms.common.api.c)>[]--><com.google.android.gms.common.api.c: void gJ()>[]--><android.os.BaseBundle: boolean isEmpty()>
One road protect good!
try
Good road with try: <com.google.android.gms.common.api.c$2: void onConnected(android.os.Bundle)>[[try]]--><com.google.android.gms.common.api.c: void d(com.google.android.gms.common.api.c)>[]--><com.google.android.gms.common.api.c: void gJ()>[]--><android.os.BaseBundle: boolean isEmpty()>
One road protect good!
crashApis:36
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 53 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.DefaultedHttpParams: boolean removeParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
#1.the call statck between class <org.apache.http.params.DefaultedHttpParams: boolean removeParameter(java.lang.String)> to <org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:37
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 54 Potential Issue API: SDKCheck of <android.os.BaseBundle: void remove(java.lang.String)> is checking!!!
The life time of api is [21,31]
314call roads:
0 Mainhead roads:
314 Packageshead roads:
!!!this api will crash on sdk 19 20 
Error road: <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter eq(com.google.android.gms.drive.metadata.CustomPropertyKey,java.lang.String)>[]--><com.google.android.gms.drive.query.internal.HasFilter: void <init>(com.google.android.gms.drive.metadata.SearchableMetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: com.google.android.gms.drive.metadata.internal.MetadataBundle a(com.google.android.gms.drive.metadata.MetadataField,java.lang.Object)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: com.google.android.gms.drive.metadata.internal.MetadataBundle iZ()>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void <init>(android.os.Bundle)>[]--><com.google.android.gms.drive.metadata.internal.MetadataBundle: void <init>(int,android.os.Bundle)>[]--><android.os.BaseBundle: void remove(java.lang.String)>
#2.the call statck between class <com.google.android.gms.drive.query.Filters: com.google.android.gms.drive.query.Filter eq(com.google.android.gms.drive.metadata.CustomPropertyKey,java.lang.String)> to <android.os.BaseBundle: void remove(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:38
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 55 Potential Issue API: SDKCheck of <org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)> is checking!!!
The life time of api is [23,31]
40call roads:
0 Mainhead roads:
40 Packageshead roads:
try
Good road with try: <com.google.android.gms.internal.gh$1: java.lang.Void ds()>[]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: void run()>[[try]]--><org.apache.http.impl.client.cache.AsynchronousValidationRequest: boolean revalidateCacheEntry()>[[try]]--><org.apache.http.impl.client.cache.CachingExec: org.apache.http.client.methods.CloseableHttpResponse revalidateCacheEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.cache.HttpCacheEntry)>[]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.conn.ConnectionPoolTimeoutException: void <init>(java.lang.String)>[]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.tsccm.ConnPoolByRoute$1: org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
#11.the call statck between class <org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit)> to <org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:39
containsStatic:false
containsTry:true
12call by main package
-----------------------------------------
#################################################
N 56 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> is checking!!!
The life time of api is [23,31]
102call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.UploadActivity dummyMainMethod_eu_devunit_fb__client_UploadActivity(android.content.Intent)>[]--><eu.devunit.fb_client.UploadActivity: void onBtnUploadTextClick(android.view.View)>[]--><java.lang.Thread: void run()>[]--><eu.devunit.fb_client.UploadActivity$1: void run()>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadText(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String)>[]--><eu.devunit.fb_client.FilebinClient: java.lang.String uploadFile(java.lang.String[])>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: eu.devunit.fb_client.LoginActivity dummyMainMethod_eu_devunit_fb__client_LoginActivity(android.content.Intent)>[]--><eu.devunit.fb_client.LoginActivity$2: void onClick(android.view.View)>[]--><eu.devunit.fb_client.LoginActivity: void attemptLogin()>[]--><eu.devunit.fb_client.LoginActivity$UserLoginTask: java.lang.Object doInBackground(java.lang.Object[])>[]--><eu.devunit.fb_client.LoginActivity$UserLoginTask: java.lang.String doInBackground(java.lang.Void[])>[[try]]--><eu.devunit.fb_client.FilebinClient: java.lang.String generateApikey(java.lang.String,java.lang.String)>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[[try]]--><org.apache.http.params.BasicHttpParams: java.lang.Object clone()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
101 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setAllowCircularRedirects(boolean)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#1.the call statck between class <org.apache.http.client.params.ClientParamBean: void setAllowCircularRedirects(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <com.google.android.gms.internal.af$1: void aR()>[]--><com.google.android.gms.internal.af: void d(android.view.View)>[]--><com.google.android.gms.analytics.w$1: void run()>[]--><com.google.android.gms.analytics.w: void a(com.google.android.gms.analytics.w)>[]--><com.google.android.gms.analytics.w: void eC()>[[try]]--><com.google.android.gms.analytics.w: void eD()>[]--><com.google.android.gms.analytics.ag: void dispatch()>[]--><com.google.android.gms.analytics.h: int a(java.util.List,com.google.android.gms.analytics.af,boolean)>[]--><com.google.android.gms.analytics.h: void a(com.google.android.gms.analytics.af,org.apache.http.HttpHost,com.google.android.gms.analytics.i,com.google.android.gms.analytics.l)>[]--><com.google.android.gms.analytics.h: boolean a(java.lang.String,org.apache.http.HttpHost,int,com.google.android.gms.analytics.af,com.google.android.gms.analytics.l)>[[try]]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[[try]]--><org.apache.http.params.BasicHttpParams: java.lang.Object clone()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#4.the call statck between class <org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#5.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.client.HttpAuthenticator: boolean authenticate(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.HttpAuthenticator: boolean handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AuthenticationStrategyAdaptor: java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[[try]]--><org.apache.http.params.BasicHttpParams: java.lang.Object clone()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[[try]]--><org.apache.http.params.BasicHttpParams: java.lang.Object clone()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.DefaultHttpRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[[try]]--><org.apache.http.params.BasicHttpParams: java.lang.Object clone()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[[try]]--><org.apache.http.params.BasicHttpParams: java.lang.Object clone()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.client.params.ClientParamBean: void setRejectRelativeRedirect(boolean)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#7.the call statck between class <org.apache.http.client.params.ClientParamBean: void setRejectRelativeRedirect(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParams: void setUnmappableInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParams: void setUnmappableInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#8.the call statck between class <org.apache.http.params.HttpProtocolParams: void setUnmappableInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#10.the call statck between class <org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
crashApis:40
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 57 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)> is checking!!!
The life time of api is [23,31]
55call roads:
0 Mainhead roads:
55 Packageshead roads:
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#4.the call statck between class <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.impl.conn.CPoolProxy: void bind(java.net.Socket)>[]--><org.apache.http.impl.conn.DefaultClientConnection: void bind(java.net.Socket)>[]--><org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
!!!this api will crash on sdk 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.impl.conn.DefaultClientConnection: void bind(java.net.Socket)>[]--><org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#6.the call statck between class <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.commons.logging.Log,org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
crashApis:41
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 58 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 59 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.conn.ManagedClientConnectionImpl: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[[try]]--><org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
#################################################
N 60 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParams: long getConnectionManagerTimeout(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>
One road protect good!
containsStatic:false
containsTry:true
2call by main package
-----------------------------------------
crashApis numbers:41
crashApis numbers in main road:1
On Android Version 16 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 17 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 18 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 19 this app may have error api use(at least): 39 and error api roads: 120
On Android Version 20 this app may have error api use(at least): 39 and error api roads: 120
On Android Version 21 this app may have error api use(at least): 22 and error api roads: 57
On Android Version 22 this app may have error api use(at least): 22 and error api roads: 57
On Android Version 23 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 24 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 25 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 26 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 27 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 28 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 29 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 30 this app may have error api use(at least): 1 and error api roads: 2
On Android Version 31 this app may have error api use(at least): 3 and error api roads: 8
