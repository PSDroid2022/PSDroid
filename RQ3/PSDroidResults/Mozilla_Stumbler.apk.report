/home/ys/桌面/CompactDroid（复件）/dataset2/Mozilla_Stumbler.apk
Entry Points[org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver, org.mozilla.mozstumbler.client.subactivities.LeaderboardActivity, org.mozilla.mozstumbler.client.subactivities.LogActivity, org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity, org.mozilla.mozstumbler.client.subactivities.DeveloperActivity, org.mozilla.mozstumbler.client.subactivities.PreferencesScreen, org.mozilla.mozstumbler.service.uploadthread.UploadAlarmReceiver$UploadAlarmService, org.mozilla.mozstumbler.client.subactivities.AboutActivity, org.mozilla.mozstumbler.client.subactivities.FileBugActivity, org.mozilla.mozstumbler.client.MainApp, org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen, org.mozilla.mozstumbler.client.ClientStumblerService, org.mozilla.mozstumbler.client.MainApp$ServiceBroadcastReceiver, org.mozilla.mozstumbler.service.uploadthread.UploadAlarmReceiver]
FllowDroidcallgraph size:10149
Soot started on Mon Jul 11 07:36:51 CST 2022
Soot finished on Mon Jul 11 07:37:52 CST 2022
Soot has run for 1 min. 0 sec.
Found 0 additional DEX files. Now visiting them one by one.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 10
Declared Target Sdk version is: 18
Declared Max Sdk version is: -1
Collected 971 Android APIs in the primary DEX file
Collected 0 Android APIs in the secondary DEX files
#################################################
N 0 Potential Issue API: SDKCheck of <android.location.Location: long getElapsedRealtimeNanos()> is checking!!!
The life time of api is [17,31]
3call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.ClientStumblerService dummyMainMethod_org_mozilla_mozstumbler_client_ClientStumblerService(android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.StumblerService: void onDestroy()>[]--><org.mozilla.mozstumbler.service.stumblerthread.Reporter: void shutdown()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.Reporter: void flush()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.datahandling.StumblerBundle: org.mozilla.mozstumbler.service.stumblerthread.datahandling.MLSJSONObject toMLSGeosubmit()>[]--><android.location.Location: long getElapsedRealtimeNanos()>
One road protect good!
2 Packageshead roads:
try
Good road with try: <org.mozilla.mozstumbler.client.ObservedLocationsReceiver: void onReceive(android.content.Context,android.content.Intent)>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.datahandling.StumblerBundle: org.mozilla.mozstumbler.service.stumblerthread.datahandling.MLSJSONObject toMLSGeosubmit()>[]--><android.location.Location: long getElapsedRealtimeNanos()>
One road protect good!
try
Good road with try: <org.mozilla.mozstumbler.service.stumblerthread.Reporter: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.Reporter: void flush()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.datahandling.StumblerBundle: org.mozilla.mozstumbler.service.stumblerthread.datahandling.MLSJSONObject toMLSGeosubmit()>[]--><android.location.Location: long getElapsedRealtimeNanos()>
One road protect good!
try
Good road with try: <org.mozilla.mozstumbler.service.stumblerthread.Reporter: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.Reporter: void receivedGpsMessage(android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.Reporter: void flush()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.datahandling.StumblerBundle: org.mozilla.mozstumbler.service.stumblerthread.datahandling.MLSJSONObject toMLSGeosubmit()>[]--><android.location.Location: long getElapsedRealtimeNanos()>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 1 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
#1.the call statck between class <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)> to <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
#2.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> to <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:1
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 2 Potential Issue API: SDKCheck of <android.telephony.CellIdentityCdma: int getBasestationId()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityCdma: int getBasestationId()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityCdma: int getBasestationId()>has compatibility isssues！
-----------------------------------------
crashApis:2
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 3 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> is checking!!!
The life time of api is [1,30]
22call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity dummyMainMethod_org_mozilla_mozstumbler_client_navdrawer_MainDrawerActivity(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>[]--><org.mozilla.mozstumbler.client.mapview.MapFragment: void toggleScanning(android.view.MenuItem)>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.MainApp$ServiceBroadcastReceiver dummyMainMethod_org_mozilla_mozstumbler_client_MainApp$ServiceBroadcastReceiver(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.MainApp$ServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver dummyMainMethod_org_mozilla_mozstumbler_client_mapview_HighLowBandwidthReceiver(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.client.mapview.MapFragment: void mapNetworkConnectionChanged()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PreferencesScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PreferencesScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PreferencesScreen$8: boolean onPreferenceClick(android.preference.Preference)>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isConnected()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.DeveloperActivity dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_DeveloperActivity(android.content.Intent)>[]--><dummyMainClass: org.mozilla.mozstumbler.client.serialize.KMLFragment dummyMainMethod_org_mozilla_mozstumbler_client_serialize_KMLFragment(android.content.Intent,android.app.Activity)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment$1: void onClick(android.view.View)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment: void access$000(org.mozilla.mozstumbler.client.serialize.KMLFragment,android.view.View)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment: void onClickLoad(android.view.View)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment: void stopScanning()>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PowerSavingScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen$1: void onCheckedChanged(android.widget.RadioGroup,int)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen: void access$100(org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen: void resetScanningToReflectChanges()>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>has compatibility isssues！
-----------------------------------------
21 Packageshead roads:
try
Good road with try: <org.mozilla.mozstumbler.service.uploadthread.UploadAlarmReceiver$UploadAlarmService: void upload()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.client.ObservedLocationsReceiver$1: void run()>[[try]]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
One road protect good!
crashApis:3
crashApisInMain:1
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 4 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)>[]--><org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)> to <org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:4
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 5 Potential Issue API: SDKCheck of <android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>has compatibility isssues！
-----------------------------------------
crashApis:5
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 6 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)> is checking!!!
The life time of api is [23,31]
6call roads:
0 Mainhead roads:
6 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)>[]--><org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
#2.the call statck between class <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
#3.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
#4.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
#5.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
One road protect good!
crashApis:6
containsStatic:false
containsTry:true
7call by main package
-----------------------------------------
#################################################
N 7 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> to <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:7
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 8 Potential Issue API: SDKCheck of <android.telephony.CellIdentityGsm: int getLac()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityGsm: int getLac()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityGsm: int getLac()>has compatibility isssues！
-----------------------------------------
crashApis:8
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 9 Potential Issue API: SDKCheck of <android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>has compatibility isssues！
-----------------------------------------
crashApis:9
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 10 Potential Issue API: SDKCheck of <android.telephony.CellIdentityGsm: int getMnc()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityGsm: int getMnc()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityGsm: int getMnc()>has compatibility isssues！
-----------------------------------------
crashApis:10
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 11 Potential Issue API: SDKCheck of <android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>has compatibility isssues！
-----------------------------------------
crashApis:11
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 12 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)> is checking!!!
The life time of api is [3,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: android.net.wifi.WifiManager$WifiLock createWifiLock()>[]--><android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: android.net.wifi.WifiManager$WifiLock createWifiLock()> to <android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:12
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 13 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> is checking!!!
The life time of api is [23,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
try
Good road with try: <org.apache.http.conn.ssl.AbstractVerifierHC4: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,javax.net.ssl.SSLSocket)>[]--><org.apache.http.conn.ssl.AbstractVerifierHC4: void verify(java.lang.String,java.security.cert.X509Certificate)>[]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
One road protect good!
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 14 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)> is checking!!!
The life time of api is [23,31]
4call roads:
0 Mainhead roads:
4 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.DefaultBHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.DefaultBHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: org.apache.http.HttpEntity prepareInput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.AbstractHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>[]--><org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>[]--><org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.AbstractHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.DisallowIdentityContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
#3.the call statck between class <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.CPoolProxy: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.DefaultBHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
One road protect good!
crashApis:13
containsStatic:false
containsTry:true
5call by main package
-----------------------------------------
#################################################
N 15 Potential Issue API: SDKCheck of <android.telephony.CellIdentityWcdma: int getMcc()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellIdentityWcdma: int getMcc()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 16 Potential Issue API: SDKCheck of <android.telephony.CellIdentityGsm: int getCid()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityGsm: int getCid()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityGsm: int getCid()>has compatibility isssues！
-----------------------------------------
crashApis:14
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 17 Potential Issue API: SDKCheck of <android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>has compatibility isssues！
-----------------------------------------
crashApis:15
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 18 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager: java.util.List getScanResults()> is checking!!!
The life time of api is [1,30]
18call roads:
0 Mainhead roads:
18 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: java.util.List getScanResults()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: java.util.List getScanResults()>[]--><android.net.wifi.WifiManager: java.util.List getScanResults()>
#4.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)> to <android.net.wifi.WifiManager: java.util.List getScanResults()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean runWifiScan()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onProxyReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: java.util.List getScanResults()>[]--><android.net.wifi.WifiManager: java.util.List getScanResults()>
#10.the call statck between class <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()> to <android.net.wifi.WifiManager: java.util.List getScanResults()>has compatibility isssues！
-----------------------------------------
crashApis:16
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 19 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
#1.the call statck between class <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)> to <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>has compatibility isssues！
-----------------------------------------
crashApis:17
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 20 Potential Issue API: SDKCheck of <android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)> is checking!!!
The life time of api is [18,31]
19call roads:
1 Mainhead roads:
-$i0 < 18
Good road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PowerSavingScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen: void onCreate(android.os.Bundle)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen$TestSignificantMotionDialog: void access$000(org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen$TestSignificantMotionDialog)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen$TestSignificantMotionDialog: void setupTestMotionButton()>[]--><org.mozilla.mozstumbler.service.stumblerthread.motiondetection.SignificantMotionSensor: void start()>[[-$i0 < 18]]--><android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
One road protect good!
18 Packageshead roads:
-$i0 < 18
Good road: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.motiondetection.MotionSensor$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.motiondetection.SignificantMotionSensor: void start()>[[-$i0 < 18]]--><android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
One road protect good!
!!!this api will crash on sdk 16 17 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.motiondetection.SignificantMotionSensor$1: void onTrigger(android.hardware.TriggerEvent)>[]--><android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
#11.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.motiondetection.SignificantMotionSensor$1: void onTrigger(android.hardware.TriggerEvent)> to <android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>has compatibility isssues！
-----------------------------------------
crashApis:18
containsStatic:false
containsTry:true
12call by main package
-----------------------------------------
#################################################
N 21 Potential Issue API: SDKCheck of <android.telephony.CellInfoWcdma: android.telephony.CellSignalStrengthWcdma getCellSignalStrength()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellInfoWcdma: android.telephony.CellSignalStrengthWcdma getCellSignalStrength()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 22 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager.WifiLock: void release()> is checking!!!
The life time of api is [1,30]
21call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.ClientStumblerService dummyMainMethod_org_mozilla_mozstumbler_client_ClientStumblerService(android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.StumblerService: void onDestroy()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean stopScanning()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean stopAllScanners()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void stop()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void deactivatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void release()>
One road protect good!
20 Packageshead roads:
try
Good road with try: <org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean access$200(org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean pauseScanning()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean stopAllScanners()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void stop()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void deactivatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void release()>
One road protect good!
try
Good road with try: <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void deactivatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void release()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean runWifiScan()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onProxyReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void deactivatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void release()>
One road protect good!
try
Good road with try: <org.mozilla.mozstumbler.client.ClientStumblerService$2: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.client.ClientStumblerService: void stopScanning()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean stopScanning()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: boolean stopAllScanners()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void stop()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void deactivatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void release()>
One road protect good!
containsStatic:false
containsTry:true
21call by main package
-----------------------------------------
#################################################
N 23 Potential Issue API: SDKCheck of <android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>has compatibility isssues！
-----------------------------------------
crashApis:19
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 24 Potential Issue API: SDKCheck of <org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.conn.BasicHttpClientConnectionManager: void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.conn.HttpClientConnectionOperator: void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext)>[[$i0 < 17]]--><org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>[[try]]--><org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 25 Potential Issue API: SDKCheck of <android.telephony.CellIdentityLte: int getMnc()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityLte: int getMnc()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityLte: int getMnc()>has compatibility isssues！
-----------------------------------------
crashApis:20
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 26 Potential Issue API: SDKCheck of <android.telephony.CellIdentityWcdma: int getLac()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellIdentityWcdma: int getLac()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 27 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> is checking!!!
The life time of api is [1,30]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getWiFiNetworkAvailable()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
#1.the call statck between class <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getWiFiNetworkAvailable()> to <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getCellularDataNetworkAvailable()>[]--><android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
#2.the call statck between class <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getCellularDataNetworkAvailable()> to <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>has compatibility isssues！
-----------------------------------------
crashApis:21
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 28 Potential Issue API: SDKCheck of <android.webkit.CookieSyncManager: void sync()> is checking!!!
The life time of api is [21,31]
1call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 17 18 19 20 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PreferencesScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PreferencesScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PreferencesScreen$8: boolean onPreferenceClick(android.preference.Preference)>[]--><android.webkit.CookieSyncManager: void sync()>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.webkit.CookieSyncManager: void sync()>has compatibility isssues！
-----------------------------------------
0 Packageshead roads:
crashApis:22
crashApisInMain:2
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 29 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
#1.the call statck between class <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)> to <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
#2.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> to <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
crashApis:23
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 30 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager: boolean startScan()> is checking!!!
The life time of api is [1,30]
17call roads:
0 Mainhead roads:
17 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean runWifiScan()>[]--><android.net.wifi.WifiManager: boolean startScan()>
#9.the call statck between class <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()> to <android.net.wifi.WifiManager: boolean startScan()>has compatibility isssues！
-----------------------------------------
crashApis:24
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 31 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)> is checking!!!
The life time of api is [23,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)>[]--><org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#1.the call statck between class <org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#2.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
#3.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:25
containsStatic:false
containsTry:false
4call by main package
-----------------------------------------
#################################################
N 32 Potential Issue API: SDKCheck of <android.telephony.CellSignalStrengthLte: int getTimingAdvance()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellSignalStrengthLte: int getTimingAdvance()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellSignalStrengthLte: int getTimingAdvance()>has compatibility isssues！
-----------------------------------------
crashApis:26
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 33 Potential Issue API: SDKCheck of <android.telephony.CellIdentityGsm: int getMcc()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityGsm: int getMcc()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityGsm: int getMcc()>has compatibility isssues！
-----------------------------------------
crashApis:27
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 34 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()> is checking!!!
The life time of api is [23,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 35 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)> is checking!!!
The life time of api is [23,31]
31call roads:
0 Mainhead roads:
31 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseConnControlHC4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.message.BasicHttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#1.the call statck between class <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.AbstractHttpParams: int getIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#2.the call statck between class <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#3.the call statck between class <org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.conn.LoggingManagedHttpClientConnection: void onRequestSubmitted(org.apache.http.HttpRequest)>[]--><org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.conn.LoggingManagedHttpClientConnection: void onRequestSubmitted(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.conn.LoggingManagedHttpClientConnection: void onRequestSubmitted(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#4.the call statck between class <org.apache.http.impl.conn.LoggingManagedHttpClientConnection: void onRequestSubmitted(org.apache.http.HttpRequest)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.client.methods.HttpRequestWrapper: java.lang.String toString()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#5.the call statck between class <org.apache.http.client.methods.HttpRequestWrapper: java.lang.String toString()> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.pool.BasicConnPool: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.pool.BasicConnFactory: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.pool.BasicConnFactory: void <init>(javax.net.ssl.SSLSocketFactory,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.SocketConfig getSocketConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#6.the call statck between class <org.apache.http.impl.pool.BasicConnPool: void <init>(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.AbstractHttpParams: int getIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.InternalHttpClient: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.RequestBuilder: org.apache.http.client.methods.RequestBuilder copy(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.RequestBuilder: org.apache.http.client.methods.RequestBuilder doCopy(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.RequestConnControl: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.client.methods.HttpRequestWrapper wrap(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestWrapper: void <init>(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.RequestBuilder: org.apache.http.client.methods.RequestBuilder copy(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.RequestBuilder: org.apache.http.client.methods.RequestBuilder doCopy(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.client.methods.HttpRequestBaseHC4: java.lang.String toString()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#8.the call statck between class <org.apache.http.client.methods.HttpRequestBaseHC4: java.lang.String toString()> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.client.methods.HttpRequestWrapper: void <init>(org.apache.http.HttpRequest,org.apache.http.client.methods.HttpRequestWrapper$1)>[]--><org.apache.http.client.methods.HttpRequestWrapper: void <init>(org.apache.http.HttpRequest)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#9.the call statck between class <org.apache.http.client.methods.HttpRequestWrapper: void <init>(org.apache.http.HttpRequest,org.apache.http.client.methods.HttpRequestWrapper$1)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.io.DefaultHttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.io.DefaultHttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.client.methods.HttpRequestBaseHC4: org.apache.http.ProtocolVersion getProtocolVersion()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.io.DefaultHttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)>[]--><org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>[]--><org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
#10.the call statck between class <org.apache.http.impl.io.DefaultHttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)> to <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:28
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 36 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()> is checking!!!
The life time of api is [23,31]
5call roads:
0 Mainhead roads:
5 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
#1.the call statck between class <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.protocol.RequestDefaultHeadersHC4: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
try
Good road with try: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
#2.the call statck between class <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.DefaultBHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>[]--><org.apache.http.impl.BHttpConnectionBase: java.io.OutputStream prepareOutput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.DefaultBHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.BHttpConnectionBase: org.apache.http.HttpEntity prepareInput(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.AbstractHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>[]--><org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.DisallowIdentityContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.protocol.RequestDefaultHeadersHC4: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestUserAgentHC4: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.AbstractHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>[]--><org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>[]--><org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)>[]--><org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestUserAgentHC4: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
#4.the call statck between class <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.InternalHttpClient: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>[]--><org.apache.http.impl.auth.BasicSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
One road protect good!
crashApis:29
containsStatic:false
containsTry:true
6call by main package
-----------------------------------------
#################################################
N 37 Potential Issue API: SDKCheck of <android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 38 Potential Issue API: SDKCheck of <android.telephony.CellSignalStrengthCdma: int getDbm()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellSignalStrengthCdma: int getDbm()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellSignalStrengthCdma: int getDbm()>has compatibility isssues！
-----------------------------------------
crashApis:30
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 39 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)> is checking!!!
The life time of api is [23,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 40 Potential Issue API: SDKCheck of <android.net.NetworkInfo: int getType()> is checking!!!
The life time of api is [1,30]
21call roads:
1 Mainhead roads:
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity dummyMainMethod_org_mozilla_mozstumbler_client_navdrawer_MainDrawerActivity(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>[]--><org.mozilla.mozstumbler.client.mapview.MapFragment: void toggleScanning(android.view.MenuItem)>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.MainApp$ServiceBroadcastReceiver dummyMainMethod_org_mozilla_mozstumbler_client_MainApp$ServiceBroadcastReceiver(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.MainApp$ServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver dummyMainMethod_org_mozilla_mozstumbler_client_mapview_HighLowBandwidthReceiver(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.client.mapview.MapFragment: void mapNetworkConnectionChanged()>[]--><android.net.NetworkInfo: int getType()>
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PreferencesScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PreferencesScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PreferencesScreen$7: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>[]--><org.mozilla.mozstumbler.client.subactivities.PreferencesScreen: boolean access$200(org.mozilla.mozstumbler.client.subactivities.PreferencesScreen)>[]--><org.mozilla.mozstumbler.client.subactivities.PreferencesScreen: boolean hasNetworkForFxA()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.DeveloperActivity dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_DeveloperActivity(android.content.Intent)>[]--><dummyMainClass: org.mozilla.mozstumbler.client.serialize.KMLFragment dummyMainMethod_org_mozilla_mozstumbler_client_serialize_KMLFragment(android.content.Intent,android.app.Activity)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment$1: void onClick(android.view.View)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment: void access$000(org.mozilla.mozstumbler.client.serialize.KMLFragment,android.view.View)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment: void onClickLoad(android.view.View)>[]--><org.mozilla.mozstumbler.client.serialize.KMLFragment: void stopScanning()>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PowerSavingScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen$1: void onCheckedChanged(android.widget.RadioGroup,int)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen: void access$100(org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen: void resetScanningToReflectChanges()>[]--><org.mozilla.mozstumbler.client.MainApp: void stopScanning()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.net.NetworkInfo: int getType()>has compatibility isssues！
-----------------------------------------
20 Packageshead roads:
try
Good road with try: <org.mozilla.mozstumbler.service.uploadthread.UploadAlarmReceiver$UploadAlarmService: void upload()>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.client.ObservedLocationsReceiver$1: void run()>[[try]]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isWifiAvailable()>[[try]]--><android.net.NetworkInfo: int getType()>
One road protect good!
crashApis:31
crashApisInMain:3
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 41 Potential Issue API: SDKCheck of <android.telephony.CellIdentityWcdma: int getCid()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellIdentityWcdma: int getCid()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 42 Potential Issue API: SDKCheck of <android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>has compatibility isssues！
-----------------------------------------
crashApis:32
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 43 Potential Issue API: SDKCheck of <android.net.NetworkInfo: boolean isConnected()> is checking!!!
The life time of api is [1,30]
19call roads:
1 Mainhead roads:
$i0 <= 10
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity dummyMainMethod_org_mozilla_mozstumbler_client_navdrawer_MainDrawerActivity(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity: void onCreate(android.os.Bundle)>[]--><org.mozilla.mozstumbler.client.navdrawer.MainDrawerActivity: void init()>[[$i0 <= 10]]--><org.mozilla.mozstumbler.client.Updater: boolean checkForUpdates(android.app.Activity,java.lang.String)>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isConnected()>[[try]]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver dummyMainMethod_org_mozilla_mozstumbler_client_mapview_HighLowBandwidthReceiver(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.mapview.HighLowBandwidthReceiver: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.client.mapview.MapFragment: void mapNetworkConnectionChanged()>[]--><android.net.NetworkInfo: boolean isConnected()>
try
Good road with try: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PreferencesScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PreferencesScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PreferencesScreen$8: boolean onPreferenceClick(android.preference.Preference)>[]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isConnected()>[[try]]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.net.NetworkInfo: boolean isConnected()>has compatibility isssues！
-----------------------------------------
18 Packageshead roads:
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.client.ObservedLocationsReceiver$1: void run()>[[try]]--><org.mozilla.mozstumbler.service.utils.NetworkInfo: boolean isConnected()>[[try]]--><android.net.NetworkInfo: boolean isConnected()>
One road protect good!
crashApis:33
crashApisInMain:4
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 44 Potential Issue API: SDKCheck of <android.telephony.CellIdentityLte: int getTac()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityLte: int getTac()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityLte: int getTac()>has compatibility isssues！
-----------------------------------------
crashApis:34
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 45 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams)>[]--><org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
#1.the call statck between class <org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams)> to <org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:35
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 46 Potential Issue API: SDKCheck of <android.telephony.CellIdentityCdma: int getNetworkId()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityCdma: int getNetworkId()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityCdma: int getNetworkId()>has compatibility isssues！
-----------------------------------------
crashApis:36
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 47 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> to <org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>has compatibility isssues！
-----------------------------------------
crashApis:37
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 48 Potential Issue API: SDKCheck of <android.telephony.CellIdentityWcdma: int getPsc()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellIdentityWcdma: int getPsc()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 49 Potential Issue API: SDKCheck of <android.telephony.CellIdentityCdma: int getSystemId()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityCdma: int getSystemId()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityCdma: int getSystemId()>has compatibility isssues！
-----------------------------------------
crashApis:38
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 50 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
#1.the call statck between class <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
#2.the call statck between class <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
crashApis:39
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 51 Potential Issue API: SDKCheck of <android.telephony.CellSignalStrengthGsm: int getAsuLevel()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellSignalStrengthGsm: int getAsuLevel()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellSignalStrengthGsm: int getAsuLevel()>has compatibility isssues！
-----------------------------------------
crashApis:40
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 52 Potential Issue API: SDKCheck of <org.apache.http.conn.scheme.SocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 53 Potential Issue API: SDKCheck of <android.telephony.CellSignalStrengthWcdma: int getAsuLevel()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellSignalStrengthWcdma: int getAsuLevel()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 54 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)> is checking!!!
The life time of api is [23,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)>[]--><org.acra.util.HttpRequest: org.apache.http.client.HttpClient getHttpClient()>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
#1.the call statck between class <org.acra.util.HttpRequest: void send(java.net.URL,org.acra.sender.HttpSender$Method,java.lang.String,org.acra.sender.HttpSender$Type)> to <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
#2.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)> to <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
One road protect good!
crashApis:41
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 55 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()> is checking!!!
The life time of api is [18,30]
19call roads:
0 Mainhead roads:
19 Packageshead roads:
try
Good road with try: <org.mozilla.osmdroid.LocationListenerProxy: void onLocationChanged(android.location.Location)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.GPSScanner: void onLocationChanged(android.location.Location)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: void newGpsLocation()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void start()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: boolean isScanEnabled()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean isScanEnabled()>[[-$i0 < 18]]--><android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
One road protect good!
-$i0 < 18
!!!this api will crash on sdk 31 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: boolean isScanEnabled()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean isScanEnabled()>[[-$i0 < 18]]--><android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
#5.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)> to <android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>has compatibility isssues！
-----------------------------------------
crashApis:42
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 56 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)> is checking!!!
The life time of api is [23,31]
12call roads:
0 Mainhead roads:
12 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#1.the call statck between class <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#2.the call statck between class <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.cookie.RFC2109SpecFactoryHC4: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#4.the call statck between class <org.apache.http.impl.cookie.RFC2109SpecFactoryHC4: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#5.the call statck between class <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#6.the call statck between class <org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.cookie.BestMatchSpecFactoryHC4: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#8.the call statck between class <org.apache.http.impl.cookie.BestMatchSpecFactoryHC4: org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.pool.BasicConnPool: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.pool.BasicConnFactory: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.pool.BasicConnFactory: void <init>(javax.net.ssl.SSLSocketFactory,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.SocketConfig getSocketConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
#9.the call statck between class <org.apache.http.impl.pool.BasicConnPool: void <init>(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
One road protect good!
crashApis:43
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 57 Potential Issue API: SDKCheck of <android.telephony.CellIdentityLte: int getPci()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityLte: int getPci()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityLte: int getPci()>has compatibility isssues！
-----------------------------------------
crashApis:44
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 58 Potential Issue API: SDKCheck of <android.telephony.CellIdentityLte: int getCi()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityLte: int getCi()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityLte: int getCi()>has compatibility isssues！
-----------------------------------------
crashApis:45
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 59 Potential Issue API: SDKCheck of <android.telephony.CellIdentityWcdma: int getMnc()> is checking!!!
The life time of api is [18,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
-$i0 < 18
-$i0 < 18
Good road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addWCDMACellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[[-$i0 < 18]]--><android.telephony.CellIdentityWcdma: int getMnc()>
One road protect good!
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 60 Potential Issue API: SDKCheck of <android.location.Location: void setElapsedRealtimeNanos(long)> is checking!!!
The life time of api is [17,31]
17call roads:
0 Mainhead roads:
17 Packageshead roads:
-$i1 < 17
Good road: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.SimulatorService$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.SimulatorService: android.location.Location getNextGPSLocation()>[[-$i1 < 17]]--><android.location.Location: void setElapsedRealtimeNanos(long)>
One road protect good!
containsStatic:false
containsTry:true
18call by main package
-----------------------------------------
#################################################
N 61 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager: boolean isWifiEnabled()> is checking!!!
The life time of api is [1,30]
19call roads:
0 Mainhead roads:
19 Packageshead roads:
try
Good road with try: <org.mozilla.osmdroid.LocationListenerProxy: void onLocationChanged(android.location.Location)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.GPSScanner: void onLocationChanged(android.location.Location)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: void newGpsLocation()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void start()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: boolean isScanEnabled()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean isScanEnabled()>[]--><android.net.wifi.WifiManager: boolean isWifiEnabled()>
One road protect good!
!!!this api will crash on sdk 31 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: boolean isScanEnabled()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean isScanEnabled()>[]--><android.net.wifi.WifiManager: boolean isWifiEnabled()>
#5.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)> to <android.net.wifi.WifiManager: boolean isWifiEnabled()>has compatibility isssues！
-----------------------------------------
crashApis:46
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 62 Potential Issue API: SDKCheck of <android.os.SystemClock: long elapsedRealtimeNanos()> is checking!!!
The life time of api is [17,31]
17call roads:
0 Mainhead roads:
17 Packageshead roads:
-$i1 < 17
Good road: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.SimulatorService$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.SimulatorService: android.location.Location getNextGPSLocation()>[[-$i1 < 17]]--><android.os.SystemClock: long elapsedRealtimeNanos()>
One road protect good!
containsStatic:false
containsTry:true
18call by main package
-----------------------------------------
#################################################
N 63 Potential Issue API: SDKCheck of <android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnDismissListener(android.content.DialogInterface.OnDismissListener)> is checking!!!
The life time of api is [17,31]
1call roads:
1 Mainhead roads:
!!!this api will crash on sdk 16 
Error road: <dummyMainClass: void dummyMainMethod(java.lang.String[])>[]--><dummyMainClass: org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen dummyMainMethod_org_mozilla_mozstumbler_client_subactivities_PowerSavingScreen(android.content.Intent)>[]--><org.mozilla.mozstumbler.client.subactivities.PowerSavingScreen$TestSignificantMotionDialog$2: void onClick(android.view.View)>[]--><android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnDismissListener(android.content.DialogInterface.OnDismissListener)>
#1.the call statck between class <dummyMainClass: void dummyMainMethod(java.lang.String[])> to <android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnDismissListener(android.content.DialogInterface.OnDismissListener)>has compatibility isssues！
-----------------------------------------
0 Packageshead roads:
crashApis:47
crashApisInMain:5
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
#################################################
N 64 Potential Issue API: SDKCheck of <android.telephony.CellSignalStrengthLte: int getAsuLevel()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellSignalStrengthLte: int getAsuLevel()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellSignalStrengthLte: int getAsuLevel()>has compatibility isssues！
-----------------------------------------
crashApis:48
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 65 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)> is checking!!!
The life time of api is [23,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.DefaultedHttpParams: boolean removeParameter(java.lang.String)>[]--><org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
#1.the call statck between class <org.apache.http.params.DefaultedHttpParams: boolean removeParameter(java.lang.String)> to <org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>has compatibility isssues！
-----------------------------------------
crashApis:49
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 66 Potential Issue API: SDKCheck of <android.net.wifi.WifiManager.WifiLock: void acquire()> is checking!!!
The life time of api is [1,30]
19call roads:
0 Mainhead roads:
19 Packageshead roads:
try
Good road with try: <org.mozilla.osmdroid.LocationListenerProxy: void onLocationChanged(android.location.Location)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.GPSScanner: void onLocationChanged(android.location.Location)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.ScanManager: void newGpsLocation()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void start()>[[try]]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void activatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void acquire()>
One road protect good!
try
Good road with try: <org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void activatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void acquire()>
One road protect good!
try
Good road with try: <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner$1: void run()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: boolean runWifiScan()>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiManagerProxy: void onReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void onProxyReceive(android.content.Context,android.content.Intent)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.WifiScanner: void activatePeriodicScan()>[[try]]--><android.net.wifi.WifiManager.WifiLock: void acquire()>
One road protect good!
containsStatic:false
containsTry:true
20call by main package
-----------------------------------------
#################################################
N 67 Potential Issue API: SDKCheck of <android.telephony.TelephonyManager: java.util.List getAllCellInfo()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.TelephonyManager: java.util.List getAllCellInfo()>has compatibility isssues！
-----------------------------------------
crashApis:50
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 68 Potential Issue API: SDKCheck of <org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1: org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit)>[]--><org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>[[]]--><org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
One road protect good!
containsStatic:false
containsTry:true
3call by main package
-----------------------------------------
#################################################
N 69 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> is checking!!!
The life time of api is [23,31]
20call roads:
0 Mainhead roads:
20 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)>[]--><org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#1.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setLinger(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)>[]--><org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#2.the call statck between class <org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#3.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#4.the call statck between class <org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)>[]--><org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#5.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#6.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.ImmutableHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthStateHC4,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.auth.HttpAuthenticator: org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.auth.RFC2617SchemeHC4: java.lang.String getCredentialsCharset(org.apache.http.HttpRequest)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.client.InternalHttpClient: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.HttpResponseProxy: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.client.methods.HttpRequestWrapper: org.apache.http.params.HttpParams getParams()>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()>[]--><org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#8.the call statck between class <org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)>[]--><org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>[]--><org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#9.the call statck between class <org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.params.HttpProtocolParamBean: void setUserAgent(java.lang.String)>[]--><org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>[]--><org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>[]--><org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
#10.the call statck between class <org.apache.http.params.HttpProtocolParamBean: void setUserAgent(java.lang.String)> to <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>has compatibility isssues！
-----------------------------------------
crashApis:51
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 70 Potential Issue API: SDKCheck of <android.net.NetworkInfo: boolean isAvailable()> is checking!!!
The life time of api is [1,30]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getWiFiNetworkAvailable()>[]--><android.net.NetworkInfo: boolean isAvailable()>
#1.the call statck between class <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getWiFiNetworkAvailable()> to <android.net.NetworkInfo: boolean isAvailable()>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 31 
Error road: <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getCellularDataNetworkAvailable()>[]--><android.net.NetworkInfo: boolean isAvailable()>
#2.the call statck between class <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getCellularDataNetworkAvailable()> to <android.net.NetworkInfo: boolean isAvailable()>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.mozilla.osmdroid.tileprovider.modules.SmartFSTileLoader: android.graphics.drawable.Drawable loadTile(org.mozilla.osmdroid.tileprovider.MapTileRequestState)>[[try]]--><org.mozilla.osmdroid.tileprovider.modules.SmartFSProvider: android.graphics.drawable.Drawable downloadTile(org.mozilla.osmdroid.tileprovider.modules.SerializableTile,org.mozilla.osmdroid.tileprovider.tilesource.ITileSource,org.mozilla.osmdroid.tileprovider.MapTile)>[]--><org.mozilla.osmdroid.tileprovider.modules.TileDownloaderDelegate: android.graphics.drawable.Drawable downloadTile(org.mozilla.osmdroid.tileprovider.modules.SerializableTile,org.mozilla.osmdroid.tileprovider.tilesource.ITileSource,org.mozilla.osmdroid.tileprovider.MapTile)>[]--><org.mozilla.osmdroid.tileprovider.modules.TileDownloaderDelegate: boolean networkIsUnavailable()>[]--><org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getNetworkAvailable()>[]--><android.net.NetworkInfo: boolean isAvailable()>
One road protect good!
crashApis:52
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 71 Potential Issue API: SDKCheck of <android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> is checking!!!
The life time of api is [1,30]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 31 
Error road: <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getRouteToPathExists(int)>[]--><android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
#1.the call statck between class <org.mozilla.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getRouteToPathExists(int)> to <android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>has compatibility isssues！
-----------------------------------------
crashApis:53
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 72 Potential Issue API: SDKCheck of <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)> is checking!!!
The life time of api is [23,31]
11call roads:
0 Mainhead roads:
11 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.io.DefaultHttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.AbstractMessageParserHC4: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.MessageConstraints getMessageConstraints(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#1.the call statck between class <org.apache.http.impl.io.DefaultHttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.conn.DefaultHttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.AbstractMessageParserHC4: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.MessageConstraints getMessageConstraints(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#2.the call statck between class <org.apache.http.impl.conn.DefaultHttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.ProxyClient: java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#4.the call statck between class <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#5.the call statck between class <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.MinimalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.MessageConstraints getMessageConstraints(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#7.the call statck between class <org.apache.http.impl.client.ProxyClient: void <init>(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.pool.BasicConnPool: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.pool.BasicConnFactory: void <init>(org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.pool.BasicConnFactory: void <init>(javax.net.ssl.SSLSocketFactory,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.MessageConstraints getMessageConstraints(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#8.the call statck between class <org.apache.http.impl.pool.BasicConnPool: void <init>(org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MinimalClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.client.params.HttpClientParamConfig: org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.MainClientExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.MainClientExec: void establishRoute(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.impl.execchain.MainClientExec: boolean createTunnelToTarget(org.apache.http.auth.AuthStateHC4,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)>[]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.io.DefaultHttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.io.AbstractMessageParserHC4: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParamConfig: org.apache.http.config.MessageConstraints getMessageConstraints(org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
#10.the call statck between class <org.apache.http.impl.io.DefaultHttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>has compatibility isssues！
-----------------------------------------
crashApis:54
containsStatic:false
containsTry:true
11call by main package
-----------------------------------------
#################################################
N 73 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
#1.the call statck between class <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
#2.the call statck between class <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
crashApis:55
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 74 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
3call roads:
0 Mainhead roads:
3 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
#1.the call statck between class <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.ServiceUnavailableRetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.RedirectExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.ProtocolExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
One road protect good!
try
Good road with try: <org.apache.http.impl.client.InternalHttpClient: org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>[[try]]--><org.apache.http.impl.execchain.BackoffStrategyExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[[try]]--><org.apache.http.impl.execchain.RetryExec: org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)>[]--><org.acra.util.HttpRequest$SocketTimeOutRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
One road protect good!
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
#3.the call statck between class <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
crashApis:56
containsStatic:false
containsTry:true
4call by main package
-----------------------------------------
#################################################
N 75 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
2call roads:
0 Mainhead roads:
2 Packageshead roads:
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
#1.the call statck between class <org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
!!!this api will crash on sdk 16 17 18 19 20 21 22 
Error road: <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>[]--><org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
#2.the call statck between class <org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> to <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>has compatibility isssues！
-----------------------------------------
crashApis:57
containsStatic:false
containsTry:false
3call by main package
-----------------------------------------
#################################################
N 76 Potential Issue API: SDKCheck of <android.telephony.CellIdentityLte: int getMcc()> is checking!!!
The life time of api is [17,31]
1call roads:
0 Mainhead roads:
1 Packageshead roads:
!!!this api will crash on sdk 16 
Error road: <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)>[]--><org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation: boolean addCellToList(java.util.List,android.telephony.CellInfo,android.telephony.TelephonyManager)>[]--><android.telephony.CellIdentityLte: int getMcc()>
#1.the call statck between class <org.mozilla.mozstumbler.service.stumblerthread.scanners.cellscanner.SimpleCellScannerImplementation$GetAllCellInfoScannerMr2: java.util.List getAllCellInfo(android.telephony.TelephonyManager)> to <android.telephony.CellIdentityLte: int getMcc()>has compatibility isssues！
-----------------------------------------
crashApis:58
containsStatic:false
containsTry:false
2call by main package
-----------------------------------------
#################################################
N 77 Potential Issue API: SDKCheck of <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> is checking!!!
The life time of api is [23,31]
0call roads:
0 Mainhead roads:
0 Packageshead roads:
containsStatic:false
containsTry:false
1call by main package
-----------------------------------------
crashApis numbers:58
crashApis numbers in main road:5
On Android Version 16 this app may have error api use(at least): 47 and error api roads: 107
On Android Version 17 this app may have error api use(at least): 23 and error api roads: 83
On Android Version 18 this app may have error api use(at least): 22 and error api roads: 82
On Android Version 19 this app may have error api use(at least): 22 and error api roads: 82
On Android Version 20 this app may have error api use(at least): 22 and error api roads: 82
On Android Version 21 this app may have error api use(at least): 21 and error api roads: 81
On Android Version 22 this app may have error api use(at least): 21 and error api roads: 81
On Android Version 23 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 24 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 25 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 26 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 27 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 28 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 29 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 30 this app may have error api use(at least): 0 and error api roads: 0
On Android Version 31 this app may have error api use(at least): 11 and error api roads: 14
